<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>科学上网mac客户端V2rayU使用技巧</title>
    <url>/2021/03/25/science-online-mac-client-v2rayu/</url>
    <content><![CDATA[<h4 id="V2rayU-介绍"><a href="#V2rayU-介绍" class="headerlink" title="V2rayU 介绍"></a>V2rayU 介绍</h4><p>V2rayU,基于v2ray核心的mac版客户端,用于科学上网,使用swift编写,支持vmess,shadowsocks,socks5等服务协议,支持订阅, 支持二维码,剪贴板导入,手动配置,二维码分享等</p>
<p>GitHub: <a href="https://github.com/yanue/V2rayU" target="_blank" rel="noopener">https://github.com/yanue/V2rayU</a></p>
<hr>
<h4 id="V2rayU-中如何添加自定义规则"><a href="#V2rayU-中如何添加自定义规则" class="headerlink" title="V2rayU 中如何添加自定义规则"></a>V2rayU 中如何添加自定义规则</h4><p>打开 <code>偏好设置</code> –  <code>Pac</code> 选项，在底部 <code>填写手动规则</code> 输入框中输入域名，之后点击 <code>保存设置并从GFW List 更新</code> 按钮即可。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">||github.com</span><br><span class="line">||fabric.io</span><br></pre></td></tr></table></figure>

<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20210325103158.png" alt="20210325103158"></p>
<p>个人添加的规则，会被保存到文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;Applications&#x2F;V2rayU.app&#x2F;Contents&#x2F;Resources&#x2F;pac&#x2F;user-rule.txt</span><br></pre></td></tr></table></figure>

<p>保存后立即生效。</p>
<p>相关：</p>
<ul>
<li><a href="https://github.com/yanue/V2rayU/issues/102" target="_blank" rel="noopener">关于Pac设置的问题</a></li>
<li><a href="https://github.com/yanue/V2rayU/issues/465" target="_blank" rel="noopener">https://github.com/yanue/V2rayU/issues/465</a></li>
</ul>
<hr>
<h4 id="V2rayU-实现局域网共享"><a href="#V2rayU-实现局域网共享" class="headerlink" title="V2rayU 实现局域网共享"></a>V2rayU 实现局域网共享</h4><p>打开 <code>偏好设置</code> – <code>Advance</code> 选项，找到 <code>本机http监听Host</code> 项，将 <code>127.0.0.1</code> 改成 <code>0.0.0.0</code> 就可以了。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20210325103057.png" alt="20210325103057"></p>
<p>相关：</p>
<ul>
<li><a href="https://github.com/v2ray/v2ray-core/issues/210" target="_blank" rel="noopener">https://github.com/v2ray/v2ray-core/issues/210</a></li>
</ul>
<hr>
<h4 id="V2rayU-彻底卸载方法"><a href="#V2rayU-彻底卸载方法" class="headerlink" title="V2rayU 彻底卸载方法"></a>V2rayU 彻底卸载方法</h4><p>关键分两步：<code>停止v2ray-core, 然后卸载V2rayU.app</code></p>
<p>第一步: 卸载V2rayU.app</p>
<p>推荐使用 <code>AppCleaner</code></p>
<p>第二步: 彻底删除相关文件及服务</p>
<p>命令: </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd ~&#x2F;Library&#x2F;LaunchAgents&#x2F;</span><br><span class="line">&#x2F;bin&#x2F;launchctl remove yanue.v2rayu.v2ray-core</span><br><span class="line">&#x2F;bin&#x2F;launchctl remove yanue.v2rayu.http</span><br><span class="line"></span><br><span class="line">rm -f ~&#x2F;Library&#x2F;LaunchAgents&#x2F;yanue.v2rayu.v2ray-core.plist</span><br><span class="line">rm -f ~&#x2F;Library&#x2F;Preferences&#x2F;net.yanue.V2rayU.plist</span><br><span class="line">rm -f ~&#x2F;Library&#x2F;Logs&#x2F;V2rayU.log</span><br></pre></td></tr></table></figure>

<p>重点:</p>
<p>主要是使用 <code>launchctl</code> 命令停止 <code>yanue.v2rayu.v2ray-core</code> 服务(会自动启动)</p>
<p>相关：</p>
<ul>
<li><a href="https://github.com/yanue/V2rayU/issues/697" target="_blank" rel="noopener">https://github.com/yanue/V2rayU/issues/697</a></li>
</ul>
<hr>
<h4 id="V2rayU-无法联网"><a href="#V2rayU-无法联网" class="headerlink" title="V2rayU 无法联网"></a>V2rayU 无法联网</h4><p>某些情况下，在首次安装完 <code>V2RayU</code> 之后，会发现无论是 <code>Pac模式</code> 还是 <code>全局模式</code> ，都无法联网。</p>
<p>出现这种问题的一种情况是：<strong>默认的端口 <code>1087</code> 被其他FQ软件占用了</strong>。</p>
<p>可以通过 <code>查看v2ray日志</code> 选项查看具体错误原因并解决。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20210514175657.png" alt="20210514175657"></p>
<p>当然，对于端口被占用的问题，如果无法找到具体是被哪个软件占用了，最简单的解决方法就是直接修改 <code>V2RayU</code> 的默认端口为其他即可。</p>
<hr>
<h4 id="关于v3-0正式版"><a href="#关于v3-0正式版" class="headerlink" title="关于v3.0正式版"></a>关于v3.0正式版</h4><p><code>Updated: 2021-05-09</code></p>
<p>最近看到V2rayU的 github issues 上有好多报 <code>3.0正式版</code> 有问题的，建议先不要升级使用。</p>
<p>这里的 <code>3.0正式版</code> 对应的tag是 <code>3.0.3</code> 。</p>
<p>我目前使用的是 <code>3.0预览版</code> ，对应的tag是 <code>3.0.0.preview</code> 。平时使用上没有问题，功能正常。</p>
<hr>
]]></content>
      <categories>
        <category>Proxy</category>
      </categories>
      <tags>
        <tag>Shadowsocks</tag>
      </tags>
  </entry>
  <entry>
    <title>在Golang中用多个分隔符拆分字符串</title>
    <url>/2022/03/08/golang-split-string/</url>
    <content><![CDATA[<h3 id="遇到问题"><a href="#遇到问题" class="headerlink" title="遇到问题"></a>遇到问题</h3><p>Golang 中默认的 <code>strings.Split</code> 方法对于字符串分隔的能力有限，仅支持一次对单个分隔符进行操作：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">s :&#x3D; &quot;11111|2222||3333||4444|&quot;  </span><br><span class="line">seps :&#x3D; &quot;|&quot;  </span><br><span class="line">rs :&#x3D; strings.Split(s, seps)  </span><br><span class="line">fmt.Println(rs)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; [11111 2222  3333  4444 ]</span><br></pre></td></tr></table></figure>

<p>如果想要一次处理多个分隔符的情况，使用 <code>strings.Split</code> 就会出错：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">s :&#x3D; &quot;11111|2222||3333,4444,,555&quot;  </span><br><span class="line">seps :&#x3D; &quot;,|&quot;  </span><br><span class="line">rs :&#x3D; strings.Split(s, seps)  </span><br><span class="line">fmt.Println(rs)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; [11111|2222||3333,4444,,555]</span><br></pre></td></tr></table></figure>

<p>可以看到并没有对字符串做处理，直接返回了。</p>
<p>如果想要支持多个分隔符，则需要分别进行处理。</p>
<p>而且还有一点，<code>Split</code> 对于 <code>为空</code> 的情况并不能自行处理。如上面第一个示例，可以看到输出的结果中是有空内容存在的。</p>
<hr>
<h3 id="如何解决"><a href="#如何解决" class="headerlink" title="如何解决"></a>如何解决</h3><p>遇到这种情况，可以使用 <code>strings</code>  中另一个方法 <code>strings.FieldsFunc</code> 来进行处理。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">s :&#x3D; &quot;11111|2222||3333,4444,,555&quot;  </span><br><span class="line">seps :&#x3D; &quot;,|&quot;</span><br><span class="line">rs2 :&#x3D; strings.FieldsFunc(s, func(r rune) bool &#123;  </span><br><span class="line">   return strings.ContainsRune(seps, r)  </span><br><span class="line">&#125;)  </span><br><span class="line">fmt.Println(rs2)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; [11111 2222 3333 4444 555]</span><br></pre></td></tr></table></figure>

<p>可以看到得到了我们想要的结果。另外，其中的 <code>ContainsRune</code> 方法也自动对 <code>空内容</code> 进行了过滤。</p>
<p>另外，对于其中的处理函数   <code>func(r rune) bool {}</code> 我们也可以任意更改操作逻辑，以应对不同的需求。</p>
<hr>
<h3 id="深入探究"><a href="#深入探究" class="headerlink" title="深入探究"></a>深入探究</h3><blockquote>
<p>Golang中的<strong>strings.FieldsFunc（）函数</strong>用于在每次运行满足 <code>f(c)</code> 的Unicode代码点 <code>c</code> 时拆分给定的字符串str，并返回由str组成的切片数组。</p>
</blockquote>
<p>相应的语法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">func FieldsFunc（str string，f func（rune bool）[] string</span><br></pre></td></tr></table></figure>

<p>返回值：如果str中的所有代码点都满足 <code>f(c)</code> 或字符串为空，则返回一个空片。</p>
<p>再举一个示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">f :&#x3D; func(c rune) bool &#123;  </span><br><span class="line">   return unicode.IsNumber(c)  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">res :&#x3D; strings.FieldsFunc(&quot;ABC13DEF556&quot;, f)  </span><br><span class="line">fmt.Println(res)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; [ABC DEF]</span><br></pre></td></tr></table></figure>


<hr>
<h3 id="整理"><a href="#整理" class="headerlink" title="整理"></a>整理</h3><p>将其整理成一个工具方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 对字符串使用任意字符分隔  </span><br><span class="line">func StrSplitAny(s string, seps string) []string &#123;  </span><br><span class="line">   splitter :&#x3D; func(r rune) bool &#123;  </span><br><span class="line">      return strings.ContainsRune(seps, r)  </span><br><span class="line">   &#125;  </span><br><span class="line">   return strings.FieldsFunc(s, splitter)  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<hr>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="https://www.thinbug.com/q/39862613" target="_blank" rel="noopener">如何在Golang中用多个分隔符拆分字符串？ - Thinbug</a></li>
</ul>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>职场生存第一法则：事事有回应，件件有着落</title>
    <url>/2022/02/26/everything-has-a-response/</url>
    <content><![CDATA[<p>聊聊最近工作中遇到的一件小事。</p>
<p>最近技术组需要和公司的某个项目团队对接，虽然我不是主要的相关开发人员，但也涉及到少量临时性的任务。</p>
<p>在和该团队人员沟通时，却遇到了让我觉得很无奈的事情。</p>
<p>当天是周五，我在完成交代给我的任务后，在飞书的沟通群里@了相关的产品人员来进行核验工作，但对方当时并没有立即回复我。</p>
<p>因为手头上还有其他的开发任务在排队，看到对方没有回复，当时也就没太在意。所以我就去继续做其他的任务了。</p>
<p>过了大约半个小时后，我看沟通群里还是没有动静，我就跟我的领导汇报了一下，让领导跟该项目的领导也好有个交代。领导就在群里同时@了该项目的领导和产品人员，看看是否满足要求，有什么需要修改的地方。几分钟后那边的产品人员回复了一句 “好的” 。</p>
<p>直到周一上班后我们技术团队开例会的时候，领导问我上周五是否得到了反馈，是否满足了他们的需求。我答复说，那边产品在回复了一句 “好的” 之后就没下文了，我估计是没什么问题了，要有问题的话早就找我来了。然后我还打趣的说我的技术能力可是杠杠的。</p>
<p>其实这个时候我是比较慌的，因为这个任务当时交代给我的时候算是临时性的，因为比较简单，需求也只是我的领导跟我说的，并没有和该团队的人员进行过任何的沟通。所以我知道会有一些问题，也想好了要留出一些时间来进行修改。但没想到的是却一直没有得到任何的反馈。</p>
<p>然后领导也很无奈的又在群里@了一下这个项目的领导和产品人员，看是否有什么问题？至少得给个回复吧…</p>
<p>在得到对方领导和产品的确认后，也算是终于有了下文。</p>
<p>直到当天下午的5点多，该项目的产品人员在群里发了一些问题@我来进行修改，我在改完后又@了他做最后的审核。</p>
<p>对方回复了个 <code>1</code> 之后，又是没有了下文… </p>
<p>我想，这个事应该算是 “了结” 了吧。</p>
<p>后来我从其他同事的口中得知，跟我对接的这个产品是一个实习生。可能工作经验不太丰富吧。</p>
<p>当然我并没有歧视新人的意思，只是感觉他的工作态度有些那啥吧。</p>
<p>当时就让我想起了之前我曾写过的一篇文章 <a href="/2020/05/20/fengzong-yulu/">《冯总语录 | IT范儿》</a> 中的一句话 <code>凡事有交代，件件有着落，事事有回音</code> 。 </p>
<p>这个时候我对这句话真的是感触很深啊。</p>
<hr>
<p>又让我想到了前几天朋友跟我吐槽过的一件事。他们公司的项目进行到了最后攻坚的阶段，马上就要上线了。主要还是老板催的比较急吧，要去给投资人演示之类的。</p>
<p>周一开会的时候大家对进度，主要的几个问题都集中在前端开发人员上。领导问他这周能不能完成并上线，前端也是信心十足的说肯定能上线。结果到了周五的时候才说不行，上不了，bug没改完。结果就是领导很无奈，老板也很无语。</p>
<p>这就是有问题不早说出来，结果弄的不可收拾的地步才说。如果能够及时的跟领导同步一下每天的进度，遇到问题也好能想到更多的解决方法，也不至于到最后搞得大家都很被动，都很无奈。</p>
<hr>
<p>想起之前我刚工作的时候，当时的领导就要求我们写日报、写周报。那时候是很抵触的。</p>
<p>心想每天就是做那些工作嘛，有什么好写的，连偷懒的机会都没有了。感觉每天最头疼的并不是写代码，而是 “绞尽脑汁” 的写日报，写周报。</p>
<p>现在回想起来，其实这就是 “事事有回应” 的一种体现吧。</p>
<p>如果我们不写日报，领导并不知道他交代的任务我们完成到了哪一步，只知道这个任务我交代下去了，至于完成的怎么样，有没有什么问题，却无从知晓。</p>
<hr>
<p>嗯，就这样吧。</p>
]]></content>
      <categories>
        <category>人生随感</category>
      </categories>
      <tags>
        <tag>人生感悟</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql中使用sum()函数返回null的问题</title>
    <url>/2022/01/28/mysql-sum-function-return-null/</url>
    <content><![CDATA[<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>在项目中使用 <code>Mysql</code> 中的 <code>sum()</code> 函数求和时，调试时发现报出下面的错误信息：</p>
<blockquote>
<p>sql: Scan error on column index 0, name &quot;total&quot;: converting NULL to int64 is unsupported</p>
</blockquote>
<p>我相应执行的sql语句如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SUM</span>(consume) <span class="keyword">as</span> total <span class="keyword">FROM</span> task_income <span class="keyword">WHERE</span> consume_type=<span class="number">3</span> <span class="keyword">AND</span> uid=<span class="number">20</span>;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>为了找到原因，我在 <code>Navicat</code> 中执行了一遍出问题的sql和参数，发现结果中确实是返回了 <code>null</code> :</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/typora/20220128151226.png" alt="20220128151226"></p>
<p>按我之前开发时的想法：</p>
<ul>
<li>如果有相应的数据，返回求和后的值</li>
<li>如果没有符合条件的数据，返回 <code>0</code></li>
</ul>
<p>结果，当没有符合条件的数据时却返回了 <code>null</code> 。</p>
<hr>
<h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>可以通过结合使用 <code>ISNULL</code> 或 <code>COALESCE</code> 函数来解决。</p>
<p>相应的示例如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">IFNULL</span>(<span class="keyword">SUM</span>(Column1), <span class="number">0</span>) <span class="keyword">AS</span> total FROM...</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COALESCE</span>(<span class="keyword">SUM</span>(Column1), <span class="number">0</span>) <span class="keyword">AS</span> total FROM...</span><br></pre></td></tr></table></figure>


<hr>
<h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><p>上面说道，使用  <code>ISNULL</code> 或 <code>COALESCE</code> 函数都可以解决为 <code>null</code> 的问题，那么这两个函数有什么区别呢？</p>
<ul>
<li><code>ISNULL</code> 函数接受两个参数，如果第一个参数不是 <code>null</code> 会直接返回，如果第一个参数是 <code>null</code> ，则返回第二个参数</li>
<li><code>COALESCE</code> 函数可以接受两个或多个参数，并返回第一个非 <code>null</code> 的参数，如果所有参数都为 <code>null</code>，则会返回 <code>null</code> </li>
</ul>
<hr>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="https://stackoverflow.com/questions/7602271/how-do-i-get-sum-function-in-mysql-to-return-0-if-no-values-are-found" target="_blank" rel="noopener">How do I get SUM function in MySQL to return ‘0’ if no values are found? - Stack Overflow</a></li>
<li><a href="https://stackoverflow.com/questions/18528468/what-is-the-difference-bewteen-ifnull-and-coalesce-in-mysql/43205713" target="_blank" rel="noopener">sql - What is the difference bewteen ifnull and coalesce in mysql? - Stack Overflow</a></li>
</ul>
<hr>
]]></content>
      <categories>
        <category>开发笔记</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>苹果钱包北京一卡通刷卡再次被异常扣费后</title>
    <url>/2022/01/18/after-beijing-bus-card-abnormal-deduction/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>1月18日，本来今天是心情很好的一天，结果却遇到了这种糟心的事。</p>
<p>朋友说你这是 “破财免灾” 了，但我是 “忍一时越想越气，退一步越想越亏” 。</p>
<p>还是得把这事唠唠。。。</p>
<hr>
<h3 id="经过"><a href="#经过" class="headerlink" title="经过"></a>经过</h3><p>现在回想起来我也感觉到有点问题，我在刷卡的时候并没有出现之前正常的“滴” 的声音，而是没有声音提示。司机师傅说 “刷上了” 我才反应过来。</p>
<p>但是刷上了之后，iPhone的锁屏界面上并没有出现 “行程中” 的那条提示。我打开 “钱包” 后却发现是下面的情况，提示我这次扣费9元：</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20220118120009.PNG" alt="20220118120009"></p>
<p>当时我就震惊了。。。</p>
<p>然后我就找车上的安全员帮我看了下，他说可能是我上次乘车没有正常刷卡，导致的这次扣了全程。但在我印象中我都是在到站下车前提前刷卡，就是为了防止临下车时刷不上卡或者刷卡失败。毕竟之前有过几次这样的遭遇。</p>
<p>那我问 “那我下车还需要刷一次吗？” 、“我下次乘车会不会有影响？” 安全员说 “那你下车就别刷卡了”。</p>
<p>其实说起来，我知道安全员也搞不懂这是什么情况。</p>
<hr>
<h3 id="无奈"><a href="#无奈" class="headerlink" title="无奈"></a>无奈</h3><p>看我上面 “钱包” 中的刷卡记录，还有一条今天的异常刷卡现在仍然显示为 “行程中”。</p>
<p>那是我乘坐另一趟公交车，在下车时刷卡。第一次刷“滴” 了一声后，发现乘车记录仍然显示为 “行程中”。在等了几分钟后没有变化，我就感觉是没有刷上卡。然后我又重新刷了一次，这次成功刷卡并扣费1元。</p>
<p>但是，那条显示为 “行程中” 的记录仍然存在。</p>
<p>后来我又查了 “北京一卡通App” 中的乘车记录，发现是正常的，并没有一条类似于 “行程中” 的未完成的刷卡记录存在。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20220118120229.PNG" alt="20220118120229"></p>
<hr>
<h3 id="吐槽"><a href="#吐槽" class="headerlink" title="吐槽"></a>吐槽</h3><p>说起来，在北京乘坐公共交通工具还真是一种考验呢。</p>
<p>像之前的 “北京一卡通” 实体卡，能够同时乘坐北京的公交车和地铁，相对来说还是很靠谱的。</p>
<p>后来发展出来了手机 <code>NFC</code> 刷卡，再到后来的 “二维码” 刷卡乘车。各种方式五花八门让人眼花缭乱。</p>
<p>有的是只能用于乘坐公交车，有的是只能用于乘坐地铁。</p>
<p>乘坐公交的有多种App，乘坐地铁的也有多种App。</p>
<p>例如说，我平时乘坐公交车，像实体卡这种，刷卡提示音是 “滴” 、“老年卡”、“已刷卡” </p>
<p>“二维码” App会提示 “已扫码” “扫码成功”</p>
<p>像iPhone这种 “NFC” 无论上下车刷卡都只有一声 “滴”，你要是不仔细看一下，还真不知道到底有没有刷卡成功。</p>
<hr>
<h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>最后，我在 “北京一卡通App” 中提交了申诉，目前还在等待处理中。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20220118120347.jpg" alt="20220118120347"></p>
<hr>
<h3 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h3><p>痛定思痛，在经历了这么多次使用iPhone钱包北京一卡通乘坐公交车刷卡异常扣费之后，我决定以后乘坐公交车还是改用实体卡更保险一些。</p>
<p>反正，乘坐地铁我是没有遇到过多扣费的情况。</p>
<hr>
<h3 id="反馈"><a href="#反馈" class="headerlink" title="反馈"></a>反馈</h3><p>三天后，我来反馈一下最新的进展。</p>
<p>第二天当我再次乘车时，发现上车第一下刷卡又直接是显示多扣了钱。这次扣了我2元。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20220121115327.jpg" alt="20220121115327"></p>
<p>因为这趟车上有售票员，所以我直接就跟售票员描述了一下我这两天的 “悲惨” 遭遇，售票员说：“那你再刷一次卡试试，如果扣你1元那就是正常了” 然后我就忐忑的又刷了一次卡，显示扣费1元。售票员说：“看来就是你上次乘车漏打卡了”。</p>
<p>然后我回想了一下当时乘坐那趟公交车的场景，记得当时那趟车正好赶上了早高峰期，下车时刷卡机旁边人特别多，刷卡时我是挤过去刷卡的，看到手机上有提示也就没太在意。</p>
<p>后来我跟售票员讨论了一下，算是基本上理清了其中的缘由。</p>
<hr>
<h3 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h3><p>现在北京的公交车基本上都是 <code>“上车刷卡，下车再次刷卡”</code> 的类型。</p>
<p>你在上车刷卡的时候，刷卡机上一定要是显示 “0.00” 金额，这样就表示上车刷卡计次成功。在下车刷卡时，一定是显示 “1.00” 类似的扣费金额的形式，表示下车刷卡计次完成，才表示正常的扣费成功了。</p>
<p>如果你在上车后第一次刷卡时显示的是类似 “1.00” 扣费的金额，那就一定是之前有 <code>漏刷卡</code> 的情况。这时候你刷的第一次卡有两种含义：</p>
<ol>
<li>表示对于你上次漏刷卡的情况，扣除乘坐当次公交车剩余站点的全程票价，所以此时显示的扣费金额就是当时那趟公交车的剩余站点的全程价格</li>
<li>表示你当前乘坐公交车的上车刷卡计次</li>
</ol>
<p>可能不太好理解，那我就用我这次的 “遭遇” 来举例说明一下。</p>
<p>我上班要换成两趟公交车，前面的半程要乘坐“500”路公交车，乘车路段花费1元，后半程路段要乘坐“800”路公交车，乘车路段花费1元。</p>
<p>假设“500”路公交车全程票价12元，“800”路公交车全程票价6元。</p>
<p>这次遭遇的场景是：</p>
<ol>
<li>前半程当我乘坐 “500” 路公交车时，上车正常刷卡，但是下车漏刷了。</li>
<li>后半程当我乘坐 “800” 路公交车时，上车刷卡显示扣费9元。但当时我在这趟车上只刷了一次卡。</li>
<li>当第二天我再次乘坐“500”路公交车时，一上车刷卡就扣了我2元。此时我跟售票员讨论后，再次刷卡，显示扣费1元。之后正常。</li>
</ol>
<p>我给解读一下：</p>
<p>针对第一次我乘坐“800”路公交车时一上车就扣费9元，这次扣费是扣得我上次乘坐“500”路时漏刷卡的扣费。扣费的金额计算是从我当时上车刷卡算起，直到终点站为止。虽然“500”路公交车的全程票价是12元，但从我上车站到终点站的区间费用是9元。</p>
<p>针对第二次我乘坐“500”路公交车时一上车就扣费2元。这次扣费是扣得我上次乘坐“800”路公交车时 “没刷下车卡” 的扣费。我当时上车刷卡的站点到终点站的区间费用是2元。</p>
<p>至此，整个场景算是梳理清晰了。</p>
<p>另外我还要再补充一点的是：对于漏刷卡的情况，并不会针对于特定的车来算，而是针对于 “上车刷卡，下车再次刷卡” 这一规则而言的。</p>
<p>说的直白一点就是，虽然我第一次是乘坐“500” 路公交车漏刷卡了，那我为了补全这次 “下车再次刷卡”，并不需要去找到当时乘坐的那趟公交车去刷下车卡，我只要换任意一辆北京公交车来刷我的“下车卡”即可，这样这个 “规则” 就算补全了。那之后再次乘车时也就不会出现扣上次全程费用的情况了。</p>
<p>另外，上面提到过的一直存在于“钱包” 中的显示为“行程中” 的记录，也在我正常刷卡之后不显示了。</p>
<hr>
<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>下午的时候，我收到了 “北京一卡通” 发来的退款通知。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20220121115445.jpg" alt="20220121115445"></p>
<p>虽然上面显示还有一条扣费2元的记录，想想还是算了吧，毕竟是自己的疏忽大意。</p>
<p>“破财免灾” 吧！</p>
<hr>
]]></content>
      <categories>
        <category>人生随感</category>
      </categories>
      <tags>
        <tag>人在帝都</tag>
      </tags>
  </entry>
  <entry>
    <title>Beego框架解决&#39;Access-Control-Allow-Origin&#39;跨域问题</title>
    <url>/2021/12/31/beego-access-control-allow-origin/</url>
    <content><![CDATA[<p>配置方法如下:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	beego <span class="string">"github.com/beego/beego/v2/server/web"</span></span><br><span class="line">	<span class="string">"github.com/beego/beego/v2/server/web/filter/cors"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 解决跨域问题</span></span><br><span class="line">	beego.InsertFilter(<span class="string">"/*"</span>, beego.BeforeRouter, cors.Allow(&amp;cors.Options&#123;</span><br><span class="line">		AllowAllOrigins:  <span class="literal">true</span>,</span><br><span class="line">		AllowMethods:     []<span class="keyword">string</span>&#123;<span class="string">"GET"</span>, <span class="string">"POST"</span>, <span class="string">"PUT"</span>, <span class="string">"DELETE"</span>, <span class="string">"OPTIONS"</span>&#125;,</span><br><span class="line">		AllowHeaders:     []<span class="keyword">string</span>&#123;<span class="string">"Origin"</span>, <span class="string">"Authorization"</span>, <span class="string">"Access-Control-Allow-Origin"</span>, <span class="string">"Access-Control-Allow-Headers"</span>, <span class="string">"Content-Type"</span>&#125;,</span><br><span class="line">		ExposeHeaders:    []<span class="keyword">string</span>&#123;<span class="string">"Content-Length"</span>, <span class="string">"Access-Control-Allow-Origin"</span>, <span class="string">"Access-Control-Allow-Headers"</span>, <span class="string">"Content-Type"</span>&#125;,</span><br><span class="line">		AllowCredentials: <span class="literal">true</span>,</span><br><span class="line">	&#125;))</span><br><span class="line"></span><br><span class="line">	beego.Run()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang实现时间分割逻辑</title>
    <url>/2021/12/10/go-time-division-logic/</url>
    <content><![CDATA[<p>数据库进行按月分库分表之后，最麻烦的就是查询一段时间内的数据。如果时间范围限定在同一个月之内还好说，直接查询就可以。</p>
<p>如果是跨月的情况，则需要先对时间范围进行划分，然后再分别去查询每个月的数据，最后将数据整合后返回。</p>
<p>下面列出两种对时间分隔的实现逻辑。</p>
<p>第一种：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">// 将时间分隔成每月</span></span><br><span class="line"><span class="comment">例：2021-09-22 16:00:00 -- 2021-12-01 15:59:59</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">结果：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">2021-09-22 16:00:00 2021-09-30 23:59:59 202109</span></span><br><span class="line"><span class="comment">2021-10-01 00:00:00 2021-10-31 23:59:59 202110</span></span><br><span class="line"><span class="comment">2021-11-01 00:00:00 2021-11-30 23:59:59 202111</span></span><br><span class="line"><span class="comment">2021-12-01 00:00:00 2021-12-01 15:59:59 202112</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetMonInfo</span><span class="params">(t1, t2 time.Time)</span> <span class="params">([]MonInfo, <span class="keyword">bool</span>)</span></span> &#123;</span><br><span class="line">	sameMonth := <span class="literal">false</span></span><br><span class="line">	result := <span class="built_in">make</span>([]MonInfo, <span class="number">0</span>)</span><br><span class="line">	<span class="comment">//	先判断两个日期是否在同一个月</span></span><br><span class="line">	<span class="keyword">if</span> t1.Format(<span class="string">"200601"</span>) == t2.Format(<span class="string">"200601"</span>) &#123;</span><br><span class="line">		result = <span class="built_in">append</span>(result, MonInfo&#123;</span><br><span class="line">			StartDay: t1.Format(<span class="string">"2006-01-02 15:04:05"</span>),</span><br><span class="line">			EndDay:   t2.Format(<span class="string">"2006-01-02 15:04:05"</span>),</span><br><span class="line">			MonStr:   t2.Format(<span class="string">"200601"</span>),</span><br><span class="line">		&#125;)</span><br><span class="line">		sameMonth = <span class="literal">true</span></span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//	获取第一个日期在当月的最后一天的23:59:59</span></span><br><span class="line">		endT1 := time.Date(t1.Year(), t1.Month()+<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, t1.Location())</span><br><span class="line"></span><br><span class="line">		result = <span class="built_in">append</span>(result, MonInfo&#123;</span><br><span class="line">			StartDay: t1.Format(<span class="string">"2006-01-02 15:04:05"</span>),</span><br><span class="line">			EndDay:   endT1.Format(<span class="string">"2006-01-02 15:04:05"</span>),</span><br><span class="line">			MonStr:   t1.Format(<span class="string">"200601"</span>),</span><br><span class="line">		&#125;)</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 将第一个日期的时间重置为当月的1号，防止增加1个月后得到的日期不是下月的1号</span></span><br><span class="line">		t1Tmp := time.Date(t1.Year(), t1.Month(), <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, t1.Location())</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 判断是否达到第二个日期</span></span><br><span class="line">		<span class="keyword">var</span> i = <span class="number">1</span></span><br><span class="line">		<span class="keyword">for</span> &#123;</span><br><span class="line">			t3 := t1Tmp.AddDate(<span class="number">0</span>, i, <span class="number">0</span>)</span><br><span class="line">			<span class="comment">// 判断是否到达第二个日期所在的月份</span></span><br><span class="line">			<span class="keyword">if</span> t3.Format(<span class="string">"200601"</span>) == t2.Format(<span class="string">"200601"</span>) &#123;</span><br><span class="line">				<span class="comment">// 获取第二个日期在当月的第一天的起始时间</span></span><br><span class="line">				startT2 := time.Date(t2.Year(), t2.Month(), <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, t2.Location())</span><br><span class="line"></span><br><span class="line">				result = <span class="built_in">append</span>(result, MonInfo&#123;</span><br><span class="line">					StartDay: startT2.Format(<span class="string">"2006-01-02 15:04:05"</span>),</span><br><span class="line">					EndDay:   t2.Format(<span class="string">"2006-01-02 15:04:05"</span>),</span><br><span class="line">					MonStr:   t2.Format(<span class="string">"200601"</span>),</span><br><span class="line">				&#125;)</span><br><span class="line">				<span class="comment">// 跳出</span></span><br><span class="line">				<span class="keyword">break</span></span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				startT3 := time.Date(t3.Year(), t3.Month(), <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, t3.Location())</span><br><span class="line">				endT3 := time.Date(t3.Year(), t3.Month()+<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, t3.Location())</span><br><span class="line">				result = <span class="built_in">append</span>(result, MonInfo&#123;</span><br><span class="line">					StartDay: startT3.Format(<span class="string">"2006-01-02 15:04:05"</span>),</span><br><span class="line">					EndDay:   endT3.Format(<span class="string">"2006-01-02 15:04:05"</span>),</span><br><span class="line">					MonStr:   t3.Format(<span class="string">"200601"</span>),</span><br><span class="line">				&#125;)</span><br><span class="line">			&#125;</span><br><span class="line">			i++</span><br><span class="line"></span><br><span class="line">			<span class="comment">// 为了防止异常导致 for 循环无法停止出现内存溢出，加一个防护措施</span></span><br><span class="line">			<span class="keyword">if</span> i &gt; <span class="number">12</span> &#123;</span><br><span class="line">				<span class="keyword">break</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> result, sameMonth</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> MonInfo <span class="keyword">struct</span> &#123;</span><br><span class="line">	StartDay <span class="keyword">string</span></span><br><span class="line">	EndDay   <span class="keyword">string</span></span><br><span class="line">	MonStr   <span class="keyword">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>第二种：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> (</span><br><span class="line">	LayoutDate = <span class="string">"2006-01-02 15:04:05"</span></span><br><span class="line">	LayoutMon  = <span class="string">"200601"</span></span><br><span class="line">	LayoutDay  = <span class="string">"20060102"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将时间分割成每天</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SplitDaysOfTask</span><span class="params">(startTime, endTime time.Time)</span> <span class="params">(resDays []TaskDayInfo)</span></span> &#123;</span><br><span class="line">	resDays = <span class="built_in">make</span>([]TaskDayInfo, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> startTime.Format(LayoutDay) == endTime.Format(LayoutDay) &#123;</span><br><span class="line">		resDays = <span class="built_in">append</span>(resDays, TaskDayInfo&#123;</span><br><span class="line">			StartTime: startTime,</span><br><span class="line">			EndTime:   endTime,</span><br><span class="line">			Day:       startTime.Format(LayoutDay),</span><br><span class="line">			Month:     startTime.Format(LayoutMon),</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		endT1 := time.Date(startTime.Year(), startTime.Month(), startTime.Day()+<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, startTime.Location())</span><br><span class="line"></span><br><span class="line">		resDays = <span class="built_in">append</span>(resDays, TaskDayInfo&#123;</span><br><span class="line">			StartTime: startTime,</span><br><span class="line">			EndTime:   endT1,</span><br><span class="line">			Day:       startTime.Format(LayoutDay),</span><br><span class="line">			Month:     startTime.Format(LayoutMon),</span><br><span class="line">		&#125;)</span><br><span class="line">		<span class="keyword">var</span> i = <span class="number">1</span></span><br><span class="line">		<span class="keyword">for</span> &#123;</span><br><span class="line"></span><br><span class="line">			tNext := startTime.AddDate(<span class="number">0</span>, <span class="number">0</span>, i)</span><br><span class="line">			startTNext := time.Date(tNext.Year(), tNext.Month(), tNext.Day(), <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, tNext.Location())</span><br><span class="line">			<span class="keyword">if</span> tNext.Format(LayoutDay) == endTime.Format(LayoutDay) &#123;</span><br><span class="line"></span><br><span class="line">				resDays = <span class="built_in">append</span>(resDays, TaskDayInfo&#123;</span><br><span class="line">					StartTime: startTNext,</span><br><span class="line">					EndTime:   endTime,</span><br><span class="line">					Day:       startTNext.Format(LayoutDay),</span><br><span class="line">					Month:     startTNext.Format(LayoutMon),</span><br><span class="line">				&#125;)</span><br><span class="line">				<span class="comment">// 跳出</span></span><br><span class="line">				<span class="keyword">break</span></span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				endTNext := time.Date(tNext.Year(), tNext.Month(), tNext.Day()+<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, tNext.Location())</span><br><span class="line"></span><br><span class="line">				resDays = <span class="built_in">append</span>(resDays, TaskDayInfo&#123;</span><br><span class="line">					StartTime: startTNext,</span><br><span class="line">					EndTime:   endTNext,</span><br><span class="line">					Day:       startTNext.Format(LayoutDay),</span><br><span class="line">					Month:     startTNext.Format(LayoutMon),</span><br><span class="line">				&#125;)</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			i++</span><br><span class="line">			<span class="comment">// 超过2个月，直接跳出</span></span><br><span class="line">			<span class="keyword">if</span> i &gt; <span class="number">60</span> &#123;</span><br><span class="line">				<span class="keyword">break</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> TaskDayInfo <span class="keyword">struct</span> &#123;</span><br><span class="line">    StartTime time.Time <span class="comment">// 开始时间</span></span><br><span class="line">    EndTime   time.Time <span class="comment">// 结束时间</span></span><br><span class="line">    Day       <span class="keyword">string</span>    <span class="comment">// 当日日期</span></span><br><span class="line">    Month     <span class="keyword">string</span>    <span class="comment">// 所在月份</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">例： <span class="number">2021</span><span class="number">-10</span><span class="number">-31</span> <span class="number">16</span>:<span class="number">00</span>:<span class="number">00</span> -- <span class="number">2021</span><span class="number">-12</span><span class="number">-02</span> <span class="number">08</span>:<span class="number">00</span>:<span class="number">00</span> </span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line"></span><br><span class="line"><span class="number">2021</span><span class="number">-10</span><span class="number">-31</span> <span class="number">16</span>:<span class="number">00</span>:<span class="number">00</span> -- <span class="number">2021</span><span class="number">-10</span><span class="number">-31</span> <span class="number">23</span>:<span class="number">59</span>:<span class="number">59</span> -- <span class="number">20211031</span> -- <span class="number">202110</span></span><br><span class="line"><span class="number">2021</span><span class="number">-11</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> -- <span class="number">2021</span><span class="number">-11</span><span class="number">-01</span> <span class="number">23</span>:<span class="number">59</span>:<span class="number">59</span> -- <span class="number">20211101</span> -- <span class="number">202111</span></span><br><span class="line"><span class="number">2021</span><span class="number">-11</span><span class="number">-02</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> -- <span class="number">2021</span><span class="number">-11</span><span class="number">-02</span> <span class="number">23</span>:<span class="number">59</span>:<span class="number">59</span> -- <span class="number">20211102</span> -- <span class="number">202111</span></span><br><span class="line"><span class="number">2021</span><span class="number">-11</span><span class="number">-03</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> -- <span class="number">2021</span><span class="number">-11</span><span class="number">-03</span> <span class="number">23</span>:<span class="number">59</span>:<span class="number">59</span> -- <span class="number">20211103</span> -- <span class="number">202111</span></span><br><span class="line"><span class="number">2021</span><span class="number">-11</span><span class="number">-04</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> -- <span class="number">2021</span><span class="number">-11</span><span class="number">-04</span> <span class="number">23</span>:<span class="number">59</span>:<span class="number">59</span> -- <span class="number">20211104</span> -- <span class="number">202111</span></span><br><span class="line"><span class="number">2021</span><span class="number">-11</span><span class="number">-05</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> -- <span class="number">2021</span><span class="number">-11</span><span class="number">-05</span> <span class="number">23</span>:<span class="number">59</span>:<span class="number">59</span> -- <span class="number">20211105</span> -- <span class="number">202111</span></span><br><span class="line"><span class="number">2021</span><span class="number">-11</span><span class="number">-06</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> -- <span class="number">2021</span><span class="number">-11</span><span class="number">-06</span> <span class="number">23</span>:<span class="number">59</span>:<span class="number">59</span> -- <span class="number">20211106</span> -- <span class="number">202111</span></span><br><span class="line"><span class="number">2021</span><span class="number">-11</span><span class="number">-07</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> -- <span class="number">2021</span><span class="number">-11</span><span class="number">-07</span> <span class="number">23</span>:<span class="number">59</span>:<span class="number">59</span> -- <span class="number">20211107</span> -- <span class="number">202111</span></span><br><span class="line"><span class="number">2021</span><span class="number">-11</span><span class="number">-08</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> -- <span class="number">2021</span><span class="number">-11</span><span class="number">-08</span> <span class="number">23</span>:<span class="number">59</span>:<span class="number">59</span> -- <span class="number">20211108</span> -- <span class="number">202111</span></span><br><span class="line"><span class="number">2021</span><span class="number">-11</span><span class="number">-09</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> -- <span class="number">2021</span><span class="number">-11</span><span class="number">-09</span> <span class="number">23</span>:<span class="number">59</span>:<span class="number">59</span> -- <span class="number">20211109</span> -- <span class="number">202111</span></span><br><span class="line"><span class="number">2021</span><span class="number">-11</span><span class="number">-10</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> -- <span class="number">2021</span><span class="number">-11</span><span class="number">-10</span> <span class="number">23</span>:<span class="number">59</span>:<span class="number">59</span> -- <span class="number">20211110</span> -- <span class="number">202111</span></span><br><span class="line"><span class="number">2021</span><span class="number">-11</span><span class="number">-11</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> -- <span class="number">2021</span><span class="number">-11</span><span class="number">-11</span> <span class="number">23</span>:<span class="number">59</span>:<span class="number">59</span> -- <span class="number">20211111</span> -- <span class="number">202111</span></span><br><span class="line"><span class="number">2021</span><span class="number">-11</span><span class="number">-12</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> -- <span class="number">2021</span><span class="number">-11</span><span class="number">-12</span> <span class="number">23</span>:<span class="number">59</span>:<span class="number">59</span> -- <span class="number">20211112</span> -- <span class="number">202111</span></span><br><span class="line"><span class="number">2021</span><span class="number">-11</span><span class="number">-13</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> -- <span class="number">2021</span><span class="number">-11</span><span class="number">-13</span> <span class="number">23</span>:<span class="number">59</span>:<span class="number">59</span> -- <span class="number">20211113</span> -- <span class="number">202111</span></span><br><span class="line"><span class="number">2021</span><span class="number">-11</span><span class="number">-14</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> -- <span class="number">2021</span><span class="number">-11</span><span class="number">-14</span> <span class="number">23</span>:<span class="number">59</span>:<span class="number">59</span> -- <span class="number">20211114</span> -- <span class="number">202111</span></span><br><span class="line"><span class="number">2021</span><span class="number">-11</span><span class="number">-15</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> -- <span class="number">2021</span><span class="number">-11</span><span class="number">-15</span> <span class="number">23</span>:<span class="number">59</span>:<span class="number">59</span> -- <span class="number">20211115</span> -- <span class="number">202111</span></span><br><span class="line"><span class="number">2021</span><span class="number">-11</span><span class="number">-16</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> -- <span class="number">2021</span><span class="number">-11</span><span class="number">-16</span> <span class="number">23</span>:<span class="number">59</span>:<span class="number">59</span> -- <span class="number">20211116</span> -- <span class="number">202111</span></span><br><span class="line"><span class="number">2021</span><span class="number">-11</span><span class="number">-17</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> -- <span class="number">2021</span><span class="number">-11</span><span class="number">-17</span> <span class="number">23</span>:<span class="number">59</span>:<span class="number">59</span> -- <span class="number">20211117</span> -- <span class="number">202111</span></span><br><span class="line"><span class="number">2021</span><span class="number">-11</span><span class="number">-18</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> -- <span class="number">2021</span><span class="number">-11</span><span class="number">-18</span> <span class="number">23</span>:<span class="number">59</span>:<span class="number">59</span> -- <span class="number">20211118</span> -- <span class="number">202111</span></span><br><span class="line"><span class="number">2021</span><span class="number">-11</span><span class="number">-19</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> -- <span class="number">2021</span><span class="number">-11</span><span class="number">-19</span> <span class="number">23</span>:<span class="number">59</span>:<span class="number">59</span> -- <span class="number">20211119</span> -- <span class="number">202111</span></span><br><span class="line"><span class="number">2021</span><span class="number">-11</span><span class="number">-20</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> -- <span class="number">2021</span><span class="number">-11</span><span class="number">-20</span> <span class="number">23</span>:<span class="number">59</span>:<span class="number">59</span> -- <span class="number">20211120</span> -- <span class="number">202111</span></span><br><span class="line"><span class="number">2021</span><span class="number">-11</span><span class="number">-21</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> -- <span class="number">2021</span><span class="number">-11</span><span class="number">-21</span> <span class="number">23</span>:<span class="number">59</span>:<span class="number">59</span> -- <span class="number">20211121</span> -- <span class="number">202111</span></span><br><span class="line"><span class="number">2021</span><span class="number">-11</span><span class="number">-22</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> -- <span class="number">2021</span><span class="number">-11</span><span class="number">-22</span> <span class="number">23</span>:<span class="number">59</span>:<span class="number">59</span> -- <span class="number">20211122</span> -- <span class="number">202111</span></span><br><span class="line"><span class="number">2021</span><span class="number">-11</span><span class="number">-23</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> -- <span class="number">2021</span><span class="number">-11</span><span class="number">-23</span> <span class="number">23</span>:<span class="number">59</span>:<span class="number">59</span> -- <span class="number">20211123</span> -- <span class="number">202111</span></span><br><span class="line"><span class="number">2021</span><span class="number">-11</span><span class="number">-24</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> -- <span class="number">2021</span><span class="number">-11</span><span class="number">-24</span> <span class="number">23</span>:<span class="number">59</span>:<span class="number">59</span> -- <span class="number">20211124</span> -- <span class="number">202111</span></span><br><span class="line"><span class="number">2021</span><span class="number">-11</span><span class="number">-25</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> -- <span class="number">2021</span><span class="number">-11</span><span class="number">-25</span> <span class="number">23</span>:<span class="number">59</span>:<span class="number">59</span> -- <span class="number">20211125</span> -- <span class="number">202111</span></span><br><span class="line"><span class="number">2021</span><span class="number">-11</span><span class="number">-26</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> -- <span class="number">2021</span><span class="number">-11</span><span class="number">-26</span> <span class="number">23</span>:<span class="number">59</span>:<span class="number">59</span> -- <span class="number">20211126</span> -- <span class="number">202111</span></span><br><span class="line"><span class="number">2021</span><span class="number">-11</span><span class="number">-27</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> -- <span class="number">2021</span><span class="number">-11</span><span class="number">-27</span> <span class="number">23</span>:<span class="number">59</span>:<span class="number">59</span> -- <span class="number">20211127</span> -- <span class="number">202111</span></span><br><span class="line"><span class="number">2021</span><span class="number">-11</span><span class="number">-28</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> -- <span class="number">2021</span><span class="number">-11</span><span class="number">-28</span> <span class="number">23</span>:<span class="number">59</span>:<span class="number">59</span> -- <span class="number">20211128</span> -- <span class="number">202111</span></span><br><span class="line"><span class="number">2021</span><span class="number">-11</span><span class="number">-29</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> -- <span class="number">2021</span><span class="number">-11</span><span class="number">-29</span> <span class="number">23</span>:<span class="number">59</span>:<span class="number">59</span> -- <span class="number">20211129</span> -- <span class="number">202111</span></span><br><span class="line"><span class="number">2021</span><span class="number">-11</span><span class="number">-30</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> -- <span class="number">2021</span><span class="number">-11</span><span class="number">-30</span> <span class="number">23</span>:<span class="number">59</span>:<span class="number">59</span> -- <span class="number">20211130</span> -- <span class="number">202111</span></span><br><span class="line"><span class="number">2021</span><span class="number">-12</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> -- <span class="number">2021</span><span class="number">-12</span><span class="number">-01</span> <span class="number">23</span>:<span class="number">59</span>:<span class="number">59</span> -- <span class="number">20211201</span> -- <span class="number">202112</span></span><br><span class="line"><span class="number">2021</span><span class="number">-12</span><span class="number">-02</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> -- <span class="number">2021</span><span class="number">-12</span><span class="number">-02</span> <span class="number">08</span>:<span class="number">00</span>:<span class="number">00</span> -- <span class="number">20211202</span> -- <span class="number">202112</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang定时任务框架--go-co-op/gocron</title>
    <url>/2021/12/10/timed-task-framework-of-go-co-op-gocron/</url>
    <content><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><blockquote>
<p>goCron is a Golang job scheduling package which lets you run Go functions periodically at pre-determined interval using a simple, human-friendly syntax.</p>
</blockquote>
<ul>
<li><a href="https://github.com/go-co-op/gocron" target="_blank" rel="noopener">go-co-op/gocron: Easy and fluent Go cron scheduling. This is a fork from https://github.com/jasonlvhit/gocron</a></li>
</ul>
<hr>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">go get github.com&#x2F;go-co-op&#x2F;gocron</span><br></pre></td></tr></table></figure>

<h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"github.com/go-co-op/gocron"</span></span><br><span class="line">	<span class="string">"log"</span></span><br><span class="line">	<span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 初始化</span></span><br><span class="line">	s := gocron.NewScheduler(time.Local) <span class="comment">// 使用系统的本地时区</span></span><br><span class="line">	<span class="comment">//s:=gocron.NewScheduler(time.UTC) // 使用UTC时区</span></span><br><span class="line">	log.Println(<span class="string">"start"</span>)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 示例一：每2秒钟执行一次</span></span><br><span class="line">	s.Every(<span class="number">2</span>).Seconds().Do(<span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">		log.Println(<span class="string">"执行了。。。。2s"</span>)</span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 示例二：WaitForSchedule() 的使用</span></span><br><span class="line">	<span class="comment">// 默认情况下会立即执行一次，使用 WaitForSchedule() 可禁止这种情况，等到下次才执行</span></span><br><span class="line">	s.Every(<span class="number">5</span>).Seconds().Do(<span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">		log.Println(<span class="string">"啦啦啦111"</span>)</span><br><span class="line">	&#125;)</span><br><span class="line">	s.Every(<span class="number">5</span>).Seconds().WaitForSchedule().Do(<span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">		log.Println(<span class="string">"啦啦啦222"</span>)</span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 示例三：通过 crontab表达式来执行</span></span><br><span class="line">	<span class="comment">// 标准的crontab格式，最小单位是分</span></span><br><span class="line">	s.Cron(<span class="string">"*/1 * * * *"</span>).Do(task)</span><br><span class="line">	<span class="comment">// 最小单位是秒的crontab表达式</span></span><br><span class="line">	s.CronWithSeconds(<span class="string">"*/1 * * * * *"</span>).Do(task)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 示例四：指定时间运行</span></span><br><span class="line">	s.Every(<span class="number">1</span>).Sunday().At(<span class="string">"00:30"</span>).Do(task)</span><br><span class="line">	s.Every(<span class="number">1</span>).Day().At(<span class="string">"10:00"</span>).Do(task)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 示例五：SingletonMode() 单例模式</span></span><br><span class="line">	<span class="comment">// 如果之前的任务尚未完成，单例模式将阻止新任务启动</span></span><br><span class="line">	s.Every(<span class="string">"2"</span>).Seconds().SingletonMode().Do(task)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 示例六：带有参数的任务</span></span><br><span class="line">	s.Every(<span class="number">1</span>).Seconds().Do(taskWithParams, <span class="number">2</span>, <span class="string">"test"</span>)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 异步启动</span></span><br><span class="line">	s.StartAsync()</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 同步启动，阻塞进程</span></span><br><span class="line">	s.StartBlocking()</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">task</span><span class="params">()</span></span> &#123;</span><br><span class="line">	log.Println(<span class="string">"hello"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">taskWithParams</span><span class="params">(a <span class="keyword">int</span>, b <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">	log.Println(a, b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>升级到go1.17后Goland提示找不到GOROOT</title>
    <url>/2021/12/06/goland-doesnot-work-after-upgraded-to-go117/</url>
    <content><![CDATA[<p>在将电脑上的golang版本从 <code>1.15.6</code> 升级到最新的 <code>1.17.4</code> 之后，发现 <code>Goland</code> 打开项目后文件中各种 <code>爆红</code>。同时提示 <code>找不到GOROOT</code> ：</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20211206115746.png" alt="20211206115746"></p>
<p>当时的第一想法是，会不会由于升级后某些配置更新了，于是第一时间重启电脑，结果发现并没有什么效果，依然是上面的错误提示。</p>
<p>我当前使用的 <code>Goland</code> 版本是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GoLand 2020.1.3</span><br><span class="line">Build #GO-201.7846.93, built on June 4, 2020</span><br></pre></td></tr></table></figure>

<p>也怀疑是因为使用的 <code>Goland</code> 版本太低了，但还不至于说升级了 <code>Golang</code> 的版本后， <code>Goland</code> 就不能使用的程度。</p>
<hr>
<p>最后只得上网搜索，终于找到解决方法。</p>
<p>第一步，执行 <code>go env</code> 找到当前 <code>GOROOT</code> 的目录：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜ go env</span><br><span class="line"></span><br><span class="line">GOROOT&#x3D;&quot;&#x2F;usr&#x2F;local&#x2F;go&quot;</span><br></pre></td></tr></table></figure>



<p>第二步，定位到该目录下的 <code>src/runtime/internal/sys</code> 目录中的 <code>zversion.go</code> 文件，即：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜ sudo vim &#x2F;usr&#x2F;local&#x2F;go&#x2F;src&#x2F;runtime&#x2F;internal&#x2F;sys&#x2F;zversion.go</span><br><span class="line">Password:</span><br></pre></td></tr></table></figure>



<p>第三步，在该文件末尾添加一行  <code>const theVersion = `go1.17`</code>：</p>
<p>最终效果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; Code generated by go tool dist; DO NOT EDIT.</span><br><span class="line">package sys</span><br><span class="line">const StackGuardMultiplierDefault &#x3D; 1</span><br><span class="line">const theVersion &#x3D; &#96;go1.17&#96;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20211206120016.png" alt="20211206120016"></p>
<p>第四步，重启 <code>Goland</code> 。然后找到 <code>Preferences -- Go -- GOROOT</code> 项，此时下拉项中就出现了 <code>Go1.17</code> 的选项，选中并应用即可。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20211206120038.png" alt="20211206120038"></p>
<hr>
<p>相关参考</p>
<ul>
<li><a href="https://youtrack.jetbrains.com/issue/GO-11588" target="_blank" rel="noopener">goland doesn’t work after upgraded to go1.17 : GO-11588</a></li>
</ul>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>你下载“国家反诈中心”App了吗？</title>
    <url>/2021/11/23/have-you-download-the-national-anti-fraud-center-app/</url>
    <content><![CDATA[<p>“你下载 国家反诈中心App 了吗？” 记得这句话火起来还是在前段时间的抖音上。但最近的一些个人经历又让我不得不再次想聊聊这个话题。</p>
<p>前段时间办理北京居住证续签，上门核查的民警要求下载一个反诈的App。我说我已经下载了 “国家反诈中心”App，但民警同志说不是那个，需要扫他提供的二维码进行下载，注册后将个人信息页截屏发给他才可以。扫码后我发现下载的是一个名为 “全民反诈”的App。仔细的看了看，感觉和“国家反诈中心”App的功能都差不多，也就是改了个名字而已。</p>
<p>后来坐高铁回老家，在出站口查完了身份证后被检查的民警给拦下来了。也是让扫码下载 “国家反诈中心”App 之后才可以出站。</p>
<p>我跟那位民警说，我已经下载过了，顺手就要打开手机给他看。然后他说：“那个不行，你必须扫我的二维码才可以。” 我只好按他的要求，扫描他亮出来的二维码，打开了一个微信页面，填写了个人的身份证信息，需要截图后，成功提交截图才可以。整个过程虽然只是让我提交了截图，并没有强制让我下载安装App并注册。但心里还是觉得挺不舒服的。</p>
<p>又是后来的一次，我骑车去城里办事。在一个十字路口被身穿制服的“民警”给拦下来了，第一句就问我有没有下载 “国家反诈中心”App 。我说我已经下载了，然后顺势要掏手机给他看，这次还好，这位民警直接摆摆手让我走了，也没有过多的说什么。</p>
<hr>
<p>综合以上的个人经历，感觉下载 “国家反诈中心”App 似乎已经成了一项 <code>zhengzhi</code> 任务一样。</p>
<p>这里暂且不论其反诈效果如何，光从这一推广程度来说，没有哪一款App能够比得上。</p>
<p>回过头来想想，与其这样大力度的让广大人民群众去安装一款App，为何不从源头抓起，去大力度的打击 <code>电信诈骗</code> 呢？</p>
<p>依据：</p>
<blockquote>
<p>《刑法》第二百六十六条：诈骗公私财物，数额较大的，处三年以下有期徒刑、拘役或者管制，并处或者单处罚金；数额巨大或者有其他严重情节的，处三年以上十年以下有期徒刑，并处罚金；数额特别巨大或者有其他特别严重情节的，处十年以上有期徒刑或者无期徒刑，并处罚金或者没收财产。</p>
</blockquote>
<p>如果将现有的处罚力度增加一倍，是否能够降低抱有侥幸心理实施电信诈骗的人员呢？至少，也能起到一定的威慑作用吧。</p>
]]></content>
      <categories>
        <category>人生随感</category>
      </categories>
      <tags>
        <tag>人生感悟</tag>
      </tags>
  </entry>
  <entry>
    <title>Git采用强制覆盖法合并代码提交</title>
    <url>/2021/11/11/git-mandatory-coverage-merge-branch/</url>
    <content><![CDATA[<p>有这样一种场景：</p>
<p>我和同事A合作开发同一个功能模块。我们从 <code>dev</code> 分支分别 <code>checkout</code> 出一个自己的分支来进行开发，完成后再合并到 <code>dev</code> 分支上去进行测试。</p>
<p>可能出现的情况是，我们同时提交代码到 <code>dev</code> 分支上，然后出现了冲突的情况。将自己的分支合并到 <code>dev</code> 分支后，结果在执行 <code>git push</code> 的时候却提交不上去了：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜ git push origin dev:dev</span><br><span class="line">To ssh:&#x2F;&#x2F;github.com&#x2F;example&#x2F;demo_project</span><br><span class="line"> ! [rejected]          dev -&gt; dev (non-fast-forward)</span><br><span class="line">error: failed to push some refs to &#39;ssh:&#x2F;&#x2F;github.com&#x2F;example&#x2F;demo_project&#39;</span><br><span class="line">hint: Updates were rejected because the tip of your current branch is behind</span><br><span class="line">hint: its remote counterpart. Integrate the remote changes (e.g.</span><br><span class="line">hint: &#39;git pull ...&#39;) before pushing again.</span><br><span class="line">hint: See the &#39;Note about fast-forwards&#39; in &#39;git push --help&#39; for details.</span><br></pre></td></tr></table></figure>

<p>错误信息中提示需要先执行 <code>git pull</code> 拉取最新代码，但执行后发现并没有代码被拉取下来。</p>
<hr>
<p>遇到这种情况的时候，可以采用强制覆盖法来实现代码的合并提交。</p>
<p>例如我当前的开发分支为 <code>test</code>，测试分支 <code>dev</code> 。</p>
<ol>
<li><p>拉取远端分支： <code>git pull origin dev:dev</code></p>
</li>
<li><p>合并我的开发分支到本地 <code>dev</code> 分支：</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git checkout dev</span><br><span class="line">git merge test</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>然后将 <code>dev</code> 提交到远端结果报上面的错误</li>
</ol>
<p>解决方法：</p>
<p>核心思路是：通过拉取远端的 <code>origin/dev</code> 分支强制覆盖本地的 <code>dev</code> 分支，然后再执行分支合并，最后将本地的 <code>dev</code> 分支提交到远端。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git checkout dev</span><br><span class="line"></span><br><span class="line">git fetch --all</span><br><span class="line"></span><br><span class="line">git reset --hard origin&#x2F;dev # 这里 dev 要修改为对应的分支名</span><br><span class="line"></span><br><span class="line">git pull</span><br></pre></td></tr></table></figure>

<p>这样操作后，会将本地的 <code>dev</code> 分支拉取为远端的最新提交。</p>
<p>然后再执行合并的操作就不会出现冲突的情况了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git merge test</span><br><span class="line"></span><br><span class="line">git push origin dev:dev</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Git操作系列</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>2021年北京居住证签注小记</title>
    <url>/2021/11/05/beijing-residence-permit-endorsement-2021/</url>
    <content><![CDATA[<p>从2021年起，北京居住证全面改为电子居住证，停止发放实体居住证。电子居住证要通过 “北京通App” 来进行申领和签注等操作。</p>
<h4 id="提交资料"><a href="#提交资料" class="headerlink" title="提交资料"></a>提交资料</h4><p>签注时如果不需要变更住址信息，直接使用之前的住址信息提交即可。如果更换了居住信息，还需要重新提交居住证明。</p>
<p>提交居住信息时，我对租房合同几页进行了拍照上传，填写了现住址小区地址，填写了房东的姓名和电话，选择了小区所在片区的派出所即可。</p>
<p>之后，就是等待审核处理。会有相关的民警给你打电话确认上门核查时间。</p>
<h4 id="上门核查"><a href="#上门核查" class="headerlink" title="上门核查"></a>上门核查</h4><p>民警上门核查，需要你先填写一份《外地人员来京信息登记表》(好像是叫这个名称，具体忘记了)。主要就是填写个人信息，在京居住地信息，在京工作信息，缴纳社保项等内容。</p>
<p>然后，需要拍两张照片，一张是个人手持身份证拍照，以表明确实居住在该地址；一张是和民警一起的照片，以说明民警确实进行了上门核查的流程。</p>
<p>在和民警交谈中，我也了解并确认了如下的几点信息：</p>
<ol>
<li>就是从今年即2021年开始，必须要求民警上门核查是否在当前所在地居住。一方面是今年疫情的影响，涉及到大数据分析人员流调信息，为了防止出现人员居住地址不一致的情况，流调时就会比较麻烦；另一方面据说是有房东投诉说租客已经搬离但还是使用原先的住址信息进行签注，房东意见比较大。<br>我一开始也是打算就直接使用去年的住址信息提交就完事了，但没想到今年必须上门核查，所以也就没有“作弊”的可能了。<br><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20211111191841.png" alt="20211111191841"></li>
<li>如果是几个人合租的那种，在民警上门核查时，其他的人也可以同时办理居住证或签注。这样来说就比较方便。(具体如何操作可询问上门的民警)</li>
</ol>
]]></content>
      <categories>
        <category>人生随感</category>
      </categories>
      <tags>
        <tag>人在帝都</tag>
      </tags>
  </entry>
  <entry>
    <title>有时候，我们需要换个角度看问题</title>
    <url>/2021/10/22/think-about-the-problem-use-another-way/</url>
    <content><![CDATA[<p>随着公司人员队伍的不断壮大，10月份之后我们就搬到了新的办公楼进行办公。</p>
<p>但公司的整体装修是在九月底完成的，也就是从装修完成到正式入驻，新的办公室只经过了一个国庆假期的 <code>甲醛通风散味时间</code>。</p>
<p>可想而知，办公室里的环境非常不适合办公，在里面待不了几分钟就会头晕。</p>
<p>虽然公司里面摆满了各种绿植和炭包，但这种方式见效太慢了。</p>
<p>后来，公司又购买了几台小米空气净化器，一天24小时开着，但奈何公司面积太大，效果也并不是很明显。</p>
<p>再后来的一天，公司来了几个师傅，看着他们对几台小米的空气净化器做了改造，顿时我就好奇起来。</p>
<p>改造后的效果如下：</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20211107100140.JPG" alt="20211107100140"></p>
<p>让我感觉奇怪的地方是：</p>
<ol>
<li>他们居然把小米空气净化器放在了外面</li>
<li>下面一侧的挡板换成了一个带开口的挡板</li>
<li>把上面的出气口接到了窗户里面</li>
<li>把窗户封起来了</li>
</ol>
<p>当时我的第一感觉就是：这不是脑残吗？这不是净化外面的空气吹到了屋里吗？这是什么情况？</p>
<p>按照常理来说，空气净化器我们都是放在室内，室内的空气经过净化器的不断循环处理后以使室内空气质量达到优秀。</p>
<p>但他们却把净化器放到了外面。。。</p>
<hr>
<p>本着 <code>一探究竟</code> 的想法，我就想搞清楚他们为什么要这么设计，但我也不好意思直接去问那些安装师傅们。</p>
<p>直到我看到师傅们拆下来的装配件的纸箱子时，为我打开了一个突破口。</p>
<p>我看到这些纸箱子上面写着 <code>MATE</code> 的标志，上网一搜才了解。</p>
<p>原来这个装置叫 <code>MATE米皮新风系统</code>，或者叫 <code>米皮新风机</code> 。是将小米空气净化器改装成新风机的操作。这种改装，相比起直接购买一台新风机来说，更便宜。</p>
<hr>
<p>那新风机相比净化器有什么优势呢？</p>
<p>这种 <code>米皮新风机</code> 的工作原理是：向室内不断注入新鲜纯净的空气，将室内浑浊的空气稀释并挤出去，实现无死角净化。</p>
<p>具体的对比可以看一下官方的广告：</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20211111100910.png" alt="20211111100910"></p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20211111100959.png" alt="20211111100959"></p>
<hr>
<p>描述的效果确实挺厉害的，但具体的净化效果怎样，还要看真实的实践测试了。</p>
<p>不过相比起购买一台正宗的新风机而言，<code>米皮新风机</code> 确实是一种非常便宜的改装方案。</p>
]]></content>
      <categories>
        <category>人生随感</category>
      </categories>
      <tags>
        <tag>人生感悟</tag>
      </tags>
  </entry>
  <entry>
    <title>go-zero微服务框架实践-入门</title>
    <url>/2021/09/27/micro-service-framework-go-zero-start/</url>
    <content><![CDATA[<h3 id="goctl命令"><a href="#goctl命令" class="headerlink" title="goctl命令"></a>goctl命令</h3><h4 id="创建api模板文件"><a href="#创建api模板文件" class="headerlink" title="创建api模板文件"></a>创建api模板文件</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">goctl api -o user.api</span><br></pre></td></tr></table></figure>

<h4 id="生成api服务，使用驼峰命名格式"><a href="#生成api服务，使用驼峰命名格式" class="headerlink" title="生成api服务，使用驼峰命名格式"></a>生成api服务，使用驼峰命名格式</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">goctl api go -api user.api -dir . -style GoZero</span><br></pre></td></tr></table></figure>

<h4 id="创建rpc模板文件"><a href="#创建rpc模板文件" class="headerlink" title="创建rpc模板文件"></a>创建rpc模板文件</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">goctl rpc template -o user.proto</span><br></pre></td></tr></table></figure>

<h4 id="生成rpc服务，使用驼峰命名格式"><a href="#生成rpc服务，使用驼峰命名格式" class="headerlink" title="生成rpc服务，使用驼峰命名格式"></a>生成rpc服务，使用驼峰命名格式</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">goctl rpc proto -src user.proto -dir . -style GoZero</span><br></pre></td></tr></table></figure>


<h4 id="通过sql文件生成不带缓存的model，使用驼峰命名格式"><a href="#通过sql文件生成不带缓存的model，使用驼峰命名格式" class="headerlink" title="通过sql文件生成不带缓存的model，使用驼峰命名格式"></a>通过sql文件生成不带缓存的model，使用驼峰命名格式</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">goctl model mysql ddl -src user.sql -dir . -style GoZero</span><br><span class="line"></span><br><span class="line">goctl model mysql ddl -src user.sql -dir&#x3D;&quot;.&#x2F;user&quot; -style GoZero</span><br></pre></td></tr></table></figure>


<h4 id="通过连接数据库生成不带缓存的model，使用驼峰命名格式"><a href="#通过连接数据库生成不带缓存的model，使用驼峰命名格式" class="headerlink" title="通过连接数据库生成不带缓存的model，使用驼峰命名格式"></a>通过连接数据库生成不带缓存的model，使用驼峰命名格式</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">goctl model mysql datasource -url&#x3D;&quot;user:password@tcp(127.0.0.1:3306)&#x2F;database&quot; -table&#x3D;&quot;*&quot; -dir&#x3D;&quot;.&#x2F;user&quot; -style GoZero</span><br></pre></td></tr></table></figure>

<h4 id="通过sql文件生成带缓存的model，使用驼峰命名格式"><a href="#通过sql文件生成带缓存的model，使用驼峰命名格式" class="headerlink" title="通过sql文件生成带缓存的model，使用驼峰命名格式"></a>通过sql文件生成带缓存的model，使用驼峰命名格式</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">goctl model mysql ddl -src user.sql -dir . -c -style GoZero</span><br><span class="line"></span><br><span class="line">goctl model mysql ddl -src user.sql -dir&#x3D;&quot;.&#x2F;user&quot; -c -style GoZero</span><br></pre></td></tr></table></figure>

<h4 id="通过连接数据库生成带缓存的model，使用驼峰命名格式"><a href="#通过连接数据库生成带缓存的model，使用驼峰命名格式" class="headerlink" title="通过连接数据库生成带缓存的model，使用驼峰命名格式"></a>通过连接数据库生成带缓存的model，使用驼峰命名格式</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">goctl model mysql datasource -url&#x3D;&quot;user:password@tcp(127.0.0.1:3306)&#x2F;database&quot; -table&#x3D;&quot;*&quot; -dir&#x3D;&quot;.&#x2F;user&quot; -c -style GoZero</span><br></pre></td></tr></table></figure>

<h4 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">go run user.go -f etc&#x2F;User-Api.yaml</span><br></pre></td></tr></table></figure>

<hr>
]]></content>
      <categories>
        <category>go-zero实践</category>
      </categories>
      <tags>
        <tag>Golang</tag>
        <tag>go-zero</tag>
      </tags>
  </entry>
  <entry>
    <title>为了5毛钱，我和北京公交杠上了</title>
    <url>/2021/08/15/beijing-bus-card-deduct-more-money/</url>
    <content><![CDATA[<p>平时上下班，我习惯了坐公交通勤。</p>
<p>相比起地铁，我乘坐的985路公交车早晚高峰时段并不会太挤。到了朝阳公园那段路的时候，也不会遇到太多的私家车，出现拥堵的情况。而且相比之下，坐公交更轻松一些，毕竟地铁10号线太挤了。</p>
<p>8月6日周五，我如往常一样下班坐公交车回家。没想到在下车刷卡的时候，却发现扣了我1.5元的乘车费。平时我乘坐的这段路线车费都是1元。当时就感觉有些诧异，但也来不及让我过多的思考，因为车已经到站了，我只好先下车。</p>
<p>回到家越想这个事情越觉得不爽。心想如果是这趟路线涨价了，那我周五早晨上班的时候扣费却是1元。虽然这趟车是分段计价的，但我上下班的这段路程，都上班这么长时间了，刷卡一直都是1元。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20210905000935.jpg" alt="20210905000935"></p>
<p>然后7日晚上我就到北京一卡通App中进行了异常交易申诉。等到8月8日得到的处理结果却是 “未检测到异常扣费交易”。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20210905001025.jpg" alt="20210905001025"></p>
<p>这样的处理结果，让我心里更加的不爽了。</p>
<p>这个时候钱多少已经不是问题了，为了争口气，这次我非要搞个明白不可。</p>
<p>然后我就又在 “在线客服” 中进行了反馈，客服人员答复会有相关工作人员跟我联系处理。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20210905003801.jpg" alt="20210905003801"></p>
<p>就这样，又是怀着忐忑的心情等待了几天。</p>
<p>终于在11号的时候我收到了成功退款的短信通知，但让我生气的是并没有所谓的工作人员跟我联系，告知我为什么会多扣款。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20210905002103.jpg" alt="20210905002103"></p>
<p>虽然说多扣的钱已经退给我了，但是为什么会多扣钱我到现在还没搞明白。</p>
<p>总不能每次多扣钱了我就要辗转多次的去找客服申诉反馈，等待处理。如果我不是一个特别较真的人，那一次0.5元，如果有很多人都出现多扣款的情况，感觉这又是一个不小的漏洞啊。</p>
<p>但毕竟钱已经退给我了，我如果再找客服的话，能不能给我一个满意的答复目前来看还真不好说了。就在我犹豫不定的时候，突然发现了一丝曙光。</p>
<p>那天是8月16日的周一早晨上班时，我正好坐在了985路公交车司机后面的座位。这个座位正好能看到这趟公交车的运营路线票价图：</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20210905002356.png" alt="20210905002356"></p>
<p>我才发现原来我乘坐这趟车的上车站和下车站的区间车费正好处在一个过渡的票价。</p>
<p>例如上图中，我从 <code>首都图书馆站</code> 上车，如果我在 <code>枣营站</code> 下车，那车费就是 <code>2元</code> ，而如果我在 <code>枣营北站</code> 下车，那车费就是 <code>3元</code> 了。</p>
<p>那么问题又来了，我乘车时上车站和下车站明明是在 <code>2元</code> 的区间票价内，而公交车扣费扣得是多一站的情况，但是公交车上报站却是正常的，那为什么会出现 <code>多坐一站</code> 的情况呢？</p>
<p>在车上坐了几站地之后，我似乎发现这其中的猫腻。顺便在网上搜索了一下，大概搞明白了为什么会多扣我钱的原因。</p>
<p>原来，公交车的报站大多是通过类似于GPS定位的方式来报站的。就是当乘坐的公交车进站时，GPS定位发现车辆进入站点，就会自动启动播报程序，离开站点时同理。而公交车上的刷卡机变更站点，<strong>是由司机人工操作的</strong>。如果你仔细留意的话，会发现每次公交车关门时，司机都会按一下右手边车门按键旁边的 <code>加站按钮</code>。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20210905002522.png" alt="20210905002522"></p>
<p>如果司机忘记了按键，那就可能会出现刷卡机变更站点延后的情况。</p>
<p>我在乘车过程中，确实发现了这种情况。当时公交车的报站是正常的，和到达的站点一致。而刷卡机上显示的站点名还是前两站的站点名，也就是说司机忘记了按键。</p>
<p>那么这样一来，对于乘坐区间票价的公交车而又刚好在扣费过渡站点下车的乘客来说，就可能会出现多扣费的情况了。</p>
<p>后来，经过我的多次观察，发现刷卡机和报站站点不一致的现象，在北京的多辆公交车上都有出现。</p>
<p>不过到目前，我还没有想到有什么方法能解决这个问题。</p>
]]></content>
      <categories>
        <category>人生随感</category>
      </categories>
      <tags>
        <tag>人在帝都</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang通过经纬度计算两点之间的距离</title>
    <url>/2021/08/13/get-distance-by-lat-and-lon/</url>
    <content><![CDATA[<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">计算两个坐标点之间的距离</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">	<span class="string">"math"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 张自忠路站</span></span><br><span class="line">	lat1:=<span class="number">39.939889</span></span><br><span class="line">	lng1:=<span class="number">116.423528</span></span><br><span class="line">	<span class="comment">// 阜成门站</span></span><br><span class="line">	lat2:=<span class="number">39.929488</span></span><br><span class="line">	lng2:=<span class="number">116.362875</span></span><br><span class="line"></span><br><span class="line">	fmt.Println(GetDistance(lat1, lat2, lng1, lng2))</span><br><span class="line">    <span class="comment">// 得到结果 5.2991238</span></span><br><span class="line">    <span class="comment">// 百度地图测距 5.3km</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回单位为：千米</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetDistance</span><span class="params">(lat1, lat2, lng1, lng2 <span class="keyword">float64</span>)</span> <span class="title">float64</span></span> &#123;</span><br><span class="line">	radius := <span class="number">6371000.0</span> <span class="comment">//6378137.0</span></span><br><span class="line">	rad := math.Pi / <span class="number">180.0</span></span><br><span class="line">	lat1 = lat1 * rad</span><br><span class="line">	lng1 = lng1 * rad</span><br><span class="line">	lat2 = lat2 * rad</span><br><span class="line">	lng2 = lng2 * rad</span><br><span class="line">	theta := lng2 - lng1</span><br><span class="line">	dist := math.Acos(math.Sin(lat1)*math.Sin(lat2) + math.Cos(lat1)*math.Cos(lat2)*math.Cos(theta))</span><br><span class="line">	<span class="keyword">return</span> dist * radius / <span class="number">1000</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue刷新即报错 Uncaught SyntaxError: Unexpected token &#39;&lt;&#39;</title>
    <url>/2021/07/21/vue-error-of-unexpected-token/</url>
    <content><![CDATA[<h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>vue项目在调试时，发现一刷新页面就显示白屏了。具体错误为：</p>
<blockquote>
<p>Uncaught SyntaxError: Unexpected token ‘&lt;’</p>
</blockquote>
<p>控制台中显示上面的错误提示，页面白屏。查看详细的文件错误，也只是显示在页头部分：</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20210721115315.png" alt="20210721115315"></p>
<hr>
<h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><p>将 <code>vue.config.js</code> 中的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">  publicPath: &#39;.&#x2F;&#39;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>改为如下，即可。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">  publicPath: &#39;&#x2F;&#39;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul>
<li><a href="https://stackoverflow.com/questions/51210795/vue-cli-uncaught-syntaxerror-unexpected-token" target="_blank" rel="noopener">javascript - vue cli - Uncaught SyntaxError: Unexpected token &lt; - Stack Overflow</a></li>
</ul>
]]></content>
      <categories>
        <category>Vue前端开发</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>天气太晒，叮咚买菜？</title>
    <url>/2021/07/20/ding-dong-shopping/</url>
    <content><![CDATA[<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20210720123040.png" alt="20210720123040"></p>
<p>虽然最近社区团购的风头不是那么的火了，但依然挡不住各大巨头们的涌入。</p>
<p>美团买菜，叮咚买菜和橙心优选是我平时用的比较多的三种，今天就来简单的聊聊这三个的差别，也算给大家一些参考吧。</p>
<p>在选择网上买菜之前，我一般都会去小区附近的大型超市买菜。物美超市是我去的最多的一家。和家乐福比起来，物美的商品价格，还是相对便宜的。</p>
<p>但这，却架不住美团买菜的一分钱10个鸡蛋来的香。</p>
<p>不过，我倒是不想说什么优点，只想吐槽吐槽缺点，毕竟不吐不快嘛。</p>
<hr>
<h4 id="美团"><a href="#美团" class="headerlink" title="美团"></a>美团</h4><p>美团买菜是我首先开始使用的。<br>我第一次用的是美团优选，也就是当天买第二天自提的那种。美团的配送人员会把选好的菜品送到附近的自提点，然后自己去取。<br>感觉这种形式比较适合上班族一类的人群。毕竟白天上班，即便是送货上门也没法收取。</p>
<p>但我的第一次体验感觉很气愤。我选了一份鸡蛋，15个的那种。结果去取货时，发现分配给我的却是10个的那种。<br>然后自提点的负责人让我给美团打电话看怎么解决。我看App上提示 “订单有问题，可联系团长处理” ，然后我就点了团长的电话，结果。。。刚刚那个负责人的电话响了。。。然后他就大声的说：你不要找我，你找美团，我也解决不了，要不你就退货。。。但在App上我却找不到美团官方的客服，除了那个机器人客服。。。<br>最后无奈只能选择退款了。</p>
<hr>
<h4 id="叮咚"><a href="#叮咚" class="headerlink" title="叮咚"></a>叮咚</h4><p>叮咚我只用过立即配送的那种，使用微信上的叮咚小程序下单。<br>总的来说，我用叮咚没有什么特别不爽的体验，感觉上还是不错的，而且送货也很快。</p>
<hr>
<h4 id="橙心优选"><a href="#橙心优选" class="headerlink" title="橙心优选"></a>橙心优选</h4><p>橙心优选我只用过第二天自提的方式，评价就是：这是我用过的这三种里面体验最最最差的那个了。</p>
<p>那天过去取菜是九点多，晚上下了班就直奔自提点了。到那一看就是一家超市，有两个小伙子在那里分拣菜品。</p>
<p>到了之后我说 橙心优选取菜。旁边一个小伙子就问我都买了什么，给他报出来，他来分。</p>
<p>当时我就感觉有些诧异。像我之前用美团优选去自提的时候，菜品都是给提前分装好了，到了直接提走就可以了。没想到这里还要当下分拣。<br>然后我就一个一个报给他，那两个小伙子就开始在两个大箱子里一个一个挑，挑出来的就给我堆在一边。<br>因为也算是第一次在橙心优选上买菜，所以会有个优惠券啊，第一次我就买的有点多。看着那一堆的菜，我说能给我找个袋子吗，不然我也没法拿啊。其中一个小伙子一指门口的收银员：找他要。那个收银员也看到了，直接就回了句：你自己没有带吗？然后不情愿的拿了一个大袋子给我。搞得我很无奈。没想到，橙心优选还这么环保，连塑料袋都不提供的嘛。</p>
<p>从方便的角度来讲，至少给用户提供一些打包的东西吧，总不能“左手一捆葱，右手一包菜，身上还背着一个大西瓜”的让用户把菜抱回家吧。<br>从环保的角度来讲，像美团和叮咚都已经开始换用可降解的塑料袋来打包送货了。也就是说，总会有更好的解决方法的呀。</p>
<p>第二次我在橙心优选上买了一些鸡蛋，没想到他们又是在一个大箱子里开始翻找，又没给提供打包携带的东西。最后我就那样一手骑车，一手抱着两盒鸡蛋，愤愤的回家了。</p>
<p>经过这两次体验，我也算摸清了一些门道。<br>橙心优选这团长的服务就是不行。按理说，菜品都是第二天16点之后才开始可取货的，他们是有很长的时间来提前分好标明的，然而并没有。另外就是，橙心优选并不会给提供塑料袋。</p>
<p>第三次再去的时候，我就带着叮咚买菜的袋子去取得货。反正，我不尴尬，我很环保。</p>
<hr>
<p>总的来说，我选择叮咚买菜的概率还是多一些，至少体验上比较让人省心。</p>
<hr>
]]></content>
      <categories>
        <category>人生随感</category>
      </categories>
      <tags>
        <tag>人在帝都</tag>
        <tag>人生感悟</tag>
      </tags>
  </entry>
  <entry>
    <title>这就是人生啊</title>
    <url>/2021/07/17/this-is-life/</url>
    <content><![CDATA[<blockquote>
<p>当我被迫生活时，才发现梦想好像挺一文不值的。</p>
</blockquote>
<blockquote>
<p>雷军：其实创业是个高风险行业，就是创业失败是必然的，成功是偶然的。</p>
</blockquote>
<blockquote>
<p>创业是普通人改变命运的最佳途径。</p>
</blockquote>
<blockquote>
<p>真正的服务，是会让人感觉舒服的服务。</p>
</blockquote>
]]></content>
      <categories>
        <category>人生随感</category>
      </categories>
      <tags>
        <tag>人生感悟</tag>
      </tags>
  </entry>
  <entry>
    <title>MacOS下为iTerm终端设置代理-优化篇</title>
    <url>/2021/07/17/setting-up-proxy-for-iterm-terminal-on-macos-optimization/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，您输入的密码错误，请检查后重新输入。" data-whm="抱歉, 当前文章不能被校验, 不过您还是可以看看解密后的内容。">
  <script id="hbeData" type="hbeData" data-hmacdigest="4f4db13e85dc7c389dfe3ed609acdb130a55a5d5504f0e18e687407701e68397"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">当前文章暂不对外可见，请输入密码后查看！</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Proxy</category>
      </categories>
      <tags>
        <tag>Skill</tag>
        <tag>付费阅读</tag>
        <tag>Shadowsocks</tag>
      </tags>
  </entry>
  <entry>
    <title>MacOS下为iTerm终端设置代理</title>
    <url>/2021/07/15/setting-up-proxy-for-iterm-terminal-on-macos/</url>
    <content><![CDATA[<p>平时上网一般只需要设置浏览器的代理即可，遇到特殊的网站可以开启全局代理解决。</p>
<p>但有时候在终端控制台下也会遇到访问慢的问题，特别是在终端下使用 <code>git clone</code> 拉取 <code>GitHub</code> 上的仓库时经常会遇到 <code>403Forbidden</code> 的情况。</p>
<p>如果你有使用 <code>ohmyzsh</code> 的话，感受应该会很深刻：几乎每次 <code>ohmyzsh</code> 需要升级时，都会遇到 <code>403</code> 的问题。</p>
<p>这是因为一些终端下的命令如 <code>git</code> 、<code>wget</code> 、<code>curl</code> 、<code>brew</code> 等，是不会默认走代理的，即使设置的是全局代理。</p>
<p>解决这个问题最好的方式就是 <strong>为终端启用代理</strong>。</p>
<hr>
<h4 id="选择哪种代理方式"><a href="#选择哪种代理方式" class="headerlink" title="选择哪种代理方式"></a>选择哪种代理方式</h4><p>一般的代理工具如 <code>Shadowsocks</code> 、<code>V2Ray</code> 等，都是支持 <code>http/socks5</code> 两种代理方式的，那我们应该选择哪种呢？</p>
<h4 id="socks5方式"><a href="#socks5方式" class="headerlink" title="socks5方式"></a>socks5方式</h4><p><code>socks5</code> 代理方式，可以通过 <code>ALL_PROXY</code> 参数值来设置。</p>
<p>编辑 <code>~/.zshrc</code> 文件，假设代理工具的 <code>socks5</code> 端口为 <code>1080</code> ，则：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alias proxys5&#x3D;&#39;export ALL_PROXY&#x3D;socks5:&#x2F;&#x2F;127.0.0.1:1080&#39;</span><br><span class="line">alias unproxys5&#x3D;&#39;unset ALL_PROXY&#39;</span><br></pre></td></tr></table></figure>

<p>之后执行 <code>source ~/.zshrc</code> 使配置生效。</p>
<p>那么，启用和关闭终端下的代理则执行 <code>proxys5</code> 和 <code>unproxys5</code> 即可。</p>
<p>测试一下，默认情况下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜ curl ip.sb</span><br><span class="line">123.120.226.74</span><br></pre></td></tr></table></figure>

<p>启用终端下代理再次测试：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜ proxys5</span><br><span class="line"></span><br><span class="line">➜ curl ip.sb</span><br><span class="line">204.44.66.25</span><br></pre></td></tr></table></figure>

<p>如果看到获取到的ip变了，则说明 <code>socks5</code> 终端代理配置生效了。</p>
<h4 id="socks5方式的不足"><a href="#socks5方式的不足" class="headerlink" title="socks5方式的不足"></a>socks5方式的不足</h4><p>经过我的测试发现，使用 <code>socks5</code> 代理方式，请求某些ip时无效，也就是不会使用代理ip来访问。</p>
<p>如下的测试结果：</p>
<ul>
<li><code>curl ifconfig.co/json</code> ：有效</li>
<li><code>curl ip.sb</code> ：有效</li>
<li><code>curl cip.cc</code> ：无效</li>
</ul>
<p>后来我了解到：</p>
<blockquote>
<p>终端下很多工具目前只支持 <code>http</code> 和 <code>https</code> 等协议，对 <code>socks5</code> 协议支持不够好。</p>
</blockquote>
<p>那改用 <code>http</code> 方式测试一下。</p>
<hr>
<h4 id="http方式"><a href="#http方式" class="headerlink" title="http方式"></a>http方式</h4><p><code>http</code> 方式需要通过 <code>http_proxy</code> 和 <code>https_proxy</code> 两个参数来配置。</p>
<p>编辑 <code>~/.zshrc</code> 文件，假设代理工具的 <code>http</code> 端口为 <code>1087</code> ，则：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alias proxyhp&#x3D;&#39;export http_proxy&#x3D;http:&#x2F;&#x2F;127.0.0.1:1087;export https_proxy&#x3D;http:&#x2F;&#x2F;127.0.0.1:1087;&#39;</span><br><span class="line">alias unproxyhp&#x3D;&#39;unset http_proxy https_proxy&#39;</span><br></pre></td></tr></table></figure>

<p>之后执行 <code>source ~/.zshrc</code> 使配置生效。</p>
<p>那么，启用和关闭终端下的代理则执行 <code>proxyhp</code> 和 <code>unproxyhp</code> 即可。</p>
<p>对 <code>http</code> 方式代理进行测试，发现以下情况都会使用代理ip来访问。</p>
<ul>
<li><code>curl ifconfig.co/json</code> ：有效</li>
<li><code>curl ip.sb</code> ：有效</li>
<li><code>curl cip.cc</code> ：有效</li>
</ul>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>总结一下就是，最终选择 <code>http</code> 方式来设置终端代理。</p>
<hr>
]]></content>
      <categories>
        <category>Proxy</category>
      </categories>
      <tags>
        <tag>Skill</tag>
        <tag>Shadowsocks</tag>
      </tags>
  </entry>
  <entry>
    <title>“收摊” 后的一些思考</title>
    <url>/2021/06/25/thoughts-after-the-failure-of-the-business/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，您输入的密码错误，请检查后重新输入。" data-whm="抱歉, 当前文章不能被校验, 不过您还是可以看看解密后的内容。">
  <script id="hbeData" type="hbeData" data-hmacdigest="12ed1d06c093251e6a23ef18c8d86a381292dd151315f08f03fb2c5dcb7bd50d">d636f693ee2a15a11c80bfecb03e7c9435dcc762773218bd5e3fdb4f1ecf543fd7df9b086f63a93883cf7bcceb3de3677af996f7bbc1203858d3a89bd2634766e24742b35ed69e34a2395bd344605d28fc4cd4f5b8e047a710a60d2388446c03512f12b6f660fec9df5e13dc5b09f3c0ec531fcba9c730a5433fd73cb434c3b3f448cef224efe57cd22690af8a05ca64048428d9a131c7461a71bb494bcec68fb6efdba283983dd215c3b2c0449df7ba3c6f516c0d14be95713308865f4a0e927ef7ad6be4898a5e1fe662a9e56c5678d81eecfea7ed97f64df61031748848c7dc14b88f66701e601b166028fd407b9a01beb423c3a9e3898b781937e50543e1f968451dd1051a115c268f5e07e95aef58dc71a744273ada109aea7f14ea22ddfa4ddc75aee805fdce72c58e6267ac836bb5bb507507e0a2195e1f88a81ffdd853af8e08f981d22a738f229c6460f1f03f7ac8b74e0ab3f2afd2501ab62fc09a6a78e39248797042616d624af4e688e822d059dd23ff40b9feea899aace753cebd2902cfdfc3326ee96ba6ed0ecf54a9bc5e04f4112b38c63e3fdc911e8147c43c9232c282c0bfefa667aad4a7269ab648c485665935d24ccfeb6a450b53472a4c900571f7e9244f661a54965c1aa29d83224863b000e25d5a03496205b8804a5179f3a6462f7649c4de7c809d4389f912826371910c6114eac76aeb3277dfe4164ddd0c5022ebc6c4b2dfed9831f49bb63055de8be76b0c12afed583fcd3215</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">当前文章暂不对外可见，请输入密码后查看！</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>人生随感</category>
      </categories>
      <tags>
        <tag>人在帝都</tag>
        <tag>付费阅读</tag>
      </tags>
  </entry>
  <entry>
    <title>听说北京的数字人民币红包你没有中签</title>
    <url>/2021/06/12/beijing-e-cny-red-packet/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，您输入的密码错误，请检查后重新输入。" data-whm="抱歉, 当前文章不能被校验, 不过您还是可以看看解密后的内容。">
  <script id="hbeData" type="hbeData" data-hmacdigest="577947e148b8a09ef8f4beffd7ceea308751c0258e339e8bb7c30a0dcf78f396"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">当前文章暂不对外可见，请输入密码后查看！</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>Niubility</tag>
      </tags>
  </entry>
  <entry>
    <title>VueCli3 报错 This dependency was not found: core-js/modules</title>
    <url>/2021/06/05/vue-core-js-modules-not-found/</url>
    <content><![CDATA[<h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">This dependency was not found:</span><br><span class="line"></span><br><span class="line">* core-js&#x2F;modules&#x2F;es.object.to-string.js in .&#x2F;src&#x2F;router&#x2F;index.js</span><br><span class="line"></span><br><span class="line">To install it, you can run: npm install --save core-js&#x2F;modules&#x2F;es.object.to-string.js</span><br></pre></td></tr></table></figure>

<h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><p><code>VSCode</code> 先 <code>Ctrl+C</code> 停止项目</p>
<p>按照提示，安装依赖包：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install --save core-js</span><br></pre></td></tr></table></figure>

<p>重启项目：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm run serve</span><br></pre></td></tr></table></figure>

<p>或者执行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yarn serve</span><br></pre></td></tr></table></figure>

<hr>
]]></content>
      <categories>
        <category>Vue前端开发</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>Debug</tag>
      </tags>
  </entry>
  <entry>
    <title>vue生命周期函数</title>
    <url>/2021/06/02/vue-lifecycle/</url>
    <content><![CDATA[<h4 id="钩子函数"><a href="#钩子函数" class="headerlink" title="钩子函数"></a>钩子函数</h4><ul>
<li>beforeCreate</li>
<li>created</li>
<li>beforeMount</li>
<li>mounted</li>
<li>beforeUpdate</li>
<li>updated</li>
<li>beforeDestroy</li>
<li>destroyed</li>
</ul>
<hr>
<h4 id="图示"><a href="#图示" class="headerlink" title="图示"></a>图示</h4><p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20210608172331.png" alt="20210608172331"></p>
<hr>
]]></content>
      <categories>
        <category>Vue前端开发</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>今天还是单身狗，明年让你过六一</title>
    <url>/2021/06/01/not-being-a-single-dog/</url>
    <content><![CDATA[<h4 id="你吃饭了吗"><a href="#你吃饭了吗" class="headerlink" title="你吃饭了吗"></a>你吃饭了吗</h4><p>女：<strong>你吃饭了吗？</strong><br>回：还没呢，如果你亲自下厨，我就能尝尝你的手艺了！<br>女：我不太会做饭<br>回：没关系，我可以教你呀！</p>
<p>提示：重点不是吃了或者没吃，而是她想找你聊天了。重点是延续这个话题，顺势拉近关系。</p>
<hr>
<h4 id="好热啊不想出门"><a href="#好热啊不想出门" class="headerlink" title="好热啊不想出门"></a>好热啊不想出门</h4><p>女：<strong>今天好热呀，我都不想出门了</strong><br>回：和我一起就不会热啦<br>女：为什么呀<br>回：因为心“近”自然凉嘛</p>
<p>提示：女生说不想出门，潜台词是不想一个人出门。</p>
<hr>
<h4 id="哈哈哈哈哈"><a href="#哈哈哈哈哈" class="headerlink" title="哈哈哈哈哈"></a>哈哈哈哈哈</h4><p><strong>如果女生经常发 “哈哈哈哈哈哈”，如何机智回复？</strong><br>可以回：你这么喜欢笑，我就感觉你这个人吧 笑里藏刀<br>女生肯定不明所以<br>然后接着回：我跟你不一样，我笑里藏仙女。再发一段哈哈哈，然后把她的名字夹在这段话里。</p>
<hr>
<h4 id="我出门了"><a href="#我出门了" class="headerlink" title="我出门了"></a>我出门了</h4><p>女：<strong>我出门了</strong><br>回：记得带伞，千万别淋雨，不然就会。。。<br>女：不然什么<br>再回：不然就会可爱到发芽了</p>
<p>提示：千万不要回复 注意安全 巴拉巴拉的那些，难道她不知道注意安全吗？</p>
<hr>
<h4 id="心情不好"><a href="#心情不好" class="headerlink" title="心情不好"></a>心情不好</h4><p>女：<strong>我心情不好</strong><br>回：看你这样，我也挺难过的。谁这么讨厌呀，惹我们家小仙女，怎么会有这样的人<br>女生一般会说一下<br>再回：别生气了，有什么烦恼是一顿火锅解决不了的呀，走，我带你去敞开吃一顿</p>
<p>提示：千万不要回复：怎么了，怎么回事？巴拉巴拉的这些。因为女生已经跟你说心情不好了，你就不要再刨根问底的问她了。你要先解决她的情绪问题。女生难过第一时间找你倾诉，肯定是因为相信你，希望你能理解她的心情。</p>
<hr>
<h4 id="开场白"><a href="#开场白" class="headerlink" title="开场白"></a>开场白</h4><p>朋友介绍的女生如何开场？</p>
<p>发：你看我们是走过程还是直接开始？</p>
<p>提示：如果女生看懂是玩笑，那么接下来就会很好聊了。要是女孩没看懂，他就会敷衍的回个表情，你就直接说<br>发：好，那我们就直接从这个表情开始吧！</p>
<hr>
<h4 id="忘记回消息"><a href="#忘记回消息" class="headerlink" title="忘记回消息"></a>忘记回消息</h4><p>女：忘记回你消息了<br>回：没关系呀，你用意念回复的时候，我也在用意念…<br>女生可能不明所以<br>再回：我用意念把你胖揍了一顿，说起来还是我过分一点</p>
<p>提示：虽然不是故意不回你消息，但我们可以趁机调侃一下</p>
<h4 id="今天好忙呀"><a href="#今天好忙呀" class="headerlink" title="今天好忙呀"></a>今天好忙呀</h4><p>女：今天好忙呀<br>回：看样子是好事啊，这说明你快升职了<br>女生可能会说 没有啊<br>再回：哎，你好惨啊 不如，我请你吃饭，犒劳你一下</p>
<p>提示：要给于安慰</p>
<hr>
<p>附：内容来源于抖音。</p>
]]></content>
      <categories>
        <category>人生随感</category>
      </categories>
      <tags>
        <tag>人生感悟</tag>
      </tags>
  </entry>
  <entry>
    <title>GORM升级V2过程中的注意事项</title>
    <url>/2021/05/25/notes-of-the-gorm-upgrade-v2/</url>
    <content><![CDATA[<p>最近逐渐把手中负责的几个golang项目中的gorm升级到v2版本。之前看v2的升级说明并没有什么大的感觉，但真要升级的时候发现其中还真有好多需要注意的点，不然很容易就踩坑了。</p>
<p>项目中使用的是 <code>mysql</code> 数据库。</p>
<h4 id="使用-gorm-v2"><a href="#使用-gorm-v2" class="headerlink" title="使用 gorm v2"></a>使用 gorm v2</h4><p>这个不必多说，直接执行如下命令即可。替换掉之前的引用：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">go get -u gorm.io&#x2F;gorm</span><br><span class="line">go get -u gorm.io&#x2F;driver&#x2F;mysql</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="int类型"><a href="#int类型" class="headerlink" title="int类型"></a>int类型</h4><p>golang中的 Model，对于某些小数据量的字段，例如 <code>gender</code> 、<code>status</code> 等，我一般使用 <code>int8</code> 或 <code>int</code> 类型来定义，对应于mysql中的 <code>tinyint</code> 、<code>int</code> 类型。</p>
<p>而对于大数据量的字段，例如 <code>主键Id</code> 、 <code>CreateTime</code> 等，则一般使用 <code>int64</code> 来定义，对应于mysql中的 <code>bigint</code> 类型。</p>
<p>在 <code>gorm v1</code> 版本中，如果不特意指定说明，则 <code>int</code> 会映射为 <code>int(11)</code> 类型，<code>int64</code> 会映射为 <code>bigint(20)</code> 类型。</p>
<p>但在 <code>gorm v2</code> 版本中，如果没有特意指定，则 <code>int</code> 和 <code>int64</code> 都会默认映射为 <code>bigint(20)</code> 类型。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">type Student struct&#123;</span><br><span class="line">    Id         int64   &#96;json:&quot;id&quot; gorm:&quot;column:id;primary_key;AUTO_INCREMENT&quot;&#96;</span><br><span class="line">    Status     int     &#96;json:&quot;status&quot; gorm:&quot;column:status;not null;default:0&quot;&#96;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在 <code>gorm v2</code> 中，如果想要映射成 <code>int(11)</code> 类型，则需要指定使用的 <code>type</code> :</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">type Student struct&#123;</span><br><span class="line">    Id         int64   &#96;json:&quot;id&quot; gorm:&quot;column:id;primary_key;AUTO_INCREMENT&quot;&#96;</span><br><span class="line">    Status     int     &#96;json:&quot;status&quot; gorm:&quot;column:status;type:int(11);not null;default:0&quot;&#96;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="主键自增"><a href="#主键自增" class="headerlink" title="主键自增"></a>主键自增</h4><p>在 <code>gorm v2</code> 的升级说明文档中，标明在新版本中需要使用 <code>camelCase</code> 风格的语法来定义标签。例如要使用 <code>autoIncrement</code> 标签来说明该字段是 <strong>自增</strong> 的。</p>
<p>但我在使用时却发现这其中还是需要注意的。如下的写法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Id       int64  &#96;json:&quot;id&quot; gorm:&quot;column:id;type:bigint(20);primaryKey;autoIncrement&quot;&#96;</span><br></pre></td></tr></table></figure>

<p>结果插入数据时报错： <code>Error 1364: Field &#39;id&#39; doesn&#39;t have a default value</code></p>
<p>结合上面第一个问题，我使用了 <code>type:bigint(20);</code> 来标明映射到mysql时使用的数据类型。结果执行时发现 <strong>自增</strong> 设置并没有生效。</p>
<p>将其改成如下写法后，经测试成功：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Id       int64  &#96;json:&quot;id&quot; gorm:&quot;column:id;primaryKey;AUTO_INCREMENT&quot;&#96;</span><br></pre></td></tr></table></figure>

<p>为了探究到底是哪里的问题，我做了如下的测试：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">type API struct &#123;</span><br><span class="line">    Id      int64  &#96;json:&quot;id&quot; gorm:&quot;column:id;primary_key;AUTO_INCREMENT&quot;&#96;      &#x2F;&#x2F; 主键自增 成功</span><br><span class="line">    Id      int64  &#96;json:&quot;id&quot; gorm:&quot;column:id;primaryKey;AUTO_INCREMENT&quot;&#96;       &#x2F;&#x2F; 主键自增 成功</span><br><span class="line">    Id      int64  &#96;json:&quot;id&quot; gorm:&quot;column:id;primaryKey;autoIncrement&quot;&#96;        &#x2F;&#x2F; 主键自增 成功</span><br><span class="line">    Id      int64  &#96;json:&quot;id&quot; gorm:&quot;column:id;primary_key;autoIncrement&quot;&#96;       &#x2F;&#x2F; 主键自增 成功</span><br><span class="line"></span><br><span class="line">    Id      int64  &#96;json:&quot;id&quot; gorm:&quot;column:id;type:bigint(20);primaryKey;auto_increment&quot;&#96;   &#x2F;&#x2F; 主键不自增 失败</span><br><span class="line">    Id      int64  &#96;json:&quot;id&quot; gorm:&quot;column:id;type:bigint(20);primaryKey;autoIncrement&quot;&#96;    &#x2F;&#x2F; 主键不自增 失败</span><br><span class="line">    Id      int64  &#96;json:&quot;id&quot; gorm:&quot;column:id;type:bigint(20);primaryKey;AUTO_INCREMENT&quot;&#96;   &#x2F;&#x2F; 主键不自增 失败</span><br><span class="line"></span><br><span class="line">    Id      int64  &#96;json:&quot;id&quot; gorm:&quot;column:id;type:bigint(20) auto_increment;primary_key&quot;&#96;   &#x2F;&#x2F; 主键自增 成功</span><br><span class="line">    Id      int64  &#96;json:&quot;id&quot; gorm:&quot;column:id;type:bigint(20) autoIncrement;primaryKey&quot;&#96;     &#x2F;&#x2F; Error 1064: You have an error in your SQL syntax; </span><br><span class="line">    Id      int64  &#96;json:&quot;id&quot; gorm:&quot;column:id;type:bigint(20) AUTO_INCREMENT;primaryKey&quot;&#96;    &#x2F;&#x2F; 主键自增 成功</span><br><span class="line"></span><br><span class="line">    Id      int64  &#96;json:&quot;id&quot; gorm:&quot;column:id;primaryKey;type:bigint(20) autoIncrement;&quot;&#96;    &#x2F;&#x2F; Error 1064: You have an error in your SQL syntax;</span><br><span class="line">    Id      int64  &#96;json:&quot;id&quot; gorm:&quot;column:id;primaryKey;type:bigint(20) auto_increment;&quot;&#96;   &#x2F;&#x2F; 主键自增 成功</span><br><span class="line">    Id      int64  &#96;json:&quot;id&quot; gorm:&quot;column:id;type:bigint(20) auto_increment;primaryKey&quot;&#96;    &#x2F;&#x2F; 主键自增 成功</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>个中滋味，大家还是自己体会吧！！！</p>
<p>至于怎么用，那就总结一下：</p>
<p>如果你不需要指定类型，则：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Id      int64  &#96;json:&quot;id&quot; gorm:&quot;column:id;primaryKey;AUTO_INCREMENT&quot;&#96;</span><br></pre></td></tr></table></figure>

<p>如果你想要指定类型，则：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Id           int64  &#96;json:&quot;id&quot; gorm:&quot;column:id;type:bigint(20) auto_increment;primaryKey&quot;&#96;</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="comment说明"><a href="#comment说明" class="headerlink" title="comment说明"></a>comment说明</h4><p>在 <code>gorm v1</code> 中，为字段添加说明信息时，需要用 <code>引号包裹</code> 内容： <code>comment:&#39;创建时间&#39;</code> ；而升级到 <code>gorm v2</code> 后，不需要 <code>引号</code> 了：<code>comment:创建时间</code> 。</p>
<p>看如下的对比：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; gorm v1</span><br><span class="line">CreateTime  int64  &#96;json:&quot;create_time&quot; gorm:&quot;column:create_time;comment:&#39;创建时间&#39;&quot;&#96;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; gorm v2</span><br><span class="line">CreateTime  int64  &#96;json:&quot;create_time&quot; gorm:&quot;column:create_time;comment:创建时间&quot;&#96;</span><br></pre></td></tr></table></figure>

<hr>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
        <tag>Gorm</tag>
      </tags>
  </entry>
  <entry>
    <title>Telegram开发 - Google Voice 保号</title>
    <url>/2021/05/20/develop-with-telegram-for-google-voice-keep-alive/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，您输入的密码错误，请检查后重新输入。" data-whm="抱歉, 当前文章不能被校验, 不过您还是可以看看解密后的内容。">
  <script id="hbeData" type="hbeData" data-hmacdigest="7bdc9ee48f321a5a4963b2124ba40e19fd75d42a8cfa33939cb28ec8635c0d81">d636f693ee2a15a11c80bfecb03e7c947b194440812489d561b3ab07c6987524</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">当前文章暂不对外可见，请输入密码后查看！</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Telegram开发</category>
      </categories>
      <tags>
        <tag>付费阅读</tag>
        <tag>Telegram</tag>
      </tags>
  </entry>
  <entry>
    <title>Telegram开发 - Telegram 入门</title>
    <url>/2021/05/16/develop-with-telegram-for-start/</url>
    <content><![CDATA[<p>既然 <code>Google Voice</code> 账号已经准备好了，接下来就开始注册 Telegram。</p>
<hr>
<h4 id="坎坷的开始"><a href="#坎坷的开始" class="headerlink" title="坎坷的开始"></a>坎坷的开始</h4><p>经过我的一番验证后发现，<code>telegram</code> 的 <code>初次注册</code> <strong>必须要</strong> 通过手机来进行操作才可以。</p>
<p>虽然官网上有 <code>Windows</code> 和 <code>MacOS</code> 的客户端，还有 <code>网页端</code>，但是你在这些设备上注册时，会提示你验证码已发送到你的移动设备上。</p>
<p>一开始想着用电脑的话操作上更快一些，所以就没有用手机来注册。不过在经历了 <code>网页端</code> 和 <code>MacOS端</code> 的 <code>注册绊脚石</code> 之后，才深切体会到了这一点。</p>
<hr>
<h4 id="接收验证码"><a href="#接收验证码" class="headerlink" title="接收验证码"></a>接收验证码</h4><p>在 <code>chrome</code> 浏览器中打开 <code>google voice</code> 主页面，准备接收验证码。</p>
<p>在手机端的 <code>telegram</code> 输入上面的 <code>google voice</code> 账号。注意区号要改为 <code>+1</code>。点击 <code>next</code> 等待发送验证码。</p>
<p>但是，我却发现我的 <code>google voice</code> 页面中一直收不到相应的短信验证码。</p>
<p>然后发现手机端的 <code>telegram</code> 会在3分钟之后未输入验证码的情况下发送语音验证码。</p>
<p>但是，我在接收到语音验证码时，因为手误操作失败了，能够听到对方的声音，但我却没法分辨出来英文中的验证码是什么，只听到对方说的让我 <code>按1</code> 或者 <code>按2</code>，最后收到了如下的错误提示：</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20210613140838.png" alt="20210613140838"></p>
<p>当我想再次申请发送验证码时，<code>telegram</code> App上只提示我 <code>telegram dialed your number</code> ，却找不到如何来重新发送验证码。</p>
<hr>
<h4 id="如何解决"><a href="#如何解决" class="headerlink" title="如何解决"></a>如何解决</h4><p>此时似乎陷入了一个僵局的状态：</p>
<ol>
<li>除了手机端，我无法通过其他客户端来进行第一次的注册激活。</li>
<li>手机端上因为已经给我发送过验证码，但是我既没有接收到短信，又错过了接收语音。而现在却找不到如何重新发送验证码。</li>
</ol>
<p>最后，抱着尝试的心态，我把手机上的 <code>telegram App</code> 卸载了，然后重新安装。此时发现我又能重新进入到发送验证码的流程了。</p>
<hr>
<h4 id="再次无语"><a href="#再次无语" class="headerlink" title="再次无语"></a>再次无语</h4><p>不过让人无语的是，我的 <code>google voice</code> 中又没有接收到相应的短信验证码。</p>
<p>因为这次我换了 <code>edge</code> 浏览器来打开 <code>google voice</code> 的页面，却发现接听到的语音电话听不到对方的声音，最后又完美的错过了接听。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20210613141158.png" alt="20210613141158"></p>
<p>不得已，我又换回了 <code>chrome</code> 浏览器。</p>
<hr>
<h4 id="出现转机"><a href="#出现转机" class="headerlink" title="出现转机"></a>出现转机</h4><p>当再次在 <code>chrome</code> 浏览器中打开 <code>Voice</code> 网站时，我发现在 <code>google voice</code> 页面的上部有一个感叹号的提示，信息如下：</p>
<blockquote>
<p>您的浏览器可能阻止了来电响铃。请更改浏览器设置，以允许 voice.google.com 响铃。</p>
</blockquote>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20210613141514.png" alt="20210613141514"></p>
<p>本来在第一次的时候我就发现了这个提示，不过当时没有太在意，觉得只是响铃而已，没什么关系的。但现在我感觉 <strong>两次都接收不到验证码可能跟这个警告有关系</strong>。</p>
<p>然后看了后面的 <code>了解详情</code> ，在 <code>chrome</code> 浏览器的新标签页中输入 <code>chrome://settings/content/sound</code> ，</p>
<p>在打开的 <code>声音</code> 设置页中，将 <code>允许网站播放声音(推荐)</code> 设为启用，当然，这一项默认就是启用状态。</p>
<p>然后在下面的 <code>允许</code> 区域右侧点击 <code>添加</code> ，将 <code>voice.google.com</code> 添加到下面。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20210613141705.png" alt="20210613141705"></p>
<p>再次回到 <code>google voice</code> 页面中，刷新页面，发现顶部的警告已经没有了。</p>
<p>我再次尝试上面的操作，卸载App，重新进行注册流程，等待发送验证码。</p>
<p>这次，发现 <code>google voice</code> 居然收到了相应短信通知，同时在浏览器的右上角也会有通知提醒出现。也会接收到邮件通知。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20210613141957.png" alt="20210613141957"></p>
<p>输入验证码，继续后续的注册流程。</p>
<hr>
<h4 id="MacOS端"><a href="#MacOS端" class="headerlink" title="MacOS端"></a>MacOS端</h4><p><code>telegram</code> 的 MacOS端要登录也必须使用代理才可以，但在设置代理时可能会出现一些问题。</p>
<p>打开MacOS上的 <code>telegram</code> 后，在主页面选择右上角的 <code>代理设置</code> 来新增 <code>socket</code> 代理。</p>
<p>不过可能会出现添加代理后，一直处于 <code>转圈</code> 的状态，显示 <code>socks5:connecting...</code> 的信息。等待或者重新设置也一直是这个样子。</p>
<p>最终，在经过多次尝试后我总算找到其中的 <code>窍门</code>:</p>
<ol>
<li>点击 <code>添加代理</code> ，输入 <code>SOCKS5</code> 的 <code>Server</code> 和 <code>Port</code> 后，直接点击右上角的 <code>Done</code> 。</li>
<li>此时，界面中应该是会显示之前遇到的 <code>转圈</code> 的状态</li>
<li>那么，不用去管它。直接退出 <code>telegram</code> 程序</li>
<li>再次打开 <code>telegram</code> ，你会发现 <code>代理设置</code> 中的代理此时已经显示 <code>connected</code> 了。</li>
</ol>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20210613142253.png" alt="20210613142253"></p>
<p>Ok，就是这么莫名其妙！！！</p>
<hr>
<h4 id="设置中文"><a href="#设置中文" class="headerlink" title="设置中文"></a>设置中文</h4><p>默认情况下，Telegram设置中的可选语言中并不包含中文的选项。但我们可以通过插件的方式来安装。</p>
<p>直接复制下面的链接，发送到聊天窗口中，然后点击该链接安装即可。</p>
<p>中文语言包:</p>
<ul>
<li>简体中文：<code>tg://setlanguage?lang=zh-hans-raw</code></li>
<li>繁体中文：<code>tg://setlanguage?lang=zh-hant-raw</code></li>
</ul>
<p>该中文语言包支持各个客户端。</p>
<hr>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>最后，还是要总结一下上面的经验：</p>
<ol>
<li>在 <code>google voice</code> 的操作过程中，一定要启用 <code>全局代理</code>，更保险一些</li>
<li>手机端的 <code>telegram</code> 注册时，也要 <code>启用代理</code>，因为 <code>你懂得</code> 的原因</li>
<li><code>google voice</code> 的操作一定要使用 <code>chrome</code> 浏览器来操作，不过使用 <code>edge</code> 浏览器也可以，我后来感觉应该是某些设置没有打开之前才会听不到语音</li>
</ol>
<hr>
]]></content>
      <categories>
        <category>Telegram开发</category>
      </categories>
      <tags>
        <tag>Telegram</tag>
      </tags>
  </entry>
  <entry>
    <title>Telegram开发 - Google Voice 账号转移</title>
    <url>/2021/05/12/develop-with-telegram-for-google-voice-account-transfer/</url>
    <content><![CDATA[<p>从开发的角度来说，Telegram是一个可玩性很高的App，主要是可以通过其内置的机器人开发一些不错的工具。而从社交App的角度而言，其又是一个私密性很高的通讯软件。</p>
<p>额。。。说的都是废话。。。</p>
<hr>
<h4 id="下载telgram"><a href="#下载telgram" class="headerlink" title="下载telgram"></a>下载telgram</h4><p>在国内的App Store下，可以直接下载 <code>telegram</code> App。也可以直接通过国内的 <code>+86</code> 手机号注册。</p>
<p>我是在网上看了相关的讨论，因为 <code>telegram</code> 必须用手机号来注册，但国内的手机号都是实名制的，可能会出现一些问题。所以，最后决定选择大多说人推荐的采用 <code>google voice</code> 账号来注册。</p>
<h4 id="购买账号"><a href="#购买账号" class="headerlink" title="购买账号"></a>购买账号</h4><p>如果自己去注册 <code>Google Voice</code> 账号的话，除了需要有 <code>科学上网</code> 的前提，还需要提供一个真实的美国的家庭地址和可用的电话号码。当然，这个信息可以直接从网上去搜索相关信息来用。</p>
<p>不过，为了方便，我们可以直接在淘宝上去购买可用的账号，一般的话，10块钱左右就能搞定。</p>
<p>毕竟有时候，能用钱解决的问题，都是小事儿。</p>
<hr>
<h4 id="处理账号"><a href="#处理账号" class="headerlink" title="处理账号"></a>处理账号</h4><p>淘宝买家会提供给我们一个可用的google账号，附带可用的 <code>google voice</code> 账号。</p>
<p>我们首先要做的就是 <code>修改密码</code> 。</p>
<p>这里，一般有两种处理方式：</p>
<p>第一种，我们可以保留该 <code>google</code> 账号。这种就相当于我们购买了一个 <code>google voice</code> 账号，又白得了一个 <code>google</code> 账号。那我们可以修改密码和验证邮箱后自己使用。</p>
<p>如果你选择这种方式的话，恭喜你，后面的内容就不需要看了，可以直接晋级下一关。</p>
<p>不过这种方式不好的一点是：一般这种 <code>google</code> 账号都是随便乱码注册的，账号名杂乱无序不好记忆，我们每次使用的时候要么你需要拷贝过来使用，要么就需要花费一些时间来记忆一下。体验上不太好。</p>
<p>第二种方式，则是将 <code>google voice</code> 账号迁移到自己的 <code>google</code> 账号下。一般情况下都会有自己的 <code>google</code> 账号，而我们只需要将购买到的 <code>voice</code> 账号转移到自己的 <code>google</code> 账号下，就可以了。</p>
<p>这里，我选择的是第二种。</p>
<p>在将该账号迁移到自己的名下之前，需要做一些准备工作：</p>
<ol>
<li>保证启用 <code>全局代理</code></li>
<li>清空浏览器缓存</li>
</ol>
<p>启用全局代理，是为了防止在账号转移过程中，<code>google voice</code> 会检测当前所处ip地址是否为美国地区。</p>
<p>我们可以访问 <a href="https://whoer.net" target="_blank" rel="noopener">WHOER</a> 查看一下自己的ip信息。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20210613125420.png" alt="20210613125420"></p>
<p>将页面向下拉，可以查看具体的位置信息，已验证代理是否真实。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20210613125532.png" alt="20210613125532"></p>
<hr>
<h4 id="转移流程"><a href="#转移流程" class="headerlink" title="转移流程"></a>转移流程</h4><h5 id="开始转移"><a href="#开始转移" class="headerlink" title="开始转移"></a>开始转移</h5><p>打开 <code>Google Voice</code> 官网 <a href="https://voice.google.com" target="_blank" rel="noopener">Voice</a>，登录购买到的 <code>Google Voice</code> 账号。</p>
<p>点击右上角 <code>设置</code> ，</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20210613132454.png" alt="20210613132454"></p>
<p>点击 <code>Account</code> 部分的 <code>Transfer</code> 按钮。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20210613132515.png" alt="20210613132515"></p>
<p>在打开的新页面中，再次点击 <code>Transfer</code> ，</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20210613132609.png" alt="20210613132609"></p>
<p>显示一个弹窗：</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20210613132809.png" alt="20210613132809"></p>
<p>点击下面的 <code>Sign-in to another account.</code> ，登录自己的google账号，此时，点击右上角头像可以看到当前已经登录成功的两个账号。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20210613132843.png" alt="20210613132843"></p>
<hr>
<h5 id="登录个人账号"><a href="#登录个人账号" class="headerlink" title="登录个人账号"></a>登录个人账号</h5><p>刷新一下当前页面，再次点击 <code>Transfer</code> </p>
<p>会看到自己的google账号现在是显示为灰色的不可点击状态。</p>
<p>显示灰色说明当前这个账号没有开通 <code>voice</code> 服务，我们先要去开通一下。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20210613133123.png" alt="20210613133123"></p>
<hr>
<h5 id="开通voice服务"><a href="#开通voice服务" class="headerlink" title="开通voice服务"></a>开通voice服务</h5><p>点击 <code>Cancel</code> 按钮取消弹窗。</p>
<p>点击右上角头像切换到自己的 <code>google</code> 账号下，然后在新打开的页面窗口中点击右上角的 <code>Sign In</code> 。</p>
<p>之后会显示 <code>欢迎使用 Google Voice</code> 的提示信息，</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20210613133856.png" alt="20210613133856"></p>
<p>点击继续，会提示 <code>选择一个 Google Voice 号码</code> 的信息。不用去管它。显示出该信息就表示我们成功开通了 voice服务。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20210613133929.png" alt="20210613133929"></p>
<p>关掉当前窗口，回到上一个页面。</p>
<hr>
<h5 id="转移"><a href="#转移" class="headerlink" title="转移"></a>转移</h5><p>刷新一下当前页面，再次点击 <code>Transfer</code></p>
<p>此时会看到自己的 google 账号显示为可勾选状态，勾选后点击 <code>Transer</code> 按钮。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20210613134202.png" alt="20210613134202"></p>
<p>当看到如下页面的提示信息后，说明账号转移成功了。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20210613134214.png" alt="20210613134214"></p>
<p>此时刷新页面后，可以看到购买的 <code>google</code> 账号下已经没有这个 <code>voice</code> 号码了。切换到自己的 <code>google</code> 账号下，已经可以看到 <code>voice</code> 号码了。</p>
<hr>
<p>至此，<code>Google Vocie</code> 账号转移成功。</p>
<hr>
]]></content>
      <categories>
        <category>Telegram开发</category>
      </categories>
      <tags>
        <tag>Telegram</tag>
      </tags>
  </entry>
  <entry>
    <title>Dart中判断字符串是否为空</title>
    <url>/2021/05/11/whether-string-is-null-or-empty-in-dart/</url>
    <content><![CDATA[<h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>在 Dart 中判断字符串是否为空，我们可以通过 <code>isEmpty</code> 或 <code>isNotEmpty</code> 来处理。</p>
<p>但是，在Dart中 <code>String</code> 默认值为 <code>null</code>:</p>
<p>dart version &lt; 2.12:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void main()&#123;</span><br><span class="line">  String a;</span><br><span class="line">  print(a); &#x2F;&#x2F; null</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>dart version &gt;= 2.12:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void main()&#123;</span><br><span class="line">  String? ss;</span><br><span class="line">  print(ss); &#x2F;&#x2F; null</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个时候如果通过 <code>isEmpty</code> 去判断该字符串是否为空时，可能会遇到下面的报错：</p>
<blockquote>
<p>The getter ‘isEmpty’ was called on null</p>
</blockquote>
<p>相应的解决方法就是通过使用 <code>?</code> 和 <code>!</code> 来处理：</p>
<blockquote>
<p>if <code>message</code> returns <code>null</code>. You might want:</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if(message?.isEmpty ?? true)</span><br></pre></td></tr></table></figure>

<p>不过有时候就会感觉这样处理起来就会很繁琐。</p>
<p>像在 <code>C#</code> 中对于字符串的处理，就有 <code>isNullOrEmpty</code> 的方法来判断字符串是否为 <code>null</code> 或 <code>空字符串</code> ，然而在 <code>Dart</code> 中却没有提供类似于 <code>isNullOrEmpty</code> 的方法，flutter issues 中相关的讨论表示也不会提供：</p>
<ul>
<li><a href="https://github.com/dart-lang/sdk/issues/11155" target="_blank" rel="noopener">Can we implement String.IsNullOrEmpty and String.IsNullOrWhiteSpace as part of the core libraries · Issue #11155 · dart-lang/sdk</a></li>
</ul>
<hr>
<h4 id="如何解决"><a href="#如何解决" class="headerlink" title="如何解决"></a>如何解决</h4><p>既然官方没有提供，那我们可以自己来实现相应的处理方法来解决。</p>
<h4 id="帮助类或扩展方法"><a href="#帮助类或扩展方法" class="headerlink" title="帮助类或扩展方法"></a>帮助类或扩展方法</h4><p>我们可以通过帮助类或者扩展方法来实现。</p>
<p>帮助类不必多说。对于扩展方法，可以参考如下的示例：</p>
<p>扩展：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">extension NumberParsing on String &#123;</span><br><span class="line">  int parseInt() &#123;</span><br><span class="line">    return int.parse(this);</span><br><span class="line">  &#125;</span><br><span class="line">  &#x2F;&#x2F; ···</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#39;string_apis.dart&#39;;</span><br><span class="line">&#x2F;&#x2F; ···</span><br><span class="line">print(&#39;42&#39;.parseInt()); &#x2F;&#x2F; Use an extension method.</span><br></pre></td></tr></table></figure>

<p>完整的实现代码如下：</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="built_in">String</span>? ss;</span><br><span class="line">  <span class="built_in">print</span>(ss);</span><br><span class="line"></span><br><span class="line"><span class="comment">//   ss = " ";</span></span><br><span class="line"><span class="comment">//   ss="hello";</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">print</span>(ss);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">'isNullOrEmpty: <span class="subst">$&#123;ss.isNullOrEmpty()&#125;</span>'</span>);</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">'isNotNullAndEmpty: <span class="subst">$&#123;ss.isNotNullAndEmpty()&#125;</span>'</span>);</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">'getStrValue: <span class="subst">$&#123;ss.getStrValue(val: <span class="string">"x"</span>)&#125;</span>'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">'-------'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">'StrUtils.isNullOrEmpty: <span class="subst">$&#123;StrUtils.isNullOrEmpty(ss)&#125;</span>'</span>);</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">'StrUtils.isNotNullAndEmpty: <span class="subst">$&#123;StrUtils.isNotNullAndEmpty(ss)&#125;</span>'</span>);</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">'StrUtils.getStrValue: <span class="subst">$&#123;StrUtils.getStrValue(ss)&#125;</span>'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// use Extension</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extension</span> StringExtensions <span class="keyword">on</span> <span class="built_in">String</span>? &#123;</span><br><span class="line">  <span class="comment">/// <span class="markdown">string is null or empty</span></span></span><br><span class="line">  <span class="built_in">bool</span> isNullOrEmpty() =&gt; <span class="keyword">this</span> == <span class="keyword">null</span> || <span class="keyword">this</span>!.trim().isEmpty;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// <span class="markdown">string not null and empty</span></span></span><br><span class="line">  <span class="built_in">bool</span> isNotNullAndEmpty() =&gt; <span class="keyword">this</span> != <span class="keyword">null</span> &amp;&amp; <span class="keyword">this</span>!.trim().isNotEmpty;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// <span class="markdown">if string is null or empty ,return default value</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//   String getNullOrEmptyVal(&#123;String val = ""&#125;) &#123;</span></span><br><span class="line"><span class="comment">//     if(this.isNullOrEmpty())&#123;</span></span><br><span class="line"><span class="comment">//       return val;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">//     return this!;</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">String</span> getStrValue(&#123;<span class="built_in">String</span> val = <span class="string">""</span>&#125;) =&gt; <span class="keyword">this</span>.isNullOrEmpty() ? val : <span class="keyword">this</span>!;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// use Function</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StrUtils</span> </span>&#123;</span><br><span class="line">  StrUtils._();</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// <span class="markdown">string is null or empty</span></span></span><br><span class="line">  <span class="keyword">static</span> <span class="built_in">bool</span> isNullOrEmpty(<span class="built_in">String</span>? s) =&gt; s == <span class="keyword">null</span> || s.trim().isEmpty;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// <span class="markdown">string not null and empty</span></span></span><br><span class="line">  <span class="keyword">static</span> <span class="built_in">bool</span> isNotNullAndEmpty(<span class="built_in">String</span>? s) =&gt; s != <span class="keyword">null</span> &amp;&amp; s.trim().isNotEmpty;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// <span class="markdown">if string is null or empty ,return default value</span></span></span><br><span class="line">  <span class="keyword">static</span> <span class="built_in">String</span> getStrValue(<span class="built_in">String</span>? s, &#123;<span class="built_in">String</span> val = <span class="string">""</span>&#125;) =&gt;</span><br><span class="line">      isNullOrEmpty(s) ? val : s!;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以在 DartPad 中查看运行结果：<a href="https://dartpad.dev/f2bfd6d5d1c8c190597c35c759c21361?null_safety=true" target="_blank" rel="noopener">Dart String add isNullOrEmpty</a></p>
<p>附：<a href="https://dart.dev/guides/language/extension-methods" target="_blank" rel="noopener">Extension methods | Dart</a></p>
<hr>
<h4 id="第三方插件"><a href="#第三方插件" class="headerlink" title="第三方插件"></a>第三方插件</h4><p>当然，除了自己实现，也可以使用 <code>quiver</code> 插件来解决。</p>
<p>具体可查看：<a href="https://pub.dev/packages/quiver" target="_blank" rel="noopener">quiver - pub.dev</a></p>
<p>相应的源码：<a href="https://github.com/google/quiver-dart/blob/master/lib/strings.dart" target="_blank" rel="noopener">quiver-dart/strings.dart at master · google/quiver-dart</a></p>
<hr>
]]></content>
      <categories>
        <category>Flutter之旅</category>
      </categories>
      <tags>
        <tag>Flutter</tag>
      </tags>
  </entry>
  <entry>
    <title>Flutter2报错 Bad state: Insecure HTTP is not allowed by platform</title>
    <url>/2021/05/10/flutter2-insecure-http-is-not-allowed-by-platform/</url>
    <content><![CDATA[<h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>在将Flutter项目升级到 <code>Flutter 2</code> 之后：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">environment:</span><br><span class="line">  sdk: &quot;&gt;&#x3D;2.12.0 &lt;3.0.0&quot;</span><br></pre></td></tr></table></figure>

<p>发现在使用 <code>dio</code> 发起请求时遇到了App崩溃的问题。</p>
<p>调试发现请求发出后会一直卡住，没有发出请求，也没有报错信息提示（在 <code>VS Code</code> 中）。</p>
<p>后来我用 <code>AS</code> 重新创建了一个空项目只添加 <code>dio</code> 用来测试请求。发现 <code>https</code> 链接的请求正常，访问本地的 <code>http</code> 链接会报错。错误信息如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Reloaded 0 libraries in 47ms.</span><br><span class="line">[VERBOSE-2:ui_dart_state.cc(186)] Unhandled Exception: DioError [DioErrorType.other]: Bad state: Insecure HTTP is not allowed by platform: http:&#x2F;&#x2F;172.21.40.40:9999&#x2F;version</span><br><span class="line">#0      _HttpClient._openUrl (dart:_http&#x2F;http_impl.dart:2434:7)</span><br><span class="line">#1      _HttpClient.openUrl (dart:_http&#x2F;http_impl.dart:2341:7)</span><br><span class="line">#2      De</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="如何解决"><a href="#如何解决" class="headerlink" title="如何解决"></a>如何解决</h4><p>后来，在Flutter网站中搜索到相关的文档，给出了如下的解决方法。</p>
<p><a href="https://flutter.dev/docs/release/breaking-changes/network-policy-ios-android#allowing-cleartext-connection-for-debug-builds" target="_blank" rel="noopener">Insecure HTTP connections are disabled by default on iOS and Android - Flutter</a></p>
<h5 id="Android端"><a href="#Android端" class="headerlink" title="Android端"></a>Android端</h5><p>修改Flutter项目中 <code>android/app/src/mian/AdnroidManifest.xml</code> 文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;uses-permission android:name&#x3D;&quot;android.permission.INTERNET&quot; &#x2F;&gt;</span><br><span class="line">&lt;application</span><br><span class="line">        android:name&#x3D;&quot;io.flutter.app.FlutterApplication&quot;</span><br><span class="line">        android:label&#x3D;&quot;receipt&quot;</span><br><span class="line">        android:usesCleartextTraffic&#x3D;&quot;true&quot;</span><br><span class="line">        android:icon&#x3D;&quot;@mipmap&#x2F;ic_launcher&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>即在上面的 <code>&lt;application&gt;</code> 中添加 <code>android:usesCleartextTraffic=&quot;true&quot;</code> 一行。</p>
<h5 id="IOS端"><a href="#IOS端" class="headerlink" title="IOS端"></a>IOS端</h5><p>在文件 <code>ios/Runner/info.plist</code> 中添加以下键值对：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;key&gt;NSAppTransportSecurity&lt;&#x2F;key&gt;</span><br><span class="line">   &lt;dict&gt;</span><br><span class="line">       &lt;key&gt;NSAllowsArbitraryLoads&lt;&#x2F;key&gt;</span><br><span class="line">       &lt;true&#x2F;&gt;</span><br><span class="line">   &lt;&#x2F;dict&gt;</span><br></pre></td></tr></table></figure>

<p>重新运行项目后，测试能够正常访问本地的 <code>http</code> 链接了。</p>
<hr>
]]></content>
      <categories>
        <category>Flutter之旅</category>
      </categories>
      <tags>
        <tag>Flutter</tag>
      </tags>
  </entry>
  <entry>
    <title>如何将电脑上的音乐导入iPhone</title>
    <url>/2021/05/09/import-music-from-pc-to-iphone/</url>
    <content><![CDATA[<p>平时在手机上听歌一般都会选择 <code>某Q</code> 或者 <code>某易</code> 来听，但奈何最近几年音乐的版权意识越来越严重，好多想听的歌曲在这个App上有，而在另一个App上却没有，不得不两个App换着听；或者只能妥协的去听非原唱的歌曲。</p>
<p>有时候你还会遇到，之前一直能听的歌曲，在一段时间后却被 <code>置灰</code> 不能播放了。也是非常无奈的。</p>
<p>最终，我选择使用iPhone上的 <code>音乐</code> App来作为我的主要音乐播放软件。平时只需要播放本地的音乐文件即可。</p>
<p>一方面是简单，没有其他App上的一些社交、短视频等杂乱内容；另一方面是自己上传的音乐文件不会因为版权问题而被删除或禁用。当然，缺点也很明显，就是不能想听什么就能直接搜索播放。</p>
<hr>
<h4 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h4><p>将Mac上的音乐文件导入iPhone中，操作也很简单。只需要一条数据线即可。</p>
<p>首先，将iPhone连接到Mac上。</p>
<p>在 Mac 上打开 <code>音乐</code> App，选择菜单栏的 <code>文件</code> – <code>导入</code> </p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20210509113429.png" alt="20210509113429"></p>
<p>然后在左侧菜单中 <code>资料库</code> 找到 <code>最近添加</code> </p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20210509113538.png" alt="20210509113538"></p>
<p>找到刚刚上传的音乐文件，选择 <code>三个点</code> – <code>添加到播放列表</code> </p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20210509113748.png" alt="20210509113748"></p>
<p>在 <code>Finder</code> 的左侧菜单中找到iPhone设备，点击右侧的 <code>音乐</code> 项，</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20210509120217.png" alt="20210509120217"></p>
<p>然后在 <code>同步</code> 项中可以选择 <code>整个音乐资料库</code> 或者 <code>自定义的艺人、专辑、播放列表</code> </p>
<p>完整同步：</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20210509114145.png" alt="20210509114145"></p>
<p>单独选择：</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20210509114438.png" alt="20210509114438"></p>
<p>点击底部的 <code>同步</code> 即可将音乐文件传输到iPhone中。</p>
<p>这里，我是在 Mac 上单独设置了一个 <code>播放列表</code>，用来存放所有我需要同步到iPhone上的音乐。所以每次只需要将这个 <code>播放列表</code> 整个同步到iPhone上即可。当然，也可以按自己的喜好直接上传单个音乐文件。</p>
<hr>
<h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><p>不过，这种同步的办法，iPhone上的音乐App中现有歌曲将被同步的歌曲替换。</p>
<hr>
]]></content>
      <categories>
        <category>工具技巧</category>
      </categories>
      <tags>
        <tag>Tools</tag>
      </tags>
  </entry>
  <entry>
    <title>MacOS下禁用新版 Microsoft Edge 自动更新</title>
    <url>/2021/05/03/disable-automatic-update-for-edge-on-macos/</url>
    <content><![CDATA[<p>已经不是第一次遇到在用Edge浏览器看着看着网页然后突然间浏览器窗口自动退出，直到右上角出现 <code>Microsoft Edge 自动更新中</code> 的提示后我才知道是怎么回事。</p>
<p>但让人不爽的是：更新完之后，我之前打开的浏览器窗口和页面都不会自动恢复，并且在历史记录中也找到。</p>
<p>一般如果是浏览器崩溃的话，在历史记录的最近访问中还可以通过 <code>恢复刚刚打开的窗口</code> 来进行找回。而这种强制自动更新的退出却看不到刚刚打开的那些窗口。 </p>
<p>我也去微软Edge的官网中查找了如何禁用掉Edge的自动更新功能，但看到官网在相关问题的回复后，就更加不爽了：</p>
<blockquote>
<p>十分抱歉，目前新版本 Microsoft Edge 浏览器是不支持通过修改自身设置来达到 “禁用更新” 目的的。不过您可以放心，新版本 Microsoft Edge 的更新功能并不会对用户的正常工作造成影响，如果下载更新后浏览器处于启动状态的话，不会自动重启强制更新，而是会在浏览器的右上角弹出提示。</p>
</blockquote>
<p>特别是其中的 <strong>不会自动重启强制更新，而是会在浏览器的右上角弹出提示</strong> ，当然也确实在自动更新前会有几次升级的提示信息出现，但如果我不去鸟他的话，最后就会出现我上面遇到的 <strong>强制自动更新</strong> 的情况出现。</p>
<hr>
<p>看了网上相关的 <code>民间解决方法</code> ，觉得下面的方法倒是可以试一试：</p>
<p>找到Edge的更新程序：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜ ls &#x2F;Library&#x2F;Application\ Support&#x2F;Microsoft&#x2F;MAU2.0&#x2F;</span><br><span class="line">Microsoft AutoUpdate.app</span><br></pre></td></tr></table></figure>

<p>查看一下该文件的权限：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜ ls -al &#x2F;Library&#x2F;Application\ Support&#x2F;Microsoft&#x2F;MAU2.0&#x2F;</span><br><span class="line">total 0</span><br><span class="line">drwxr-xr-x  3 root  wheel  96  4 15 20:05 .</span><br><span class="line">drwxr-xr-x  3 root  wheel  96  4 15 20:05 ..</span><br><span class="line">drwxrwxr-x  3 root  wheel  96  4 15 20:05 Microsoft AutoUpdate.app</span><br></pre></td></tr></table></figure>

<p>可以看到当前权限是 <code>775</code>。</p>
<p>修改其权限为 <code>644</code>，使其不能执行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜ sudo chmod -R 644 &#x2F;Library&#x2F;Application\ Support&#x2F;Microsoft&#x2F;MAU2.0&#x2F;Microsoft\ AutoUpdate.app</span><br><span class="line">Password:</span><br></pre></td></tr></table></figure>

<p>后期如果想要改回来以保持Edge的最新版本的话，只需要执行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo chmod -R 775 &#x2F;Library&#x2F;Application\ Support&#x2F;Microsoft&#x2F;MAU2.0&#x2F;Microsoft\ AutoUpdate.app</span><br></pre></td></tr></table></figure>

<p>让其恢复可执行权限即可。</p>
<p>修改后在Edge的 <code>设置-- 关于</code> 中可以看到有相关的错误提示出现，不鸟他就好了：</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20210503104624.png" alt="20210503104624"></p>
<hr>
]]></content>
      <categories>
        <category>工具技巧</category>
      </categories>
      <tags>
        <tag>Tools</tag>
      </tags>
  </entry>
  <entry>
    <title>是时候升级GORM新版本了</title>
    <url>/2021/05/02/time-to-upgrade-new-version-gorm/</url>
    <content><![CDATA[<p>多个golang项目中使用的 gorm 版本一直是 <code>github.com/jinzhu/gorm v1.9.15</code>  ，最近在处理数据库操作时又去gorm的官网上看了看官方文档，却发现按照官网文档中的介绍应用后却没有生效。</p>
<p>排查一番后才发现，gorm的版本更新了，现在官网上展示的默认文档是 <code>v2.x</code> 的使用文档，而 <code>v2.x</code> 和之前的 <code>v1.x</code> 相比是 <code>完全的从零开始</code>，某些方法在用法上已经更改了。</p>
<p>这里，列举两个比较明显的改变。</p>
<h4 id="添加索引"><a href="#添加索引" class="headerlink" title="添加索引"></a>添加索引</h4><p>通过gorm为指定的字段添加索引，在字段声明中设置索引和唯一索引：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">    AId  <span class="keyword">int64</span>  <span class="string">`json:"aid" gorm:"column:aid;not null;default:0;uniqueIndex:aid;comment:'视频id'"`</span></span><br><span class="line">    Name <span class="keyword">string</span> <span class="string">`json:"name" gorm:"column:name;type:varchar(64);not null;default:'';index:name;comment:'视频名称'"`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>结果在执行时只看到了一条创建索引的命令输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[2021-04-28 10:25:58]  [52.98ms]  CREATE INDEX name ON &#96;archive_video&#96;(name)   </span><br><span class="line">[0 rows affected or returned ]</span><br></pre></td></tr></table></figure>



<p>按照gorm官方文档中的介绍，<code>uniqueIndex</code> 标签的作用与 <code>index</code> 类似，它等效于 <code>index:,unique</code> ：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name1 <span class="keyword">string</span> <span class="string">`gorm:"uniqueIndex"`</span></span><br><span class="line">    Name2 <span class="keyword">string</span> <span class="string">`gorm:"uniqueIndex:idx_name,sort:desc"`</span></span><br><span class="line">    Name3 <span class="keyword">string</span> <span class="string">`gorm:"index:idx_name,unique"`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>但在测试后发现，唯一索引 <code>gorm:&quot;uniqueIndex&quot;</code> 似乎不生效。</p>
<p>这就是其中的一个版本变化：</p>
<blockquote>
<p>在 gorm v1 中，唯一索引使用 <code>unique_index</code> 下划线形式，而在 gorm v2 中，改成了使用 <code>camelCase</code> 风格的写法。</p>
</blockquote>
<p>我使用的是 <code>v1.9.15</code> 版本，所以需要改成 <code>unique_index</code> 才行。</p>
<p>正确的 v1 风格的写法：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name1 <span class="keyword">string</span> <span class="string">`gorm:"unique_index"`</span></span><br><span class="line">    Name2 <span class="keyword">string</span> <span class="string">`gorm:"unique_index:idx_name,sort:desc"`</span></span><br><span class="line">    Name3 <span class="keyword">string</span> <span class="string">`gorm:"index:idx_name,unique"`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>正确的 v2 风格的写法：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name  <span class="keyword">string</span> <span class="string">`gorm:"index"`</span></span><br><span class="line">    Name2 <span class="keyword">string</span> <span class="string">`gorm:"index:idx_name,unique"`</span></span><br><span class="line">    Name3 <span class="keyword">string</span> <span class="string">`gorm:"uniqueIndex"`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<hr>
<h4 id="批量插入"><a href="#批量插入" class="headerlink" title="批量插入"></a>批量插入</h4><p>gorm v1 中不支持批量插入，v2 中才支持。</p>
<p><code>v2.x</code> 中直接通过 <code>db.model().create()</code> 即可插入批量数据。一种示例如下：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用事务，批量插入</span></span><br><span class="line">err = db.Transaction(<span class="function"><span class="keyword">func</span><span class="params">(tx *gorm.DB)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// create支持批量插入</span></span><br><span class="line">	<span class="keyword">var</span> users = <span class="built_in">make</span>([]model.User, <span class="number">0</span>)</span><br><span class="line">	<span class="keyword">for</span> _, p := <span class="keyword">range</span> info &#123;</span><br><span class="line">		users = <span class="built_in">append</span>(users, model.User&#123;</span><br><span class="line">			CId:      p.CId,</span><br><span class="line">			Name:     p.Name,</span><br><span class="line">			Title:    p.Title,</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 返回 nil 提交事务</span></span><br><span class="line">	<span class="keyword">return</span> tx.Model(&amp;model.User&#123;&#125;).Create(&amp;users).Error</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<p>而在 <code>v1.x</code> 中，要想实现批量插入，可以通过执行 <code>原生SQL(db.Exec)</code> 的方法来完成。</p>
<p>mysql实现批量插入的sql语句为：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`users`</span> <span class="keyword">VALUES</span> (?,?,?),(?,?,?),(?,?,?);</span><br></pre></td></tr></table></figure>

<p>所以，只需要将要插入的数据进行一下sql拼接即可。</p>
<p>一种示例如下：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// BatchSave 批量插入数据</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BatchSave</span><span class="params">(db *gorm.DB, emps []*Employee)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> buffer bytes.Buffer</span><br><span class="line">	sql := <span class="string">"insert into `employees` (`name`,`age`,`addr`) values "</span></span><br><span class="line">	<span class="keyword">if</span> _, err := buffer.WriteString(sql); err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> err</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> i, e := <span class="keyword">range</span> emps &#123;</span><br><span class="line">		<span class="keyword">if</span> i == <span class="built_in">len</span>(emps)<span class="number">-1</span> &#123;</span><br><span class="line">            <span class="comment">// 最后一项</span></span><br><span class="line">            buffer.WriteString(fmt.Sprintf(<span class="string">"('%s',%d,'%s');"</span>, e.Name, e.Age, e.Addr))</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            buffer.WriteString(fmt.Sprintf(<span class="string">"('%s',%d,'%s'),"</span>, e.Name, e.Age, e.Addr))</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> db.Exec(buffer.String()).Error</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<hr>
<h4 id="吐槽一下"><a href="#吐槽一下" class="headerlink" title="吐槽一下"></a>吐槽一下</h4><p>在 gorm <code>v2.x</code> 的升级文档中看到下面的说明：</p>
<blockquote>
<p><strong>注意</strong> GORM <code>v2.0.0</code> 发布的 git tag 是 <code>v1.20.0</code></p>
</blockquote>
<p>我当前使用的 <code>v1.x</code> 的版本是 <code>v1.9.15</code> 。不过看到官方的代码仓库中却找不到这个tag，能看到的只有如下的 <code>v1.9.19</code> ：</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20210502170029.png" alt="20210502170029"></p>
<p>而我想要下载这个最高的版本 <code>v1.9.19</code> ，却发现 <code>go get github.com/jinzhu/gorm@v1.9.19</code>  是找不到的。</p>
<p>一般来说按照惯例，大版本的变化应该定义为 <code>v2.x.x</code> 的tag才比较合适。</p>
<p>不得不说，gorm这个版本定义的还真让人迷糊啊。</p>
<p>另外一个槽点就是文档，我这代码要不报错，光看文档我还真不清楚文档和使用的版本是不一致的。</p>
<hr>
<h4 id="相关文档"><a href="#相关文档" class="headerlink" title="相关文档"></a>相关文档</h4><ul>
<li><a href="http://v1.gorm.io/zh_CN/docs/" target="_blank" rel="noopener">GORM v1  指南 | GORM - The fantastic ORM library for Golang, aims to be developer friendly.</a></li>
<li><a href="https://gorm.io/zh_CN/docs/v2_release_note.html" target="_blank" rel="noopener">GORM 2.0 发布说明 | GORM - The fantastic ORM library for Golang, aims to be developer friendly.</a></li>
</ul>
<hr>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
        <tag>Gorm</tag>
      </tags>
  </entry>
  <entry>
    <title>Gitee开始对代码审查了？</title>
    <url>/2021/05/02/gitee-code-review/</url>
    <content><![CDATA[<p>今天在整理博客文章时，发现某些文章中的图片不显示了：</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20210502130611.png" alt="20210502130611"></p>
<p>将图片链接在浏览器中打开，竟然只提示了一段文字：</p>
<blockquote>
<p>根据相关法律政策,该内容无法显示</p>
</blockquote>
<p>打开 Gitee 中的仓库，发现该图片也不能预览了:</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20210502131924.png" alt="20210502131924"></p>
<hr>
<h4 id="探究"><a href="#探究" class="headerlink" title="探究"></a>探究</h4><p>我在网上搜索了一下，发现这个问题是最近才出现的，而且遇到这个问题的人还不少：</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20210502131518.png" alt="20210502131518"></p>
<p>记得之前因为 Github <code>被Q</code> 的原因，好多开源项目都选择了国内的 <code>Gitee</code> 作为国内代码仓库来同步管理，然而现在我却看到好多的项目已经开始在考虑 <code>迁移</code> 了：</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20210502131837.png" alt="20210502131837"></p>
<hr>
<h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>看了相关的讨论，似乎 <code>Gitee</code> 有一个 <code>屏蔽词</code> 的字库，只要遇到相关的关键词文件就会被屏蔽掉。让人生气的是它并不会告诉你是什么词不合理，只会返回给你一句 <code>根据相关法律政策,该内容无法显示</code> 。</p>
<p>如果知道是什么词的话，我们改一下重新上传就好了。但现在这明显就是个 <code>黑盒</code> ，让人根本摸不着头脑的那种。</p>
<p>对于图片也是。我的文章中被屏蔽的那个图片是我在网上找到的一个 <code>表情包</code> 的图片，这也不能用了？？？</p>
<hr>
<h4 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h4><p>我的博客中的图片是在年初的时候从七牛云迁移到Gitee的，现在看来又要考虑选择其他的图床了。</p>
<p>当时还写了一个工具来实现快速替换：<a href="https://github.com/leafney/md-qiniu-imges-replace" target="_blank" rel="noopener">leafney/md-qiniu-imges-replace: markdown文件中七牛云图片链接替换</a></p>
<p>使用的Gitee的代码项目也需要考虑迁移到其他平台了，现在来看还是Github要更保险一些。</p>
<p>下一步，需要去考察一下其他的图床平台。</p>
<hr>
<p>未完待续…</p>
]]></content>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>App Store中评论的昵称如何修改</title>
    <url>/2021/05/02/change-nickname-for-appstore/</url>
    <content><![CDATA[<p>使用iPhone时遇到好用的App，或者是遇到喜欢的App中某些功能有bug或是好的想法想要反馈给开发者，最简单的方法就是前往App Store给应用进行评论。</p>
<p>当然，作为App开发者，平时我们也是经常会在App Store后台中查看用户的反馈信息来做出下一步的开发计划和评论反馈。</p>
<p>有时候在评论发表完之后再回看时，发现自己发表评论后显示的昵称和自己的AppleID昵称不一致，或者想要进行修改，但是却找不到修改的入口？</p>
<hr>
<p>在App Store中首次评论应用时，需要设置一个昵称。不过大部分用户已经完全忘记了当时自己是如何设置的，或者是随手就乱填了一个名字。</p>
<p>就像我在首次使用评论功能时，我把要评论的内容设置成了昵称。</p>
<p>我的评论：<br><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20210502112009.jpg" alt="20210502112009"></p>
<p>我使用的昵称：<br><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20210502112023.png" alt="20210502112023"></p>
<hr>
<p>其实这个昵称修改非常简单：</p>
<ol>
<li>在 Mac 上打开 <code>App Store</code></li>
<li>使用AppleID登录</li>
<li>点击左下角 <code>账户名称</code>，在右侧页面中点击 <code>查看信息</code></li>
<li>在弹出的 <code>账户信息</code> 页面中下拉，找到 <code>管理</code> 一栏</li>
<li>选择 <code>更改昵称</code>，更改昵称后 <code>提交</code> 即可</li>
</ol>
<hr>
]]></content>
      <categories>
        <category>工具技巧</category>
      </categories>
      <tags>
        <tag>IOS</tag>
      </tags>
  </entry>
  <entry>
    <title>树莓派设置Samba文件共享</title>
    <url>/2021/05/02/raspberry-pi-setup-samba/</url>
    <content><![CDATA[<p>在树莓派上编辑文件时，如果是单个的文本文件，可以直接通过 <code>vim</code> 来编辑操作。如果是多个文件，就需要使用 <code>sftp</code> 相关的软件来实现文件上传了。</p>
<p>其实还有一种更简单的方法，那就是通过 Samba服务实现文件共享。</p>
<hr>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>执行如下命令来安装 Samba 服务：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line">sudo apt-get install samba samba-common-bin</span><br></pre></td></tr></table></figure>


<hr>
<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>编辑Samba配置文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo vim &#x2F;etc&#x2F;samba&#x2F;smb.conf</span><br></pre></td></tr></table></figure>

<p>在配置文件底部添加如下配置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[raspi_share]</span><br><span class="line">comment &#x3D; raspi files dir</span><br><span class="line">path &#x3D; &#x2F;home&#x2F;pi&#x2F;samba</span><br><span class="line">valid users &#x3D; pi</span><br><span class="line">browseable &#x3D; yes</span><br><span class="line">public &#x3D; yes</span><br><span class="line">read only &#x3D; no</span><br><span class="line">writeable &#x3D; yes</span><br><span class="line">create mask &#x3D; 0777</span><br><span class="line">directory mask &#x3D; 0777</span><br></pre></td></tr></table></figure>

<h5 id="配置参数"><a href="#配置参数" class="headerlink" title="配置参数"></a>配置参数</h5><p><code>[raspi_share]</code> 表示这是一组共享设置。在 <code>Samba</code> 中通过中括号 <code>[xxx]</code> 的形式来标识区分。</p>
<p><code>comment = &quot;xxxx&quot;</code> 表示对该共享的描述信息。 </p>
<p>上面配置中，我们通过 <code>path</code> 指定了一个待共享的目录路径 <code>/home/pi/samba</code> 。默认情况下，不设置 <code>path</code> 的话，就是当前账户的 <code>家目录</code> 。</p>
<p><code>valid users = pi</code> 表示允许访问该共享的用户，如果是多个用户可以通过逗号 <code>,</code> 来分隔；也可以通过 <code>@+组名</code> 的方式来设置可访问的群组。</p>
<p><code>browseable = yes/no</code> 表示该共享是否可以浏览。</p>
<p><code>public = yes/no</code> 表示该共享是否允许 <code>guest</code> 账户访问。</p>
<p><code>read only = yes/no</code> 表示是否可读写。</p>
<p><code>writable = yes/no</code> 表示是否可写。</p>
<p><code>create mask = 0777</code> 表示客户端上传文件的默认权限</p>
<p><code>directory mask = 0777</code> 表示客户端创建目录的默认权限</p>
<hr>
<h4 id="设置账户"><a href="#设置账户" class="headerlink" title="设置账户"></a>设置账户</h4><p>在使用之前需要为 Samba 设置一个账户。</p>
<p>这里使用当前用户 <code>pi</code> 来作为 Samba 用户，通过如下命令设置其密码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo smbpasswd -a pi</span><br></pre></td></tr></table></figure>


<h5 id="关于Samba账户"><a href="#关于Samba账户" class="headerlink" title="关于Samba账户"></a>关于Samba账户</h5><p>Samba 需要 Linux 账户才能使用，可以使用 <code>已有账户</code> 或 <code>创建新用户</code>。</p>
<p>虽然用户名可以和 Linux 系统共享，但 Samba 使用的是单独的密码管理。</p>
<p>这里我们通过smb自己的工具 <code>smbpasswd</code> 来给系统用户设置Samba密码的，客户端就用这个密码来访问Samba的资源。</p>
<hr>
<h4 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h4><p>重启服务：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo systemctl restart smbd</span><br></pre></td></tr></table></figure>

<p>之后就可以在PC上通过目录来共享访问了。</p>
<hr>
<h4 id="MacOS访问"><a href="#MacOS访问" class="headerlink" title="MacOS访问"></a>MacOS访问</h4><p>在 MacOS 上访问共享目录，只需要打开 <code>Finder</code> ，选择 <code>菜单栏</code> – <code>前往</code> – <code>连接服务器</code> ，在弹出的窗口中输入 <code>smb://192.168.1.123</code> 即树莓派的ip 后选择 <code>连接</code> – 输入设置的账户和密码后就能访问了。</p>
<hr>
<h4 id="Windows访问"><a href="#Windows访问" class="headerlink" title="Windows访问"></a>Windows访问</h4><p>在 <code>运行</code> (Win+R) 中输入 <code>\\192.168.1.123</code> 即树莓派的ip 后即可进行访问。</p>
<hr>
]]></content>
      <categories>
        <category>树莓派</category>
      </categories>
      <tags>
        <tag>RaspberryPi</tag>
      </tags>
  </entry>
  <entry>
    <title>什么! 有人模仿我的脸，还要模仿我的面 ???</title>
    <url>/2021/04/19/do-not-copy-my-blog/</url>
    <content><![CDATA[<p>之前我的博客源代码一直是放在 <code>github</code> 上采用公开的仓库来存放的。当时选择同一个仓库的不同分支来存放博客的 <code>md源文件</code> 于 <code>blog</code> 分支，编译后的 <code>hexo html文件</code> 于 <code>master</code> 分支上。</p>
<p>后来偶然间发现我的博客仓库被一些人 <code>fork</code> 了，当时也没太在意，毕竟一般我们 <code>fork</code> 别人的代码就是抱着 <code>学习</code> 的态度嘛。</p>
<p>但是当我深入的搜索了一番之后，发现好像并不是那么回事。</p>
<p>我发现某些人 <code>fork</code> 了我的博客代码后，部署到了他自己的服务器上，但是博客的内容仍然是我写的那些。</p>
<p>不仅博客的网站名称和域名变了，甚至打赏二维码也换成了自己的，然而其他的却一点都没有改。</p>
<p>没想到…</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20210419110214.gif" alt="20210419110214"></p>
<hr>
<p>可能有些人觉得写博客很容易，特别是程序员在开发过程中遇到的问题。</p>
<p>出现问题，上网一搜，问题解决，恩，不错。把他的文章 <strong>COPY</strong> 过来，ok，一篇博客就写完了。</p>
<p>但好多人都忽略了一点，<strong>为什么？</strong> 我们为什么要写博客？ </p>
<p>我觉得：</p>
<ul>
<li>为什么这种方法可以解决问题？</li>
<li>为什么这个问题会出现？</li>
<li>是否还有其他的解决方法？</li>
<li>下次遇到这个问题我要怎么避免？</li>
</ul>
<p>而这些，才是你在写文章时需要关注的。与其说写博客、写文章是对你遇到问题的记录，不如说这是对你遇到的问题的一次深入的理解，通过写博客的方式来 <strong>梳理清晰</strong> 。</p>
<hr>
<p>最终，我还是做了一个艰难的决定。。。</p>
<p>我将博客的仓库拆分成两个代码仓库来管理，并将 <code>md源代码</code> 设置为了私有仓库。</p>
<hr>
]]></content>
      <categories>
        <category>人生随感</category>
      </categories>
      <tags>
        <tag>人生感悟</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客文章加密</title>
    <url>/2021/04/16/hexo-blog-article-encryption/</url>
    <content><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>平时开发过程中遇到的一些问题，我都会整理到文档中。有些感觉不错的，会二次整理成文章发布到我的博客中。但是有些文章如果存在隐私内容，或者不打算公开的话，就不能放在博客中了。</p>
<p>我的博客是使用 <code>Hexo</code> 来搭建的，并不能设置某些文章不可见。但如果不在电脑旁或者出门没有带电脑又想要查看一下之前记录的内容，就很不方便了。</p>
<p>我也尝试在 <code>github</code> 上去找一些可以设置账户的开源的博客框架，但测试过一些后发现并没有符合自己需求的，而自己开发却没有时间。</p>
<p>思来想去，就想看看有没有插件能够实现 <code>Hexo</code> 博客的加密操作。最终让我找到了一款名为 <code>Hexo-Blog-Encrypt</code> 的插件。</p>
<p>为了防止以下的修改可能出现版本差异，这里我先声明我使用的 <code>Hexo</code> 版本信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo: 4.2.1</span><br><span class="line">hexo-cli: 3.1.0</span><br><span class="line">next theme version: 7.8.0+a7a948a</span><br><span class="line">hexo-blog-encrypt: &quot;^3.1.6&quot;</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-blog-encrypt</span><br></pre></td></tr></table></figure>

<h4 id="快速使用"><a href="#快速使用" class="headerlink" title="快速使用"></a>快速使用</h4><p>该插件的使用也很方便，这里我仅作简单介绍，详细的可以查看官方文档。 <a href="https://github.com/D0n9X1n/hexo-blog-encrypt" target="_blank" rel="noopener">D0n9X1n/hexo-blog-encrypt: Yet, just another hexo plugin for security.</a></p>
<p>要为一篇文章添加密码查看功能，只需要在文章信息头部添加 <code>password</code> 字段即可：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hello World</span><br><span class="line">date: 2021-04-13 21:18:02</span><br><span class="line">password: hello</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="全局加密配置"><a href="#全局加密配置" class="headerlink" title="全局加密配置"></a>全局加密配置</h4><p>分别为每篇文章设置密码，虽然很灵活，但是配置或者修改起来非常麻烦。为此，可以通过设置统一配置来实现全局加密。</p>
<p>通过添加指定 <code>tag</code> 的方式，可以为所有需要加密的文章添加统一加密操作。只需要在需要加密的文章中，添加设置的 <code>tag值</code> 即可。</p>
<p>在Hexo主配置文件 <code>_config.yml</code> 中添加如下配置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Security</span><br><span class="line">encrypt: # hexo-blog-encrypt</span><br><span class="line">  silent: true</span><br><span class="line">  abstract: 这是一篇加密文章，需要密码才能继续阅读。</span><br><span class="line">  message: 当前文章暂不对外可见，请输入密码后查看！</span><br><span class="line">  tags:</span><br><span class="line">  - &#123;name: private, password: hello&#125;</span><br><span class="line">  wrong_pass_message: 抱歉，您输入的密码错误，请检查后重新输入。</span><br><span class="line">  wrong_hash_message: 抱歉, 当前文章不能被校验, 不过您还是可以看看解密后的内容。</span><br></pre></td></tr></table></figure>

<p>之后，需要清除缓存后重新生成 <code>hexo clean &amp;&amp; hexo s -g</code>。</p>
<p>其中的 <code>tag</code> 部分：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tags:</span><br><span class="line">- &#123;name: private, password: hello&#125;</span><br></pre></td></tr></table></figure>

<p>表示当在文章中指定了 <code>private</code> 这个 <code>tag</code> 后，该文章就会自动加密并使用对应的值 <code>hello</code> 作为密码，输入密码后才可查看。</p>
<p>相应的文章头部设置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: Password Test</span><br><span class="line">date: 2019-12-21 11:54:07</span><br><span class="line">tags:</span><br><span class="line">    - private</span><br><span class="line">---</span><br></pre></td></tr></table></figure>


<h4 id="在全局加密配置下禁用某些文章的加密"><a href="#在全局加密配置下禁用某些文章的加密" class="headerlink" title="在全局加密配置下禁用某些文章的加密"></a>在全局加密配置下禁用某些文章的加密</h4><p>可能有这样的情况，属于 <code>private</code> 标签下的某篇文章在一段时间内想要开放访问。如果在描述中加上密码提示： <code>当前文章密码为xxx，请输入密码后查看</code> ，来让用户每次查看时都要先输入密码后再查看，这样的操作又会给访客带来不便。</p>
<p>这时可以单独设置允许某篇文章不设置密码。</p>
<p>只需要在使用 <code>加密tag</code> 的前提下，结合 <code>password</code> 来实现即可。在博客文章的头部添加 <code>password</code> 并设置为 <code>&quot;&quot;</code> 就能取消当前文章的 <code>Tag</code> 加密。</p>
<p>相应的设置示例如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: No Password Test</span><br><span class="line">date: 2019-12-21 11:54:07</span><br><span class="line">tags:</span><br><span class="line">    - private</span><br><span class="line">password: &quot;&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure>


<h4 id="在全局加密配置下设置非全局密码"><a href="#在全局加密配置下设置非全局密码" class="headerlink" title="在全局加密配置下设置非全局密码"></a>在全局加密配置下设置非全局密码</h4><p>在全局加密配置下，我们可以通过设置多个 <code>加密tag</code> 来为多篇不同类型的文章设置相同的查看密码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tags:</span><br><span class="line">- &#123;name: private, password: hello&#125;</span><br><span class="line">- &#123;name: jiami, password: world&#125;</span><br><span class="line">- &#123;name: 加密, password: jiesuo&#125;</span><br></pre></td></tr></table></figure>


<p>那么可能有这样的场景：</p>
<p>属于 <code>private</code> 标签下的某篇文章想要设置成不一样的密码，防止用户恶意通过一个密码来查看同标签下的所有文章。此时，仍可以通过 <code>password</code> 参数来实现：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: Password Test</span><br><span class="line">date: 2019-12-21 11:54:07</span><br><span class="line">tags:</span><br><span class="line">    - private</span><br><span class="line">password: &quot;buyiyang&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p>说明：</p>
<p>该文章通过tag值 <code>private</code> 做了加密，按说密码应该为 <code>hello</code> ，但是又在信息头中设置了 <code>password</code> ，因为配置的优先级是 <code>文章信息头 &gt; 按标签加密</code>，所以最后的密码为 <code>buyiyang</code> 。</p>
<hr>
<h4 id="解密后目录不显示"><a href="#解密后目录不显示" class="headerlink" title="解密后目录不显示"></a>解密后目录不显示</h4><p>在为某些文章设置了 <strong>加密后查看</strong> 之后，不经意间发现这些文章的目录在解密后却不显示了。</p>
<h4 id="探究原因"><a href="#探究原因" class="headerlink" title="探究原因"></a>探究原因</h4><p>从插件的 <code>github issues</code> 中我找到了相关的讨论：</p>
<ul>
<li><a href="https://github.com/D0n9X1n/hexo-blog-encrypt/issues/16" target="_blank" rel="noopener">解密后目录不会更新 · Issue #16 · D0n9X1n/hexo-blog-encrypt</a></li>
</ul>
<p>原因：</p>
<blockquote>
<p>加密的时候，<code>post.content</code> 会变成加密后的串，所以原来的 <code>TOC</code> 生成逻辑就会针对加密后的内容。<br>所以这边我只能把原来的内容存进 <code>post.origin</code> 字段。</p>
</blockquote>
<p>找到文件 <code>themes/next/layout/_macro/sidebar.swig</code> ，编辑如下部分：</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20210418165143.png" alt="20210418165143"></p>
<p>插件 <code>hexo-blog-encrypt</code> 对文章内容进行加密后，会将原始文章内容保存到字段 <code>origin</code> 中，当生成 <code>TOC</code> 时，我们可以通过 <code>page.origin</code> 来得到原始内容，生成文章目录。</p>
<p>相应的代码为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;aside class&#x3D;&quot;sidebar&quot;&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;sidebar-inner&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &#123;%- set display_toc &#x3D; page.toc.enable and display_toc %&#125;</span><br><span class="line">    &#123;%- if display_toc %&#125;</span><br><span class="line"></span><br><span class="line">      &#123;%- if (page.encrypt) %&#125;</span><br><span class="line">        &#123;%- set toc &#x3D; toc(page.origin, &#123; class: &quot;nav&quot;, list_number: page.toc.number, max_depth: page.toc.max_depth &#125;) %&#125;</span><br><span class="line">      &#123;%- else %&#125;</span><br><span class="line">        &#123;%- set toc &#x3D; toc(page.content, &#123; class: &quot;nav&quot;, list_number: page.toc.number, max_depth: page.toc.max_depth &#125;) %&#125;</span><br><span class="line">      &#123;%- endif %&#125;</span><br><span class="line"></span><br><span class="line">      &#123;%- set display_toc &#x3D; toc.length &gt; 1 and display_toc %&#125;</span><br><span class="line">    &#123;%- endif %&#125;</span><br><span class="line"></span><br><span class="line">    &lt;ul class&#x3D;&quot;sidebar-nav motion-element&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>修改完成后，执行 <code>hexo clean &amp;&amp; hexo s -g</code> 并重新预览。</p>
<p>效果如下：</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20210418165529.png" alt="20210418165529"></p>
<p>不过，这样的效果貌似不是我想要的。我理想中的效果应该是：</p>
<ul>
<li>当文章加密后，访客只能看到侧边栏中的 <code>站点概览</code> 部分，不需要看到 <code>文章目录</code> 部分。</li>
<li>当文章解密后，访客则可以看到 <code>站点概览</code> 和 <code>文章目录</code> 两部分。 </li>
</ul>
<p>而现在加密后的文章未解密之前也可以看到 <code>文章目录</code> ，虽然该目录不可点击。</p>
<p>当然，如果你不是很介意，那么到这里就可以结束了。如果你和我一样有一些 <strong>追求完美的强迫症</strong> 的话，我们继续。</p>
<h5 id="如何优化"><a href="#如何优化" class="headerlink" title="如何优化"></a>如何优化</h5><p>查看了 <code>hexo-blog-encrypt</code> 相关的 <code>issues</code> ，我找到了一种 <strong>折中</strong> 的解决方法。</p>
<p>从 issue <a href="https://github.com/D0n9X1n/hexo-blog-encrypt/issues/67#issuecomment-463893408" target="_blank" rel="noopener">Archer主题解密后TOC依旧不显示（已按手册修改）</a>  中我们可以知道：</p>
<p>我们可以在文章加密的前提下，通过将目录部分加入到一个 <code>不可见的div</code> 中来实现 <code>隐藏目录</code> 的效果。在源码中的 <a href="https://github.com/D0n9X1n/hexo-blog-encrypt/blob/479ccd4cf522adc8f667cfa06290f057a219cb88/lib/hbe.js#L207" target="_blank" rel="noopener">hexo-blog-encrypt/lib/hbe.js</a>  部分我们也可以看到，解密后通过设置 <code>id</code> 值为 <code>toc-div</code> 的元素为 <code>display:inline</code> 来控制显示隐藏。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;%- if (page.encrypt) %&#125;</span><br><span class="line">  &lt;div id&#x3D;&quot;toc-div&quot; style&#x3D;&quot;display:none&quot;&gt;</span><br><span class="line">&#123;%- else %&#125;</span><br><span class="line">  &lt;div id&#x3D;&quot;toc-div&quot;&gt;</span><br><span class="line">&#123;%- endif %&#125;</span><br><span class="line"></span><br><span class="line">xxx这里是目录部分xxx</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>


<p>对文件 <code>themes/next/layout/_macro/sidebar.swig</code> 修改后的代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--noindex--&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;post-toc-wrap sidebar-panel&quot;&gt;</span><br><span class="line">  &#123;%- if (page.encrypt) %&#125;</span><br><span class="line">    &lt;div id&#x3D;&quot;toc-div&quot; style&#x3D;&quot;display:none&quot;&gt;</span><br><span class="line">  &#123;%- else %&#125;</span><br><span class="line">    &lt;div id&#x3D;&quot;toc-div&quot;&gt;</span><br><span class="line">  &#123;%- endif %&#125;</span><br><span class="line"></span><br><span class="line">    &#123;%- if display_toc %&#125;</span><br><span class="line">    &lt;div class&#x3D;&quot;post-toc motion-element&quot;&gt;&#123;&#123; toc &#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">    &#123;%- endif %&#125;</span><br><span class="line">  </span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;!--&#x2F;noindex--&gt;</span><br></pre></td></tr></table></figure>


<p>但这种方法并不是完全的加密，而是采用 <code>障眼法</code> 的方式，通过查看html源文件还是可以看到目录内容的，只是不显示罢了。</p>
<p>对于这个问题，<code>hexo-blog-encrypt</code> 插件的作者也作了说明：<a href="https://github.com/D0n9X1n/hexo-blog-encrypt/issues/162" target="_blank" rel="noopener">next 主题内没有 article.ejs 文件【TOC 相关】 · Issue #162 · D0n9X1n/hexo-blog-encrypt</a></p>
<h5 id="只好妥协"><a href="#只好妥协" class="headerlink" title="只好妥协"></a>只好妥协</h5><p>因为该插件中目前只有一个参数 <code>page.encrypt</code> 可以用来判断当前的文章是否进行了 <strong>加密处理</strong> ，而不能获知该文章当前是处于 <strong>加密后的锁定</strong> 状态，还是处于 <strong>加密后的解锁</strong> 状态。如果再有一个参数结合起来一起处理就好了。</p>
<p>所以，目前只能在解锁前隐藏目录，解锁后再显示目录。但在解锁前目录区域还是会展开，只是没有内容显示罢了。</p>
<hr>
<h4 id="让加密文章显示加密提示"><a href="#让加密文章显示加密提示" class="headerlink" title="让加密文章显示加密提示"></a>让加密文章显示加密提示</h4><p>类似于我的博客文章列表中的 <code>文章置顶</code> 的提示效果，考虑在文章列表中对加密的文章增加类似的 <code>加密</code> 提示信息。</p>
<p>上面对于文章的加密处理，一方面是在 <code>配置文件</code> 中添加的 <code>tag</code> 全局配置，另一方面是在单个 <code>md源文件</code> 中添加的 <code>password</code> 参数。所以我们需要对这两种情况分别做处理。</p>
<h5 id="对于password参数的情况"><a href="#对于password参数的情况" class="headerlink" title="对于password参数的情况"></a>对于password参数的情况</h5><p>针对于 <code>password</code> 字段，参考获取其他字段的方法，比如获取标题用 <code>post.title</code> ，获取置顶用 <code>post.top</code> ，那么获取 <code>password</code> 就是 <code>post.password</code> 了。</p>
<p>可以参考我之前添加置顶提示信息的操作，对文件 <code>themes/next/layout/_macro/post.swig</code> 的修改如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;# 加密文章添加提示信息-for password #&#125;</span><br><span class="line">&#123;%- if post.password %&#125;</span><br><span class="line">  &lt;span class&#x3D;&quot;post-meta-item&quot;&gt;</span><br><span class="line">      &lt;span class&#x3D;&quot;post-meta-item-icon&quot;&gt;</span><br><span class="line">          &lt;i class&#x3D;&quot;fas fa-lock&quot;&gt;&lt;&#x2F;i&gt;</span><br><span class="line">      &lt;&#x2F;span&gt;</span><br><span class="line">      &lt;span class&#x3D;&quot;post-meta-item-text&quot;&gt;</span><br><span class="line">          &lt;font color&#x3D;&#39;#FD7E13&#39;&gt;[加密]&lt;&#x2F;font&gt;</span><br><span class="line">      &lt;&#x2F;span&gt;</span><br><span class="line">  &lt;&#x2F;span&gt;</span><br><span class="line">&#123;%- endif %&#125;</span><br></pre></td></tr></table></figure>


<h5 id="对于tag标签的情况"><a href="#对于tag标签的情况" class="headerlink" title="对于tag标签的情况"></a>对于tag标签的情况</h5><p>针对于 <code>tag</code> 标签的获取，可以从文件 <code>themes/next/layout/_macro/post.swig</code> 中找到类似的处理方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;%- for tag in post.tags.toArray() %&#125;</span><br><span class="line">    &lt;a href&#x3D;&quot;&#123;&#123; url_for(tag.path) &#125;&#125;&quot; rel&#x3D;&quot;tag&quot;&gt;&#123;&#123; tag_indicate &#125;&#125; &#123;&#123; tag.name &#125;&#125;&lt;&#x2F;a&gt;</span><br><span class="line">&#123;%- endfor %&#125;</span><br></pre></td></tr></table></figure>

<p>即可以用最简单的 <strong>遍历法</strong> 来处理：</p>
<p>我们获取到配置文件中设置的所有 <code>加密tag值</code> ，再找到文章中的 <code>tag标签</code> 。二者一对比，有匹配的项则说明该文章设置了 <code>tag值</code> 加密。</p>
<h5 id="swig文件"><a href="#swig文件" class="headerlink" title="swig文件"></a>swig文件</h5><p>要在 <code>.swig</code> 文件中实现相应的对比逻辑，就需要了解其使用的语法格式。而对于 <code>swig</code> 文件，使用的是 <code>Swig</code> 语法。</p>
<blockquote>
<p><code>Swig</code> 是一个非常棒的、类似 <code>Django/jinja</code> 的 <code>node.js</code> 模板引擎。 </p>
</blockquote>
<p>不过看到这个代码库 <a href="https://github.com/paularmstrong/swig" target="_blank" rel="noopener">paularmstrong/swig: Take a swig of the best template engine for JavaScript.</a> 已经 <code>归档</code> 了。</p>
<p>但因为 <code>Swig</code> 是类似于 <code>jinja</code> 的模板引擎，那么我们直接去参考 <code>jinja</code> 的语法就可以了。</p>
<ul>
<li><a href="http://docs.jinkan.org/docs/jinja2/templates.html" target="_blank" rel="noopener">模板设计者文档 — Jinja2 2.7 documentation</a></li>
</ul>
<h5 id="最终实现"><a href="#最终实现" class="headerlink" title="最终实现"></a>最终实现</h5><p>获取全局配置中 <code>encrypt.tags</code> 的值：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;%- if (config.encrypt) and (config.encrypt.tags) %&#125;</span><br><span class="line">  &#123;%- for ctag in config.encrypt.tags %&#125;</span><br><span class="line">    &lt;span&gt;&#123;&#123; ctag.name &#125;&#125;&lt;&#x2F;span&gt;</span><br><span class="line">  &#123;%- endfor %&#125;</span><br><span class="line">&#123;%- endif %&#125;</span><br></pre></td></tr></table></figure>


<p>在文章列表中获取当前文章包含的 <code>tags</code> 列表：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;%- if post.tags %&#125;</span><br><span class="line">  &#123;%- for ptag in post.tags.toArray() %&#125;</span><br><span class="line">    &lt;span&gt;&#123;&#123; ptag.name &#125;&#125;&lt;&#x2F;span&gt;</span><br><span class="line">  &#123;%- endfor %&#125;</span><br><span class="line">&#123;%- endif %&#125;</span><br></pre></td></tr></table></figure>


<p>对于其中展示的文本格式，可以参考已有的 <code>发表于</code> <code>更新于</code> 这些副标题的格式来实现。</p>
<p>例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;span class&#x3D;&quot;post-meta-item&quot;&gt;</span><br><span class="line">    &lt;span class&#x3D;&quot;post-meta-item-icon&quot;&gt;</span><br><span class="line">    &lt;i class&#x3D;&quot;far fa-calendar&quot;&gt;&lt;&#x2F;i&gt;</span><br><span class="line">    &lt;&#x2F;span&gt;</span><br><span class="line">    &lt;span class&#x3D;&quot;post-meta-item-text&quot;&gt;发表于&lt;&#x2F;span&gt;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    &lt;time title&#x3D;&quot;创建时间：2021-02-28 11:18:43 &#x2F; 修改时间：11:41:19&quot; itemprop&#x3D;&quot;dateCreated datePublished&quot; datetime&#x3D;&quot;2021-02-28T11:18:43+08:00&quot;&gt;2021-02-28&lt;&#x2F;time&gt;</span><br><span class="line">&lt;&#x2F;span&gt;</span><br></pre></td></tr></table></figure>

<p>对其进行优化，我们只需要显示提示文字，不需要后面的带下划线部分，最终得到的就是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;span class&#x3D;&quot;post-meta-item&quot;&gt;</span><br><span class="line">    &lt;span class&#x3D;&quot;post-meta-item-icon&quot;&gt;</span><br><span class="line">        &lt;i class&#x3D;&quot;fas fa-lock&quot;&gt;&lt;&#x2F;i&gt;</span><br><span class="line">    &lt;&#x2F;span&gt;</span><br><span class="line">    &lt;span class&#x3D;&quot;post-meta-item-text&quot;&gt;</span><br><span class="line">        &lt;font color&#x3D;&#39;#FD7E13&#39;&gt;[加密]&lt;&#x2F;font&gt;</span><br><span class="line">    &lt;&#x2F;span&gt;</span><br><span class="line">&lt;&#x2F;span&gt;</span><br></pre></td></tr></table></figure>

<p>整合上面的代码，对于文章中包含 <code>password</code> 的文档，通过如下方式来显示：</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20210418170147.png" alt="20210418170147"></p>
<p>相应代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;# 加密文章添加提示信息-for password #&#125;</span><br><span class="line">&#123;%- if post.password %&#125;</span><br><span class="line">  &lt;span class&#x3D;&quot;post-meta-item&quot;&gt;</span><br><span class="line">      &lt;span class&#x3D;&quot;post-meta-item-icon&quot;&gt;</span><br><span class="line">          &lt;i class&#x3D;&quot;fas fa-lock&quot;&gt;&lt;&#x2F;i&gt;</span><br><span class="line">      &lt;&#x2F;span&gt;</span><br><span class="line">      &lt;span class&#x3D;&quot;post-meta-item-text&quot;&gt;</span><br><span class="line">          &lt;font color&#x3D;&#39;#FD7E13&#39;&gt;[加密]&lt;&#x2F;font&gt;</span><br><span class="line">      &lt;&#x2F;span&gt;</span><br><span class="line">  &lt;&#x2F;span&gt;</span><br><span class="line">&#123;%- endif %&#125;</span><br></pre></td></tr></table></figure>

<p>对于文章中包含指定加密 <code>tags</code> 的文档，通过如下方式来显示：</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20210418170209.png" alt="20210418170209"></p>
<p>相应代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;# 加密文章添加提示信息-for config tags #&#125;</span><br><span class="line">    &#x2F;&#x2F; 获取全局配置中的加密tag</span><br><span class="line">    &#123;%- if (config.encrypt) and (config.encrypt.tags) %&#125;</span><br><span class="line">      &#123;%- for ctag in config.encrypt.tags %&#125;</span><br><span class="line">        &#x2F;&#x2F; 判断当前文章中是否包含tags</span><br><span class="line">        &#123;%- if post.tags %&#125;</span><br><span class="line">          &#123;%- for ptag in post.tags.toArray() %&#125;</span><br><span class="line">            &#x2F;&#x2F; 如果有相同的tag值</span><br><span class="line">            &#123;%- if (ctag.name &#x3D;&#x3D; ptag.name) %&#125;</span><br><span class="line">              &#x2F;&#x2F; 显示加密提示信息</span><br><span class="line">              &lt;span class&#x3D;&quot;post-meta-item&quot;&gt;</span><br><span class="line">                  &lt;span class&#x3D;&quot;post-meta-item-icon&quot;&gt;</span><br><span class="line">                      &lt;i class&#x3D;&quot;fas fa-lock&quot;&gt;&lt;&#x2F;i&gt;</span><br><span class="line">                  &lt;&#x2F;span&gt;</span><br><span class="line">                  &lt;span class&#x3D;&quot;post-meta-item-text&quot;&gt;</span><br><span class="line">                      &lt;font color&#x3D;&#39;#FD7E13&#39;&gt;[加密]&lt;&#x2F;font&gt;</span><br><span class="line">                  &lt;&#x2F;span&gt;</span><br><span class="line">              &lt;&#x2F;span&gt;</span><br><span class="line"></span><br><span class="line">            &#123;%- endif %&#125;</span><br><span class="line"></span><br><span class="line">          &#123;%- endfor %&#125;</span><br><span class="line">        &#123;%- endif %&#125;</span><br><span class="line"></span><br><span class="line">      &#123;%- endfor %&#125;</span><br><span class="line">    &#123;%- endif %&#125;</span><br></pre></td></tr></table></figure>



<p>对于两种都有的文档，我们只需要通过一个 <code>判断</code> 来处理就好了：优先判断文档中的 <code>password</code> 字段。当文档中包含 <code>password</code> 时，就说明是加密文章；否则就去判断配置文件看是否为加密文章。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20210418170330.png" alt="20210418170330"></p>
<p>最后的代码为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;# 加密文章添加提示信息-for password #&#125;</span><br><span class="line">&#123;%- if post.password %&#125;</span><br><span class="line">  &lt;span class&#x3D;&quot;post-meta-item&quot;&gt;</span><br><span class="line">      &lt;span class&#x3D;&quot;post-meta-item-icon&quot;&gt;</span><br><span class="line">          &lt;i class&#x3D;&quot;fas fa-lock&quot;&gt;&lt;&#x2F;i&gt;</span><br><span class="line">      &lt;&#x2F;span&gt;</span><br><span class="line">      &lt;span class&#x3D;&quot;post-meta-item-text&quot;&gt;</span><br><span class="line">          &lt;font color&#x3D;&#39;#FD7E13&#39;&gt;[加密]&lt;&#x2F;font&gt;</span><br><span class="line">      &lt;&#x2F;span&gt;</span><br><span class="line">  &lt;&#x2F;span&gt;</span><br><span class="line">&#123;%- else %&#125;</span><br><span class="line">  &#123;# 加密文章添加提示信息-for config tags #&#125;</span><br><span class="line">  &#123;%- if (config.encrypt) and (config.encrypt.tags) %&#125;</span><br><span class="line">    &#123;%- for ctag in config.encrypt.tags %&#125;</span><br><span class="line">      </span><br><span class="line">      &#123;%- if post.tags %&#125;</span><br><span class="line">        &#123;%- for ptag in post.tags.toArray() %&#125;</span><br><span class="line">          &#123;%- if (ctag.name &#x3D;&#x3D; ptag.name) %&#125;</span><br><span class="line">            &lt;span class&#x3D;&quot;post-meta-item&quot;&gt;</span><br><span class="line">                &lt;span class&#x3D;&quot;post-meta-item-icon&quot;&gt;</span><br><span class="line">                    &lt;i class&#x3D;&quot;fas fa-lock&quot;&gt;&lt;&#x2F;i&gt;</span><br><span class="line">                &lt;&#x2F;span&gt;</span><br><span class="line">                &lt;span class&#x3D;&quot;post-meta-item-text&quot;&gt;</span><br><span class="line">                    &lt;font color&#x3D;&#39;#FD7E13&#39;&gt;[加密]&lt;&#x2F;font&gt;</span><br><span class="line">                &lt;&#x2F;span&gt;</span><br><span class="line">            &lt;&#x2F;span&gt;</span><br><span class="line">          &#123;%- endif %&#125;</span><br><span class="line">        &#123;%- endfor %&#125;</span><br><span class="line">      &#123;%- endif %&#125;</span><br><span class="line"></span><br><span class="line">    &#123;%- endfor %&#125;</span><br><span class="line">  &#123;%- endif %&#125;</span><br><span class="line">&#123;%- endif %&#125;</span><br></pre></td></tr></table></figure>



<p>稍微不好的一点就是，上面的操作是通过 <code>两个for循环</code> 来处理的，会导致一些性能问题。不过这个操作是在编译过程 <code>hexo g</code> 的时候来处理的，不影响博客浏览，也就可以忽略了。</p>
<hr>
<h4 id="更换图标"><a href="#更换图标" class="headerlink" title="更换图标"></a>更换图标</h4><p>对于需要显示的图标，可以从网站 <a href="https://fontawesome.com/icons" target="_blank" rel="noopener">Icons | Font Awesome</a> 中获取。</p>
<p>例如，我这里选择的是 <code>锁</code> 的icon图标，得到的代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;i class&#x3D;&quot;fas fa-lock&quot;&gt;&lt;&#x2F;i&gt;</span><br></pre></td></tr></table></figure>

<hr>
]]></content>
      <categories>
        <category>Hexo博客搭建</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>An attribute in the provided entity has invalid value</title>
    <url>/2021/04/08/app-id-with-identifier-is-not-available/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，您输入的密码错误，请检查后重新输入。" data-whm="抱歉, 当前文章不能被校验, 不过您还是可以看看解密后的内容。">
  <script id="hbeData" type="hbeData" data-hmacdigest="a35cad1df53a37532ebf360c17439f1be3f781bd66d8eb99c570b5f862ac097c"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">当前文章暂不对外可见，请输入密码后查看！</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Flutter之旅</category>
      </categories>
      <tags>
        <tag>private</tag>
        <tag>Flutter</tag>
        <tag>付费阅读</tag>
      </tags>
  </entry>
  <entry>
    <title>如何制作我的gif动图</title>
    <url>/2021/03/27/how-to-make-gif/</url>
    <content><![CDATA[<p>一般在给他人进行功能演示时，通过动图演示是最直接的方法。而录制 <code>mp4</code> 视频文件太大，不利于分享，制作成 <code>gif</code> 动图则是最好的选择。</p>
<h4 id="如何制作gif动图"><a href="#如何制作gif动图" class="headerlink" title="如何制作gif动图"></a>如何制作gif动图</h4><p>在 <code>Mac</code> 系统下，可以录制gif动态图片的工具有很多。经过我个人的测试，发现如果没有特殊需求的话，<code>LICEcap</code> 就是一款非常符合要求的gif动图工具。</p>
<p><code>LICEcap</code> 是一款非常简洁易用的动画录屏软件。而且是 <code>GPL</code> 协议的自由软件，开源免费。</p>
<p>LICEcap官网 <a href="https://www.cockos.com/licecap/" target="_blank" rel="noopener">Cockos Incorporated | LICEcap</a></p>
<p>对于该软件的使用我就不做过多的介绍了。一般情况下我就是保持默认选项即可。</p>
<p>如果对于录制后的 <code>gif</code> 文件要求不是很高的话，可以适当降低 <code>Max FPS</code> 的值，以降低最后保存时文件的大小。</p>
<hr>
<h4 id="进一步优化gif文件大小"><a href="#进一步优化gif文件大小" class="headerlink" title="进一步优化gif文件大小"></a>进一步优化gif文件大小</h4><p>某些情况下即使我们降低了 <code>FPS</code> 的值，生成的 <code>gif</code>  文件还是会很大。</p>
<p>那么可以通过另一款小工具 <code>Gifsicle</code> 来压缩优化文件大小。</p>
<p><strong>gifsicle</strong> 是一个用于操作 GIF 图片的命令行工具，可以对gif文件进行修改尺寸大小、颜色、帧率等等。</p>
<ul>
<li>Gifsicle官网 <a href="https://www.lcdf.org/gifsicle/" target="_blank" rel="noopener">Gifsicle: Command-Line Animated GIFs</a></li>
</ul>
<p>Mac用户推荐使用 <code>homebrew</code> 进行安装：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">brew install gifsicle</span><br></pre></td></tr></table></figure>



<h4 id="gifsicle常用命令"><a href="#gifsicle常用命令" class="headerlink" title="gifsicle常用命令"></a>gifsicle常用命令</h4><h5 id="根据图像自动优化"><a href="#根据图像自动优化" class="headerlink" title="根据图像自动优化"></a>根据图像自动优化</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gifsicle -O3 input.gif -o output.gif</span><br></pre></td></tr></table></figure>

<p>参数说明：</p>
<ul>
<li><code>-O(--optimize)[LEVEL]</code>   (注意这里是大写字母<code>O</code>)<ul>
<li><code>-O1</code>  仅存储每个图像的更改部分。 这是默认值。</li>
<li><code>-O2</code>  使用透明度进一步缩小文件。</li>
<li><code>-O3</code>  尝试几种优化方法（通常速度较慢，有时效果更好）。</li>
</ul>
</li>
<li><code>-o(--output) file</code>   输出到文件</li>
</ul>
<h5 id="按比例缩小图像"><a href="#按比例缩小图像" class="headerlink" title="按比例缩小图像"></a>按比例缩小图像</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gifsicle input.gif --scale 0.5 -o output.gif</span><br></pre></td></tr></table></figure>

<p>参数说明：</p>
<ul>
<li><code>--scale</code>  将图像的宽和高缩小为原来的 0.5 倍</li>
</ul>
<h5 id="缩小图像尺寸"><a href="#缩小图像尺寸" class="headerlink" title="缩小图像尺寸"></a>缩小图像尺寸</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gifsicle input.gif --resize 300x200 -o output.gif</span><br></pre></td></tr></table></figure>



<p>参数说明：</p>
<ul>
<li><code>--resize[width x height]</code>   将输出 GIF 的大小调整为给定的宽度和高度。</li>
</ul>
<h5 id="减少图片颜色"><a href="#减少图片颜色" class="headerlink" title="减少图片颜色"></a>减少图片颜色</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gitsicle -O3 input.gif -o output.gif --colors 256</span><br></pre></td></tr></table></figure>

<p>参数说明：</p>
<ul>
<li><code>-k [num](--colors [num])</code>   将输出gif的颜色数量减少到 <code>num</code> 。<code>num</code> 的取值为 <code>2</code>  到 <code>256</code>  之间。 <code>num</code>  越小，图片质量损失越大。</li>
</ul>
<h5 id="其他设置"><a href="#其他设置" class="headerlink" title="其他设置"></a>其他设置</h5><p>更多设置可以查看帮助或者官方文档</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gitsicle -h</span><br></pre></td></tr></table></figure>



<ul>
<li>Gifsicle文档 <a href="https://www.lcdf.org/gifsicle/man.html" target="_blank" rel="noopener">Gifsicle Man Page</a></li>
</ul>
<hr>
]]></content>
      <categories>
        <category>工具技巧</category>
      </categories>
      <tags>
        <tag>Tools</tag>
      </tags>
  </entry>
  <entry>
    <title>Flutter常见效果实现代码段整理</title>
    <url>/2021/02/28/flutter-commonly-used-code-snippets/</url>
    <content><![CDATA[<p>整理开发中常用到的 <code>Flutter</code> 代码段。感觉有帮助的话给个 <strong>支持</strong>。</p>
<h3 id="Scaffold相关"><a href="#Scaffold相关" class="headerlink" title="Scaffold相关"></a>Scaffold相关</h3><h4 id="点击页面空白处收回键盘"><a href="#点击页面空白处收回键盘" class="headerlink" title="点击页面空白处收回键盘"></a>点击页面空白处收回键盘</h4><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Widget build(BuildContext context) &#123;</span><br><span class="line">  <span class="keyword">return</span> Scaffold(</span><br><span class="line">    body: GestureDetector(</span><br><span class="line">      onTap: () &#123;</span><br><span class="line">        <span class="comment">// 收回键盘</span></span><br><span class="line">        FocusScope.of(context).requestFocus(FocusNode());</span><br><span class="line">      &#125;,</span><br><span class="line">    child: Container(</span><br><span class="line">      <span class="comment">// 防止点击穿透</span></span><br><span class="line">      color: Colors.transparent, </span><br><span class="line">      ),</span><br><span class="line">    ),</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="延时执行"><a href="#延时执行" class="headerlink" title="延时执行"></a>延时执行</h4><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 延时1s执行返回</span></span><br><span class="line">Future.delayed(<span class="built_in">Duration</span>(seconds: <span class="number">1</span>), ()&#123;</span><br><span class="line">  Navigator.of(context).pop();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="Container相关"><a href="#Container相关" class="headerlink" title="Container相关"></a>Container相关</h3><h4 id="Container设置阴影"><a href="#Container设置阴影" class="headerlink" title="Container设置阴影"></a>Container设置阴影</h4><p>通过 <code>BoxShadow</code> 实现：</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Container(</span><br><span class="line">  decoration: BoxDecoration(</span><br><span class="line">    <span class="comment">// 阴影</span></span><br><span class="line">    boxShadow: [</span><br><span class="line">      BoxShadow(</span><br><span class="line">        offset: Offset(<span class="number">0</span>, <span class="number">1</span>),</span><br><span class="line">        blurRadius: <span class="number">6</span>,</span><br><span class="line">        spreadRadius: <span class="number">0</span>,</span><br><span class="line">        color: Color(<span class="number">0xFFEEEEEE</span>),</span><br><span class="line">      )</span><br><span class="line">    ],</span><br><span class="line">  ),</span><br><span class="line">),</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="Container实现线性渐变"><a href="#Container实现线性渐变" class="headerlink" title="Container实现线性渐变"></a>Container实现线性渐变</h4><p>通过 <code>LinearGradient</code> 实现：</p>
<p>示例一：</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Container(</span><br><span class="line">  decoration: BoxDecoration(</span><br><span class="line">    gradient: LinearGradient(</span><br><span class="line">      begin: Alignment(<span class="number">0</span>, <span class="number">0.5</span>),</span><br><span class="line">      end: Alignment(<span class="number">0.5</span>, <span class="number">1</span>),</span><br><span class="line">      colors: [</span><br><span class="line">        Color(<span class="number">0xFFFA9914</span>),</span><br><span class="line">        Color(<span class="number">0x00EEEEEE</span>),</span><br><span class="line">      ],</span><br><span class="line">    ),</span><br><span class="line">  ),</span><br><span class="line">),</span><br></pre></td></tr></table></figure>

<p>示例二：</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Container(</span><br><span class="line">  width: <span class="number">200</span>,</span><br><span class="line">  height: <span class="number">200</span>,</span><br><span class="line">  decoration: BoxDecoration(</span><br><span class="line">    <span class="comment">// 默认是从左往右的渐变</span></span><br><span class="line">    gradient: LinearGradient(</span><br><span class="line">      <span class="comment">// 设置从上往下的渐变</span></span><br><span class="line">      begin: Alignment.topCenter,</span><br><span class="line">      end: Alignment.bottomCenter,</span><br><span class="line">      <span class="comment">// 渐变的色值数组</span></span><br><span class="line">      colors: [</span><br><span class="line">        Colors.red,</span><br><span class="line">        Colors.blue,</span><br><span class="line">      ],</span><br><span class="line">      <span class="comment">// 通过 stops 属性控制渐变色大小</span></span><br><span class="line">      stops: [</span><br><span class="line">        <span class="number">0.5</span>,</span><br><span class="line">        <span class="number">1</span>,</span><br><span class="line">      ],</span><br><span class="line">    ),</span><br><span class="line">  ),</span><br><span class="line">),</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="Container设置圆角"><a href="#Container设置圆角" class="headerlink" title="Container设置圆角"></a>Container设置圆角</h4><p>通过 <code>borderRadius</code> 实现：</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Container(</span><br><span class="line">  decoration: BoxDecoration(</span><br><span class="line">    borderRadius: BorderRadius.circular(<span class="number">4</span>),</span><br><span class="line">  ),</span><br><span class="line">),</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="Container设置指定角为圆角"><a href="#Container设置指定角为圆角" class="headerlink" title="Container设置指定角为圆角"></a>Container设置指定角为圆角</h4><p>通过 <code>BorderRadius.only</code> 实现：</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Container(</span><br><span class="line">  decoration: BoxDecoration(</span><br><span class="line">    borderRadius: BorderRadius.only(</span><br><span class="line">      topLeft: Radius.circular(<span class="number">5</span>),</span><br><span class="line">      bottomLeft: Radius.circular(<span class="number">5</span>),</span><br><span class="line">    ),</span><br><span class="line">  ),</span><br><span class="line">),</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="其他组件"><a href="#其他组件" class="headerlink" title="其他组件"></a>其他组件</h4><h4 id="进入页面后输入框获取焦点，键盘自动弹出"><a href="#进入页面后输入框获取焦点，键盘自动弹出" class="headerlink" title="进入页面后输入框获取焦点，键盘自动弹出"></a>进入页面后输入框获取焦点，键盘自动弹出</h4><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">TextField(</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 键盘自动弹出</span></span><br><span class="line">    autofocus: <span class="keyword">true</span>,</span><br><span class="line">),</span><br></pre></td></tr></table></figure>

<hr>
<p><strong>未完待续~</strong></p>
]]></content>
      <categories>
        <category>Flutter之旅</category>
      </categories>
      <tags>
        <tag>Flutter</tag>
      </tags>
  </entry>
  <entry>
    <title>提高Github国内访问速度</title>
    <url>/2021/02/27/github-so-faster/</url>
    <content><![CDATA[<p>最近几天发现访问Github速度有点慢，偶尔还会出现下面的情况。但是通过手机访问是正常的，突然间反应过来可能是DNS的问题。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20210227174038.png" alt="20210227174038"></p>
<p>Github在中国大陆访问速度特别慢的原因，主要还是GitHub的分发加速网络的域名遭到DNS污染导致的。</p>
<p>一般情况下，通过修改Hosts文件就能解决这个问题。另外还可以使用代理，当然，使用代理的方法这里暂且不表。</p>
<h4 id="获取被污染域名实际ip地址"><a href="#获取被污染域名实际ip地址" class="headerlink" title="获取被污染域名实际ip地址"></a>获取被污染域名实际ip地址</h4><p>这里推荐使用下面的查询工具来获得这些github域名的ip地址</p>
<ul>
<li><a href="https://www.ipaddress.com/ip-lookup" target="_blank" rel="noopener">https://www.ipaddress.com/ip-lookup</a></li>
</ul>
<h4 id="修改系统hosts文件"><a href="#修改系统hosts文件" class="headerlink" title="修改系统hosts文件"></a>修改系统hosts文件</h4><p>打开 <code>hosts</code> 文件，在文件末尾添加以下格式的内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">140.82.114.3 github.com</span><br></pre></td></tr></table></figure>

<p>这里推荐使用 <code>SwitchHosts</code> 这个小工具来管理系统的Hosts文件。</p>
<ul>
<li><a href="https://github.com/oldj/SwitchHosts/releases" target="_blank" rel="noopener">SwitchHosts release</a></li>
</ul>
<p>之后，待本机的DNS缓存刷新生效，就能享受高速的Github访问了。</p>
<h4 id="需要获取哪些域名"><a href="#需要获取哪些域名" class="headerlink" title="需要获取哪些域名"></a>需要获取哪些域名</h4><p>不过，Github的域名除了主域名 <code>github.com</code> 之外，还有好多的二级域名。例如有时候虽然我们能正常的访问github主页或仓库页面，但会发现头像加载不出来。</p>
<p>这里我整理了我使用的Github相关的 <code>hosts</code> 文件，你可以直接使用。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># github</span><br><span class="line"></span><br><span class="line">140.82.114.3 github.com</span><br><span class="line">140.82.113.4 gist.github.com</span><br><span class="line">185.199.109.133 raw.github.com</span><br><span class="line">185.199.109.153 assets-cdn.github.com</span><br><span class="line"></span><br><span class="line">185.199.109.133 raw.githubusercontent.com</span><br><span class="line">185.199.109.133 gist.githubusercontent.com</span><br><span class="line">185.199.109.133 camo.githubusercontent.com</span><br><span class="line">185.199.109.133 cloud.githubusercontent.com</span><br><span class="line">185.199.109.133 avatars.githubusercontent.com</span><br><span class="line">185.199.109.133 avatars0.githubusercontent.com</span><br><span class="line">185.199.109.133 avatars1.githubusercontent.com</span><br><span class="line">185.199.109.133 avatars2.githubusercontent.com</span><br><span class="line">185.199.109.133 avatars3.githubusercontent.com</span><br><span class="line">185.199.109.133 avatars4.githubusercontent.com</span><br><span class="line">185.199.109.133 avatars5.githubusercontent.com</span><br><span class="line">185.199.109.133 avatars6.githubusercontent.com</span><br><span class="line">185.199.109.133 avatars7.githubusercontent.com</span><br><span class="line">185.199.109.133 avatars8.githubusercontent.com</span><br><span class="line"></span><br><span class="line">52.216.29.28 github-production-release-asset-2e65be.s3.amazonaws.com</span><br></pre></td></tr></table></figure>


<p>这是目前最新的github可用ip地址。</p>
<p>如果你使用的时候发现访问慢，可以依照上面的操作步骤更新这些地址。</p>
]]></content>
      <categories>
        <category>Git操作系列</category>
      </categories>
      <tags>
        <tag>Github</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang国内代理选哪个</title>
    <url>/2021/02/22/golang-proxy-choice/</url>
    <content><![CDATA[<p>目前在国内，比较有名的golang代理有两个： <code>goproxy.io</code> 和 <code>goproxy.cn</code> 。</p>
<h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>最近在开发golang项目过程中，通过 <code>go get</code> 安装依赖时总会出现报错的情况。</p>
<p>错误信息如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜ go get -u github.com&#x2F;tidwall&#x2F;gjson</span><br><span class="line">go: downloading github.com&#x2F;tidwall&#x2F;gjson v1.6.8</span><br><span class="line">go get github.com&#x2F;tidwall&#x2F;gjson: github.com&#x2F;tidwall&#x2F;gjson@v1.6.8: Get &quot;https:&#x2F;&#x2F;proxy.golang.com.cn&#x2F;github.com&#x2F;tidwall&#x2F;gjson&#x2F;@v&#x2F;v1.6.8.zip&quot;: stopped after 10 redirects</span><br></pre></td></tr></table></figure>


<p>我一直使用的是 <code>goproxy.io</code> 这个国内代理。</p>
<p>查看一下golang配置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜ go env</span><br><span class="line">GO111MODULE&#x3D;&quot;on&quot;</span><br><span class="line">GOARCH&#x3D;&quot;amd64&quot;</span><br><span class="line">GOHOSTOS&#x3D;&quot;darwin&quot;</span><br><span class="line">GOPROXY&#x3D;&quot;https:&#x2F;&#x2F;goproxy.io,direct&quot;</span><br><span class="line">GOROOT&#x3D;&quot;&#x2F;usr&#x2F;local&#x2F;go&quot;</span><br></pre></td></tr></table></figure>

<p>上网一查才发现 <code>goproxy.io</code> 和 <code>goproxy.cn</code> 并不是一家，之前一直以为是同一个服务的两个不同域名。</p>
<h4 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h4><p>配置 <code>goproxy.cn</code> 代理：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜ export GO111MODULE&#x3D;on</span><br><span class="line"></span><br><span class="line">➜ export GOPROXY&#x3D;https:&#x2F;&#x2F;goproxy.cn,direct</span><br></pre></td></tr></table></figure>


<p>查看配置信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜ go env</span><br><span class="line">GO111MODULE&#x3D;&quot;on&quot;</span><br><span class="line">GOARCH&#x3D;&quot;amd64&quot;</span><br><span class="line">GOHOSTARCH&#x3D;&quot;amd64&quot;</span><br><span class="line">GOHOSTOS&#x3D;&quot;darwin&quot;</span><br><span class="line">GOOS&#x3D;&quot;darwin&quot;</span><br><span class="line">GOPROXY&#x3D;&quot;https:&#x2F;&#x2F;goproxy.cn,direct&quot;</span><br><span class="line">GOROOT&#x3D;&quot;&#x2F;usr&#x2F;local&#x2F;go&quot;</span><br></pre></td></tr></table></figure>


<p>执行 <code>go get</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜ go get -u github.com&#x2F;tidwall&#x2F;gjson</span><br><span class="line">go: downloading github.com&#x2F;tidwall&#x2F;gjson v1.6.8</span><br><span class="line">go: github.com&#x2F;tidwall&#x2F;gjson upgrade &#x3D;&gt; v1.6.8</span><br><span class="line">go: downloading github.com&#x2F;tidwall&#x2F;match v1.0.3</span><br><span class="line">go: downloading github.com&#x2F;tidwall&#x2F;pretty v1.0.2</span><br><span class="line">go: github.com&#x2F;tidwall&#x2F;pretty upgrade &#x3D;&gt; v1.0.5</span><br><span class="line">go: downloading github.com&#x2F;tidwall&#x2F;pretty v1.0.5</span><br></pre></td></tr></table></figure>


<p>换用 <code>goproxy.cn</code> 后，发现 <code>go get</code> 命令已经没有问题了。</p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>Golang代理就用 <code>goproxy.cn</code> 。</p>
<p><code>goproxy.cn</code> 现在是部署在七牛云上，所以稳定性还是很有保证的。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ export GO111MODULE&#x3D;on</span><br><span class="line">$ export GOPROXY&#x3D;https:&#x2F;&#x2F;goproxy.cn,direct</span><br></pre></td></tr></table></figure>

<p>Go 1.13 以后版本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ go env -w GO111MODULE&#x3D;on</span><br><span class="line">$ go env -w GOPROXY&#x3D;https:&#x2F;&#x2F;goproxy.cn,direct</span><br></pre></td></tr></table></figure>


<h4 id="相关"><a href="#相关" class="headerlink" title="相关"></a>相关</h4><ul>
<li><a href="https://goproxy.io/zh/docs/getting-started.html" target="_blank" rel="noopener">goproxy.io 快速上手</a></li>
<li><a href="https://goproxy.cn/" target="_blank" rel="noopener">Goproxy.cn China</a></li>
<li><a href="https://github.com/goproxy/goproxy.cn/issues/61" target="_blank" rel="noopener">问题：goproxy.io 和 goproxy.cn 是什么关系</a></li>
</ul>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>IOS苹方字体的字重和FontWeight值的对应关系</title>
    <url>/2020/12/23/pingfangsc-and-flutter-fontweight/</url>
    <content><![CDATA[<h4 id="疑问"><a href="#疑问" class="headerlink" title="疑问"></a>疑问</h4><p>在用 <code>Flutter</code> 做移动端开发时，在蓝湖上看到字体的属性为：</p>
<blockquote>
<p>字体：  苹方-简 细体<br>字重：  Light</p>
</blockquote>
<p>那么，这个 <code>细体 Light</code> 对应的 <code>FontWeight</code> 到底是多少呢？</p>
<h4 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h4><p>目前 iOS 系统中 <code>苹方-简</code> 字体包含六种字重：</p>
<p><code>Ultralight</code>、<code>Thin</code>、<code>Light</code>、<code>Regular</code>、<code>Medium</code>、<code>Semibold</code></p>
<p>和 <code>Flutter</code> 中的 <code>FontWeight值</code> 对应关系如下：</p>
<table>
<thead>
<tr>
<th>中文</th>
<th>英文</th>
<th>FontWeight值</th>
</tr>
</thead>
<tbody><tr>
<td>苹方-简 极细体</td>
<td>PingFangSC-Ultralight</td>
<td><code>w100</code></td>
</tr>
<tr>
<td>苹方-简 纤细体</td>
<td>PingFangSC-Thin</td>
<td><code>w200</code></td>
</tr>
<tr>
<td>苹方-简 细体</td>
<td>PingFangSC-Light</td>
<td><code>w300</code></td>
</tr>
<tr>
<td>苹方-简 常规体</td>
<td>PingFangSC-Regular</td>
<td><code>w400</code> or <code>normal</code></td>
</tr>
<tr>
<td>苹方-简 中黑体</td>
<td>PingFangSC-Medium</td>
<td><code>w500</code></td>
</tr>
<tr>
<td>苹方-简 中粗体</td>
<td>PingFangSC-Semibold</td>
<td><code>w600</code></td>
</tr>
</tbody></table>
<h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>需要注意一点：<code>Flutter</code> 中 <code>FontWeight.bold</code> 对应的值是 <code>w700</code> 。</p>
<p>我在之前的开发中，看到蓝湖中标注为 <code>苹方-简 中黑体 Medium</code> 的字体就会设置为 <code>fontWeight: FontWeight.bold,</code> 后来才发现一直设置的都是错的。</p>
]]></content>
      <categories>
        <category>Flutter之旅</category>
      </categories>
      <tags>
        <tag>Flutter</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker中批量删除tag为none的镜像</title>
    <url>/2020/12/18/remove-docker-tag-none-images/</url>
    <content><![CDATA[<p>当使用Docker进行多阶段构建或者更新镜像版本后，查看所有镜像会发现产生一些tag为 <code>none</code> 的无用镜像，这些镜像被称为悬挂镜像（<code>dangling image</code>）。</p>
<h4 id="查看所有镜像"><a href="#查看所有镜像" class="headerlink" title="查看所有镜像"></a>查看所有镜像</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure>

<h4 id="查看所有标记为-none-的镜像"><a href="#查看所有标记为-none-的镜像" class="headerlink" title="查看所有标记为 none 的镜像"></a>查看所有标记为 <code>none</code> 的镜像</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker images -f &quot;dangling&#x3D;true&quot;</span><br></pre></td></tr></table></figure>


<h4 id="移除所有标记为-none-的镜像"><a href="#移除所有标记为-none-的镜像" class="headerlink" title="移除所有标记为 none 的镜像"></a>移除所有标记为 <code>none</code> 的镜像</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker rmi $(docker images -f &quot;dangling&#x3D;true&quot; -q)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Docker容器技术</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>什么才是高情商的表现</title>
    <url>/2020/12/03/what-is-the-expression-of-high-eq/</url>
    <content><![CDATA[<blockquote>
<p>和别人一起谈论时，不要随意插嘴，一定要等别人把话说完，自己再发表看法，这样别人会觉得你很有礼貌，会倾向于理解你的观点。</p>
</blockquote>
<blockquote>
<p>聊天不说「在吗」，有时开门见山，少了所谓的礼节，沟通效率大幅提升。</p>
</blockquote>
<blockquote>
<p>听懂别人的客套话。</p>
<p>偶然的场合遇到熟人，说请客吃饭的多半是客套话，别当真。</p>
</blockquote>
<blockquote>
<p>即使是穿同一条裤子长大的，去串门也要捎上点东西。别人说你见外是客套，你带东西是礼节，合起来就叫人情世故。</p>
</blockquote>
<blockquote>
<p>生气的时候不要做任何决策，人愤怒的时候智商为零。</p>
</blockquote>
<blockquote>
<p>别人跟自己讲话，眼睛要注视着对方，这是尊重对方的表现，也会提升别人对自己的好感。</p>
</blockquote>
<blockquote>
<p>在备忘录里，将好朋友的生日记录下来，并设置提醒。不用追求送出什么大礼，只要在那一天给他送上祝福，对方就会很开心。因为生日被别人记住是一件很温暖的事情。</p>
</blockquote>
<blockquote>
<p>事成前不声张，话不说太满。这样成功了会让人眼前一亮，失败了也不会啪啪打脸。</p>
</blockquote>
<blockquote>
<p>收到回复是成年人的社交第一课。</p>
<p>收到信息第一时间先回复，如果在忙或者不想聊，可以先说有事，稍后再聊，这样下一次聊天时才不会尴尬和难堪。</p>
</blockquote>
<blockquote>
<p>通知消息，最好报喜又报忧。比如你买了一套房子，通知朋友，可能他们会被刺激到觉得难受，但你再说一句，贷款买的，欠了几百万，他们就会好受一些。</p>
<p>过得比别人好的时候呢，说话要喜忧参半，你比他们好的那部分，要用一半坏事来平衡，比如买了房，就要说还要还贷款，太累了，你去国外旅游了，就要吐槽两句当地导游太坑了。</p>
</blockquote>
<blockquote>
<p>去做客不要两手空空，就算只是给他们买点零食水果，也会大幅度提升对方的好感。</p>
</blockquote>
<blockquote>
<p>运动健身、早睡早起、三餐规律、多读好书，如果你真的想不明白自己要什么，做这些永远不会错。</p>
</blockquote>
<blockquote>
<p>和家人聚在一起时，眼里不要只有手机。抬头看看，你说不定就能看到他们眼中的欲言又止和失落。</p>
</blockquote>
<blockquote>
<p>及时记下闪现的灵感。无论是电子还是纸质，你以为你过目不忘，你的大脑是资源库么，将每日灵感日积月累记下来准没错。</p>
</blockquote>
<blockquote>
<p>不要熬夜！不要熬夜！！不要熬夜！！！</p>
</blockquote>
<blockquote>
<p>养成每天阅读的习惯。读书越多，就越知道自己最缺什么和最想要什么。</p>
</blockquote>
<blockquote>
<p>专注高效地只做一件事，你会发现你不止做成了一件事。</p>
</blockquote>
<blockquote>
<p>朋友圈看人要反着看，你能看到的内容，都只是对方想让你看到的，而不想让你看到的部分，才是最真实的他。</p>
</blockquote>
<blockquote>
<p>改天吧，其实就是算了吧的意思。</p>
</blockquote>
<blockquote>
<p>情侣之间觉得无聊的时候，可以多去体验一些新的事物。</p>
</blockquote>
<blockquote>
<p>你对别人的好，越没有底线，你的付出就越廉价。</p>
</blockquote>
<blockquote>
<p>在饭桌上不要劝别人，比如，才吃了这么点就饱了？再吃点吧，我去给你盛，可能你觉得对方是拘谨，没准其实是饭菜不合口，又比如，哎呀，我给你说，这个菜可好吃了，你一定得尝尝，可能你觉得是山珍海味，在别人吃起来就很一般，有时候一个人太过热情，会让对方觉得不舒服。</p>
</blockquote>
]]></content>
      <categories>
        <category>人生随感</category>
      </categories>
      <tags>
        <tag>人生感悟</tag>
      </tags>
  </entry>
  <entry>
    <title>我就想做个入职体检，怎么就这么难呢</title>
    <url>/2020/07/13/ruzhi-tijian/</url>
    <content><![CDATA[<p>7月10号，周五，打算去北京的三甲医院做个入职体检。</p>
<h4 id="遭遇"><a href="#遭遇" class="headerlink" title="遭遇"></a>遭遇</h4><p>在地图上找到了回龙观附近的一家三甲医院，悲催的我到了那里却被告知需要通过114提前预约，凭预约号和健康宝才可以进入。</p>
<p>才想起来上一次去北京的三甲医院好像已经是三年前的时候了。现在都需要提前网上预约才行。</p>
<p>然后，打114客服进行预约。首先需要提供个人信息实名注册。</p>
<p>问了一下所在的这家医院，入职体检的预约号只有下周五的可以约，下周六的号还没放。我考虑着刚上班就请假似乎不太好，最后决定还是换家医院吧。</p>
<p>然后，我说了附近的另外一家三甲医院，114的客服说这家医院没有体检科，不能预约。倒是可以给你提供医院的电话你自己咨询。</p>
<p>哎，最后只得作罢。</p>
<p>在回去的路上，跟朋友聊天说起今天的遭遇，还真有种 “起个大早，赶了个晚集” 的无奈，没想到却卡在一个预约号上。</p>
<hr>
<h4 id="体检中心"><a href="#体检中心" class="headerlink" title="体检中心"></a>体检中心</h4><p>花了点时间，整理了一下我了解到的几家医院的体检预约及相关信息。</p>
<h5 id="北京市海淀医院"><a href="#北京市海淀医院" class="headerlink" title="北京市海淀医院"></a>北京市海淀医院</h5><p>北京市海淀医院（北京大学第三医院海淀院区） 健康管理中心</p>
<p>地址：北京市海淀区中关村大街29号</p>
<p>体检中心电话：010-82693332</p>
<p>在 《海淀医院健康管理中心》 微信小程序 上选择相应的体检类目即可。</p>
<p>检查时间可以在提交预约信息时看到，周一到周六可以检查，周日休息。</p>
<p>相比之下，感觉价格略贵。</p>
<h5 id="北京积水潭医院回龙观院区"><a href="#北京积水潭医院回龙观院区" class="headerlink" title="北京积水潭医院回龙观院区"></a>北京积水潭医院回龙观院区</h5><p>地址：北京市昌平区回龙观龙禧二街附近</p>
<p>在 《京医通》 微信公众号上申请</p>
<p>选择 <code>社区医学科</code> – <code>社区医学科门诊回龙观</code> – <code>健康管理</code> 号源 （这个是我特意去了一趟，向医院的咨询台的大夫询问的）</p>
<p>只有周一到周五可以检查。</p>
<h5 id="北京市昌平区中西医结合医院"><a href="#北京市昌平区中西医结合医院" class="headerlink" title="北京市昌平区中西医结合医院"></a>北京市昌平区中西医结合医院</h5><p>北京市昌平区中西医结合医院 体检中心科室</p>
<p>地址：北京市昌平区黄平路219号</p>
<p>在 《北京114预约挂号》 微信公众号上选择 底部菜单<code>就医服务</code> – <code>预约挂号</code> – 搜索“北京市昌平区中西医结合医院” – 科室选择 <code>体检中心</code> – <code>入职体检</code></p>
<p>也可以打114预约</p>
<p>经过我在周末这两天的观察发现，很大可能上也是只有周一到周五可以检查。因为周六和周日一直是显示“无号”的状态。</p>
<p>例如周六的10:15开始放号，10:16的时候我刷新页面，就已经显示“无号”了。</p>
<hr>
<h4 id="体会"><a href="#体会" class="headerlink" title="体会"></a>体会</h4><h5 id="态度"><a href="#态度" class="headerlink" title="态度"></a>态度</h5><p>114的客服人员态度很好，唯一让我感觉不好的一点是你必须准确的说明你要挂哪个科室，他们才能帮你挂号。并不像是医院的那种咨询台一样，他们会很清楚这家医院的具体科室，即使你说的很模糊他们也会准确的告知。</p>
<p>但114的客服人员如果不清楚的话，也会给你提供这家医院的电话让你自己去咨询，了解清楚了之后再来重新挂号。</p>
<p>医院的客服人员态度就不是那么好了。比如我是在高德地图上搜到了海淀医院的电话，接听的医生态度很。。。，我只能说 哎算了，理解一下吧。</p>
<h5 id="提前准备"><a href="#提前准备" class="headerlink" title="提前准备"></a>提前准备</h5><p>无论是114，京医通，还是健康管理中心小程序或者还有其他的，光一个小小的体检项目就要区分这么多预约入口，更别说看病了。</p>
<p>北京的医院有很多，如果你是很久没有和医院打交道的话，光这些就会把人搞得头昏眼花的。因为每个医院和每个医院都不一样。</p>
<p>北京这么多医院，居然连一个统一的挂号平台都<del>没有</del>……，好像114算是北京市的预约挂号统一平台。但有一点需要指出的是，比如说上面的我提到的 “北京积水潭医院回龙观院区” 是有体检的项目的，但在114电话预约或微信公众号上你是找不到体检科室的，如果没有对应的科室，114的客服人员也是不清楚的。除非你准确的说明你要挂哪个科室客服人员才会帮你挂号。</p>
<p>所以，我的建议是：提前做好准备，提前了解清楚。</p>
<p>另外，用我的亲身实践要告诉你的：三甲医院都是要提前预约的。</p>
<h5 id="感慨"><a href="#感慨" class="headerlink" title="感慨"></a>感慨</h5><p>最后，还是要感叹一句：有啥别有病，平时还是要多注意，毕竟身体是革命的本钱嘛。（当你看到医院门口被堵的水泄不通的时候，一定会对这句号有更深的理解）</p>
<p>谁曾想这已是一个连看病都排不上号的年代了。</p>
<p>以上感受可能有些片面，如有错误，欢迎指正。</p>
<p>最后的最后，我只好选择了体检机构。</p>
]]></content>
      <tags>
        <tag>人在帝都</tag>
      </tags>
  </entry>
  <entry>
    <title>Flutter音频录制插件flutter_sound配置</title>
    <url>/2020/06/30/how-to-use-flutter-sound-plugin/</url>
    <content><![CDATA[<p>最近在开发的一个 Flutter App 中需要用到录音的功能，经过对几款插件的比较，最终确定了采用 <a href="https://pub.dev/packages/flutter_sound" target="_blank" rel="noopener">flutter_sound</a> 这款插件来实现。Flutter Sound 插件为Android和iOS平台提供了简单的记录器和播放器功能。</p>
<p><code>flutter_sound</code> 插件目前有两个版本： <code>v4.x.x</code> 和 <code>v5.x.x</code> ，我直接使用的是最新的 <code>v5.1.0</code> 。</p>
<p>有录音必然要有播放，播放的的话我并没有选用 <code>flutter_sound</code> 来同时实现，而是采用里另一款评价量高的插件 <a href="https://pub.dev/packages/audioplayers" target="_blank" rel="noopener">audioplayers</a> 。</p>
<hr>
<h4 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dependencies:</span><br><span class="line">  # 必需</span><br><span class="line">  permission_handler: ^5.0.1</span><br><span class="line">  path_provider: ^1.6.11</span><br><span class="line">  audioplayers: ^0.15.1</span><br><span class="line">  flutter_sound: ^5.0.0</span><br><span class="line">  </span><br><span class="line">  # 可选</span><br><span class="line">  intl: ^0.16.1</span><br><span class="line">  filesize: ^1.0.4</span><br><span class="line">  uuid: ^2.1.0</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="设置权限"><a href="#设置权限" class="headerlink" title="设置权限"></a>设置权限</h4><h5 id="Ios权限"><a href="#Ios权限" class="headerlink" title="Ios权限"></a>Ios权限</h5><p>需要获取使用麦克风权限和后台录音权限。</p>
<p>在文件 <code>ios/Runner/info.plist</code> 中添加：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;key&gt;NSMicrophoneUsageDescription&lt;&#x2F;key&gt;</span><br><span class="line">&lt;string&gt;Need microphone access for recording&lt;&#x2F;string&gt;</span><br><span class="line">&lt;key&gt;UIBackgroundModes&lt;&#x2F;key&gt;</span><br><span class="line">&lt;array&gt;</span><br><span class="line">	&lt;string&gt;audio&lt;&#x2F;string&gt;</span><br><span class="line">&lt;&#x2F;array&gt;</span><br></pre></td></tr></table></figure>

<h5 id="Android权限"><a href="#Android权限" class="headerlink" title="Android权限"></a>Android权限</h5><p>在文件 <code>android/app/src/main/AndroidManifest.xml</code> 中添加:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;uses-permission android:name&#x3D;&quot;android.permission.RECORD_AUDIO&quot; &#x2F;&gt;</span><br><span class="line">&lt;uses-permission android:name&#x3D;&quot;android.permission.FOREGROUND_SERVICE&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="真机调试初始化"><a href="#真机调试初始化" class="headerlink" title="真机调试初始化"></a>真机调试初始化</h4><h5 id="Ios"><a href="#Ios" class="headerlink" title="Ios"></a>Ios</h5><p><strong>首先</strong>，修改 <code>ios/Podfile</code> 文件中的 <code>platform</code>:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># platform :ios, &#39;9.0&#39;</span><br><span class="line"></span><br><span class="line"># 修改成：</span><br><span class="line"></span><br><span class="line">platform :ios, &#39;11.0&#39;</span><br></pre></td></tr></table></figure>

<p><strong>然后</strong>在 <code>ios</code> 目录下执行 <code>pod install</code> 安装所需依赖：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd ios</span><br><span class="line">pod install</span><br></pre></td></tr></table></figure>

<p><strong>最后</strong>，第一次真机运行<strong>一定要</strong>通过 <code>XCode</code> 来执行 <code>Build</code> 操作。</p>
<ol>
<li>在 <code>Finder</code> 中打开 <code>ios</code> 目录，找到 <code>Runner.xcworkspace</code> 文件，选择用 <code>XCode</code> 打开。</li>
<li>配置 <code>Team</code> ：依次选择 <code>左侧目录栏 Runner</code> – <code>TARGETS 中 Runner</code> – <code>Singing&amp;Capabilities</code> – 点击 <code>Team</code> 选项，选择 <code>Apple ID</code> 账户或新增。</li>
<li>执行 <code>Build</code> 操作。</li>
</ol>
<h5 id="Ios配置注意"><a href="#Ios配置注意" class="headerlink" title="Ios配置注意"></a>Ios配置注意</h5><p>上面的最后一步操作中，一定要先通过 <code>XCode</code> 来进行 <code>Build</code> 操作。否则的话，如果你是直接在 <code>VSCode</code> 中执行 <code>flutter run</code> ，会报如下的错误：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">...</span><br><span class="line">&#x2F;Users&#x2F;project&#x2F;myflutter_test&#x2F;build&#x2F;ios&#x2F;Debug-iphonesimulator&#x2F;flutter_sound&#x2F;flutter_sound.framework&#x2F;Headers&#x2F;TrackPlayer.h:42:38: warning: pointer is missing a nullability type specifier (_Nonnull, _Nullable, or _Null_unspecified) [-Wnullability-completeness]</span><br><span class="line">- (void)nowPlaying:(FlutterMethodCall*)call result: (FlutterResult)result;</span><br><span class="line">                                     ^</span><br><span class="line">&#x2F;Users&#x2F;project&#x2F;myflutter_test&#x2F;build&#x2F;ios&#x2F;Debug-iphonesimulator&#x2F;flutter_sound&#x2F;flutter_sound.framework&#x2F;Headers&#x2F;TrackPlayer.h:42:38: note: insert &#39;_Nullable&#39; if the pointer may be null</span><br><span class="line">- (void)nowPlaying:(FlutterMethodCall*)call result: (FlutterResult)result;</span><br><span class="line">                                     ^</span><br><span class="line">                                      _Nullable</span><br><span class="line">&#x2F;Users&#x2F;project&#x2F;myflutter_test&#x2F;build&#x2F;ios&#x2F;Debug-iphonesimulator&#x2F;flutter_sound&#x2F;flutter_sound.framework&#x2F;Headers&#x2F;TrackPlayer.h:42:38: note: insert &#39;_Nonnull&#39; if the pointer should never be null</span><br><span class="line">- (void)nowPlaying:(FlutterMethodCall*)call result: (FlutterResult)result;</span><br><span class="line">                                     ^</span><br><span class="line">                                      _Nonnull</span><br><span class="line">&#x2F;Users&#x2F;project&#x2F;myflutter_test&#x2F;build&#x2F;ios&#x2F;Debug-iphonesimulator&#x2F;flutter_sound&#x2F;flutter_sound.framework&#x2F;Headers&#x2F;TrackPlayer.h:42:54: warning: block pointer is missing a nullability type specifier (_Nonnull, _Nullable, or _Null_unspecified) [-Wnullability-completeness]</span><br><span class="line">- (void)nowPlaying:(FlutterMethodCall*)call result: (FlutterResult)result;</span><br><span class="line">                                                     ^</span><br><span class="line">&#x2F;Users&#x2F;project&#x2F;myflutter_test&#x2F;build&#x2F;ios&#x2F;Debug-iphonesimulator&#x2F;flutter_sound&#x2F;flutter_sound.framework&#x2F;Headers&#x2F;TrackPlayer.h:42:54: note: insert &#39;_Nullable&#39; if the block pointer may be null</span><br><span class="line">- (void)nowPlaying:(FlutterMethodCall*)call result: (FlutterResult)result;</span><br><span class="line">                                                     ^</span><br><span class="line">                                                                   _Nullable</span><br><span class="line">&#x2F;Users&#x2F;project&#x2F;myflutter_test&#x2F;build&#x2F;ios&#x2F;Debug-iphonesimulator&#x2F;flutter_sound&#x2F;flutter_sound.framework&#x2F;Headers&#x2F;TrackPlayer.h:42:54: note: insert &#39;_Nonnull&#39; if the block pointer should never be null</span><br><span class="line">- (void)nowPlaying:(FlutterMethodCall*)call result: (FlutterResult)result;</span><br><span class="line">                                                     ^</span><br><span class="line">                                                                   _Nonnull</span><br><span class="line">                                                            ...</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h5 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h5><p>打开 <code>android/build.gradle</code> 文件：</p>
<p>将其中的<strong>两处</strong> ：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">repositories &#123;</span><br><span class="line">    google()</span><br><span class="line">    jcenter()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">repositories &#123;</span><br><span class="line">    &#x2F;&#x2F; google()</span><br><span class="line">    &#x2F;&#x2F; jcenter()</span><br><span class="line">    maven &#123; url &#39;https:&#x2F;&#x2F;maven.aliyun.com&#x2F;nexus&#x2F;content&#x2F;repositories&#x2F;google&#39; &#125;</span><br><span class="line">    maven &#123; url &#39;https:&#x2F;&#x2F;maven.aliyun.com&#x2F;nexus&#x2F;content&#x2F;repositories&#x2F;jcenter&#39;&#125;</span><br><span class="line">    maven &#123; url &#39;https:&#x2F;&#x2F;maven.aliyun.com&#x2F;repository&#x2F;public&#x2F;&#39; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
]]></content>
      <categories>
        <category>Flutter之旅</category>
      </categories>
      <tags>
        <tag>Flutter</tag>
      </tags>
  </entry>
  <entry>
    <title>更改Mac文件的默认打开方式</title>
    <url>/2020/05/22/mac-default-opening-mode/</url>
    <content><![CDATA[<h4 id="更改某一个文件的默认打开方式"><a href="#更改某一个文件的默认打开方式" class="headerlink" title="更改某一个文件的默认打开方式"></a>更改某一个文件的默认打开方式</h4><ol>
<li>右键单击该文件</li>
<li>按下 <code>Option</code> 键，你会看到 <code>「打开方式」</code> 选项变成了<code>「始终以此方式打开」</code></li>
<li>选择 <code>「始终以此方式打开」</code> 列表内的某一个应用程序</li>
</ol>
<p>注意：这种方式<strong>只适用于</strong>你所选择的<strong>这一个</strong>文件，并<strong>不适用于</strong>其他文件，包括同一类型的文件。</p>
<hr>
<h4 id="更改同类型文件的默认打开方式"><a href="#更改同类型文件的默认打开方式" class="headerlink" title="更改同类型文件的默认打开方式"></a>更改同类型文件的默认打开方式</h4><ol>
<li>右键单击该文件，然后选择 <code>「显示简介」</code> 选项</li>
<li>找到 <code>「打开方式」</code> 项目，点击 <code>倒三角</code> 选择你想指定的默认应用程序</li>
<li>单击 <code>「全部更改」</code> 按钮即可生效</li>
</ol>
<hr>
]]></content>
      <categories>
        <category>工具技巧</category>
      </categories>
      <tags>
        <tag>Skill</tag>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title>七牛云上传traefik生成的Let&#39;s Encrypt自有证书</title>
    <url>/2020/05/22/qiniu-use-https-cert/</url>
    <content><![CDATA[<p>通过 traefik 结合 Let’s Encrypt 生成的 https 自有证书文件，默认会生成 <code>.key</code> 和 <code>.crt</code> 格式的证书。但是如果使用了七牛云的图片外链，七牛云中配置的 https 加速域名也需要上传相应的证书，但证书格式必须为 <code>.pem</code> 的。</p>
<hr>
<h4 id="数字证书格式转换：-key-和-crt-转换成-pem-格式"><a href="#数字证书格式转换：-key-和-crt-转换成-pem-格式" class="headerlink" title="数字证书格式转换：.key 和.crt 转换成.pem 格式"></a>数字证书格式转换：.key 和.crt 转换成.pem 格式</h4><p>将 <code>.crt</code> 证书文件转换为 <code>.pem</code> 格式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">openssl x509 -in temp.crt -outform pem -out temp.crt.pem</span><br></pre></td></tr></table></figure>

<p>将 <code>.key</code> 证书文件转换为 <code>.pem</code> 格式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">openssl rsa -in temp.key -outform pem -out temp.key.pem</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="上传自有证书"><a href="#上传自有证书" class="headerlink" title="上传自有证书"></a>上传自有证书</h4><p>打开七牛云后台管理</p>
<p>在七牛云 <a href="https://portal.qiniu.com/certificate/ssl#cert" target="_blank" rel="noopener">SSL 证书服务/证书管理</a> 页面上传自有证书信息</p>
<p>左侧菜单栏 – CDN – 域名管理 – 指定域名 配置 – HTTPS 配置 – 修改配置</p>
<p>在 <code>域名 xxxx 可更换证书列表</code> 下 选择刚刚新增的证书 – 确定，等待证书文件生效</p>
<hr>
]]></content>
      <categories>
        <category>HTTPS</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>HTTPS</tag>
      </tags>
  </entry>
  <entry>
    <title>百度网盘视频倍速播放技巧</title>
    <url>/2020/05/22/baidu-video-speed-up/</url>
    <content><![CDATA[<p>百度网盘中的视频在线播放时，默认无法倍速观看。一般可以通过安装插件解决，但是要找到合适的插件还是需要花费一点时间的。</p>
<p>这里我介绍一种相对简单的实现视频倍速播放的技巧：</p>
<p>通过Chrome浏览器打开百度网盘中的视频播放页，点击 <code>F12</code> 后选择 <code>Console</code> 选项卡，输入如下代码并回车：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">videojs.getPlayers(<span class="string">"video-player"</span>).html5player.tech_.setPlaybackRate(<span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<p>代码最后的数字“<strong>2</strong>”为播放倍速，需要几倍你就填写数字几。</p>
<p>当然，也支持小数如 <code>1.2</code> 等。</p>
]]></content>
      <categories>
        <category>工具技巧</category>
      </categories>
      <tags>
        <tag>Skill</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客版本升级到Next7.8.0</title>
    <url>/2020/05/21/upgrade-hexo-next-5-to-7/</url>
    <content><![CDATA[<p>将Hexo博客版本从 <code>hexo v3.7.1 next v5.1.3</code> 升级到 <code>hexo v4.2.1 next v7.8.0</code> 时的一些设置。 </p>
<p><code>Next v5.x</code> 和 <code>Next v7.x</code> 的配置还是有一定差异的。</p>
<h4 id="不蒜子计数统计设置"><a href="#不蒜子计数统计设置" class="headerlink" title="不蒜子计数统计设置"></a>不蒜子计数统计设置</h4><p>找到相应配置文件 <code>next/layout/_third-party/statistics/busuanzi-counter.swig</code></p>
<p>根据 <a href="http://ibruce.info/2015/04/04/busuanzi/" target="_blank" rel="noopener">不蒜子 | 不如</a> 官网中的说明，其中：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">本站总访问量&lt;span id&#x3D;&quot;busuanzi_value_site_pv&quot;&gt;&lt;&#x2F;span&gt;次</span><br><span class="line">本站访客数&lt;span id&#x3D;&quot;busuanzi_value_site_uv&quot;&gt;&lt;&#x2F;span&gt;人次</span><br><span class="line">本文总阅读量&lt;span id&#x3D;&quot;busuanzi_value_page_pv&quot;&gt;&lt;&#x2F;span&gt;次</span><br></pre></td></tr></table></figure>

<p>上面的三个 <code>id</code> 标签部分就表示要显示的统计内容。</p>
<p>找到 <code>busuanzi-counter.swig</code> 文件中的:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;span class&#x3D;&quot;site-uv&quot; title&#x3D;&quot;&#123;&#123; __(&#39;footer.total_visitors&#39;) &#125;&#125;&quot;&gt;</span><br><span class="line">      &lt;span id&#x3D;&quot;busuanzi_value_site_uv&quot;&gt;&lt;&#x2F;span&gt;</span><br><span class="line">&lt;&#x2F;span&gt;</span><br></pre></td></tr></table></figure>

<p>修改为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;span class&#x3D;&quot;site-uv&quot; title&#x3D;&quot;&#123;&#123; __(&#39;footer.total_visitors&#39;) &#125;&#125;&quot;&gt;</span><br><span class="line">  访客数 &lt;span id&#x3D;&quot;busuanzi_value_site_uv&quot;&gt;&lt;&#x2F;span&gt; 人次</span><br><span class="line">&lt;&#x2F;span&gt;</span><br></pre></td></tr></table></figure>

<p>找到：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;span class&#x3D;&quot;site-pv&quot; title&#x3D;&quot;&#123;&#123; __(&#39;footer.total_views&#39;) &#125;&#125;&quot;&gt;</span><br><span class="line">    &lt;span id&#x3D;&quot;busuanzi_value_site_pv&quot;&gt;&lt;&#x2F;span&gt;</span><br><span class="line">&lt;&#x2F;span&gt;</span><br></pre></td></tr></table></figure>

<p>修改为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;span class&#x3D;&quot;site-pv&quot; title&#x3D;&quot;&#123;&#123; __(&#39;footer.total_views&#39;) &#125;&#125;&quot;&gt;</span><br><span class="line">  访问量 &lt;span id&#x3D;&quot;busuanzi_value_site_pv&quot;&gt;&lt;&#x2F;span&gt; 次</span><br><span class="line">&lt;&#x2F;span&gt;</span><br></pre></td></tr></table></figure>

<p>即可。</p>
<hr>
<h4 id="gitalk设置"><a href="#gitalk设置" class="headerlink" title="gitalk设置"></a>gitalk设置</h4><p>找到 <code>/next/layout/_third-party/comments/gitalk.swig</code> 文件：</p>
<p>将其中的 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">id : &#39;&#123;&#123; gitalk_md5(page.path) &#125;&#125;&#39;,</span><br></pre></td></tr></table></figure>

<p>修改为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">id : &#39;&#123;&#123; theme.gitalk.id_prefix &#125;&#125;_&#123;&#123; date(page.date, &quot;YYYYMMDDHHmmss&quot;) &#125;&#125;&#39;,</span><br></pre></td></tr></table></figure>

<p>然后在 <code>_config.yml</code> 中添加：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gitalk: </span><br><span class="line">  enable: true</span><br><span class="line">  ...</span><br><span class="line">  id_prefix: itfanr</span><br><span class="line">  ...</span><br></pre></td></tr></table></figure>

<p>即可。</p>
<p>这里要说明一下，在之前 <code>next v5.1.3</code> 版本中，我设置的 <code>id</code> 值为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">id : &#39;&#123;&#123; theme.gitalk.id_prefix || gitalk &#125;&#125;_&#123;&#123; date(page.date, &quot;YYYYMMDDHHmmss&quot;) &#125;&#125;&#39;,</span><br></pre></td></tr></table></figure>

<p>即如果没有在配置文件中设置参数 <code>id_prefix</code> 的话，会默认使用 <code>gitalk</code> 为前缀，在 <code>Next v7.x</code> 中发现这样设置发布时会报错，所以就去掉了默认值。</p>
<p>对于 <code>labels</code> 的显示，可以参考 <a href="https://github.com/gitalk/gitalk/issues/114" target="_blank" rel="noopener">Error: u.concat(…).join is not a function</a></p>
<hr>
<h4 id="博客置顶设置"><a href="#博客置顶设置" class="headerlink" title="博客置顶设置"></a>博客置顶设置</h4><p>安装插件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-index-pin-top --save</span><br><span class="line">npm uninstall hexo-generator-index --save</span><br></pre></td></tr></table></figure>

<p>修改博客文件目录中的 <code>/themes/next/layout/_macro/post.swig</code> 文件。</p>
<p>找到 <code>&lt;div class=&quot;post-meta&quot;&gt;</code> ，在下面添加</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;%- if post.top %&#125;</span><br><span class="line">&lt;i class&#x3D;&quot;fa fa-thumbtack&quot;&gt;&lt;&#x2F;i&gt;</span><br><span class="line">&lt;font color&#x3D;&#39;#f05050&#39;&gt;置顶&lt;&#x2F;font&gt;</span><br><span class="line">&lt;span class&#x3D;&quot;post-meta-divider&quot;&gt;|&lt;&#x2F;span&gt;</span><br><span class="line">&#123;%- endif %&#125;</span><br></pre></td></tr></table></figure>

<p>然后往上面找到 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% elif is_index %&#125;</span><br></pre></td></tr></table></figure>

<p>和</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;%- else %&#125;</span><br></pre></td></tr></table></figure>

<p>之间的部分，在 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;%- endif %&#125;</span><br><span class="line">&#123;&#123; next_url(post.path, post.title or __(&#39;post.untitled&#39;), &#123;class: &#39;post-title-link&#39;, itemprop: &#39;url&#39;&#125;) &#125;&#125;</span><br></pre></td></tr></table></figure>

<p>的中间加上</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;%- if post.top %&#125;&lt;font color&#x3D;&quot;#f05050&quot;&gt;[置顶] &lt;&#x2F;font&gt; &#123;%- endif %&#125;</span><br></pre></td></tr></table></figure>

<p>即:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;%- endif %&#125;</span><br><span class="line">&#123;%- if post.top %&#125;&lt;font color&#x3D;&quot;#f05050&quot;&gt;[置顶] &lt;&#x2F;font&gt; &#123;%- endif %&#125;</span><br><span class="line">&#123;&#123; next_url(post.path, post.title or __(&#39;post.untitled&#39;), &#123;class: &#39;post-title-link&#39;, itemprop: &#39;url&#39;&#125;) &#125;&#125;</span><br></pre></td></tr></table></figure>

<p>然后在需要设置 <code>置顶</code> 的文章头部添加 <code>top: true</code> 即可。</p>
<hr>
]]></content>
      <categories>
        <category>Hexo博客搭建</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>冯总语录</title>
    <url>/2020/05/20/fengzong-yulu/</url>
    <content><![CDATA[<p>冯总，冯路法。技术主管，CTO。</p>
<p>一些平时的交谈或会议摘要记录。</p>
<p><strong>不是什么人生大道理，只不过是经验罢了。</strong></p>
<hr>
<blockquote>
<p>学习 攒钱 攒人品</p>
</blockquote>
<blockquote>
<p>人品要靠平时攒</p>
</blockquote>
<blockquote>
<p>人要有空杯心态</p>
</blockquote>
<blockquote>
<p>定目标要可量化、可实现</p>
</blockquote>
<blockquote>
<p>做产品要做到：抓住用户的痛点、痒点、爽点(延迟满足)</p>
</blockquote>
<blockquote>
<p>凡事有交代，件件有着落，事事有回音</p>
</blockquote>
<blockquote>
<p>做产品有两种，一种是你想要的，一种是用户想要的。多听听用户的想法。</p>
</blockquote>
<blockquote>
<p>不要在冲动的时候做任何决定</p>
</blockquote>
<blockquote>
<p>小问题上屡教不改的人，如果是在重要岗位上，早晚会出问题。</p>
</blockquote>
<blockquote>
<p>先验证商业模式行不行</p>
</blockquote>
<blockquote>
<p>拿到了A轮的企业，就证明了该公司的商业模式可行。</p>
</blockquote>
<blockquote>
<p>看一个公司是否有发展，要看这个公司所处的行业和团队。</p>
</blockquote>
<blockquote>
<p>挑选团队成员，要找互补的人。</p>
</blockquote>
<blockquote>
<p>企业最大的愿景是 “风险共担，利益共享” 八个字。</p>
</blockquote>
<blockquote>
<p>熟悉业务是最重要的。</p>
</blockquote>
<blockquote>
<p>做产品要看能力和资源。</p>
</blockquote>
<blockquote>
<p>确定开发期限，不要说越快越好，要给出具体的时间点。</p>
</blockquote>
<blockquote>
<p>正儿八经的思考，并不一定要去做。思考的是生存，幻想的是生活。</p>
</blockquote>
<blockquote>
<p>当你犹豫不知道该怎么选择的时候，选择其中最保险最安全的一条。</p>
</blockquote>
<blockquote>
<p>用做产品的心态去写代码。</p>
</blockquote>
<blockquote>
<p>不要从一个人的专业能力来评判他的领导能力。</p>
</blockquote>
<blockquote>
<p>技术leader的根本：技术管理、项目管理、团队管理。</p>
</blockquote>
<blockquote>
<p>装睡的人你永远叫不醒。</p>
</blockquote>
<blockquote>
<p>做产品没办法一步到位，但要规划好每一步的发展。</p>
</blockquote>
<blockquote>
<p>去参加技术大会，并不是让你去学技术，你能记住一到两个知识点就已经很不错了。要了解的是技术发展趋势，看看别人都在做什么，别人都在关注什么。（大意）</p>
</blockquote>
<blockquote>
<p>人最难的是找对方向，有事情做。</p>
</blockquote>
<blockquote>
<p>工作可以不严肃，但一定要严谨。</p>
</blockquote>
<blockquote>
<p>要让团队成员如实写周报。所谓的如实，要包括：做的什么？什么进度？什么结果？如果不如实，会误导上级的判断。</p>
</blockquote>
<blockquote>
<p>工作要有主动性思维。</p>
</blockquote>
<blockquote>
<p>给自己定一个清晰的目标，并主动的去做。</p>
</blockquote>
<blockquote>
<p>人最痛苦的时候是没有方向的时候，人最舒服的时候是有方向有目标的时候。</p>
</blockquote>
<hr>
]]></content>
      <tags>
        <tag>人在帝都</tag>
        <tag>人生感悟</tag>
      </tags>
  </entry>
  <entry>
    <title>临时分支法解决git提交代码冲突</title>
    <url>/2019/10/20/how-to-merge-rejected-git-branch/</url>
    <content><![CDATA[<p>在改动git仓库中的文件时，没有在变更前执行 <code>git pull</code> 而导致本地的代码在后续的改动后和线上的代码不一致，而在commit后准备提交时再执行 <code>git pull</code> 获取代码时却提示 <code>rejected -- non-fast-forward</code> 的错误。</p>
<h4 id="相关"><a href="#相关" class="headerlink" title="相关"></a>相关</h4><ul>
<li><a href="/2018/11/30/how-to-merge-when-main-branch-changed/">Git主分支有更改后如何合并提交 | IT范儿</a></li>
<li><a href="/2019/10/20/how-to-merge-rejected-git-branch-md/">临时分支法解决git提交代码冲突 | IT范儿</a></li>
</ul>
<hr>
<h4 id="临时分支法"><a href="#临时分支法" class="headerlink" title="临时分支法"></a>临时分支法</h4><ol>
<li>创建一个临时分支</li>
<li>将远端待提交分支拉取到本地的临时分支</li>
<li>手动将本地的待提交分支合并到临时分支上</li>
<li>将合并后的临时分支提交到远端的待提交分支</li>
<li>将远端分支拉取到本地，即将冲突合并后的代码更新到本地分支</li>
<li>删除临时分支</li>
</ol>
<hr>
<h4 id="操作记录"><a href="#操作记录" class="headerlink" title="操作记录"></a>操作记录</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜ git pull origin hexo:hexo</span><br><span class="line">From https:&#x2F;&#x2F;github.com&#x2F;leafney&#x2F;Leafney.github.io</span><br><span class="line"> ! [rejected]        hexo       -&gt; hexo  (non-fast-forward)</span><br><span class="line"></span><br><span class="line">➜ git branch</span><br><span class="line">* hexo</span><br><span class="line">master</span><br><span class="line"></span><br><span class="line">➜ git fetch origin hexo:tmp</span><br><span class="line">From https:&#x2F;&#x2F;github.com&#x2F;leafney&#x2F;Leafney.github.io</span><br><span class="line"> * [new branch]      hexo       -&gt; tmp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">➜ git checkout tmp</span><br><span class="line">Switched to branch &#39;tmp&#39;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">➜ git merge hexo</span><br><span class="line">Updating 5b4d8c0..4431abb</span><br><span class="line">Fast-forward</span><br><span class="line"> .gitignore                                                                               |  2 +-</span><br><span class="line"> ...ent-environment-configuration.md &#x3D;&gt; flutter-development-environment-configuration.md&#125; | 10 ++++++----</span><br><span class="line"> 2 files changed, 7 insertions(+), 5 deletions(-)</span><br><span class="line"> rename source&#x2F;_posts&#x2F;&#123;flutter-devemopment-environment-configuration.md &#x3D;&gt; flutter-development-environment-configuration.md&#125; (97%)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">➜ git push origin tmp:hexo</span><br><span class="line">Enumerating objects: 10, done.</span><br><span class="line">Counting objects: 100% (10&#x2F;10), done.</span><br><span class="line">Delta compression using up to 8 threads</span><br><span class="line">Compressing objects: 100% (6&#x2F;6), done.</span><br><span class="line">Writing objects: 100% (6&#x2F;6), 10.98 KiB | 5.49 MiB&#x2F;s, done.</span><br><span class="line">Total 6 (delta 4), reused 0 (delta 0)</span><br><span class="line">remote: Resolving deltas: 100% (4&#x2F;4), completed with 4 local objects.</span><br><span class="line">To https:&#x2F;&#x2F;github.com&#x2F;leafney&#x2F;Leafney.github.io.git</span><br><span class="line">   5b4d8c0..4431abb  tmp -&gt; hexo</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">➜ git checkout hexo</span><br><span class="line">Switched to branch &#39;hexo&#39;</span><br><span class="line">Your branch is up to date with &#39;origin&#x2F;hexo&#39;.</span><br><span class="line"></span><br><span class="line">➜ git pull origin hexo:hexo</span><br><span class="line">Already up to date.</span><br><span class="line"></span><br><span class="line">➜ git branch -D tmp</span><br><span class="line">Deleted branch tmp (was 4431abb).</span><br><span class="line"></span><br><span class="line">➜ git branch</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="命令整理"><a href="#命令整理" class="headerlink" title="命令整理"></a>命令整理</h4><p>错误：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜ git pull origin hexo:hexo</span><br><span class="line">From https:&#x2F;&#x2F;github.com&#x2F;leafney&#x2F;Leafney.github.io</span><br><span class="line"> ! [rejected]        hexo       -&gt; hexo  (non-fast-forward)</span><br></pre></td></tr></table></figure>

<p>解决：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 将远端待提交分支hexo拉取到本地的一个临时分支tmp下</span><br><span class="line">git fetch origin hexo:tmp</span><br><span class="line"></span><br><span class="line"># 切换到临时分支tmp</span><br><span class="line">git checkout tmp</span><br><span class="line"></span><br><span class="line"># 将本地的待提交分支hexo合并到临时分支tmp，并解决冲突</span><br><span class="line">git merge hexo</span><br><span class="line"></span><br><span class="line"># 将临时分支tmp提交到远端的待提交分支hexo</span><br><span class="line">git push origin tmp:hexo</span><br><span class="line"></span><br><span class="line"># 切换到本地的待提交分支hexo</span><br><span class="line">git checkout hexo</span><br><span class="line"></span><br><span class="line"># 拉取远端的待提交分支hexo到本地的待提交分支hexo</span><br><span class="line">git pull origin hexo:hexo</span><br><span class="line"></span><br><span class="line"># 删除本地的临时分支tmp</span><br><span class="line">git branch -D tmp</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Git操作系列</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>轻量级Kubernetes发行版k3s之部署metrics-server</title>
    <url>/2019/09/09/lightweight-kubernetes-release-k3s-hpa-metrics/</url>
    <content><![CDATA[<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>从官方仓库下载项目文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git clone https:&#x2F;&#x2F;github.com&#x2F;kubernetes-incubator&#x2F;metrics-server.git</span><br><span class="line"></span><br><span class="line">$ cd metrics-server&#x2F;deploy&#x2F;1.8+</span><br><span class="line"></span><br><span class="line">$ ls</span><br><span class="line">aggregated-metrics-reader.yaml  auth-reader.yaml         metrics-server-deployment.yaml  resource-reader.yaml</span><br><span class="line">auth-delegator.yaml             metrics-apiservice.yaml  metrics-server-service.yaml</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h4><p>需要使用的镜像为 <code>k8s.gcr.io/metrics-server-amd64:v0.3.4</code> 。</p>
<p>通过如下的脚本来下载：</p>
<p>创建文件 <code>$ vim pull_images.sh</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">images&#x3D;(metrics-server-amd64:v0.3.4)</span><br><span class="line">for imageName in $&#123;images[@]&#125; ; do</span><br><span class="line">  docker pull gcr.azk8s.cn&#x2F;google_containers&#x2F;$imageName</span><br><span class="line">  docker tag gcr.azk8s.cn&#x2F;google_containers&#x2F;$imageName k8s.gcr.io&#x2F;$imageName</span><br><span class="line">  docker rmi gcr.azk8s.cn&#x2F;google_containers&#x2F;$imageName</span><br><span class="line">done</span><br></pre></td></tr></table></figure>

<p>执行 <code>$ bash ./pull_images.sh</code></p>
<p>查看该镜像：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ docker images</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="修改yaml文件"><a href="#修改yaml文件" class="headerlink" title="修改yaml文件"></a>修改yaml文件</h4><p>修改 <code>metrics-server-deployment.yaml</code> 将其中 <code>Deployment</code> 中镜像的 <code>imagePullPolicy: Always</code> 改成 <code>imagePullPolicy: IfNotPresent</code> ,以使用本地下载的镜像。</p>
<p>编辑文件 <code>$ vim metrics-server-deployment.yaml</code></p>
<h4 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h4><h5 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cd ..&#x2F;..&#x2F;</span><br><span class="line"></span><br><span class="line">$ kubectl apply -f deploy&#x2F;1.8+</span><br><span class="line">clusterrole.rbac.authorization.k8s.io&#x2F;system:aggregated-metrics-reader created</span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io&#x2F;metrics-server:system:auth-delegator created</span><br><span class="line">rolebinding.rbac.authorization.k8s.io&#x2F;metrics-server-auth-reader created</span><br><span class="line">apiservice.apiregistration.k8s.io&#x2F;v1beta1.metrics.k8s.io created</span><br><span class="line">serviceaccount&#x2F;metrics-server created</span><br><span class="line">deployment.extensions&#x2F;metrics-server created</span><br><span class="line">service&#x2F;metrics-server created</span><br><span class="line">clusterrole.rbac.authorization.k8s.io&#x2F;system:metrics-server created</span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io&#x2F;system:metrics-server created</span><br></pre></td></tr></table></figure>

<h5 id="查看容器运行状态"><a href="#查看容器运行状态" class="headerlink" title="查看容器运行状态"></a>查看容器运行状态</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ kubectl get pods -n kube-system</span><br><span class="line">NAME                              READY   STATUS    RESTARTS   AGE</span><br><span class="line">metrics-server-5588fd886b-bcp7x   1&#x2F;1     Running   0          44s</span><br></pre></td></tr></table></figure>

<h4 id="效果查看"><a href="#效果查看" class="headerlink" title="效果查看"></a>效果查看</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ kubectl top nodes -n kube-system</span><br><span class="line">NAME         CPU(cores)   CPU%   MEMORY(bytes)   MEMORY%</span><br><span class="line">k3s-agent    20m          2%     202Mi           20%</span><br><span class="line">k3s-master   50m          5%     543Mi           54%</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ kubectl top pods -n kube-system</span><br><span class="line">NAME                              CPU(cores)   MEMORY(bytes)</span><br><span class="line">coredns-b7464766c-dbl29           3m           22Mi</span><br><span class="line">metrics-server-5588fd886b-bcp7x   1m           13Mi</span><br><span class="line">svclb-traefik-rmwcp               0m           1Mi</span><br><span class="line">svclb-traefik-t4gbn               0m           1Mi</span><br><span class="line">tiller-deploy-749f694975-f9rft    1m           9Mi</span><br><span class="line">traefik-5c79b789c5-8jsvg          3m           21Mi</span><br><span class="line"></span><br><span class="line"># 查看所有Pods</span><br><span class="line">$ kubectl top pods --all-namespaces</span><br></pre></td></tr></table></figure>

<h4 id="相关参考"><a href="#相关参考" class="headerlink" title="相关参考"></a>相关参考</h4><ul>
<li><a href="https://www.rancher.cn/docs/k3s/latest/en/configuration/#metrics-server" target="_blank" rel="noopener">Configuration Info</a></li>
<li><a href="https://github.com/kubernetes-incubator/metrics-server" target="_blank" rel="noopener">kubernetes-incubator/metrics-server</a></li>
</ul>
<p><strong>未完待续。。。</strong></p>
]]></content>
      <categories>
        <category>轻量级云原生</category>
      </categories>
      <tags>
        <tag>云原生</tag>
        <tag>K3s</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客置顶功能优化</title>
    <url>/2019/09/05/hexo-top-optimize/</url>
    <content><![CDATA[<p>今天一个朋友发微信跟我说：“你的博客该更新了，都长草了！” 我一想不对呀，这两天一直都有更新文章的呀！然后我才恍然明白原来他说的是我博客的“置顶”功能。</p>
<p>不过确实，某些文章设置了置顶后在博客中给人的感觉就是：一看前面几篇文章的发表时间还是好几个月前的甚至是几年前的，第一印象就是 “这个博客已经好久不更新了吧！”。那种感觉就像。。。你约女孩子见面结果三天没洗头一样。。。不仅仅是尴尬</p>
<p>在我之前的文章中也介绍过在Hexo博客中(nexT主题)添加文章“置顶”功能的方法：<a href="/2017/12/06/hexo-blog-optimization/">Hexo博客功能优化 | IT范儿</a> 虽然只是在写文章时添加了一个 <code>top: true</code> 的标记，但确实实现了一个非常棒的功能。</p>
<p>对于博客作者来说，知道这样的文章是“置顶”的，但对于博客浏览者来说，他们却并不知情。那么最好的解决方法就是为 “置顶” 的文章加上一个“置顶”的标记。</p>
<hr>
<h4 id="置顶标记"><a href="#置顶标记" class="headerlink" title="置顶标记"></a>置顶标记</h4><p>从网上简单的搜索了一下，找到了如下的代码段。修改博客文件目录中的 <code>/themes/next/layout/_macro/post.swig</code> 文件：</p>
<p>直接搜索 <code>class=&quot;post-meta</code> 在 <code>&lt;div class=&quot;post-meta&quot;&gt;</code> 和 <code>&lt;span class=&quot;post-time&quot;&gt;</code> 之间加入如下的代码段：</p>
<p><strong>该写法已过时，可以查看文章底部的更新</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;post-meta&quot;&gt;</span><br><span class="line"> </span><br><span class="line"> &#123;% if post.top %&#125;</span><br><span class="line">    &lt;i class&#x3D;&quot;fa fa-thumb-tack&quot;&gt;&lt;&#x2F;i&gt;</span><br><span class="line">    &lt;font color&#x3D;7D26CD&gt;置顶&lt;&#x2F;font&gt;</span><br><span class="line">    &lt;span class&#x3D;&quot;post-meta-divider&quot;&gt;|&lt;&#x2F;span&gt;</span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">  &lt;span class&#x3D;&quot;post-time&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>保存修改。执行 <code>hexo s -g</code> 查看效果。</p>
<hr>
<h4 id="颜色修改"><a href="#颜色修改" class="headerlink" title="颜色修改"></a>颜色修改</h4><p>对于“置顶”两字的颜色，默认的颜色 <code>7D26CD</code> 我不是很喜欢，所以把它改成了稍微偏红的颜色 <code>#f05050</code> ，当然你也可以随意更改，看个人喜好了。</p>
<p><code>#</code> 号有没有无所谓，大小写随意不影响，不过为了符合标准建议写成这样：<code>color=&quot;#f05050&quot;</code>。</p>
<p>需要注意的是，修改后必须重新执行 <code>hexo s -g</code> 命令才能看到效果，并不是像文章更新的那样刷新页面就立即生效的。</p>
<hr>
<h4 id="图标修改"><a href="#图标修改" class="headerlink" title="图标修改"></a>图标修改</h4><p>对于需要的图标，可以从网站 <a href="https://fontawesome.com/icons" target="_blank" rel="noopener">Icons | Font Awesome</a> 中获取。例如我这里就是使用的一个 <code>图钉</code> 的Icon。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;i class&#x3D;&quot;fa fa-thumb-tack&quot;&gt;&lt;&#x2F;i&gt;</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="扩展优化"><a href="#扩展优化" class="headerlink" title="扩展优化"></a>扩展优化</h4><p>虽然按照上面的方法加上了 “置顶” 标记，不过感觉和自己想象的似乎有那么点差距，但差距在哪也不是很好说。。。</p>
<p>所以我就上网去找了一下，发现了下面的一个网站的置顶效果（其中的文字我做了替换）：</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20190905125758.png" alt=""></p>
<p>恩，就是这样！“置顶” 两个字放在标题前面，红底、白字，非常醒目。</p>
<p>当然，改起来其实也很简单。。。</p>
<p>不过可能有的朋友说了，“我也不会写代码呀，让我怎么改？”，或者 “我也不会nodejs呀？” 。。。</p>
<p>那这个问题其实非常好办，不会写你还不会改吗？不会改你还不会抄吗？照葫芦画瓢总可以吧！！！</p>
<p>首先，查看网页的源代码，找到我们需要添加置顶标记的文章标题：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;header class&#x3D;&quot;post-header&quot;&gt;</span><br><span class="line"></span><br><span class="line">       &lt;h2 class&#x3D;&quot;post-title&quot; itemprop&#x3D;&quot;name headline&quot;&gt;</span><br><span class="line">             </span><br><span class="line">             &lt;a class&#x3D;&quot;post-title-link&quot; href&#x3D;&quot;&#x2F;2019&#x2F;07&#x2F;11&#x2F;run-drone-cicd-on-kubernetes&#x2F;&quot; itemprop&#x3D;&quot;url&quot;&gt; 在Kubernetes上执行Drone CI&#x2F;CD&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;</span><br><span class="line">     </span><br><span class="line">     &lt;div class&#x3D;&quot;post-meta&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>可以看到文章的标题是包裹在一个带有<code>class</code>标记的<code>a</code>链接中，<code>class</code>名称为<code>post-title-link</code>。</p>
<p>然后，我们再回到上面操作的 <code>post.swig</code> 文件中去搜索该<code>class</code> 标记，找到了如下的代码段：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% endif %&#125;</span><br><span class="line">&lt;a class&#x3D;&quot;post-title-link&quot; href&#x3D;&quot;&#123;&#123; url_for(post.path) &#125;&#125;&quot; itemprop&#x3D;&quot;url&quot;&gt;&#123;#</span><br><span class="line">#&#125; &#123;&#123; post.title | default(__(&#39;post.untitled&#39;))&#125;&#125;&#123;#</span><br><span class="line">#&#125;&lt;&#x2F;a&gt;&#123;#</span><br></pre></td></tr></table></figure>

<p>通过单词可知其中的 <code>post.title</code> 就是文章的标题了。那其实我们只需要把 “置顶” 两个字加到<code>a</code>标签中，文章标题之前就可以了嘛。</p>
<p>然后，回去看我们上面的 “葫芦”：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;font color&#x3D;7D26CD&gt;置顶&lt;&#x2F;font&gt;</span><br></pre></td></tr></table></figure>

<p>我们只需稍微改一下，加上颜色，加上置顶条件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% if post.top %&#125;&lt;font color&#x3D;&quot;f05050&quot;&gt;[置顶] &lt;&#x2F;font&gt; &#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<p>然后放进去就可以了：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% endif %&#125;</span><br><span class="line">&lt;a class&#x3D;&quot;post-title-link&quot; href&#x3D;&quot;&#123;&#123; url_for(post.path) &#125;&#125;&quot; itemprop&#x3D;&quot;url&quot;&gt;&#123;#</span><br><span class="line">#&#125; &#123;% if post.top %&#125;&lt;font color&#x3D;&quot;f05050&quot;&gt;[置顶] &lt;&#x2F;font&gt; &#123;% endif %&#125; &#123;&#123; post.title | default(__(&#39;post.untitled&#39;))&#125;&#125;&#123;#</span><br><span class="line">#&#125;&lt;&#x2F;a&gt;&#123;#</span><br></pre></td></tr></table></figure>

<p>最后的效果如下：</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20190905124633.png" alt=""></p>
<p>当然，前端能力强的，还可以再美化一下。</p>
<hr>
<h4 id="说点别的"><a href="#说点别的" class="headerlink" title="说点别的"></a>说点别的</h4><p>博客嘛，看的就是文章。重要的就是把你在工作、学习或者生活中遇到的问题、获得的经验、得到的收获去分享给别人，可能这就是我写博客的初衷所在吧。</p>
<p>看到好多朋友的博客搞得非常的“花哨”，什么动态背景啦，什么萌萌哒卡哇伊啦。我一直都不是很感冒。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20190905122338.png" alt=""></p>
<p>可能更关键的原因是：每次我打开带有“动态背景”的博客时，我的MacBook的风扇就会进入 “狂浪” 模式，虽然我一直觉得这可能是Hexo的一个至今未被修复的bug。。。</p>
<p>你听，耳边想起了：</p>
<blockquote>
<p>狂浪是一种态度 狂浪在起起伏伏 狂浪 狂浪 狂浪 狂浪</p>
</blockquote>
<hr>
<h4 id="相关参考"><a href="#相关参考" class="headerlink" title="相关参考"></a>相关参考</h4><ul>
<li><a href="http://wangwlj.com/2018/01/09/blog_pin_post/" target="_blank" rel="noopener">Hexo博客彻底解决置顶问题 | wangwlj’s Blog</a></li>
</ul>
<hr>
<h4 id="置顶标记更新"><a href="#置顶标记更新" class="headerlink" title="置顶标记更新"></a>置顶标记更新</h4><p><strong>更新于：2021-04-10</strong></p>
<p>对于上面添加的 <code>置顶标记</code> 提示文字，其实可以参考已有的 <code>发表于</code> <code>更新于</code> 这些副标题的格式来实现。正好显示在同一行上，格式也要统一嘛！</p>
<p>提取 <code>发表于</code> 部分的html代码段：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;span class&#x3D;&quot;post-meta-item&quot;&gt;</span><br><span class="line">    &lt;span class&#x3D;&quot;post-meta-item-icon&quot;&gt;</span><br><span class="line">    &lt;i class&#x3D;&quot;far fa-calendar&quot;&gt;&lt;&#x2F;i&gt;</span><br><span class="line">    &lt;&#x2F;span&gt;</span><br><span class="line">    &lt;span class&#x3D;&quot;post-meta-item-text&quot;&gt;发表于&lt;&#x2F;span&gt;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    &lt;time title&#x3D;&quot;创建时间：2021-02-28 11:18:43 &#x2F; 修改时间：11:41:19&quot; itemprop&#x3D;&quot;dateCreated datePublished&quot; datetime&#x3D;&quot;2021-02-28T11:18:43+08:00&quot;&gt;2021-02-28&lt;&#x2F;time&gt;</span><br><span class="line">&lt;&#x2F;span&gt;</span><br></pre></td></tr></table></figure>


<p>对其进行优化，我们只需要显示提示文字，不需要后面的带下划线部分，最终得到的就是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;span class&#x3D;&quot;post-meta-item&quot;&gt;</span><br><span class="line">  &lt;span class&#x3D;&quot;post-meta-item-icon&quot;&gt;</span><br><span class="line">      &lt;i class&#x3D;&quot;fas fa-thumbtack&quot;&gt;&lt;&#x2F;i&gt;</span><br><span class="line">  &lt;&#x2F;span&gt;</span><br><span class="line">  &lt;span class&#x3D;&quot;post-meta-item-text&quot;&gt;</span><br><span class="line">      &lt;font color&#x3D;&#39;#f05050&#39;&gt;[置顶]&lt;&#x2F;font&gt;</span><br><span class="line">  &lt;&#x2F;span&gt;</span><br><span class="line">&lt;&#x2F;span&gt;</span><br></pre></td></tr></table></figure>

<p>完整代码：</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20210410164655.png" alt="20210410164655"></p>
<hr>
]]></content>
      <categories>
        <category>Hexo博客搭建</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Chrome浏览器通过SwitchyOmega实现自动代理切换</title>
    <url>/2019/09/04/autoproxy-by-shadowsocks-and-switchyomega/</url>
    <content><![CDATA[<p>在之前使用ShadowSocks代理FQ时，一般情况下我就使用默认的 “自动代理模式”，遇到一些需要FQ的网站时再手动切换为 “全局模式”。而有时候忘了切换回来，访问国内的网站就特别的慢。而每次都需要手动的切换也是非常繁琐。</p>
<p>之前也曾使用过SwitchyOmega实现Chrome浏览器的代理切换，但当时只是进行了简单的设置，没有深入的去了解。所以遇到特殊的情况就很无奈，最后也就弃用了。</p>
<p>最近花了点时间看了看SwitchyOmega的设置，感觉是时候实现代理的自动切换了。</p>
<h4 id="ShadowSocks"><a href="#ShadowSocks" class="headerlink" title="ShadowSocks"></a>ShadowSocks</h4><p>默认情况下，ss在自动模式下有一个PAC文件，记录着一些需要FQ才能访问的站点。不过对于该文件中没有记录的网站，则需要手动的添加进去。在之前的文章 <a href="https://www.itfanr.cc/2019/05/13/ss-add-urls-use-proxy/">如何添加URL到shadowsocks的列表让其使用代理访问 | IT范儿</a> 中我也介绍了相关的手动添加方法。但是，每次遇到一个新的需FQ的站点都需要这样来操作，也确实繁琐了一些。</p>
<p>关于ss的一些配置，这里就不详细的介绍了。所以在此之前，你应该有一个正常使用的ss客户端。</p>
<hr>
<h4 id="安装Proxy-SwitchyOmega"><a href="#安装Proxy-SwitchyOmega" class="headerlink" title="安装Proxy SwitchyOmega"></a>安装Proxy SwitchyOmega</h4><h5 id="在线安装"><a href="#在线安装" class="headerlink" title="在线安装"></a>在线安装</h5><p>正常情况下，开启了ss就可以直接访问Chrome应用商店来安装了。搜索 “Proxy SwitchyOmega” 安装即可。</p>
<p>这里我也给出了 <code>Proxy SwitchyOmega</code> 的地址：</p>
<ul>
<li><a href="https://chrome.google.com/webstore/detail/proxy-switchyomega/padekgcemlokbadohgkifijomclgjgif" target="_blank" rel="noopener">Proxy SwitchyOmega - Chrome 网上应用店</a></li>
</ul>
<h5 id="离线安装"><a href="#离线安装" class="headerlink" title="离线安装"></a>离线安装</h5><p>当然，也可以通过离线的CRX包安装。从 Github 直接下载安装包：</p>
<ul>
<li><a href="https://github.com/FelisCatus/SwitchyOmega/releases" target="_blank" rel="noopener">Releases · FelisCatus/SwitchyOmega</a></li>
</ul>
<p>在 Chrome 地址栏输入 <code>chrome://extensions</code> 打开扩展程序，拖动 <code>.crx</code> 后缀的 <code>SwitchyOmega</code> 安装文件到扩展程序中按提示进行安装。</p>
<hr>
<h4 id="Proxy-SwitchyOmega配置"><a href="#Proxy-SwitchyOmega配置" class="headerlink" title="Proxy SwitchyOmega配置"></a>Proxy SwitchyOmega配置</h4><p>在 <code>Proxy SwitchyOmega</code> 安装完成后默认已设置好两个情景模式：<code>auto switch</code> 和<code>proxy</code>。</p>
<p>我下面的操作是将原来的默认设置删除后并重新添加的（因为之前有一些其他的设置），当然你可以直接按照我下面的方法来修改默认带的这两个模式。</p>
<h5 id="新增代理模式"><a href="#新增代理模式" class="headerlink" title="新增代理模式"></a>新增代理模式</h5><p>安装完成后会在 Chrome 浏览器右上角显示扩展程序的图标，选择 “选项” 打开 <code>SwitchyOmega</code> 选项设置界面，点击 “新建情景模式”，这里我设置名称为 <code>ss代理</code>（同默认的proxy模式），情景类型选择 “代理服务器”，之后新增一项 <code>SOCKS5</code>的代理信息：</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20190904123229.png" alt=""></p>
<p>默认情况下，ss的 <code>SOCKS5</code> 代理端口为 <code>1080</code> 。</p>
<p>完成之后，点击 “应用选项” 保存设置。</p>
<h5 id="新增智能切换模式"><a href="#新增智能切换模式" class="headerlink" title="新增智能切换模式"></a>新增智能切换模式</h5><p>再次点击 “新建情景模式”，我设置名称为 “智能切换”（同默认的auto switch模式），情景类型选择 “自动切换模式”，点击 “创建”。</p>
<p>在 “规则列表设置” 中，填写：</p>
<blockquote>
<p>规则列表格式： <code>AutoProxy</code><br>规则列表网址： <code>https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt</code></p>
</blockquote>
<p>然后点击 “立即更新情景模式”，之后会在 “规则列表正文” 中显示相应的规则列表。</p>
<p>在上面的 “切换规则” 中，将 “规则列表规则” 前面的框打<code>√</code>，后面选择上一步设置的 “ss代理”(同默认的proxy模式) ，下面的 “默认情景模式” 选择 “直接连接” 。点击左侧 “应用选项” 保存设置即可。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20190904134646.png" alt=""></p>
<p>这样设置的意思表示：如果网址匹配到规则列表中的网址规则，则会走代理，如果没有匹配到规则及默认的情况下，则会直接访问。</p>
<h5 id="体验自动代理切换"><a href="#体验自动代理切换" class="headerlink" title="体验自动代理切换"></a>体验自动代理切换</h5><p>将ss的代理模式更改为 “自动代理模式”：点击 <code>SwitchyOmega</code> 图标选择 “智能切换” (同默认的proxy模式) 选项即可。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20190904134924.png" alt=""></p>
<p>然后在Chrome浏览器中打开 <code>google.com</code> 查看是否能正常访问。</p>
<hr>
<h4 id="设置本地Ip不走代理"><a href="#设置本地Ip不走代理" class="headerlink" title="设置本地Ip不走代理"></a>设置本地Ip不走代理</h4><p>有时候在本地开发网站项目时，都会通过本地的Ip来访问调试。但某些情况下本地的Ip也会去走SwitchyOmega的代理模式，所以需要将本地的Ip给屏蔽掉。</p>
<p>如上面 “新增代理模式” 中的图片，在 “不代理地址列表” 中填写本地的Ip地址。</p>
<p>我本机的Ip为 <code>192.168.5.*</code>，之后不要忘了 “应用选项” 来保存设置。</p>
<hr>
<h4 id="新增自定义站点"><a href="#新增自定义站点" class="headerlink" title="新增自定义站点"></a>新增自定义站点</h4><p>因为我们使用的自定义AutoProxy文件是公共的，所以不可能把所有需要的网址全都加进去。那么就需要来自动判断哪些网址需要添加进规则列表中。</p>
<p>比如访问 <code>https://www.instagram.com/</code> 网址，可以发现通过默认的 “智能切换” 是不能正常浏览的。</p>
<p>不过，可以看到此时 <code>SwitchyOmega</code> 图标右下角多了一个数字 <code>1</code>。</p>
<p>依次点击 <code>SwitchyOmega</code> 图标 – <code>1个资源未加载</code> ，在新的窗口中选择相应的情景模式 <code>ss代理</code> 并点击 “添加条件”。</p>
<p>此时，可以看到网站刷新后页面能够正常的访问了。</p>
<p>之后，再次访问网站 <code>https://www.instagram.com/</code> 时就会自动使用 <code>ss代理</code> 模式来实现科学上网了。</p>
<hr>
<h4 id="快速切换"><a href="#快速切换" class="headerlink" title="快速切换"></a>快速切换</h4><h5 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h5><p>通过上面的设置后，在浏览网页时已经可以做到智能化的代理切换了：在规则列表中的走代理，其他的直接访问。没在规则列表中的手动添加一下即可。</p>
<p>不过，时间长了之后我们也会感觉到厌烦。如果将浏览网站的需求剥离到最简单：</p>
<p><strong>一个网址，要么是正常浏览模式，要么是翻墙浏览模式。</strong> </p>
<p>所以，我们只需要在这两种模式之前切换就好了嘛，搞那么复杂干什么呢？</p>
<p><code>SwitchyOmega</code> 中也已经为我们添加了这样的选项 – “快速切换” 模式。</p>
<p>在 “快速切换” 模式下，可以通过两种方式来切换情景模式：</p>
<ol>
<li>通过点击 <code>SwitchyOmega</code> 的图标来循环切换</li>
<li>通过快捷键 <code>Alt+Shift+O</code> 来循环切换</li>
</ol>
<h5 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h5><p>要启用 “快速切换” 模式，点击：</p>
<p>“选项” – “界面” –（最下方）“快速切换”，勾选即可启用</p>
<p>在 “循环切换以下情景模式” 中，加入 “直接连接” 和 “ss代理”（同默认的auto switch模式） 两项：</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20190904155607.png" alt=""></p>
<p>最后，点击左侧的 ”应用选项“ 保存设置。</p>
<h5 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h5><p>在 ”快速切换“ 模式下，<code>SwitchyOmega</code> 图标点击就不会像之前一样弹出 <code>代理列表菜单</code> 了，而是在 “直连” 和 “代理” 之间循环切换。</p>
<p>如果需要打开 <code>SwitchyOmega</code> 的选项，可以<strong>右击</strong>该图标 – 选择 “选项”。</p>
<p>如果需要暂时停用 “快速切换” 模式，也可以<strong>右击</strong>该图标 – 将 “启用快速切换” 前面的 <code>√</code> 去掉即可。</p>
<p>这样在浏览网站时，如果 “直连” 无法访问，点击一下图标或者快捷键就可以使用代理了。</p>
<p>不过，在一段时间的体验后个人感觉这种方式其实没有上面的 “自动切换模式” 来的方便。</p>
<hr>
<h4 id="虚拟情景模式"><a href="#虚拟情景模式" class="headerlink" title="虚拟情景模式"></a>虚拟情景模式</h4><h5 id="如何理解"><a href="#如何理解" class="headerlink" title="如何理解"></a>如何理解</h5><p>默认情况下，我们在一个情景模式中只能添加一个代理服务器。如果你有多个代理服务器可用，那么就需要添加多个代理情景模式。</p>
<p>假如我有A、B、C三个代理。默认情况下，在 “自动切换模式” 下我选择的是A代理和直连。突然有一天，A代理挂掉了，连不上了，这时我就需要在 “自动切换模式” 中手动将B代理或者C代理设置为默认的代理服务器。</p>
<p>而 “虚拟情景模式” 就是针对于这种多个代理的情况而言的。你可以把它看成 “代理工具的集合” ，可以快速的使用其中一个代理来进行连接。而如果其中一个代理挂掉，又可以快速的切换到另一个代理来使用。</p>
<h5 id="如何设置"><a href="#如何设置" class="headerlink" title="如何设置"></a>如何设置</h5><h6 id="添加多个代理"><a href="#添加多个代理" class="headerlink" title="添加多个代理"></a>添加多个代理</h6><p>在开始设置之前，我们先添加多个代理。比如我这里添加了一个 ”B代理“ 和一个 ”C代理“ 。</p>
<h6 id="新增虚情景模式"><a href="#新增虚情景模式" class="headerlink" title="新增虚情景模式"></a>新增虚情景模式</h6><p>点击 “新增情景模式” – 设置名称（我这里设置为 “虚拟代理”） – 选择 “虚情景模式” – 创建。</p>
<p>在 ”虚情景模式“ 的 ”目标“ 中，选择所有的 ”代理“ 模式其中的一项，表示默认使用的代理：</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20190904153038.png" alt=""></p>
<p>最后，别忘了点击左侧的 ”应用选项“ 保存设置。</p>
<h6 id="使用虚情景代理"><a href="#使用虚情景代理" class="headerlink" title="使用虚情景代理"></a>使用虚情景代理</h6><p>选择 “自动代理模式” ：我这里是 “智能切换” 模式（同默认的auto switch模式）。</p>
<p>将 “规则列表规则” 后面的情景模式更改为我们新设置的 “虚拟情景模式” 代理。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20190904153759.png" alt=""></p>
<p>最后，点击左侧的 ”应用选项“ 保存设置。</p>
<h6 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h6><p>打开 <code>google.com</code> 页面，依旧选择 “智能切换” （同默认的auto switch模式）代理。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20190904154252.png" alt=""></p>
<p>只是这时可以看到新增的 “虚拟代理” 选项后面多了一个下拉框，可以让我们在多个代理之间选择其中一个来使用。</p>
<hr>
<h4 id="相关参考"><a href="#相关参考" class="headerlink" title="相关参考"></a>相关参考</h4><ul>
<li><a href="https://proxy-switchyomega.com/" target="_blank" rel="noopener">Proxy SwitchyOmega - 轻松快捷的管理和切换多个代理设置</a></li>
<li><a href="https://wall-guide.readthedocs.io/zh/latest/SwitchyOmega%E4%BB%A3%E7%90%86%E8%AE%BE%E7%BD%AE.html" target="_blank" rel="noopener">SwitchyOmega代理设置 — 穿墙指南 1.0.0 文档</a></li>
<li><a href="http://ip111.cn/" target="_blank" rel="noopener">显示查询自己的IP地址</a></li>
<li><a href="https://github.com/feliscatus/switchyomega/issues/399" target="_blank" rel="noopener">建议：换回proxyswitch的切换方式 · Issue #399 · FelisCatus/SwitchyOmega</a></li>
<li><a href="https://black1ce.com/skill/switchyomega-fic.html" target="_blank" rel="noopener">如何通俗的理解 Switchy Omega 虚拟情景模式 - 黑冰技术站</a></li>
</ul>
]]></content>
      <tags>
        <tag>Shadowsocks</tag>
      </tags>
  </entry>
  <entry>
    <title>轻量级Kubernetes发行版k3s之Helm安装及应用部署</title>
    <url>/2019/09/01/lightweight-kubernetes-release-k3s-helm/</url>
    <content><![CDATA[<h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><h5 id="helm介绍"><a href="#helm介绍" class="headerlink" title="helm介绍"></a>helm介绍</h5><p>Helm是Kubernetes生态系统中的一个软件包管理工具。</p>
<p>类似于Ubuntu下的ap-get或者CentOS下的yum，Helm是一个用于kubernetes的包管理器。</p>
<p>通过Helm可以对应用程序相关的Kubernetes资源文件进行打包，管理依赖及管理应用程序版本等功能。</p>
<h5 id="helm组件"><a href="#helm组件" class="headerlink" title="helm组件"></a>helm组件</h5><ul>
<li><code>Helm</code>: Kubernetes的应用打包工具，也是命令行工具客户端的名称</li>
<li><code>Tiller</code>: Helm的服务端，部署在Kubernetes集群中，用于处理Helm的相关命令</li>
<li><code>Chart</code>: Helm的打包格式，内部包含了一组相关的kubernetes资源</li>
<li><code>Release</code>: 使用Helm install命令在Kubernetes集群中安装的Chart称为Release</li>
<li><code>Repoistory</code>: Helm的软件仓库</li>
</ul>
<hr>
<h4 id="helm客户端安装"><a href="#helm客户端安装" class="headerlink" title="helm客户端安装"></a>helm客户端安装</h4><p>helm使用的是和kubctl相同的配置文件，可以通过官方的说明了解：</p>
<blockquote>
<p>Helm will figure out where to install Tiller by reading your Kubernetes configuration file (usually <code>$HOME/.kube/config</code>). This is the same file that kubectl uses.</p>
</blockquote>
<p>在安装有kubectl的服务器上安装helm客户端或者将k3s的配置文件 <code>/etc/rancher/k3s/k3s.yaml</code> 拷贝到指定设备的 <code>~/.kube/config</code></p>
<p>如果是其他指定设备，需要修改配置文件 <code>~/.kube/config</code> ，将其中的 <code>https://localhost:6443</code> 替换为k3s的master节点的IP，如 <code>https://192.168.5.17:6443</code></p>
<p>执行如下命令，测试kubectl是否能正常管理k3s集群：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kubectl get nodes</span><br></pre></td></tr></table></figure>

<p>从 <a href="https://github.com/helm/helm/releases" target="_blank" rel="noopener">Releases · helm/helm</a> 下载 heml的客户端安装包，解压后将其中的 <code>helm</code> 程序移动到 <code>/usr/local/bin</code> 目录下。</p>
<h4 id="helm客户端验证"><a href="#helm客户端验证" class="headerlink" title="helm客户端验证"></a>helm客户端验证</h4><p>可以通过如下命令来查看helm的信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜ helm version</span><br><span class="line">Client: &amp;version.Version&#123;SemVer:&quot;v2.14.3&quot;, GitCommit:&quot;0e7f3b6637f7af8fcfddb3d2941fcc7cbebb0085&quot;, GitTreeState:&quot;clean&quot;&#125;</span><br><span class="line">Error: could not find tiller</span><br></pre></td></tr></table></figure>

<p>此处可能会报出 <code>dial tcp [::1]:8080: connect: connection refused</code> 的错误，解决方法见下面。</p>
<h4 id="helm服务端安装"><a href="#helm服务端安装" class="headerlink" title="helm服务端安装"></a>helm服务端安装</h4><p>helm的服务端名为tiller，tiller需要部署在Kubernetes集群中并且需要设置相应的权限。</p>
<p>第一步：为Tiller创建一个Service Account：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kubectl -n kube-system create serviceaccount tiller</span><br></pre></td></tr></table></figure>

<p>第二步：为Tiller赋予cluster-admin权限：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kubectl create clusterrolebinding tiller --clusterrole&#x3D;cluster-admin --serviceaccount&#x3D;kube-system:tiller</span><br></pre></td></tr></table></figure>

<p>也可以直接创建下面的 <code>tiller-rbac-config.yaml</code> 文件来完成上面两步：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: ServiceAccount</span><br><span class="line">metadata:</span><br><span class="line">  name: tiller</span><br><span class="line">  namespace: kube-system</span><br><span class="line">---</span><br><span class="line">apiVersion: rbac.authorization.k8s.io&#x2F;v1</span><br><span class="line">kind: ClusterRoleBinding</span><br><span class="line">metadata:</span><br><span class="line">  name: tiller</span><br><span class="line">roleRef:</span><br><span class="line">  apiGroup: rbac.authorization.k8s.io</span><br><span class="line">  kind: ClusterRole</span><br><span class="line">  name: cluster-admin</span><br><span class="line">subjects:</span><br><span class="line">  - kind: ServiceAccount</span><br><span class="line">    name: tiller</span><br><span class="line">    namespace: kube-system</span><br></pre></td></tr></table></figure>

<p>执行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kubectl create -f tiller-rbac-config.yaml</span><br></pre></td></tr></table></figure>

<p>安装Tiller:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">helm init --service-account tiller</span><br></pre></td></tr></table></figure>

<p>tiller的镜像默认会去 <code>gcr.io</code> 镜像仓库中获取，而该地址在国内是无法访问的。此时可以通过 <code>--tiller-image</code> 来指定国内的镜像仓库源：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">helm init --service-account tiller \</span><br><span class="line">--tiller-image registry.cn-hangzhou.aliyuncs.com&#x2F;google_containers&#x2F;tiller:&lt;tag&gt;</span><br></pre></td></tr></table></figure>

<p>详细的解决方法说明见下面。</p>
<h4 id="验证Tiller"><a href="#验证Tiller" class="headerlink" title="验证Tiller"></a>验证Tiller</h4><p>通过如下命令来验证helm服务端Tiller是否安装成功：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ helm version</span><br><span class="line"></span><br><span class="line">Client: &amp;version.Version&#123;SemVer:&quot;v2.14.3&quot;, GitCommit:&quot;0e7f3b6637f7af8fcfddb3d2941fcc7cbebb0085&quot;, GitTreeState:&quot;clean&quot;&#125;</span><br><span class="line">Server: &amp;version.Version&#123;SemVer:&quot;v2.14.3&quot;, GitCommit:&quot;0e7f3b6637f7af8fcfddb3d2941fcc7cbebb0085&quot;, GitTreeState:&quot;clean&quot;&#125;</span><br></pre></td></tr></table></figure>

<p>如果同时显示出了helm的client和server的版本信息，则说明安装成功。</p>
<p>如果显示为 <code>Error: could not find a ready tiller pod</code> 则只需稍等一下，待tiller的Pod安装完成即可。</p>
<p>也可以通过 <code>kubectl</code> 命令来验证，执行如下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ kubectl get pods -n kube-system | grep tiller</span><br></pre></td></tr></table></figure>

<p>如果看到一个前缀为 <code>tiller-deploy</code> 的Pod即说明Tiller安装成功了。</p>
<h4 id="Tiller升级"><a href="#Tiller升级" class="headerlink" title="Tiller升级"></a>Tiller升级</h4><p>通过如下命令来升级Tiller版本：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">helm init --upgrade</span><br></pre></td></tr></table></figure>

<h4 id="Tiller卸载"><a href="#Tiller卸载" class="headerlink" title="Tiller卸载"></a>Tiller卸载</h4><p>由于Tiller的数据保存在ConfigMaps中，所以无需担心数据丢失的问题。卸载Tiller推荐的方式是执行如下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kubectl delete deployment tiller-deploy --namespace kube-system</span><br><span class="line"></span><br><span class="line">kubectl delete svc tiller-deploy --namespace kube-system</span><br></pre></td></tr></table></figure>

<p>或者使用下面的命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">helm reset</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="通过Helm-Chart部署应用"><a href="#通过Helm-Chart部署应用" class="headerlink" title="通过Helm Chart部署应用"></a>通过Helm Chart部署应用</h4><p>这里，我通过一个简单的Chart来测试通过helm部署应用。</p>
<h5 id="Chart"><a href="#Chart" class="headerlink" title="Chart"></a>Chart</h5><p>执行如下命令来创建一个chart：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜ helm create hello-chart</span><br></pre></td></tr></table></figure>

<p>查看该chart目录下的文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜ ls hello-chart</span><br><span class="line">charts  Chart.yaml  templates  values.yaml</span><br></pre></td></tr></table></figure>

<p>其中，<code>Chart.yaml</code> 文件用于描述这个chart，其中包括chart的名称、描述信息以及版本等：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜ cat Chart.yaml</span><br><span class="line">apiVersion: v1</span><br><span class="line">appVersion: &quot;1.0&quot;</span><br><span class="line">description: A Helm chart for Kubernetes</span><br><span class="line">name: hello-chart</span><br><span class="line">version: 0.1.0</span><br></pre></td></tr></table></figure>

<p><code>values.yaml</code> 用于存储templates目录中模板文件中用到的变量。模板文件就是Go模板，需要安装Go模板的规则来编写。</p>
<p><code>templates</code> 目录下则是部署应用的相关模板文件。</p>
<h5 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h5><p>修改 <code>values.yaml</code> 文件中下面部分：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">image:</span><br><span class="line">  repository: nginx</span><br><span class="line">  tag: stable</span><br><span class="line">  pullPolicy: IfNotPresent</span><br><span class="line"></span><br><span class="line">imagePullSecrets: []</span><br><span class="line">nameOverride: &quot;&quot;</span><br><span class="line">fullnameOverride: &quot;&quot;</span><br><span class="line"></span><br><span class="line">service:</span><br><span class="line">  type: ClusterIP</span><br><span class="line">  port: 80</span><br></pre></td></tr></table></figure>

<p>将其中的 <code>image.tag</code> 修改为 <code>alpine</code> ，将 <code>service.type</code> 修改为 <code>NodePort</code> 。即使用 <code>nginx:alpine</code> 镜像，并设置service类型为 <code>NodePort</code>，以便于访问。</p>
<p>修改完成后，在 <code>hello-chart</code> 目录同级，执行如下命令来部署helm：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜ helm install .&#x2F;hello-chart</span><br><span class="line">NAME:   truculent-wolverine</span><br><span class="line">LAST DEPLOYED: Sun Sep  1 23:51:47 2019</span><br><span class="line">NAMESPACE: default</span><br><span class="line">STATUS: DEPLOYED</span><br><span class="line"></span><br><span class="line">RESOURCES:</span><br><span class="line">&#x3D;&#x3D;&gt; v1&#x2F;Deployment</span><br><span class="line">NAME                             READY  UP-TO-DATE  AVAILABLE  AGE</span><br><span class="line">truculent-wolverine-hello-chart  0&#x2F;1    0           0          0s</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&gt; v1&#x2F;Pod(related)</span><br><span class="line">NAME                                              READY  STATUS   RESTARTS  AGE</span><br><span class="line">truculent-wolverine-hello-chart-655545d645-72xg9  0&#x2F;1    Pending  0         0s</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&gt; v1&#x2F;Service</span><br><span class="line">NAME                             TYPE      CLUSTER-IP     EXTERNAL-IP  PORT(S)       AGE</span><br><span class="line">truculent-wolverine-hello-chart  NodePort  10.43.199.183  &lt;none&gt;       80:31337&#x2F;TCP  0s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">NOTES:</span><br><span class="line">1. Get the application URL by running these commands:</span><br><span class="line">  export NODE_PORT&#x3D;$(kubectl get --namespace default -o jsonpath&#x3D;&quot;&#123;.spec.ports[0].nodePort&#125;&quot; services truculent-wolverine-hello-chart)</span><br><span class="line">  export NODE_IP&#x3D;$(kubectl get nodes --namespace default -o jsonpath&#x3D;&quot;&#123;.items[0].status.addresses[0].address&#125;&quot;)</span><br><span class="line">  echo http:&#x2F;&#x2F;$NODE_IP:$NODE_PORT</span><br></pre></td></tr></table></figure>

<p>可以看到通过helm chart创建了一个随机名称的Release实例并输出了相关的 <code>Deployment</code> <code>Pod</code> 和 <code>Service</code> 信息。而且可以看到相应的Service端口为 <code>31337</code> 。通过浏览器访问k3s主机IP及端口 <code>http://192.168.5.17:31337/</code> 查看是否能正常访问。</p>
<p>此时，可以通过 <code>helm list</code> 命令查看安装的Release信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜ helm list</span><br><span class="line">NAME               	REVISION	UPDATED                 	STATUS  	CHART            	APP VERSION	NAMESPACE</span><br><span class="line">truculent-wolverine	1       	Sun Sep  1 23:51:47 2019	DEPLOYED	hello-chart-0.1.0	1.0        	default</span><br></pre></td></tr></table></figure>

<p>如果需要删除Release，则可以通过指定Release的名称来实现：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜ helm delete truculent-wolverine</span><br><span class="line">release &quot;truculent-wolverine&quot; deleted</span><br></pre></td></tr></table></figure>

<p>关于Helm的更多信息可以参照官方文档了解。</p>
<h4 id="问题汇总"><a href="#问题汇总" class="headerlink" title="问题汇总"></a>问题汇总</h4><h5 id="Install-Tiller-ImagePullBackOff"><a href="#Install-Tiller-ImagePullBackOff" class="headerlink" title="Install Tiller ImagePullBackOff"></a>Install Tiller ImagePullBackOff</h5><p>在执行 <code>helm init --service-account tiller</code> 命令时安装的Pod会一直卡在 <code>ImagePullBackOff</code> 阶段，这是因为Triller的镜像默认是从 <code>gcr.io</code> 镜像仓库中拉取的，而该镜像地址在国内是无法访问的。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Events:</span><br><span class="line">  Type     Reason     Age                From                Message</span><br><span class="line">  ----     ------     ----               ----                -------</span><br><span class="line">  Normal   Scheduled  68s                default-scheduler   Successfully assigned kube-system&#x2F;tiller-deploy-7f4d76c4b6-xxlng to k3s-agent</span><br><span class="line">  Warning  Failed     26s (x2 over 52s)  kubelet, k3s-agent  Failed to pull image &quot;gcr.io&#x2F;kubernetes-helm&#x2F;tiller:v2.14.3&quot;: rpc error: code &#x3D; Unknown desc &#x3D; Error response from daemon: Get https:&#x2F;&#x2F;gcr.io&#x2F;v2&#x2F;: net&#x2F;http: request canceled while waiting for connection (Client.Timeout exceeded while awaiting headers)</span><br><span class="line">  Warning  Failed     26s (x2 over 52s)  kubelet, k3s-agent  Error: ErrImagePull</span><br><span class="line">  Normal   BackOff    14s (x2 over 52s)  kubelet, k3s-agent  Back-off pulling image &quot;gcr.io&#x2F;kubernetes-helm&#x2F;tiller:v2.14.3&quot;</span><br><span class="line">  Warning  Failed     14s (x2 over 52s)  kubelet, k3s-agent  Error: ImagePullBackOff</span><br><span class="line">  Normal   Pulling    0s (x3 over 67s)   kubelet, k3s-agent  Pulling image &quot;gcr.io&#x2F;kubernetes-helm&#x2F;tiller:v2.14.3&quot;</span><br></pre></td></tr></table></figure>

<p>可以通过 <code>--tiller-image</code> 参数来指定安装的镜像仓库地址。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">helm init --service-account tiller \</span><br><span class="line">--tiller-image registry.cn-hangzhou.aliyuncs.com&#x2F;google_containers&#x2F;tiller:&lt;tag&gt;</span><br></pre></td></tr></table></figure>

<p>其中，Tiller 镜像版本与 helm 版本相同。</p>
<p>在执行该命令之前，可通过 <code>kubectl delete deploy tiller-deploy -n kube-system</code> 命令来删除上一步命令安装失败的Pod。</p>
<ul>
<li>参考自 <a href="https://rancher.com/docs/rancher/v2.x/en/installation/ha/helm-init/" target="_blank" rel="noopener">3. Initialize Helm (Install Tiller)</a></li>
</ul>
<hr>
<h5 id="helm-报错-connection-refused"><a href="#helm-报错-connection-refused" class="headerlink" title="helm 报错 connection refused"></a>helm 报错 connection refused</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜ helm version</span><br><span class="line">Client: &amp;version.Version&#123;SemVer:&quot;v2.14.3&quot;, GitCommit:&quot;0e7f3b6637f7af8fcfddb3d2941fcc7cbebb0085&quot;, GitTreeState:&quot;clean&quot;&#125;</span><br><span class="line">Error: Get http:&#x2F;&#x2F;localhost:8080&#x2F;api&#x2F;v1&#x2F;namespaces&#x2F;kube-system&#x2F;pods?labelSelector&#x3D;app%3Dhelm%2Cname%3Dtiller: dial tcp [::1]:8080: connect: connection refused</span><br></pre></td></tr></table></figure>

<p>如果你直接在k3s的master节点上执行 <code>helm version</code> 命令的话，很容易会出现上面的错误信息。</p>
<p>这是因为helm默认会从 <code>~/.kube/config</code> 中来载入kubernetes/k3s的集群信息，而k3s的默认配置文件是 <code>/etc/rancher/k3s/k3s.yaml</code> ，在k3s的master节点上的 <code>~/.kube</code> 目录下并不存在一个 <code>config</code> 文件，也就导致了helm连接不上k3s集群，而获取不到集群的信息。</p>
<p>要解决这个问题，可以通过指定配置文件的方式，如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜ KUBECONFIG&#x3D;&#x2F;etc&#x2F;rancher&#x2F;k3s&#x2F;k3s.yaml helm version</span><br><span class="line">Client: &amp;version.Version&#123;SemVer:&quot;v2.14.3&quot;, GitCommit:&quot;0e7f3b6637f7af8fcfddb3d2941fcc7cbebb0085&quot;, GitTreeState:&quot;clean&quot;&#125;</span><br><span class="line">Error: could not find tiller</span><br></pre></td></tr></table></figure>

<p>即在 <code>helm version</code> 命令前指定k3s集群配置文件的地址 <code>KUBECONFIG=/etc/rancher/k3s/k3s.yaml</code>，这样就能正常执行了。</p>
<p>当然，如果觉得每条helm命令都加一个 <code>KUBECONFIG</code> 参数太麻烦，可以通过如下方式解决：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜ export KUBECONFIG&#x3D;&#x2F;etc&#x2F;rancher&#x2F;k3s&#x2F;k3s.yaml</span><br><span class="line"></span><br><span class="line">➜ helm version</span><br><span class="line">Client: &amp;version.Version&#123;SemVer:&quot;v2.14.3&quot;, GitCommit:&quot;0e7f3b6637f7af8fcfddb3d2941fcc7cbebb0085&quot;, GitTreeState:&quot;clean&quot;&#125;</span><br><span class="line">Error: could not find tiller</span><br></pre></td></tr></table></figure>

<p>如果觉得这种方法也很麻烦，那么可以将k3s的配置文件复制一份到 <code>~/.kube/config</code> 下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cp &#x2F;etc&#x2F;rancher&#x2F;k3s&#x2F;k3s.yaml ~&#x2F;.kube&#x2F;config</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="相关参考"><a href="#相关参考" class="headerlink" title="相关参考"></a>相关参考</h4><ul>
<li><a href="https://rancher.com/docs/rancher/v2.x/en/installation/ha/helm-init/" target="_blank" rel="noopener">3. Initialize Helm (Install Tiller)</a></li>
<li><a href="https://helm.sh/docs/using_helm/#quickstart-guide" target="_blank" rel="noopener">Helm</a></li>
<li><a href="https://github.com/helm/helm" target="_blank" rel="noopener">helm/helm: The Kubernetes Package Manager</a></li>
</ul>
]]></content>
      <categories>
        <category>轻量级云原生</category>
      </categories>
      <tags>
        <tag>云原生</tag>
        <tag>K3s</tag>
        <tag>Helm</tag>
      </tags>
  </entry>
  <entry>
    <title>轻量级Kubernetes发行版k3s之配置问题汇总</title>
    <url>/2019/08/31/lightweight-kubernetes-release-k3s-issues/</url>
    <content><![CDATA[<p>虽然上篇文章中提到k3s安装非常简单，但由于现在k3s的版本还是 <code>v0.8.1</code>，可能会出现不稳定的情况以及一些配置上的问题，还不推荐在生产环境中正式使用。</p>
<p>下面我总结了一些我在配置k3s集群过程中遇到的一些问题及解决方法。</p>
<h4 id="关于容器引擎"><a href="#关于容器引擎" class="headerlink" title="关于容器引擎"></a>关于容器引擎</h4><h5 id="containerd"><a href="#containerd" class="headerlink" title="containerd"></a>containerd</h5><p>k3s默认推荐使用 <code>Containerd</code> 作为容器引擎。通过用containderd替换Docker，K3s能够显著减少运行时占用空间，删除了libnetwork、swarm、Docker存储驱动程序和其他插件等功能。</p>
<p>k3s服务在安装时也默认设置了containerd容器管理工具 <code>crictl</code>。</p>
<p>关于containerd的详细内容，这里暂且不细说，后续我会单独用一篇文章来介绍。</p>
<h5 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h5><p>k3s 也支持使用docker来作为容器引擎。只需要在服务启动时指定参数 <code>--docker</code> 即可。</p>
<p>因为我平时习惯了使用docker，所以我就选择了docker作为默认的容器引擎。启动后如下，会在 <code>CONTAINER-RUNTIME</code> 一栏显示所用的容器引擎信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># kubectl get nodes -o wide</span><br><span class="line">NAME         STATUS   ROLES    AGE     VERSION         INTERNAL-IP    EXTERNAL-IP   OS-IMAGE                KERNEL-VERSION               CONTAINER-RUNTIME</span><br><span class="line">k3s-agent    Ready    worker   6m2s    v1.14.6-k3s.1   192.168.5.18   &lt;none&gt;        CentOS Linux 7 (Core)   3.10.0-957.10.1.el7.x86_64   docker:&#x2F;&#x2F;18.6.3</span><br><span class="line">k3s-master   Ready    master   4m38s   v1.14.6-k3s.1   192.168.5.17   &lt;none&gt;        CentOS Linux 7 (Core)   3.10.0-957.10.1.el7.x86_64   docker:&#x2F;&#x2F;18.6.3</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="docker版本"><a href="#docker版本" class="headerlink" title="docker版本"></a>docker版本</h4><p>我安装的k3s版本为 <code>v0.8.1</code>，对应的kubernetes版本为 <code>v1.14.6</code>。安装的docker版本为 <code>v18.06</code>。</p>
<p>一开始我使用的docker版本为 <code>v18.09</code>，配置k3s的master客户端时服务能正常启动，但当安装agent服务时，添加了 <code>--docker</code> 参数后k3s服务一直无法启动。于是我只好将docker版本从 <code>v18.09</code> 降级到了 <code>v18.06</code> 版本才正常启动。</p>
<p>我去查看了一下Kubernetes支持的docker版本，对于Kubernetes <code>v1.14</code> 版本支持的docker版本为 1.13.1, 17.03, 17.06, 17.09, 18.06, 18.09。</p>
<p>至于我的 <code>v18.09</code> 为什么没有正常启动，后来推测可能是两方面的问题：</p>
<ol>
<li>k3s不稳定（可以尝试多次重启服务或者重启系统解决）</li>
<li>系统环境影响（可以通过重新搭建系统环境来解决）</li>
</ol>
<hr>
<h4 id="pause镜像"><a href="#pause镜像" class="headerlink" title="pause镜像"></a>pause镜像</h4><p>Kubernetes集群在运行时需要获取一个基础镜像pause：<code>k8s.gcr.io/pause:3.1</code>，k3s中也不例外。但由于pause镜像的仓库为 <code>k8s.gcr.io</code>，在国内是无法正常拉取的，也就导致了你在创建Pod时一直处于 <code>ImagePullBackOff</code> 状态。</p>
<p>一般我们可以通过折中的方法来获取该镜像。</p>
<h5 id="使用docker作为容器引擎时"><a href="#使用docker作为容器引擎时" class="headerlink" title="使用docker作为容器引擎时"></a>使用docker作为容器引擎时</h5><p>这种方法是相对来说比较简单的，只需要在k3s服务命令中添加 <code>--docker</code> 就可以指定k3s使用Docker容器引擎。pause镜像的获取可以按照之前搭建Kubernetes集群环境时 <a href="https://www.itfanr.cc/2019/05/17/kubernetes-introduction-for-install-by-kubeadm/#%E4%B8%8B%E8%BD%BD%E9%95%9C%E5%83%8F">Kubernetes入门 – 一使用kubeadm部署Kubernetes集群v1.14.1 | IT范儿</a> 中的步骤来操作。</p>
<p>我这里使用的是 <code>azure中国</code> 的镜像地址：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ docker pull gcr.azk8s.cn&#x2F;google_containers&#x2F;pause:3.1</span><br><span class="line">$ docker tag gcr.azk8s.cn&#x2F;google_containers&#x2F;pause:3.1 k8s.gcr.io&#x2F;pause:3.1</span><br><span class="line">$ docker rmi gcr.azk8s.cn&#x2F;google_containers&#x2F;pause:3.1</span><br></pre></td></tr></table></figure>

<h5 id="使用containerd作为容器引擎时"><a href="#使用containerd作为容器引擎时" class="headerlink" title="使用containerd作为容器引擎时"></a>使用containerd作为容器引擎时</h5><p>k3s中默认使用containerd作为容器引擎，在运行Pod时也会先去获取pause镜像。</p>
<p>这里我总结了两种方法来为containerd提前下载pause镜像。</p>
<h6 id="通过docker拉取"><a href="#通过docker拉取" class="headerlink" title="通过docker拉取"></a>通过docker拉取</h6><p>我们可以通过docker把pause镜像拉取下来，然后转换成containerd可以使用的pause镜像：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 通过docker拉取镜像</span><br><span class="line">$ docker pull gcr.azk8s.cn&#x2F;google_containers&#x2F;pause:3.1</span><br><span class="line"></span><br><span class="line"># 通过tag重命名pause镜像</span><br><span class="line">$ docker tag gcr.azk8s.cn&#x2F;google_containers&#x2F;pause:3.1 k8s.gcr.io&#x2F;pause:3.1</span><br><span class="line"></span><br><span class="line"># 保存镜像为tar包</span><br><span class="line">$ docker save k8s.gcr.io&#x2F;pause:3.1 -o pause.tar</span><br><span class="line"></span><br><span class="line"># 让containerd加载该tar包</span><br><span class="line">$ ctr cri load pause.tar</span><br></pre></td></tr></table></figure>

<h6 id="通过air-gap安装"><a href="#通过air-gap安装" class="headerlink" title="通过air-gap安装"></a>通过air-gap安装</h6><p>k3s支持预加载containerd映像，方法是在启动之前将它们放在代理的images目录中。</p>
<p>先从 <a href="https://github.com/rancher/k3s/releases" target="_blank" rel="noopener">Releases · rancher/k3s</a> 下载对应的 <code>k3s-airgap-images-xxx.tar</code> 安装包。</p>
<p>然后通过如下命令操作：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mkdir -p &#x2F;var&#x2F;lib&#x2F;rancher&#x2F;k3s&#x2F;agent&#x2F;images&#x2F;</span><br><span class="line">sudo cp .&#x2F;k3s-airgap-images-$ARCH.tar &#x2F;var&#x2F;lib&#x2F;rancher&#x2F;k3s&#x2F;agent&#x2F;images&#x2F;</span><br></pre></td></tr></table></figure>

<p>详见官方文档：<a href="https://rancher.com/docs/k3s/latest/en/running/#air-gap-support" target="_blank" rel="noopener">Running K3S</a></p>
<hr>
<h4 id="启用端口"><a href="#启用端口" class="headerlink" title="启用端口"></a>启用端口</h4><p>一般情况下，在局域网内测试k3s集群为了测试方便都会选择关闭防火墙 <code>systemctl stop firewalld &amp;&amp; systemctl disable firewalld</code> 。但如果是在正式的生产环境中则需要启用防火墙并打开相关的端口。</p>
<p>按照k3s文档上的说明，需要启用 <code>6443</code> 和 <code>8472</code> 端口。</p>
<p>但是，不排除还有一些其他的潜在端口。这里我只找到了一篇相关的issues：<a href="https://github.com/rancher/k3s/issues/401" target="_blank" rel="noopener">k3s service cannot start in RHEL with firewall enabled · Issue #401 · rancher/k3s</a></p>
<p>扩展：<a href="https://www.rancher.cn/docs/k3s/latest/en/configuration/#open-ports-network-security" target="_blank" rel="noopener">Configuration Info Open Ports / Network Security</a></p>
<hr>
<h4 id="卸载k3s"><a href="#卸载k3s" class="headerlink" title="卸载k3s"></a>卸载k3s</h4><p>如果是通过 <code>install.sh</code> 脚本安装的k3s，默认会在服务中安装一个卸载的脚本文件：</p>
<p> <code>/usr/local/bin/k3s-uninstall.sh</code> (or as <code>k3s-agent-uninstall.sh</code>).</p>
<hr>
<h4 id="Running-in-Docker"><a href="#Running-in-Docker" class="headerlink" title="Running in Docker"></a>Running in Docker</h4><p>除了通过二进制的方式来部署k3s，还可以使用更简单的Docker容器方式来部署。k3s官方也给出了两种方法来通过Docker容器安装k3s。</p>
<h5 id="docker-compose"><a href="#docker-compose" class="headerlink" title="docker-compose"></a>docker-compose</h5><p>可以直接从k3s的github仓库中获取该 <code>docker-compose.yaml</code> 文件，或执行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ wget https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;rancher&#x2F;k3s&#x2F;master&#x2F;docker-compose.yml</span><br></pre></td></tr></table></figure>

<h5 id="k3d"><a href="#k3d" class="headerlink" title="k3d"></a>k3d</h5><p><code>k3d</code> 可以理解成 <code>k3s in docker</code> ，是一个设计用于在Docker中轻松运行k3s的实用程序。</p>
<p>详见：<a href="https://github.com/rancher/k3d" target="_blank" rel="noopener">rancher/k3d: Little helper to run Rancher Lab’s k3s in Docker</a></p>
<hr>
<h4 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h4><h5 id="kube-config-permissions"><a href="#kube-config-permissions" class="headerlink" title="kube config permissions"></a>kube config permissions</h5><p>在通过非root账户配置好<code>k3s-master</code> 服务后，我想着通过 <code>kubectl get node</code> 查看一下节点的运行状态，结果却报出了如下的错误：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜  ~ k3s kubectl get node</span><br><span class="line">WARN[2019-08-30T12:14:50.841714144+08:00] Unable to read &#x2F;etc&#x2F;rancher&#x2F;k3s&#x2F;k3s.yaml, please start server with --write-kubeconfig-mode to modify kube config permissions</span><br><span class="line">error: Error loading config file &quot;&#x2F;etc&#x2F;rancher&#x2F;k3s&#x2F;k3s.yaml&quot;: open &#x2F;etc&#x2F;rancher&#x2F;k3s&#x2F;k3s.yaml: permission denied</span><br></pre></td></tr></table></figure>

<p>错误信息是：在加载配置文件 <code>/etc/rancher/k3s/k3s.yaml</code> 时没有权限。</p>
<p>让人欣喜的是在错误信息也给出了解决方法，通过设置 <code>--write-kubeconfig-mode</code> 参数来赋予权限。</p>
<p>只需在 <code>k3s.service</code> 中将 <code>ExecStart</code> 的值 <code>ExecStart=/usr/local/bin/k3s server --docker</code> 改成：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;usr&#x2F;local&#x2F;bin&#x2F;k3s server --docker --write-kubeconfig-mode 644</span><br></pre></td></tr></table></figure>

<p>之后，重启服务即可：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜  ~ sudo systemctl daemon-reload</span><br><span class="line">➜  ~ sudo systemctl restart k3s</span><br></pre></td></tr></table></figure>

<p>具体关于这个问题的讨论可以参考：<a href="https://github.com/rancher/k3s/issues/389" target="_blank" rel="noopener">/etc/rancher/k3s/k3s.yaml is world readable · Issue #389 · rancher/k3s</a> 这个issue讨论。</p>
<h5 id="certificate-has-expired"><a href="#certificate-has-expired" class="headerlink" title="certificate has expired"></a>certificate has expired</h5><p>在安装 <code>k3s-agent</code> 过程中，发现启动服务后日志中一直报如下的错误：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">8月 30 17:07:00 node1 k3s[941]: time&#x3D;&quot;2019-08-30T17:07:00.542226362+08:00&quot; level&#x3D;error msg&#x3D;&quot;server https:&#x2F;&#x2F;127.0.0.1:35556&#x2F;cacerts is not trusted: Get https:&#x2F;&#x2F;127.0.0.1:35556&#x2F;cacerts: x509: certificate has expired or is not yet valid&quot;</span><br><span class="line">8月 30 17:07:02 node1 k3s[941]: time&#x3D;&quot;2019-08-30T17:07:02.547358146+08:00&quot; level&#x3D;error msg&#x3D;&quot;server https:&#x2F;&#x2F;127.0.0.1:35556&#x2F;cacerts is not trusted: Get https:&#x2F;&#x2F;127.0.0.1:35556&#x2F;cacerts: x509: certificate has expired or is not yet valid&quot;</span><br></pre></td></tr></table></figure>

<p>看错误信息 <code>x509: certificate has expired or is not yet valid&quot;</code> 提示是证书过期了，但刚一安装证书怎么就过期了呢？多次重启服务后发现一直报这个错误。</p>
<p>后来才发现原来是master服务器和agent服务器两个主机的<strong>系统时间不一致</strong>导致的，我将agent服务器重启后就好了。</p>
]]></content>
      <categories>
        <category>轻量级云原生</category>
      </categories>
      <tags>
        <tag>云原生</tag>
        <tag>K3s</tag>
      </tags>
  </entry>
  <entry>
    <title>轻量级Kubernetes发行版k3s之介绍</title>
    <url>/2019/08/30/lightweight-kubernetes-release-k3s-introduce/</url>
    <content><![CDATA[<p>k3s 是一个轻量级 Kubernetes，它易于安装，二进制文件包小于 40 mb，只需要 512MB RAM 即可运行。</p>
<h4 id="k3s介绍"><a href="#k3s介绍" class="headerlink" title="k3s介绍"></a>k3s介绍</h4><p>k3s 旨在成为完全兼容的 Kubernetes 发行版，相比 k8s 主要更改如下：</p>
<ul>
<li>旧的、Alpha 版本的、非默认功能都已经删除。</li>
<li>删除了大多数内部云提供商和存储插件，可以用插件替换。</li>
<li>新增 SQLite3 作为默认存储机制，etcd3 仍然有效，但是不再是默认项。</li>
<li>封装在简单的启动器中，可以处理大量 LTS 复杂性和选项。</li>
<li>最小化到没有操作系统依赖，只需要一个内核和 cgroup 挂载。</li>
</ul>
<p>K3s支持x86_64、ARM64和ARMv7架构，使K3s得以更加灵活地跨任何边缘基础架构工作。</p>
<p>使用场景：</p>
<ul>
<li>边缘计算</li>
<li>与应用程序绑定使用</li>
<li>嵌入式设备</li>
<li>CI环境</li>
</ul>
<p>k3s工作原理：</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20190831220323.png" alt=""></p>
<h4 id="k3s安装"><a href="#k3s安装" class="headerlink" title="k3s安装"></a>k3s安装</h4><p>k3s的安装非常简单，可以直接按照官方给出的教程来操作。</p>
<p>通过 <code>install.sh</code> 脚本来安装，执行如下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -sfL https:&#x2F;&#x2F;get.k3s.io | sh -</span><br></pre></td></tr></table></figure>

<p>k3s的配置文件默认存储在 <code>/etc/rancher/k3s/k3s.yaml</code> 下。安装脚本默认会安装相关的工具，比如 <code>kubectl</code> 和卸载服务相关的 <code>k3s-unstall.sh</code> 脚本等。</p>
<p>配置k3s集群的token文件存在于server节点的 <code>/var/lib/rancher/k3s/server/node-token</code> 文件中。可以通过如下命令来安装worker节点：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -sfL https:&#x2F;&#x2F;get.k3s.io | K3S_URL&#x3D;https:&#x2F;&#x2F;myserver:6443 K3S_TOKEN&#x3D;XXX sh -</span><br></pre></td></tr></table></figure>

<p>经测试，默认情况下安装的k3s服务为master节点，服务名称为 <code>k3s.service</code> ，在加上 <code>K3S_URL</code> 和 <code>K3S_TOKEN</code> 两个参数后，安装的服务名称为 <code>k3s-agent.service</code> ，看来官方也是直接做了区分。</p>
<p>当然，你也可以直接通过一条命令 <code>curl -sfL https://get.k3s.io | sh -</code> 来安装所有的master节点和agent节点，这样服务名称都会为 <code>k3s.service</code> 。然后在通过修改命令参数的方式来指定是master节点还是agent节点，以及一些其他参数。</p>
<p>总而言之，k3s的安装相比于k8s来说，还是非常简单的。</p>
<h4 id="相关参考"><a href="#相关参考" class="headerlink" title="相关参考"></a>相关参考</h4><ul>
<li><a href="https://github.com/rancher/k3s" target="_blank" rel="noopener">rancher/k3s: Lightweight Kubernetes. 5 less than k8s.</a></li>
<li><a href="https://rancher.com/docs/k3s/latest/en/quick-start/" target="_blank" rel="noopener">Quick-Start</a></li>
</ul>
<p>这篇文章多少有点水，当然，硬货还在后面。。。</p>
]]></content>
      <categories>
        <category>轻量级云原生</category>
      </categories>
      <tags>
        <tag>云原生</tag>
        <tag>K3s</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo遇到的一个关于nodejs版本的问题</title>
    <url>/2019/08/24/hexo-of-nodejs-version/</url>
    <content><![CDATA[<p>自从升级了nodejs的版本到 <code>v10.15.3</code> 之后，每次执行 hexo 的命令都会报出一大串的错误信息。开始因为这个错误并不影响后续的命令执行，所以也就一直没有解决。但是每次看到这个错误就觉得头疼，所以花了一点时间研究了一下，没想到。。。问题的原因还真挺简单的。</p>
<h4 id="问题现象"><a href="#问题现象" class="headerlink" title="问题现象"></a>问题现象</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜ hexo new &quot;ssh-faster&quot;</span><br><span class="line">Error: The module &#39;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;node_modules&#x2F;hexo-cli&#x2F;node_modules&#x2F;dtrace-provider&#x2F;build&#x2F;Release&#x2F;DTraceProviderBindings.node&#39;</span><br><span class="line">was compiled against a different Node.js version using</span><br><span class="line">NODE_MODULE_VERSION 57. This version of Node.js requires</span><br><span class="line">NODE_MODULE_VERSION 64. Please try re-compiling or re-installing</span><br><span class="line">the module (for instance, using &#96;npm rebuild&#96; or &#96;npm install&#96;).</span><br><span class="line">    at Object.Module._extensions..node (internal&#x2F;modules&#x2F;cjs&#x2F;loader.js:730:18)</span><br><span class="line">    at Module.load (internal&#x2F;modules&#x2F;cjs&#x2F;loader.js:600:32)</span><br><span class="line">    at tryModuleLoad (internal&#x2F;modules&#x2F;cjs&#x2F;loader.js:539:12)</span><br><span class="line">    at Function.Module._load (internal&#x2F;modules&#x2F;cjs&#x2F;loader.js:531:3)</span><br><span class="line">    at Module.require (internal&#x2F;modules&#x2F;cjs&#x2F;loader.js:637:17)</span><br><span class="line">    at require (internal&#x2F;modules&#x2F;cjs&#x2F;helpers.js:22:18)</span><br><span class="line">    at Object.&lt;anonymous&gt; (&#x2F;usr&#x2F;local&#x2F;lib&#x2F;node_modules&#x2F;hexo-cli&#x2F;node_modules&#x2F;dtrace-provider&#x2F;dtrace-provider.js:18:23)</span><br><span class="line">    at Module._compile (internal&#x2F;modules&#x2F;cjs&#x2F;loader.js:701:30)</span><br><span class="line">    at Object.Module._extensions..js (internal&#x2F;modules&#x2F;cjs&#x2F;loader.js:712:10)</span><br><span class="line">    at Module.load (internal&#x2F;modules&#x2F;cjs&#x2F;loader.js:600:32)</span><br><span class="line">    at tryModuleLoad (internal&#x2F;modules&#x2F;cjs&#x2F;loader.js:539:12)</span><br><span class="line">    at Function.Module._load (internal&#x2F;modules&#x2F;cjs&#x2F;loader.js:531:3)</span><br><span class="line">    at Module.require (internal&#x2F;modules&#x2F;cjs&#x2F;loader.js:637:17)</span><br><span class="line">    at require (internal&#x2F;modules&#x2F;cjs&#x2F;helpers.js:22:18)</span><br><span class="line">    at Object.&lt;anonymous&gt; (&#x2F;usr&#x2F;local&#x2F;lib&#x2F;node_modules&#x2F;hexo-cli&#x2F;node_modules&#x2F;bunyan&#x2F;lib&#x2F;bunyan.js:79:18)</span><br><span class="line">    at Module._compile (internal&#x2F;modules&#x2F;cjs&#x2F;loader.js:701:30)</span><br><span class="line">INFO  Created: ~&#x2F;Project&#x2F;Leafney.github.io&#x2F;source&#x2F;_posts&#x2F;ssh-faster.md</span><br></pre></td></tr></table></figure>

<p>看上面的错误信息就可简单的知道这是关于 <code>NODE_MODULE_VERSION</code> 版本不一致的问题导致的。</p>
<h4 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h4><p>先查看一下当前node及npm版本：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜ node -v</span><br><span class="line">v10.15.3</span><br><span class="line"></span><br><span class="line">➜ npm -v</span><br><span class="line">6.4.1</span><br></pre></td></tr></table></figure>

<p>经查询，这个问题的原因就是 <code>hexo-cli</code> 的版本太低导致的。</p>
<p>执行命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜ sudo npm i -g hexo-cli</span><br></pre></td></tr></table></figure>

<p>可以看到 hexo-cli的版本进行了更新：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; New minor version of npm available! 6.4.1 → 6.11.2</span><br></pre></td></tr></table></figure>

<p>So，一条命令解决问题。</p>
<p>参考：<a href="https://kinm.github.io/2017/07/21/%E8%A7%A3%E5%86%B3NODEJS%E6%9B%B4%E6%96%B0%E5%88%B08-0-%E5%90%8EHEXO%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%8A%A5%E9%94%99/" target="_blank" rel="noopener">解决NODEJS更新到8.0+后HEXO命令行报错 | 小明</a></p>
]]></content>
      <categories>
        <category>Hexo博客搭建</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux中加速SSH连接</title>
    <url>/2019/08/24/ssh-faster/</url>
    <content><![CDATA[<p>服务器端修改配置文件 <code>/etc/ssh/sshd_config</code>，将以下两项 <code>取消注释</code> 且值均设置为 <code>no</code>:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># vim &#x2F;etc&#x2F;ssh&#x2F;sshd_config</span><br><span class="line"></span><br><span class="line">UseDNS no</span><br><span class="line">GSSAPIAuthentication no</span><br></pre></td></tr></table></figure>

<ul>
<li><code>UseDNS</code> 会对客户端进行DNS反向解析，然后在比对正向解析的结果查看是否一致。</li>
<li><code>GSSAPIAuthentication</code> 大多数情况下使用密码验证或者秘钥验证所以关闭GSSAPI验证即可</li>
</ul>
<p>之后，重启sshd守护进程：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># systemctl restart sshd</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>MacOS应用软件网站推荐</title>
    <url>/2019/07/14/mac-software-website/</url>
    <content><![CDATA[<h4 id="网站推荐"><a href="#网站推荐" class="headerlink" title="网站推荐"></a>网站推荐</h4><ul>
<li><a href="https://xclient.info/" target="_blank" rel="noopener">精品MAC应用分享</a></li>
<li><a href="https://www.waitsun.com/" target="_blank" rel="noopener">麦氪派(WaitsUn.com | 爱情守望者)_精品Mac应用分享</a></li>
<li><a href="https://www.macenjoy.co/" target="_blank" rel="noopener">MacEnjoy-macOS破解资源分享站</a> <strong>⭐️</strong></li>
<li><a href="https://www.macsky.net/" target="_blank" rel="noopener">苹果/mac破解软件下载-常用必备软件推荐-MacSKY苹果软件园</a></li>
</ul>
<hr>
<h4 id="修复TNT破解的Mac软件退出问题"><a href="#修复TNT破解的Mac软件退出问题" class="headerlink" title="修复TNT破解的Mac软件退出问题"></a>修复TNT破解的Mac软件退出问题</h4><p>7月12日，Apple删除了TNT的证书，更新了T2芯片的安全模式。因此很多破解的应用程序在7月12日之后打开会崩溃。例如，CleanMyMac X，BetterZip，1Password，One Switch 等，目前的解决方案是需要自己手动签名，能解决大部份软件崩溃问题。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20190713235952.png" alt=""></p>
<h5 id="安装Xcode"><a href="#安装Xcode" class="headerlink" title="安装Xcode"></a>安装Xcode</h5><p>可以在App Store中下载安装，并且至少运行一次。</p>
<h5 id="安装Command-Line-Tools-工具"><a href="#安装Command-Line-Tools-工具" class="headerlink" title="安装Command Line Tools 工具"></a>安装Command Line Tools 工具</h5><p>打开终端工具输入如下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">xcode-select install</span><br></pre></td></tr></table></figure>

<p>弹出后选择继续安装。</p>
<h5 id="软件签名"><a href="#软件签名" class="headerlink" title="软件签名"></a>软件签名</h5><p>安装完成后可以利用 <code>codesign</code> 进行签名，打开终端输入如下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">codesign --force --deep --sign - &#x2F;Applications&#x2F;name.app</span><br></pre></td></tr></table></figure>
<p>注意后面的文件路径，你可以打开 <code>访达</code>(<code>Finder</code>) 找到 <code>应用程序</code>，找到要签名的软件，输入命令 <code>codesign --force --deep --sign -</code> 后把需要签名的软件拖拽到终端然后回车即可。</p>
<h5 id="一键签署工具"><a href="#一键签署工具" class="headerlink" title="一键签署工具"></a>一键签署工具</h5><p>如果嫌以上的操作太复杂，也可以使用一键签署工具：<a href="https://www.macenjoy.co/blog/codesigner" target="_blank" rel="noopener">CodeSigner For Mac打开时崩溃签署工具 V0.9.3 beta 4 - 特别</a></p>
<h5 id="相关参考"><a href="#相关参考" class="headerlink" title="相关参考"></a>相关参考</h5><ul>
<li><a href="https://imac.hk/fix-tnt-crack-app-exit.html" target="_blank" rel="noopener">修复TNT破解的Mac软件退出问题 – 黑苹果乐园</a></li>
<li><a href="https://www.macsky.net/32069.html" target="_blank" rel="noopener">重要提醒：7月12号以后打开软件提示崩溃问题解决办法 - MacSKY苹果软件园</a></li>
<li><a href="https://www.macenjoy.co/blog/support?categoryId=80178" target="_blank" rel="noopener">Mac 软件安装问题解决 - 支持</a></li>
</ul>
<hr>
<p>注意：<strong>推荐网站中涉及到的资源建议仅供学习和研究使用，请支持并购买正版软件。</strong></p>
]]></content>
      <tags>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title>在Kubernetes上执行Drone CI/CD</title>
    <url>/2019/07/11/run-drone-cicd-on-kubernetes/</url>
    <content><![CDATA[<h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>之前曾使用 <code>docker run</code> 和 <code>docker-compose</code> 的方式部署过Drone服务，方法比较简单。最近一段时间一直在学习Kubernetes，正好研究一下如何在Kubernetes上部署Drone实现CI/CD。</p>
<p>相比之前在Docker下部署的Drone <code>server-agent</code> 模式，在Kubernetes上运行Drone可以简化我们的部署，其中最大的改进就是不再需要单独的去维护 <code>agent</code> 服务了，Drone会创建一个Kubernetes Job来执行相应的Pipeline。</p>
<p>这个Kubernetes Job会生成一个Pipeline Controller容器。来负责编排管道步骤、收集结果、并向Drone服务器回调通知。</p>
<p>不过，目前在Kubernetes上运行Drone服务仍然是实验性的，官方并不推荐在正式的生产环境中来部署。</p>
<hr>
<h4 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h4><h5 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h5><p>我通过 <code>Deployment</code> 在VBox虚拟机上的Kubernetes环境中分别部署Gitea和Drone服务。其中有几点需要注意：</p>
<ul>
<li>为了便于测试，指定 <code>Service</code> 使用 <code>type: NodePort</code> 来绑定主机端口；</li>
<li>由于使用本地环境部署的原因，并没有使用 <code>traefik</code> + <code>host</code> 的方式来设置虚拟域名，关键是在本地环境下gitea的webhook无法通过虚拟域名来执行回调而触发Drone的Pipeline，所以只能使用IP方式；</li>
<li>先部署Gitea服务，其中的 <code>nodePort</code> 不需要手动指定，使用随机端口号即可；</li>
<li>部署Drone服务时，需要手动指定 <code>nodePort</code> 一项，因为在设置环境变量 <code>DRONE_SERVER_HOST</code> 时需要该端口；</li>
</ul>
<h5 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h5><p>gitea安装配置页面，以下几项需要注意：</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20190710111150.png" alt=""></p>
<p>创建一个简单的 <code>.drone.yml</code> 文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kind: pipeline</span><br><span class="line">name: default</span><br><span class="line"></span><br><span class="line">clone:</span><br><span class="line">  disable: true</span><br><span class="line"></span><br><span class="line">steps:</span><br><span class="line">- name: test_drone</span><br><span class="line">  image: alpine:3.9</span><br><span class="line">  commands:</span><br><span class="line">  - echo &quot;show hello world by drone&quot;</span><br><span class="line">  - echo $(pwd)</span><br><span class="line">  - sleep 10</span><br></pre></td></tr></table></figure>

<p>当执行git提交后，Drone容器中的部分日志记录如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&quot;commit&quot;:&quot;6ef0d3355007823ab03c6c1a8ca7ba41bb7c304e&quot;,&quot;event&quot;:&quot;push&quot;,&quot;level&quot;:&quot;debug&quot;,&quot;msg&quot;:&quot;webhook parsed&quot;,&quot;name&quot;:&quot;hello&quot;,&quot;namespace&quot;:&quot;abc&quot;,&quot;time&quot;:&quot;2019-07-10T13:08:24Z&quot;&#125;</span><br><span class="line">&#123;&quot;commit&quot;:&quot;6ef0d3355007823ab03c6c1a8ca7ba41bb7c304e&quot;,&quot;event&quot;:&quot;push&quot;,&quot;level&quot;:&quot;debug&quot;,&quot;msg&quot;:&quot;trigger: received&quot;,&quot;ref&quot;:&quot;refs&#x2F;heads&#x2F;master&quot;,&quot;repo&quot;:&quot;abc&#x2F;hello&quot;,&quot;time&quot;:&quot;2019-07-10T13:08:24Z&quot;&#125;</span><br><span class="line">&#123;&quot;build-id&quot;:2,&quot;level&quot;:&quot;debug&quot;,&quot;msg&quot;:&quot;kubernetes: creating job&quot;,&quot;repo-id&quot;:1,&quot;stage-id&quot;:2,&quot;stage-name&quot;:&quot;default&quot;,&quot;stage-number&quot;:1,&quot;time&quot;:&quot;2019-07-10T13:08:24Z&quot;&#125;</span><br><span class="line">&#123;&quot;build-id&quot;:2,&quot;level&quot;:&quot;debug&quot;,&quot;msg&quot;:&quot;kubernetes: successfully created job&quot;,&quot;repo-id&quot;:1,&quot;stage-id&quot;:2,&quot;stage-name&quot;:&quot;default&quot;,&quot;stage-number&quot;:1,&quot;time&quot;:&quot;2019-07-10T13:08:25Z&quot;&#125;</span><br><span class="line">&#123;&quot;fields.time&quot;:&quot;2019-07-10T13:08:25Z&quot;,&quot;latency&quot;:351766213,&quot;level&quot;:&quot;debug&quot;,&quot;method&quot;:&quot;POST&quot;,&quot;msg&quot;:&quot;&quot;,&quot;remote&quot;:&quot;10.244.0.1:50176&quot;,&quot;request&quot;:&quot;&#x2F;hook?secret&#x3D;Gfz8OUgBscs2wySUiQZsTRdqDCqK6GBc&quot;,&quot;request-id&quot;:&quot;1Np3FAx2JZldpFOFBkNsnn2jgD1&quot;,&quot;time&quot;:&quot;2019-07-10T13:08:25Z&quot;&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到其中关键的两步：</p>
<ul>
<li><code>&quot;build-id&quot;:2 -- &quot;msg&quot;:&quot;kubernetes: creating job&quot;</code></li>
<li><code>&quot;build-id&quot;:2 -- &quot;msg&quot;:&quot;kubernetes: successfully created job&quot;</code></li>
</ul>
<p>查看自动创建的Job：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ kubectl -n cicd get job</span><br><span class="line">NAME                            COMPLETIONS   DURATION   AGE</span><br><span class="line">drone-job-2-cnbmdfdlov2wqkcsg   1&#x2F;1           43s        56s</span><br></pre></td></tr></table></figure>

<p>查看相应的Pod:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ kubectl -n cicd get pods</span><br><span class="line">NAME                                  READY   STATUS      RESTARTS   AGE</span><br><span class="line">drone-deploy-77fb9ff86d-w8q9s         1&#x2F;1     Running     0          17m</span><br><span class="line">drone-job-2-cnbmdfdlov2wqkcsg-c8m56   0&#x2F;1     Completed   0          5m37s</span><br></pre></td></tr></table></figure>

<p>查看Drone UI中的构建情况：</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20190710211502.png" alt=""></p>
<h5 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h5><p>查看该Pod的详细描述：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜ kubectl -n cicd describe pods drone-job-2-cnbmdfdlov2wqkcsg-c8m56</span><br><span class="line">Name:               drone-job-2-cnbmdfdlov2wqkcsg-c8m56</span><br><span class="line">Namespace:          cicd</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">Status:             Succeeded</span><br><span class="line">IP:                 10.244.1.121</span><br><span class="line">Controlled By:      Job&#x2F;drone-job-2-cnbmdfdlov2wqkcsg</span><br><span class="line">Containers:</span><br><span class="line">  drone-controller:</span><br><span class="line">    Container ID:   docker:&#x2F;&#x2F;8a2e413b84fe6d9dd361cc17b82881f888ff7376605c83bea0714cd5e439523c</span><br><span class="line">    Image:          drone&#x2F;controller:1.2.1</span><br><span class="line">    Image ID:       docker-pullable:&#x2F;&#x2F;drone&#x2F;controller@sha256:3a57ab277657525b1cfe464d8f38501a4454a5db3d20ca7e56052330df2ec523</span><br><span class="line">    Port:           &lt;none&gt;</span><br><span class="line">    Host Port:      &lt;none&gt;</span><br><span class="line">    State:          Terminated</span><br><span class="line">      Reason:       Completed</span><br><span class="line">      Exit Code:    0</span><br><span class="line">      Started:      Wed, 10 Jul 2019 02:14:44 +0800</span><br><span class="line">      Finished:     Wed, 10 Jul 2019 02:14:57 +0800</span><br><span class="line">...</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>可以看到在该Pod内部自动创建了一个基于 <code>drone/controller</code> 镜像的容器来执行Pipeline。</p>
<h5 id="自动移除Jobs"><a href="#自动移除Jobs" class="headerlink" title="自动移除Jobs"></a>自动移除Jobs</h5><p>默认情况下，执行完成后的Kubernetes Jobs不会自动从系统中清除，主要是为了便于对Pipeline执行过程中报错的故障排查。</p>
<p>如果需要实现自动清理，这里我找到了两种方式，可以深入的去了解一下：</p>
<ol>
<li>设置Kubernetes的 <code>TTLAfterFinished</code> 特性，这也是Drone官方给出的解决方法</li>
<li>通过第三方的工具来实现：<a href="https://github.com/lwolf/kube-cleanup-operator" target="_blank" rel="noopener">lwolf/kube-cleanup-operator: Kubernetes Operator to automatically delete completed Jobs and their Pods</a></li>
</ol>
<hr>
<h4 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h4><p>需要为Drone创建相应的<code>ServiceAccount</code>权限。否则会报如下错误：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jobs.batch is forbidden: User &quot;system:serviceaccount:default:default&quot; cannot create resource &quot;jobs&quot; in API group &quot;batch&quot; in the namespace &quot;default&quot;</span><br></pre></td></tr></table></figure>

<p>配置流程则直接按照Drone文档中的方法操作即可。</p>
<h4 id="相关参考"><a href="#相关参考" class="headerlink" title="相关参考"></a>相关参考</h4><ul>
<li><a href="https://docs.drone.io/installation/gitea/kubernetes/" target="_blank" rel="noopener">gitea-Kubernetes</a></li>
<li><a href="https://blog.drone.io/drone-goes-kubernetes-native/" target="_blank" rel="noopener">Drone CI/CD Goes Kubernetes-Native</a></li>
</ul>
]]></content>
      <categories>
        <category>CI/CD实践</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
        <tag>Drone</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac下从命令行快速打开VSCode</title>
    <url>/2019/07/03/launching-vscode-from-command-line/</url>
    <content><![CDATA[<h4 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h4><p>打开 VS Code</p>
<p>通过快捷键 <code>Command + Shift + P</code> 调出命令面板并输入 <code>shell command</code> ，选择 <code>Shell Command: Install &#39;code&#39; command in PATH</code> 一项即可。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20190703154914.png" alt=""></p>
<p>重启终端窗口，并输入 <code>code .</code> 即可在当前目录下打开<code>VS Code</code>了。</p>
<p>也可以通过如下命令在<code>VS Code</code>中打开指定的文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ code ~&#x2F;Project&#x2F;Leafney.github.io&#x2F;pubblog&#x2F;000Hexo模板.md</span><br></pre></td></tr></table></figure>

<h4 id="相关参考"><a href="#相关参考" class="headerlink" title="相关参考"></a>相关参考</h4><ul>
<li><a href="https://code.visualstudio.com/docs/setup/setup-overview" target="_blank" rel="noopener">Setting up Visual Studio Code</a></li>
<li><a href="https://code.visualstudio.com/docs/setup/mac" target="_blank" rel="noopener">Running Visual Studio Code on macOS</a></li>
</ul>
]]></content>
      <categories>
        <category>工具技巧</category>
      </categories>
      <tags>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title>整理常用国内镜像软件源</title>
    <url>/2019/07/03/mirror-software-sources/</url>
    <content><![CDATA[<h4 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h4><ul>
<li>Alpine</li>
<li>Ubuntu/Debian</li>
<li>CentOS</li>
<li>Python/Pip</li>
<li>Golang</li>
<li>Docker</li>
<li>Kubernetes</li>
</ul>
<p><strong>没有涉及到的可以在评论处补充完善。</strong></p>
<hr>
<h4 id="Alpine"><a href="#Alpine" class="headerlink" title="Alpine"></a>Alpine</h4><h5 id="设置多个环境"><a href="#设置多个环境" class="headerlink" title="设置多个环境"></a>设置多个环境</h5><p>注意：第一行中使用的是 <code>&gt;</code> 符号，这样会把原有的默认仓库源信息给覆盖掉，如果需要保留，请更换成 <code>&gt;&gt;</code> 。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo &quot;https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;alpine&#x2F;v3.9&#x2F;main&#x2F;&quot; &gt; &#x2F;etc&#x2F;apk&#x2F;repositories &amp;&amp; \</span><br><span class="line">    echo &quot;https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;alpine&#x2F;v3.9&#x2F;community&#x2F;&quot; &gt;&gt; &#x2F;etc&#x2F;apk&#x2F;repositories &amp;&amp; \</span><br><span class="line">    echo &quot;https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;alpine&#x2F;edge&#x2F;testing&#x2F;&quot; &gt;&gt; &#x2F;etc&#x2F;apk&#x2F;repositories</span><br></pre></td></tr></table></figure>

<h5 id="单独设置"><a href="#单独设置" class="headerlink" title="单独设置"></a>单独设置</h5><p>注意：根据所使用的alpine系统版本，更换其中的版本号。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ echo &quot;http:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;alpine&#x2F;v3.9&#x2F;main&#x2F;&quot; &gt;&gt; &#x2F;etc&#x2F;apk&#x2F;repositories</span><br><span class="line"></span><br><span class="line">$ echo &quot;http:&#x2F;&#x2F;dl-4.alpinelinux.org&#x2F;alpine&#x2F;v3.4&#x2F;main&quot; &gt;&gt; &#x2F;etc&#x2F;apk&#x2F;repositories</span><br></pre></td></tr></table></figure>

<h4 id="Ubuntu-Debian"><a href="#Ubuntu-Debian" class="headerlink" title="Ubuntu/Debian"></a>Ubuntu/Debian</h4><h5 id="备份原始文件"><a href="#备份原始文件" class="headerlink" title="备份原始文件"></a>备份原始文件</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo cp &#x2F;etc&#x2F;apt&#x2F;sources.list &#x2F;etc&#x2F;apt&#x2F;sources.list.bak</span><br></pre></td></tr></table></figure>

<h5 id="软件源"><a href="#软件源" class="headerlink" title="软件源"></a>软件源</h5><p>编辑器打开：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;etc&#x2F;apt&#x2F;sources.list</span><br></pre></td></tr></table></figure>
<p>替换默认的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;archive.ubuntu.com&#x2F;</span><br></pre></td></tr></table></figure>
<p>为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mirrors.aliyun.com</span><br></pre></td></tr></table></figure>

<p>阿里云 <code>http://mirrors.aliyun.com/ubuntu/</code></p>
<p>网易163 <code>http://mirrors.163.com/ubuntu/</code></p>
<p>开源社：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deb http:&#x2F;&#x2F;azure.archive.ubuntu.com&#x2F;ubuntu&#x2F; bionic main restricted universe multiverse</span><br><span class="line">deb http:&#x2F;&#x2F;azure.archive.ubuntu.com&#x2F;ubuntu&#x2F; bionic-security main restricted universe multiverse</span><br><span class="line">deb http:&#x2F;&#x2F;azure.archive.ubuntu.com&#x2F;ubuntu&#x2F; bionic-updates main restricted universe multiverse</span><br><span class="line">deb http:&#x2F;&#x2F;azure.archive.ubuntu.com&#x2F;ubuntu&#x2F; bionic-proposed main restricted universe multiverse</span><br><span class="line">deb http:&#x2F;&#x2F;azure.archive.ubuntu.com&#x2F;ubuntu&#x2F; bionic-backports main restricted universe multiverse</span><br><span class="line">deb-src http:&#x2F;&#x2F;azure.archive.ubuntu.com&#x2F;ubuntu&#x2F; bionic main restricted universe multiverse</span><br><span class="line">deb-src http:&#x2F;&#x2F;azure.archive.ubuntu.com&#x2F;ubuntu&#x2F; bionic-security main restricted universe multiverse</span><br><span class="line">deb-src http:&#x2F;&#x2F;azure.archive.ubuntu.com&#x2F;ubuntu&#x2F; bionic-updates main restricted universe multiverse</span><br><span class="line">deb-src http:&#x2F;&#x2F;azure.archive.ubuntu.com&#x2F;ubuntu&#x2F; bionic-proposed main restricted universe multiverse</span><br><span class="line">deb-src http:&#x2F;&#x2F;azure.archive.ubuntu.com&#x2F;ubuntu&#x2F; bionic-backports main restricted universe multiverse</span><br></pre></td></tr></table></figure>

<p>待完善。</p>
<h5 id="Debian"><a href="#Debian" class="headerlink" title="Debian"></a>Debian</h5><p>网易163 <code>http://mirrors.163.com/debian/</code></p>
<p>待完善。</p>
<hr>
<h4 id="CentOS"><a href="#CentOS" class="headerlink" title="CentOS"></a>CentOS</h4><p>待完善。</p>
<hr>
<h4 id="Python-Pip"><a href="#Python-Pip" class="headerlink" title="Python/Pip"></a>Python/Pip</h4><h5 id="选择国内镜像源"><a href="#选择国内镜像源" class="headerlink" title="选择国内镜像源"></a>选择国内镜像源</h5><p>从 <a href="https://www.pypi-mirrors.org/" target="_blank" rel="noopener">PyPI Mirror Status</a> 可以找到可用的国内PypI镜像源，这里我选择豆瓣的源地址 <code>https://pypi.douban.com/</code> 。</p>
<h5 id="常用的国内镜像源"><a href="#常用的国内镜像源" class="headerlink" title="常用的国内镜像源"></a>常用的国内镜像源</h5><ul>
<li><a href="https://pypi.douban.com/" target="_blank" rel="noopener">pypi.douban.com</a> 豆瓣源，北京</li>
<li><a href="https://pypi.tuna.tsinghua.edu.cn/" target="_blank" rel="noopener">pypi.tuna.tsinghua.edu.cn</a> 清华源，北京</li>
<li><a href="https://mirrors.aliyun.com/pypi" target="_blank" rel="noopener">mirrors.aliyun.com/pypi</a> 阿里源，杭州</li>
</ul>
<h5 id="临时修改"><a href="#临时修改" class="headerlink" title="临时修改"></a>临时修改</h5><p>在安装软件时通过 <code>-i</code> 指令指定要使用的镜像源：</p>
<p>easy_install：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ easy_install -i https:&#x2F;&#x2F;&lt;mirror&gt;&#x2F;simple &lt;package&gt;</span><br></pre></td></tr></table></figure>

<p>pip：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ pip install -i https:&#x2F;&#x2F;&lt;mirror&gt;&#x2F;simple &lt;package&gt;</span><br></pre></td></tr></table></figure>

<p>如：<code>pip install -i https://pypi.douban.com/simple ansible</code></p>
<h5 id="全局更改"><a href="#全局更改" class="headerlink" title="全局更改"></a>全局更改</h5><p>通过在配置文件中指定来实现全局更改。</p>
<h6 id="easy-install-更改全局镜像源"><a href="#easy-install-更改全局镜像源" class="headerlink" title="easy_install 更改全局镜像源"></a>easy_install 更改全局镜像源</h6><p>在Unix系统下，配置文件位于 <code>~/.pydistutils.cfg</code> </p>
<p>在Windows系统下，配置文件位于 <code>？？？</code> (待完善)</p>
<p>如果文件不存在，新建一个就可以。</p>
<p>然后在相应的配置文件中写入如下内容(这里使用豆瓣的镜像源为例)：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[easy_install]</span><br><span class="line">index_url &#x3D; https:&#x2F;&#x2F;pypi.douban.com&#x2F;simple</span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong> 源路径要包含 <code>/simple</code> 部分。</p>
<h6 id="pip-更改全局镜像源"><a href="#pip-更改全局镜像源" class="headerlink" title="pip 更改全局镜像源"></a>pip 更改全局镜像源</h6><p>在<code>Unix</code>和<code>Mac OS</code>系统下，对应的配置文件应该位于 <code>$HOME/.pip/pip.conf</code> 。<br><code>$HOME</code> 为 <code>~</code> 根目录。即 <code>~/.pip/pip.conf</code> 。</p>
<p>在<code>Windows</code>系统下，配置文件应位于 <code>%HOME%\pip\pip.ini</code> 。<br><code>%HOME%</code> 为 <code>C:\Users\&lt;your_name&gt;\</code> 目录，即 <code>C:\Users\&lt;your_name&gt;\pip\pip.ini</code> 。</p>
<p>如果文件不存在，新建一个就可以。</p>
<p>然后在相应的配置文件中写入如下内容(这里使用豆瓣的镜像源为例)：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[global]</span><br><span class="line">index-url &#x3D; https:&#x2F;&#x2F;pypi.douban.com&#x2F;simple</span><br></pre></td></tr></table></figure>

<h6 id="升级pip"><a href="#升级pip" class="headerlink" title="升级pip"></a>升级pip</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ pip install --upgrade pip</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="Golang"><a href="#Golang" class="headerlink" title="Golang"></a>Golang</h4><p>通过 <code>go module</code> 管理的项目设置代理：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export GO111MODULE&#x3D;on</span><br><span class="line"></span><br><span class="line">export GOPROXY&#x3D;https:&#x2F;&#x2F;athens.azurefd.net</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h4><p>详见：<a href="/2019/05/29/setting-docker-mirror-2019/">配置Docker镜像加速器2019 | IT范儿</a></p>
<hr>
<h4 id="Kubernetes"><a href="#Kubernetes" class="headerlink" title="Kubernetes"></a>Kubernetes</h4><h5 id="阿里云"><a href="#阿里云" class="headerlink" title="阿里云"></a>阿里云</h5><h6 id="Debian-Ubuntu"><a href="#Debian-Ubuntu" class="headerlink" title="Debian / Ubuntu"></a>Debian / Ubuntu</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt-get update &amp;&amp; apt-get install -y apt-transport-https</span><br><span class="line">curl https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;kubernetes&#x2F;apt&#x2F;doc&#x2F;apt-key.gpg | apt-key add - </span><br><span class="line">cat &lt;&lt;EOF &gt;&#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;kubernetes.list</span><br><span class="line">deb https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;kubernetes&#x2F;apt&#x2F; kubernetes-xenial main</span><br><span class="line">EOF  </span><br><span class="line">apt-get update</span><br><span class="line">apt-get install -y kubelet kubeadm kubectl</span><br></pre></td></tr></table></figure>

<h6 id="CentOS-RHEL-Fedora"><a href="#CentOS-RHEL-Fedora" class="headerlink" title="CentOS / RHEL / Fedora"></a>CentOS / RHEL / Fedora</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;EOF &gt; &#x2F;etc&#x2F;yum.repos.d&#x2F;kubernetes.repo</span><br><span class="line">[kubernetes]</span><br><span class="line">name&#x3D;Kubernetes</span><br><span class="line">baseurl&#x3D;https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;kubernetes&#x2F;yum&#x2F;repos&#x2F;kubernetes-el7-x86_64&#x2F;</span><br><span class="line">enabled&#x3D;1</span><br><span class="line">gpgcheck&#x3D;1</span><br><span class="line">repo_gpgcheck&#x3D;1</span><br><span class="line">gpgkey&#x3D;https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;kubernetes&#x2F;yum&#x2F;doc&#x2F;yum-key.gpg https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;kubernetes&#x2F;yum&#x2F;doc&#x2F;rpm-package-key.gpg</span><br><span class="line">EOF</span><br><span class="line">setenforce 0</span><br><span class="line">yum install -y kubelet kubeadm kubectl</span><br><span class="line">systemctl enable kubelet &amp;&amp; systemctl start kubelet</span><br></pre></td></tr></table></figure>

<ul>
<li><a href="https://opsx.alibaba.com/mirror" target="_blank" rel="noopener">阿里巴巴开源镜像站</a></li>
</ul>
<h5 id="Azure-China"><a href="#Azure-China" class="headerlink" title="Azure China"></a>Azure China</h5><p>使用GCR Proxy Cache从gcr.io下载镜像:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker pull gcr.azk8s.cn&#x2F;google_containers&#x2F;&lt;imagename&gt;:&lt;version&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li><a href="http://mirror.azure.cn/help/gcr-proxy-cache.html" target="_blank" rel="noopener">GCR Proxy Cache</a></li>
</ul>
<p>详见：<a href="/2019/05/17/kubernetes-introduction-for-install-by-kubeadm/">Kubernetes入门 – 一使用kubeadm部署Kubernetes集群v1.14.1 | IT范儿</a></p>
<hr>
]]></content>
      <tags>
        <tag>Golang</tag>
        <tag>Docker</tag>
        <tag>Python</tag>
        <tag>Alpine</tag>
      </tags>
  </entry>
  <entry>
    <title>go test 禁用缓存</title>
    <url>/2019/06/27/go-test-disable-cached/</url>
    <content><![CDATA[<p>每当执行 <code>go test</code> 时，如果功能代码和测试代码没有变动，则在下一次执行时，会直接读取缓存中的测试结果，并通过 <code>(cached)</code> 进行标记。</p>
<p>要禁用测试缓存，可以通过 <code>-count=1</code> 标志来实现。</p>
<p>如下示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># ~&#x2F;test&#x2F;hello-drone&#x2F;go_demo [master ✗ (fe95bec)] [13:45:16]</span><br><span class="line">➜ go test -v .&#x2F;...               </span><br><span class="line">?       go_demo [no test files]</span><br><span class="line">&#x3D;&#x3D;&#x3D; RUN   TestCreateUnixMillis</span><br><span class="line">--- PASS: TestCreateUnixMillis (0.00s)</span><br><span class="line">    utils_test.go:7: 1561614325740</span><br><span class="line">PASS</span><br><span class="line">ok      go_demo&#x2F;utils   0.006s</span><br><span class="line"></span><br><span class="line"># ~&#x2F;test&#x2F;hello-drone&#x2F;go_demo [master ✗ (fe95bec)] [13:45:32]</span><br><span class="line">➜ go test -v .&#x2F;...</span><br><span class="line">?       go_demo [no test files]</span><br><span class="line">&#x3D;&#x3D;&#x3D; RUN   TestCreateUnixMillis</span><br><span class="line">--- PASS: TestCreateUnixMillis (0.00s)</span><br><span class="line">    utils_test.go:7: 1561614325740</span><br><span class="line">PASS</span><br><span class="line">ok      go_demo&#x2F;utils   (cached)</span><br><span class="line"></span><br><span class="line"># ~&#x2F;test&#x2F;hello-drone&#x2F;go_demo [master ✗ (fe95bec)] [13:45:38]</span><br><span class="line">➜ go test -v .&#x2F;...</span><br><span class="line">?       go_demo [no test files]</span><br><span class="line">&#x3D;&#x3D;&#x3D; RUN   TestCreateUnixMillis</span><br><span class="line">--- PASS: TestCreateUnixMillis (0.00s)</span><br><span class="line">    utils_test.go:7: 1561614325740</span><br><span class="line">PASS</span><br><span class="line">ok      go_demo&#x2F;utils   (cached)</span><br><span class="line"></span><br><span class="line"># ~&#x2F;test&#x2F;hello-drone&#x2F;go_demo [master ✗ (fe95bec)] [13:45:59]</span><br><span class="line">➜ go test -v .&#x2F;... -count&#x3D;1</span><br><span class="line">?       go_demo [no test files]</span><br><span class="line">&#x3D;&#x3D;&#x3D; RUN   TestCreateUnixMillis</span><br><span class="line">--- PASS: TestCreateUnixMillis (0.00s)</span><br><span class="line">    utils_test.go:7: 1561614494115</span><br><span class="line">PASS</span><br><span class="line">ok      go_demo&#x2F;utils   0.006s</span><br><span class="line"></span><br><span class="line"># ~&#x2F;test&#x2F;hello-drone&#x2F;go_demo [master ✗ (fe95bec)] [13:48:14]</span><br><span class="line">➜ go test -v .&#x2F;... -count&#x3D;1</span><br><span class="line">?       go_demo [no test files]</span><br><span class="line">&#x3D;&#x3D;&#x3D; RUN   TestCreateUnixMillis</span><br><span class="line">--- PASS: TestCreateUnixMillis (0.00s)</span><br><span class="line">    utils_test.go:7: 1561614508408</span><br><span class="line">PASS</span><br><span class="line">ok      go_demo&#x2F;utils   0.006s</span><br><span class="line"></span><br><span class="line"># ~&#x2F;test&#x2F;hello-drone&#x2F;go_demo [master ✗ (fe95bec)] [13:48:32]</span><br><span class="line">➜</span><br></pre></td></tr></table></figure>

<p>关于 <code>-count=1</code> 的解释，可以通过命令 <code>go help testflag</code> 来查看：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">When &#39;go test&#39; runs in package list mode, &#39;go test&#39; caches successful</span><br><span class="line">package test results to avoid unnecessary repeated running of tests. To</span><br><span class="line">disable test caching, use any test flag or argument other than the</span><br><span class="line">cacheable flags. The idiomatic way to disable test caching explicitly</span><br><span class="line">is to use -count&#x3D;1.</span><br></pre></td></tr></table></figure>

<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>在 <code>Go 1.11</code> 之前，通过 <code>GOCACHE=off</code> 的方式来禁用测试缓存：<code>GOCACHE=off go test ./...</code></p>
<p>在 <code>Go 1.11</code> 之后，通过 <code>-count=1</code> 的方式来禁用测试缓存：<code>go test -count=1 ./...</code></p>
<h4 id="相关参考"><a href="#相关参考" class="headerlink" title="相关参考"></a>相关参考</h4><ul>
<li><a href="https://github.com/golang/go/issues/24573" target="_blank" rel="noopener">cmd/go: how to disable (run test) Cached · Issue #24573 · golang/go</a></li>
<li><a href="https://stackoverflow.com/questions/48882691/force-retesting-or-disable-test-caching" target="_blank" rel="noopener">testing - Force retesting or disable test caching - Stack Overflow</a></li>
</ul>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>监控磁盘空间使用率并发送钉钉提醒</title>
    <url>/2019/06/18/disk-monitor-send-dingtalk/</url>
    <content><![CDATA[<p>今天在使用测试服务器时，发现服务器被好多测试的日志文件占用掉了十几个G的磁盘空间，通过 <code>du -ah --max-depth=1</code> 命令检查删除后，突发奇想的觉得不如顺手写个shell脚本来定时提醒自己磁盘空间的占用率。和 <code>Prometheus</code> 这种大型的监控系统比起来，一个shell脚本可谓是非常的 <code>轻量级</code> 了。</p>
<p>说干就干，项目源码已放到 Github 上，猛戳 <a href="https://github.com/leafney/disk-monitor-dingtalk" target="_blank" rel="noopener">leafney/disk-monitor-dingtalk: disk monitor 监控磁盘空间使用率并发送钉钉提醒</a> 查看。</p>
<h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p>脚本比较简单，一看就明白了。通过 <code>df</code> 命令来查看磁盘各个分区的占用率并设置阈值，当到达指定阈值时就发送钉钉消息进行提醒。</p>
<p>设置了四个可选参数：</p>
<ul>
<li><code>-t</code> – 钉钉的token，<strong>必填项</strong></li>
<li><code>-p</code> – 磁盘占用率百分比阈值，默认为<code>80%</code></li>
<li><code>-h</code> – 默认情况下获取服务器主机的 <code>hostname</code> ，可以自定义一个服务器名称</li>
<li><code>-n</code> – 当磁盘的占用率在正常阈值内是否也发送提醒，默认是不发送</li>
</ul>
<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>首先，为shell脚本赋予可执行权限：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ chmod +x .&#x2F;disk-monitor.sh</span><br></pre></td></tr></table></figure>

<p>然后，通过 <code>crontab</code> 来定时执行。我设置的是每天的9点检查一次：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ crontab -l</span><br><span class="line">0 9 * * * &#x2F;home&#x2F;tiger&#x2F;disk-monitor.sh -t fbbdf72e581f3bcc9469d49708857d2fa93a684 &gt; &#x2F;dev&#x2F;null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>

<h4 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h4><p>相应的效果如下：</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20190618204000.png" alt=""></p>
<h4 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h4><ul>
<li><a href="https://linuxtools-rst.readthedocs.io/zh_CN/latest/tool/crontab.html" target="_blank" rel="noopener">crontab 定时任务 — Linux Tools Quick Tutorial</a></li>
</ul>
]]></content>
      <tags>
        <tag>Tools</tag>
      </tags>
  </entry>
  <entry>
    <title>配置Docker镜像加速器2019</title>
    <url>/2019/05/29/setting-docker-mirror-2019/</url>
    <content><![CDATA[<p>朋友提醒博客中的一篇设置Docker镜像加速器的文章 <a href="/2016/12/26/setting-docker-mirror-image-accelerator/">配置Docker镜像加速器 | IT范儿</a> 中介绍的方法太过时了，看过之后才发现那篇文章是2016年的时候写的。所以赶紧更新一下。</p>
<p>废话不多说，直接上干货。</p>
<h4 id="安装／升级Docker客户端"><a href="#安装／升级Docker客户端" class="headerlink" title="安装／升级Docker客户端"></a>安装／升级Docker客户端</h4><p>推荐安装 <code>1.10.0</code> 以上版本的Docker客户端，参考Docker官方文档 <a href="https://docs.docker.com/install/" target="_blank" rel="noopener">About Docker CE | Docker Documentation</a> 或我的文章 <a href="/2017/08/25/ubuntu-install-docker-ce-and-configure-mirror-accelerator/">Ubuntu16.04下安装Docker-CE社区版 | IT范儿</a></p>
<hr>
<h4 id="阿里云镜像加速器"><a href="#阿里云镜像加速器" class="headerlink" title="阿里云镜像加速器"></a>阿里云镜像加速器</h4><p>打开 <a href="https://homenew.console.aliyun.com/" target="_blank" rel="noopener">阿里云控制台</a> – 左侧导航菜单 <code>产品与服务</code> – <code>弹性计算</code> –  <code>容器镜像服务</code> – 左侧导航菜单 <code>镜像中心</code> – <code>镜像加速器</code> 。可以看到 “您的加速器地址” 即 <code>https://xxxxxxx.mirror.aliyuncs.com</code> 。</p>
<p>或者直接打开 <a href="https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors" target="_blank" rel="noopener">镜像加速器页面</a> 。</p>
<p><strong>注意，需要登录阿里云账号</strong></p>
<h5 id="配置镜像加速器"><a href="#配置镜像加速器" class="headerlink" title="配置镜像加速器"></a>配置镜像加速器</h5><p>这里还是以 <code>Linux</code> 系统为例，其他系统可直接参考上面加速器页面中的配置方法。</p>
<p>针对Docker客户端版本大于 <code>1.10.0</code> 的用户</p>
<p>您可以通过修改daemon配置文件 <code>/etc/docker/daemon.json</code> 来使用加速器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mkdir -p &#x2F;etc&#x2F;docker</span><br><span class="line">sudo tee &#x2F;etc&#x2F;docker&#x2F;daemon.json &lt;&lt;-&#39;EOF&#39;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https:&#x2F;&#x2F;xxxxxxx.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>

<p><strong>注意将其中的 <code>xxxxxxx</code> 修改为自己阿里云账户的给定地址。</strong></p>
<hr>
<h4 id="DaoCload镜像加速器"><a href="#DaoCload镜像加速器" class="headerlink" title="DaoCload镜像加速器"></a>DaoCload镜像加速器</h4><p>访问DaoCloud官方镜像页面 <a href="https://www.daocloud.io/mirror" target="_blank" rel="noopener">DaoCloud – 企业级云计算领域的创新领导者</a> 。</p>
<p><strong>DaoCloud的镜像加速地址，不需要注册就可以使用</strong></p>
<h5 id="配置镜像加速器-1"><a href="#配置镜像加速器-1" class="headerlink" title="配置镜像加速器"></a>配置镜像加速器</h5><h6 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -sSL https:&#x2F;&#x2F;get.daocloud.io&#x2F;daotools&#x2F;set_mirror.sh | sh -s http:&#x2F;&#x2F;f1361db2.m.daocloud.io</span><br></pre></td></tr></table></figure>

<p>然后重启docker服务：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>

<h6 id="macOS"><a href="#macOS" class="headerlink" title="macOS"></a>macOS</h6><p>Docker For Mac</p>
<p>右键点击桌面顶栏的 docker 图标，选择 <code>Preferences</code> ，在 Daemon 标签（Docker 17.03 之前版本为 Advanced 标签）下的 Registry mirrors 列表中加入下面的镜像地址:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;f1361db2.m.daocloud.io</span><br></pre></td></tr></table></figure>
<p>点击 <code>Apply &amp; Restart</code> 按钮使设置生效。</p>
<h6 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h6><p>Docker For Windows</p>
<p>在桌面右下角状态栏中右键 docker 图标，修改在 Docker Daemon 标签页中的 json ，把下面的地址:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;f1361db2.m.daocloud.io</span><br></pre></td></tr></table></figure>

<p>加到” registry-mirrors”的数组里。点击 <code>Apply</code> 。</p>
<hr>
<p>以上两种方法，看自己的需求任选其一配置。</p>
]]></content>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Kubernetes入门 -- 二优化与进阶</title>
    <url>/2019/05/17/kubernetes-introduction-for-optimization-and-advancement/</url>
    <content><![CDATA[<p>上一篇文章介绍了通过kubeadm来配置Kubernetes集群运行环境。那在开始运行我们的项目之前，还是来了解一些能够提高我们执行效率的技巧吧！</p>
<h4 id="kubectl命令自动补全"><a href="#kubectl命令自动补全" class="headerlink" title="kubectl命令自动补全"></a>kubectl命令自动补全</h4><h5 id="kubectl-completion"><a href="#kubectl-completion" class="headerlink" title="kubectl completion"></a>kubectl completion</h5><p>在 Master 节点上，执行 kubectl 命令时，默认是无法使用自动提示的功能。也就导致了我们需要把命令敲完整才可以。kubectl 工具本身就支持自动补全，只不过需要设置一下。</p>
<p>如果你使用的是 <code>bash</code>, 则执行如下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ echo &quot;source &lt;(kubectl completion bash)&quot; &gt;&gt; ~&#x2F;.bashrc</span><br><span class="line">$ source ~&#x2F;.bashrc</span><br></pre></td></tr></table></figure>

<p>如果你使用的是 <code>zsh</code>,则执行如下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ echo &quot;source &lt;(kubectl completion zsh)&quot; &gt;&gt; ~&#x2F;.zshrc</span><br><span class="line">$ source ~&#x2F;.zshrc</span><br></pre></td></tr></table></figure>

<p>或者直接编辑 <code>~/.zshrc</code> 加上 <code>source &lt;(kubectl completion zsh)</code> 一行。</p>
<h5 id="Kube-prompt：交互式-Kubernetes-客户端"><a href="#Kube-prompt：交互式-Kubernetes-客户端" class="headerlink" title="Kube-prompt：交互式 Kubernetes 客户端"></a>Kube-prompt：交互式 Kubernetes 客户端</h5><p><code>Kube-prompt</code> 可以让你在命令行下接受与 Kubectl 相同的命令，并且不需要提供 Kubectl 前缀。<code>Kube-prompt</code> 还提了交互式会话下的命令提示、自动补全等功能。</p>
<p>项目地址：<a href="https://github.com/c-bata/kube-prompt" target="_blank" rel="noopener">c-bata/kube-prompt: An interactive kubernetes client featuring auto-complete.</a></p>
<p>安装：</p>
<p>直接访问地址 <a href="https://github.com/c-bata/kube-prompt/releases" target="_blank" rel="noopener">Releases · c-bata/kube-prompt</a> 下载相应文件并解压到本地。然后给 <code>kube-prompt</code> 加上执行权限并移懂到系统目录：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ chmod +x kube-prompt</span><br><span class="line">$ sudo mv .&#x2F;kube-prompt &#x2F;usr&#x2F;local&#x2F;bin&#x2F;kube-prompt</span><br></pre></td></tr></table></figure>

<ul>
<li><a href="https://www.hi-linux.com/posts/44953.html" target="_blank" rel="noopener">手把手教你打造高效的 Kubernetes 命令行终端 - 运维之美</a></li>
<li><a href="https://jimmysong.io/posts/configuring-efficient-kubernetes-cli-terminal/" target="_blank" rel="noopener">打造高效的Kubernetes命令行终端 - 宋净超的博客|Cloud Native|云原生布道师</a></li>
</ul>
<hr>
<h4 id="重置-kubernetes-init"><a href="#重置-kubernetes-init" class="headerlink" title="重置 kubernetes init"></a>重置 <code>kubernetes init</code></h4><p>如果需要在 <code>kubeadm init</code> 中加入一些其他的参数配置，那么如何重置刚才的操作呢？</p>
<p>执行 <code>kubeadm reset</code> 命令即可，该命令会将主机恢复原状：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@master ~]# kubeadm reset</span><br><span class="line">[reset] WARNING: changes made to this host by &#39;kubeadm init&#39; or &#39;kubeadm join&#39; will be reverted.</span><br><span class="line">[reset] are you sure you want to proceed? [y&#x2F;N]:</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="如何从集群中移除Node节点"><a href="#如何从集群中移除Node节点" class="headerlink" title="如何从集群中移除Node节点"></a>如何从集群中移除Node节点</h4><p>如果需要从集群中移除 <code>node1</code> 这个Node执行下面的命令：</p>
<p>在master节点上执行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># kubectl drain &lt;node1&gt; --delete-local-data --force --ignore-daemonsets</span><br><span class="line"># kubectl delete node &lt;node1&gt;</span><br></pre></td></tr></table></figure>

<p>在 <code>node1</code> 上执行以下几条命令:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># kubeadm reset</span><br><span class="line"># ifconfig cni0 down</span><br><span class="line"># ip link delete cni0</span><br><span class="line"># ifconfig flannel.1 down</span><br><span class="line"># ip link delete flannel.1</span><br><span class="line"># rm -rf &#x2F;var&#x2F;lib&#x2F;cni&#x2F;</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="新增Node节点但token过期了"><a href="#新增Node节点但token过期了" class="headerlink" title="新增Node节点但token过期了"></a>新增Node节点但token过期了</h4><p>默认情况下，Kubernetes生成的token过期时间是24小时。可以通过 <code>kubeadm token list</code> 命令来查看：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜  ~ kubeadm token list</span><br><span class="line">TOKEN                     TTL       EXPIRES                     USAGES                   DESCRIPTION                                                EXTRA GROUPS</span><br><span class="line">runell.pdp1y28g1dsayy1o   20h       2019-05-18T08:03:41+08:00   authentication,signing   The default bootstrap token generated by &#39;kubeadm init&#39;.   system:bootstrappers:kubeadm:default-node-token</span><br></pre></td></tr></table></figure>

<p>在 token 过期之后，如果想要增加新的节点，可以通过如下命令生成新的 token 值：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kubeadm token create</span><br></pre></td></tr></table></figure>

<p>查看密钥的 hash 值：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">openssl x509 -pubkey -in &#x2F;etc&#x2F;kubernetes&#x2F;pki&#x2F;ca.crt | openssl rsa -pubin -outform der 2&gt;&#x2F;dev&#x2F;null |  openssl dgst -sha256 -hex | sed &#39;s&#x2F;^.* &#x2F;&#x2F;&#39;</span><br></pre></td></tr></table></figure>

<p>在要新增的节点上执行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kubeadm join --token &lt;token&gt; &lt;master-ip&gt;:&lt;master-port&gt; --discovery-token-ca-cert-hash sha256:&lt;hash&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li><a href="https://kubernetes.io/docs/setup/independent/create-cluster-kubeadm/#join-nodes" target="_blank" rel="noopener">Creating a single master cluster with kubeadm - Kubernetes</a></li>
</ul>
<hr>
<h4 id="在其他电脑上使用kubectl远程管理"><a href="#在其他电脑上使用kubectl远程管理" class="headerlink" title="在其他电脑上使用kubectl远程管理"></a>在其他电脑上使用kubectl远程管理</h4><p>在管理Kubernetes集群时，我们每次执行kubectl命令都要登录到 Master 节点上操作，有一些麻烦。我们可以直接在自己的开发电脑上通过安装单独的 kubectl 文件来进行远程管理。</p>
<h5 id="安装kubectl"><a href="#安装kubectl" class="headerlink" title="安装kubectl"></a>安装kubectl</h5><p>以MacOS为例。</p>
<h6 id="二进制方式安装"><a href="#二进制方式安装" class="headerlink" title="二进制方式安装"></a>二进制方式安装</h6><p>执行如下命令安装最新版本的kubectl:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -LO https:&#x2F;&#x2F;storage.googleapis.com&#x2F;kubernetes-release&#x2F;release&#x2F;$(curl -s https:&#x2F;&#x2F;storage.googleapis.com&#x2F;kubernetes-release&#x2F;release&#x2F;stable.txt)&#x2F;bin&#x2F;darwin&#x2F;amd64&#x2F;kubectl</span><br></pre></td></tr></table></figure>

<p>要下载特定版本，可通过以下命令查询可用版本：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -s https:&#x2F;&#x2F;storage.googleapis.com&#x2F;kubernetes-release&#x2F;release&#x2F;stable.txt</span><br></pre></td></tr></table></figure>

<p>然后通过下面的命令下载，以 <code>v1.14.0</code> 版本为例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -LO https:&#x2F;&#x2F;storage.googleapis.com&#x2F;kubernetes-release&#x2F;release&#x2F;v1.14.0&#x2F;bin&#x2F;darwin&#x2F;amd64&#x2F;kubectl</span><br></pre></td></tr></table></figure>

<p>然后，为其赋予可执行权限并放到系统目录下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chmod +x .&#x2F;kubectl</span><br><span class="line"></span><br><span class="line">sudo mv .&#x2F;kubectl &#x2F;usr&#x2F;local&#x2F;bin&#x2F;kubectl</span><br></pre></td></tr></table></figure>

<p>验证是否可用：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kubectl version</span><br></pre></td></tr></table></figure>

<p>不过由于“网络原因”，地址 <code>https://storage.googleapis.com</code> 可能访问不到。也就导致上面的下载命令会一直卡着不动。</p>
<p>我们只能通过去指定的二进制文件下载地址了。</p>
<hr>
<p>找到 Kubernetes在 GitHub上的仓库地址其中的 <code>CHANGELOG.md</code> 文件：<a href="https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG.md#client-binaries-1" target="_blank" rel="noopener">kubernetes/CHANGELOG.md at master · kubernetes/kubernetes</a></p>
<p>选择指定版本下的 <code>Client Binaries</code> ：</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20190517123850.png" alt=""></p>
<p>选择指定的文件下载：</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20190517124031.png" alt=""></p>
<p>下载到本地：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜ wget https:&#x2F;&#x2F;dl.k8s.io&#x2F;v1.14.1&#x2F;kubernetes-client-darwin-amd64.tar.gz</span><br></pre></td></tr></table></figure>

<p>注：<code>https://dl.k8s.io</code> 这个网址可能也访问不到，建议还是使用 <code>FQ</code> 工具后操作。</p>
<p>安装好后进行验证：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜ kubectl version</span><br><span class="line">Client Version: version.Info&#123;Major:&quot;1&quot;, Minor:&quot;14&quot;, GitVersion:&quot;v1.14.1&quot;, GitCommit:&quot;b7394102d6ef778017f2ca4046abbaa23b88c290&quot;, GitTreeState:&quot;clean&quot;, BuildDate:&quot;2019-04-08T17:11:31Z&quot;, GoVersion:&quot;go1.12.1&quot;, Compiler:&quot;gc&quot;, Platform:&quot;darwin&#x2F;amd64&quot;&#125;</span><br><span class="line">The connection to the server localhost:8080 was refused - did you specify the right host or port?</span><br></pre></td></tr></table></figure>

<p>正常显示版本信息。</p>
<h6 id="通过homebrew安装"><a href="#通过homebrew安装" class="headerlink" title="通过homebrew安装"></a>通过homebrew安装</h6><p>如果觉得上面的方式太繁琐，还可以选择使用 <code>Homebrew</code> 来安装：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">brew install kubernetes-cli</span><br><span class="line"></span><br><span class="line">kubectl version</span><br></pre></td></tr></table></figure>

<h6 id="其他系统"><a href="#其他系统" class="headerlink" title="其他系统"></a>其他系统</h6><p>其他系统可用的 kubectl 除了上面的二进制方式，还可以在这个地址中下载（无需FQ）：</p>
<ul>
<li><a href="http://mirror.azure.cn/kubernetes/" target="_blank" rel="noopener">Index of /kubernetes/</a></li>
</ul>
<hr>
<h5 id="获取授权文件"><a href="#获取授权文件" class="headerlink" title="获取授权文件"></a>获取授权文件</h5><p>要连接到Kubernetes集群，还需要指定授权文件。只需将 Master 节点上的授权文件拷贝到本地的默认路径 <code>$HOME/.kube</code> 中。</p>
<p>创建 <code>$HOME/.kube</code> 目录:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜ mkdir -p $HOME&#x2F;.kube</span><br></pre></td></tr></table></figure>

<p>执行 <code>scp</code> 命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜ scp root@192.168.5.28:&#x2F;etc&#x2F;kubernetes&#x2F;admin.conf ~&#x2F;.kube&#x2F;config</span><br></pre></td></tr></table></figure>

<p>验证能否正常连接到集群：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜ kubectl get nodes</span><br><span class="line">NAME     STATUS   ROLES    AGE     VERSION</span><br><span class="line">master   Ready    master   5h52m   v1.14.1</span><br><span class="line">node1    Ready    &lt;none&gt;   4h48m   v1.14.1</span><br></pre></td></tr></table></figure>

<p>因为 kubectl默认的配置文件路径是 <code>$HOME/.kube/config</code> ，所以我们直接设置成这个。如果是其他路径，则需要通过 <code>--kubeconfig</code> 参数指定配置文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kubectl --kubeconfig .&#x2F;admin.conf get nodes</span><br></pre></td></tr></table></figure>

<h5 id="启用自动补全"><a href="#启用自动补全" class="headerlink" title="启用自动补全"></a>启用自动补全</h5><p>这里，依然需要设置一下 <code>kubectl</code> 命令的自动补全（zsh）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ echo &quot;source &lt;(kubectl completion zsh)&quot; &gt;&gt; ~&#x2F;.zshrc</span><br><span class="line">$ source ~&#x2F;.zshrc</span><br></pre></td></tr></table></figure>

<ul>
<li><a href="https://kubernetes.io/docs/setup/independent/create-cluster-kubeadm/#optional-controlling-your-cluster-from-machines-other-than-the-master" target="_blank" rel="noopener">Creating a single master cluster with kubeadm - Kubernetes</a></li>
</ul>
<hr>
<h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><h5 id="查看集群信息"><a href="#查看集群信息" class="headerlink" title="查看集群信息"></a>查看集群信息</h5><p>命令：<code>kubectl cluster-info</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜  ~ kubectl cluster-info</span><br><span class="line">Kubernetes master is running at https:&#x2F;&#x2F;192.168.5.28:6443</span><br><span class="line">KubeDNS is running at https:&#x2F;&#x2F;192.168.5.28:6443&#x2F;api&#x2F;v1&#x2F;namespaces&#x2F;kube-system&#x2F;services&#x2F;kube-dns:dns&#x2F;proxy</span><br><span class="line"></span><br><span class="line">To further debug and diagnose cluster problems, use &#39;kubectl cluster-info dump&#39;.</span><br></pre></td></tr></table></figure>

<h5 id="查看版本信息"><a href="#查看版本信息" class="headerlink" title="查看版本信息"></a>查看版本信息</h5><p>命令：<code>kubectl version</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜  ~ kubectl version</span><br><span class="line">Client Version: version.Info&#123;Major:&quot;1&quot;, Minor:&quot;14&quot;, GitVersion:&quot;v1.14.1&quot;, GitCommit:&quot;b7394102d6ef778017f2ca4046abbaa23b88c290&quot;, GitTreeState:&quot;clean&quot;, BuildDate:&quot;2019-04-08T17:11:31Z&quot;, GoVersion:&quot;go1.12.1&quot;, Compiler:&quot;gc&quot;, Platform:&quot;linux&#x2F;amd64&quot;&#125;</span><br><span class="line">Server Version: version.Info&#123;Major:&quot;1&quot;, Minor:&quot;14&quot;, GitVersion:&quot;v1.14.1&quot;, GitCommit:&quot;b7394102d6ef778017f2ca4046abbaa23b88c290&quot;, GitTreeState:&quot;clean&quot;, BuildDate:&quot;2019-04-08T17:02:58Z&quot;, GoVersion:&quot;go1.12.1&quot;, Compiler:&quot;gc&quot;, Platform:&quot;linux&#x2F;amd64&quot;&#125;</span><br></pre></td></tr></table></figure>

<p>查看集群所有Pod信息: <code>kubectl get pod --all-namespaces</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜  ~ kubectl get pod --all-namespaces</span><br><span class="line">NAMESPACE     NAME                             READY   STATUS    RESTARTS   AGE</span><br><span class="line">kube-system   coredns-fb8b8dccf-cm28l          1&#x2F;1     Running   1          3h48m</span><br><span class="line">kube-system   coredns-fb8b8dccf-lqh8n          1&#x2F;1     Running   1          3h48m</span><br><span class="line">kube-system   etcd-master                      1&#x2F;1     Running   1          3h47m</span><br><span class="line">kube-system   kube-apiserver-master            1&#x2F;1     Running   1          3h47m</span><br><span class="line">kube-system   kube-controller-manager-master   1&#x2F;1     Running   1          3h47m</span><br><span class="line">kube-system   kube-flannel-ds-amd64-2rzqc      1&#x2F;1     Running   1          3h16m</span><br><span class="line">kube-system   kube-flannel-ds-amd64-thg6z      1&#x2F;1     Running   1          165m</span><br><span class="line">kube-system   kube-proxy-8x8f6                 1&#x2F;1     Running   1          108m</span><br><span class="line">kube-system   kube-proxy-k54d5                 1&#x2F;1     Running   1          108m</span><br><span class="line">kube-system   kube-scheduler-master            1&#x2F;1     Running   1          3h48m</span><br><span class="line">➜  ~</span><br></pre></td></tr></table></figure>

<p>未完待续。。。</p>
]]></content>
      <categories>
        <category>云原生系列</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
        <tag>云原生</tag>
      </tags>
  </entry>
  <entry>
    <title>Kubernetes入门 -- 一使用kubeadm部署Kubernetes集群v1.14.1</title>
    <url>/2019/05/17/kubernetes-introduction-for-install-by-kubeadm/</url>
    <content><![CDATA[<p>上一次通过kubeadm来配置Kubernetes的环境使用的还是 <code>v1.13</code> 的版本，最近看到Kubernetes的稳定版本已经更新到了 <code>v1.14.1</code> ，所以决定重新安装一次，并把配置过程和遇到的问题同时整理一下。</p>
<p>kubeadm是Kubernetes官方提供的用于快速安装Kubernetes集群的工具，伴随Kubernetes每个版本的发布都会同步更新，kubeadm会对集群配置方面的一些实践做调整，通过实验kubeadm可以学习到Kubernetes官方在集群配置上一些新的最佳实践。</p>
<h4 id="系统信息"><a href="#系统信息" class="headerlink" title="系统信息"></a>系统信息</h4><ul>
<li>master ip : <code>192.168.5.28</code></li>
<li>node1 ip : <code>192.168.5.29</code></li>
<li>配置均为：2核2G</li>
</ul>
<hr>
<h4 id="系统环境配置"><a href="#系统环境配置" class="headerlink" title="系统环境配置"></a>系统环境配置</h4><p><strong>注意：在 Master 和 Node 节点均操作</strong></p>
<h5 id="切换到-root-权限"><a href="#切换到-root-权限" class="headerlink" title="切换到 root 权限"></a>切换到 root 权限</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ su - root</span><br></pre></td></tr></table></figure>

<h5 id="更改hostname"><a href="#更改hostname" class="headerlink" title="更改hostname"></a>更改hostname</h5><h6 id="master"><a href="#master" class="headerlink" title="master"></a>master</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># hostname</span><br><span class="line"># hostnamectl set-hostname master</span><br><span class="line"># hostname</span><br></pre></td></tr></table></figure>

<h6 id="node1"><a href="#node1" class="headerlink" title="node1"></a>node1</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># hostname</span><br><span class="line"># hostnamectl set-hostname node1</span><br><span class="line"># hostname</span><br></pre></td></tr></table></figure>

<h5 id="修改-hosts"><a href="#修改-hosts" class="headerlink" title="修改 hosts"></a>修改 hosts</h5><h6 id="master-1"><a href="#master-1" class="headerlink" title="master"></a>master</h6><p>编辑 <code>/etc/hosts</code> 文件，在底部新增下面两行，然后重启系统：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># vim &#x2F;etc&#x2F;hosts</span><br><span class="line"></span><br><span class="line">192.168.5.28 master</span><br><span class="line">192.168.5.29 node1</span><br><span class="line"></span><br><span class="line">reboot</span><br></pre></td></tr></table></figure>

<h5 id="禁用防火墙"><a href="#禁用防火墙" class="headerlink" title="禁用防火墙"></a>禁用防火墙</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># systemctl disable firewalld &amp;&amp; systemctl stop firewalld</span><br><span class="line"># systemctl status firewalld</span><br></pre></td></tr></table></figure>

<h5 id="禁用SELinux"><a href="#禁用SELinux" class="headerlink" title="禁用SELinux"></a>禁用SELinux</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># setenforce 0</span><br><span class="line"></span><br><span class="line"># vim &#x2F;etc&#x2F;selinux&#x2F;config</span><br><span class="line">#SELINUX&#x3D;enforcing</span><br><span class="line">SELINUX&#x3D;disabled</span><br></pre></td></tr></table></figure>

<h5 id="禁用swap"><a href="#禁用swap" class="headerlink" title="禁用swap"></a>禁用swap</h5><p>查看当前swap状态：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># free -m</span><br><span class="line">              total        used        free      shared  buff&#x2F;cache   available</span><br><span class="line">Mem:           1466         142        1063           8         260        1151</span><br><span class="line">Swap:          3071           0        3071</span><br></pre></td></tr></table></figure>

<p>禁用swap:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># swapoff -a</span><br></pre></td></tr></table></figure>

<p>编辑 <code>/etc/fstab</code> 文件，注释掉带有 <code>swap</code> 的那一行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># vim &#x2F;etc&#x2F;fstab</span><br><span class="line"></span><br><span class="line">#&#x2F;dev&#x2F;mapper&#x2F;centos-swap swap                    swap    defaults        0 0</span><br></pre></td></tr></table></figure>

<p>查看：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># free -m</span><br><span class="line">              total        used        free      shared  buff&#x2F;cache   available</span><br><span class="line">Mem:           1466         142        1063           8         260        1152</span><br><span class="line">Swap:             0           0           0</span><br></pre></td></tr></table></figure>

<hr>
<h5 id="修改iptables配置"><a href="#修改iptables配置" class="headerlink" title="修改iptables配置"></a>修改iptables配置</h5><p>创建 <code>/etc/sysctl.d/k8s.conf</code> 文件，加入如下内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">net.bridge.bridge-nf-call-ip6tables &#x3D; 1</span><br><span class="line">net.bridge.bridge-nf-call-iptables &#x3D; 1</span><br><span class="line">net.ipv4.ip_forward &#x3D; 1</span><br></pre></td></tr></table></figure>

<p>执行命令使修改生效:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># modprobe br_netfilter</span><br><span class="line"># sysctl -p &#x2F;etc&#x2F;sysctl.d&#x2F;k8s.conf</span><br></pre></td></tr></table></figure>

<h5 id="kube-proxy开启ipvs的前置条件"><a href="#kube-proxy开启ipvs的前置条件" class="headerlink" title="kube-proxy开启ipvs的前置条件"></a>kube-proxy开启ipvs的前置条件</h5><p>由于ipvs已经加入到了内核的主干，所以为kube-proxy开启ipvs的前提需要加载以下的内核模块：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ip_vs</span><br><span class="line">ip_vs_rr</span><br><span class="line">ip_vs_wrr</span><br><span class="line">ip_vs_sh</span><br><span class="line">nf_conntrack_ipv4</span><br></pre></td></tr></table></figure>

<p>执行以下脚本来配置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &gt; &#x2F;etc&#x2F;sysconfig&#x2F;modules&#x2F;ipvs.modules &lt;&lt;EOF</span><br><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">modprobe -- ip_vs</span><br><span class="line">modprobe -- ip_vs_rr</span><br><span class="line">modprobe -- ip_vs_wrr</span><br><span class="line">modprobe -- ip_vs_sh</span><br><span class="line">modprobe -- nf_conntrack_ipv4</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">chmod 755 &#x2F;etc&#x2F;sysconfig&#x2F;modules&#x2F;ipvs.modules &amp;&amp; bash &#x2F;etc&#x2F;sysconfig&#x2F;modules&#x2F;ipvs.modules &amp;&amp; lsmod | grep -e ip_vs -e nf_conntrack_ipv4</span><br></pre></td></tr></table></figure>

<p>保证 <code>ipset</code> 已安装，同时要管理ipvs，需要安装ipvsadm:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># yum install ipset ipvsadm</span><br></pre></td></tr></table></figure>


<hr>
<h5 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h5><p>省略。</p>
<h5 id="修改docker-cgroup-driver为systemd"><a href="#修改docker-cgroup-driver为systemd" class="headerlink" title="修改docker cgroup driver为systemd"></a>修改docker cgroup driver为systemd</h5><p>根据文档CRI installation中的内容，对于使用systemd作为init system的Linux的发行版，使用systemd作为docker的cgroup driver可以确保服务器节点在资源紧张的情况更加稳定，因此这里修改各个节点上docker的cgroup driver为systemd。</p>
<p>查看docer的cgroup:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># docker info |grep -i cgroup</span><br><span class="line">Cgroup Driver: cgroupfs</span><br></pre></td></tr></table></figure>

<p>创建或修改 <code>/etc/docker/daemon.json</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;exec-opts&quot;:[&quot;native.cgroupdriver&#x3D;systemd&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>重启docker:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># systemctl restart docker</span><br></pre></td></tr></table></figure>

<p>再次查看cgroup:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># docker info |grep -i cgroup</span><br><span class="line">Cgroup Driver: systemd</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="使用kubeadm部署Kubernetes"><a href="#使用kubeadm部署Kubernetes" class="headerlink" title="使用kubeadm部署Kubernetes"></a>使用kubeadm部署Kubernetes</h4><h5 id="安装kubeadm和kubelet"><a href="#安装kubeadm和kubelet" class="headerlink" title="安装kubeadm和kubelet"></a>安装kubeadm和kubelet</h5><h6 id="需要在各个节点分别配置地址源"><a href="#需要在各个节点分别配置地址源" class="headerlink" title="需要在各个节点分别配置地址源"></a>需要在各个节点分别配置地址源</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;EOF &gt; &#x2F;etc&#x2F;yum.repos.d&#x2F;kubernetes.repo</span><br><span class="line">[kubernetes]</span><br><span class="line">name&#x3D;Kubernetes</span><br><span class="line">baseurl&#x3D;https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;kubernetes&#x2F;yum&#x2F;repos&#x2F;kubernetes-el7-x86_64&#x2F;</span><br><span class="line">enabled&#x3D;1</span><br><span class="line">gpgcheck&#x3D;1</span><br><span class="line">repo_gpgcheck&#x3D;1</span><br><span class="line">gpgkey&#x3D;https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;kubernetes&#x2F;yum&#x2F;doc&#x2F;yum-key.gpg https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;kubernetes&#x2F;yum&#x2F;doc&#x2F;rpm-package-key.gpg</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<p>更新缓存：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># yum makecache fast</span><br></pre></td></tr></table></figure>

<h5 id="Master节点安装"><a href="#Master节点安装" class="headerlink" title="Master节点安装"></a>Master节点安装</h5><p>在 Master 节点上安装 kubelet kubeadm kubectl:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># yum install -y kubelet kubeadm kubectl</span><br><span class="line"></span><br><span class="line">Installing:</span><br><span class="line"> kubeadm              1.14.1-0  </span><br><span class="line"> kubectl              1.14.1-0</span><br><span class="line"> kubelet              1.14.1-0</span><br></pre></td></tr></table></figure>

<h6 id="Node节点安装"><a href="#Node节点安装" class="headerlink" title="Node节点安装"></a>Node节点安装</h6><p>在 Node1 节点上安装 kubelet kubeadm:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># yum install -y kubelet kubeadm</span><br></pre></td></tr></table></figure>

<p><code>kubectl</code> 在 node 节点上是非必需的。</p>
<h6 id="设置-kubelet-开机启动"><a href="#设置-kubelet-开机启动" class="headerlink" title="设置 kubelet 开机启动"></a>设置 kubelet 开机启动</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># systemctl enable kubelet &amp;&amp; systemctl start kubelet</span><br></pre></td></tr></table></figure>

<p>此时如果查看 kubelet 的状态，会发现 处于 <code>loaded</code> 状态，错误码是 <code>255</code>:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># systemctl status kubelet</span><br><span class="line">● kubelet.service - kubelet: The Kubernetes Node Agent</span><br><span class="line">   Loaded: loaded (&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;kubelet.service; enabled; vendor preset: disabled)</span><br><span class="line">  Drop-In: &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;kubelet.service.d</span><br><span class="line">           └─10-kubeadm.conf</span><br><span class="line">   Active: activating (auto-restart) (Result: exit-code) since Thu 2019-05-16 23:51:36 CST; 808ms ago</span><br><span class="line">     Docs: https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;</span><br><span class="line">  Process: 4317 ExecStart&#x3D;&#x2F;usr&#x2F;bin&#x2F;kubelet $KUBELET_KUBECONFIG_ARGS $KUBELET_CONFIG_ARGS $KUBELET_KUBEADM_ARGS $KUBELET_EXTRA_ARGS (code&#x3D;exited, status&#x3D;255)</span><br><span class="line"> Main PID: 4317 (code&#x3D;exited, status&#x3D;255)</span><br></pre></td></tr></table></figure>

<h5 id="提前获取镜像"><a href="#提前获取镜像" class="headerlink" title="提前获取镜像"></a>提前获取镜像</h5><p>可以通过命令 <code>kubeadm config images list</code> 查看当前可用的最新镜像版本信息。</p>
<p>Kubernetes启动时默认会从 <code>k8s.gcr.io</code> 去拉取所需的镜像，但该地址在国内无法访问，需要更换为国内可用的地址。</p>
<p>Azure 中国 提供了 <code>gcr.io</code> 及 <code>k8s.gcr.io</code> 容器仓库的镜像代理服务。</p>
<p>镜像地址：<code>docker pull gcr.azk8s.cn/google_containers/&lt;imagename&gt;:&lt;version&gt;</code></p>
<p>默认情况下无法访问获取最新的版本，会根据使用的 <code>kubeadm</code> 的版本给出相应版本：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># kubeadm config images list</span><br><span class="line">I0517 00:03:01.427109    4857 version.go:96] could not fetch a Kubernetes version from the internet: unable to get URL &quot;https:&#x2F;&#x2F;dl.k8s.io&#x2F;release&#x2F;stable-1.txt&quot;: Get https:&#x2F;&#x2F;dl.k8s.io&#x2F;release&#x2F;stable-1.txt: net&#x2F;http: request canceled while waiting for connection (Client.Timeout exceeded while awaiting headers)</span><br><span class="line">I0517 00:03:01.427382    4857 version.go:97] falling back to the local client version: v1.14.1</span><br><span class="line">k8s.gcr.io&#x2F;kube-apiserver:v1.14.1</span><br><span class="line">k8s.gcr.io&#x2F;kube-controller-manager:v1.14.1</span><br><span class="line">k8s.gcr.io&#x2F;kube-scheduler:v1.14.1</span><br><span class="line">k8s.gcr.io&#x2F;kube-proxy:v1.14.1</span><br><span class="line">k8s.gcr.io&#x2F;pause:3.1</span><br><span class="line">k8s.gcr.io&#x2F;etcd:3.3.10</span><br><span class="line">k8s.gcr.io&#x2F;coredns:1.3.1</span><br></pre></td></tr></table></figure>

<p>也可以直接指定版本：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kubeadm config images list --kubernetes-version&#x3D;v1.14.1</span><br></pre></td></tr></table></figure>

<hr>
<h5 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h5><p><strong>在 Master 和 Node 节点均执行</strong></p>
<p>创建一个名为 <code>kubeadm_pull.sh</code> 脚本文件:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># kubeadm_pull.sh</span><br><span class="line"></span><br><span class="line">for i in &#96;kubeadm config images list&#96;; do </span><br><span class="line">  imageName&#x3D;$&#123;i#k8s.gcr.io&#x2F;&#125;</span><br><span class="line">  docker pull gcr.azk8s.cn&#x2F;google_containers&#x2F;$imageName</span><br><span class="line">  docker tag gcr.azk8s.cn&#x2F;google_containers&#x2F;$imageName k8s.gcr.io&#x2F;$imageName</span><br><span class="line">  docker rmi gcr.azk8s.cn&#x2F;google_containers&#x2F;$imageName</span><br><span class="line">done;</span><br></pre></td></tr></table></figure>

<p>在网上也找到一个阿里云的地址源 <code>registry.aliyuncs.com/google_containers</code>，替换脚本中的 <code>gcr.azk8s.cn/google_containers</code> 部分即可。</p>
<p>另外，如果想下载指定版本，可以将第一行改为 <code>kubeadm config images list --kubernetes-version=v1.14.1</code> 即加上版本的限制:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--kubernetes-version&#x3D;v1.14.1</span><br></pre></td></tr></table></figure>

<p>然后执行，等待下载：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># vim .&#x2F;kubeadm_pull.sh</span><br><span class="line"></span><br><span class="line"># chmod +x .&#x2F;kubeadm_pull.sh</span><br><span class="line"># .&#x2F;kubeadm_pull.sh</span><br></pre></td></tr></table></figure>



<h4 id="使用kubeadm-init初始化集群"><a href="#使用kubeadm-init初始化集群" class="headerlink" title="使用kubeadm init初始化集群"></a>使用kubeadm init初始化集群</h4><h5 id="kubeadm-init"><a href="#kubeadm-init" class="headerlink" title="kubeadm init"></a>kubeadm init</h5><p><strong>在 Master 节点执行</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># kubeadm init --kubernetes-version&#x3D;v1.14.1 --apiserver-advertise-address&#x3D;192.168.5.28 --pod-network-cidr&#x3D;10.244.0.0&#x2F;16</span><br></pre></td></tr></table></figure>

<p>其中，–apiserver-advertise-address<br>这是 API server 用来告知集群中其它成员的地址，这也是在 init 流程的时候用来构建 kubeadm join 命令行的地址。</p>
<p>更多的配置参数说明可见：<a href="https://k8smeetup.github.io/docs/admin/kubeadm/" target="_blank" rel="noopener">kubeadm 设置工具参考指南 | Kubernetes</a></p>
<p>当看到输出信息中的 <code>Your Kubernetes control-plane has initialized successfully!</code> 说明Kubernetes初始化成功了。</p>
<p>后面的几段输出比较重要。</p>
<p>要管理集群，我们需要执行如下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">To start using your cluster, you need to run the following as a regular user:</span><br><span class="line"></span><br><span class="line">  mkdir -p $HOME&#x2F;.kube</span><br><span class="line">  sudo cp -i &#x2F;etc&#x2F;kubernetes&#x2F;admin.conf $HOME&#x2F;.kube&#x2F;config</span><br><span class="line">  sudo chown $(id -u):$(id -g) $HOME&#x2F;.kube&#x2F;config</span><br></pre></td></tr></table></figure>

<p>安装支持的Pod网站组件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">You should now deploy a pod network to the cluster.</span><br><span class="line">Run &quot;kubectl apply -f [podnetwork].yaml&quot; with one of the options listed at:</span><br><span class="line">  https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;cluster-administration&#x2F;addons&#x2F;</span><br></pre></td></tr></table></figure>

<p>要将其他Node节点加入到当前Master节点的集群中，需要执行如下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Then you can join any number of worker nodes by running the following on each as root:</span><br><span class="line"></span><br><span class="line">kubeadm join 192.168.5.28:6443 --token runell.pdp1y28g1dsayy1o \</span><br><span class="line">    --discovery-token-ca-cert-hash sha256:349ee7b8a8f8a255065ebdbd1de2a98127f45fd190716af6a7a780e025f8cdfd</span><br></pre></td></tr></table></figure>

<p>上面的三步，也就是我们初始化集群要做的。</p>
<h5 id="授权管理集群"><a href="#授权管理集群" class="headerlink" title="授权管理集群"></a>授权管理集群</h5><p>如果需要使用Kubernetes集群，则首先要执行上面的授权操作，否则你看到的就是下面这样：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># kubectl get nodes</span><br><span class="line">The connection to the server localhost:8080 was refused - did you specify the right host or port?</span><br></pre></td></tr></table></figure>

<p><strong>在 Master 节点上操作</strong></p>
<p>因为我常用的是非root用户，所以这里我退出root用户权限来操作。当然，你也可以在其他的系统上来管理集群，只需要将 <code>/etc/kubernetes/admin.conf</code> 拷贝到 <code>$HOME/.kube/config</code> 目录中即可。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@master ~]# exit</span><br><span class="line">logout</span><br><span class="line">➜  ~ pwd</span><br><span class="line">&#x2F;home&#x2F;tiger</span><br><span class="line"></span><br><span class="line">➜  ~ mkdir -p $HOME&#x2F;.kube</span><br><span class="line">➜  ~ sudo cp -i &#x2F;etc&#x2F;kubernetes&#x2F;admin.conf $HOME&#x2F;.kube&#x2F;config</span><br><span class="line">[sudo] tiger 的密码：</span><br><span class="line">➜  ~ sudo chown $(id -u):$(id -g) $HOME&#x2F;.kube&#x2F;config</span><br></pre></td></tr></table></figure>

<p>我们可以通过 <code>kubectl get nodes</code> 查看节点的状态:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜  ~ kubectl get nodes</span><br><span class="line">NAME     STATUS     ROLES    AGE   VERSION</span><br><span class="line">master   NotReady   master   14m   v1.14.1</span><br></pre></td></tr></table></figure>

<p>master 节点 处于 <code>NotReady</code> 状态，还需要配置网络。</p>
<h5 id="安装网络组件"><a href="#安装网络组件" class="headerlink" title="安装网络组件"></a>安装网络组件</h5><p>Kubernetes系统上Pod网络的实现依赖于第三方插件进行，简单易用的实现是为CoreOS提供的flannel项目。</p>
<p>安装文档 <a href="https://kubernetes.io/docs/setup/independent/create-cluster-kubeadm/" target="_blank" rel="noopener">Creating a single master cluster with kubeadm - Kubernetes</a> 中的介绍，直接执行如下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kubectl apply -f https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;coreos&#x2F;flannel&#x2F;a70459be0084506e4ec919aa1c114638878db11b&#x2F;Documentation&#x2F;kube-flannel.yml</span><br></pre></td></tr></table></figure>

<p>由于上面我是在 <code>tiger</code> 用户下设置了授权，所以这里安装 <code>flannel</code> 就需要在 <code>tiger</code> 用户下来操作（不需要sudo），执行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜  ~ kubectl apply -f https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;coreos&#x2F;flannel&#x2F;a70459be0084506e4ec919aa1c114638878db11b&#x2F;Documentation&#x2F;kube-flannel.yml</span><br><span class="line">clusterrole.rbac.authorization.k8s.io&#x2F;flannel created</span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io&#x2F;flannel created</span><br><span class="line">serviceaccount&#x2F;flannel created</span><br><span class="line">configmap&#x2F;kube-flannel-cfg created</span><br><span class="line">daemonset.extensions&#x2F;kube-flannel-ds-amd64 created</span><br><span class="line">daemonset.extensions&#x2F;kube-flannel-ds-arm64 created</span><br><span class="line">daemonset.extensions&#x2F;kube-flannel-ds-arm created</span><br><span class="line">daemonset.extensions&#x2F;kube-flannel-ds-ppc64le created</span><br><span class="line">daemonset.extensions&#x2F;kube-flannel-ds-s390x created</span><br></pre></td></tr></table></figure>

<p>之后，再次查看节点状态：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜  ~ kubectl get nodes</span><br><span class="line">NAME     STATUS   ROLES    AGE   VERSION</span><br><span class="line">master   Ready    master   35m   v1.14.1</span><br></pre></td></tr></table></figure>
<p>现在是 <code>Ready</code> 状态了。</p>
<p>如果是用root权限操作，由于上面没有为root账户授权，会报如下错误：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">unable to recognize &quot;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;coreos&#x2F;flannel&#x2F;a70459be0084506e4ec919aa1c114638878db11b&#x2F;Documentation&#x2F;kube-flannel.yml&quot;: Get http:&#x2F;&#x2F;localhost:8080&#x2F;api?timeout&#x3D;32s: dial tcp [::1]:8080: connect: connection refused</span><br><span class="line">unable to recognize &quot;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;coreos&#x2F;flannel&#x2F;a70459be0084506e4ec919aa1c114638878db11b&#x2F;Documentation&#x2F;kube-flannel.yml&quot;: Get http:&#x2F;&#x2F;localhost:8080&#x2F;api?timeout&#x3D;32s: dial tcp [::1]:8080: connect: connection refused</span><br></pre></td></tr></table></figure>

<p>检查 Flannel 的pod状态：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜  ~ kubectl get pods -n kube-system -l app&#x3D;flannel</span><br><span class="line">NAME                          READY   STATUS    RESTARTS   AGE</span><br><span class="line">kube-flannel-ds-amd64-2rzqc   1&#x2F;1     Running   0          6m51s</span><br></pre></td></tr></table></figure>

<h6 id="验证Master节点上相关Pod是否正常"><a href="#验证Master节点上相关Pod是否正常" class="headerlink" title="验证Master节点上相关Pod是否正常"></a>验证Master节点上相关Pod是否正常</h6><p>通过命令 <code>kubectl get pods --all-namespaces</code> 验证master节点上kubernetes集群的相关Pod是否都正常创建并运行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜  ~ kubectl get pods --all-namespaces</span><br><span class="line">NAMESPACE     NAME                             READY   STATUS    RESTARTS   AGE</span><br><span class="line">kube-system   coredns-fb8b8dccf-cm28l          1&#x2F;1     Running   0          40m</span><br><span class="line">kube-system   coredns-fb8b8dccf-lqh8n          1&#x2F;1     Running   0          40m</span><br><span class="line">kube-system   etcd-master                      1&#x2F;1     Running   0          39m</span><br><span class="line">kube-system   kube-apiserver-master            1&#x2F;1     Running   0          39m</span><br><span class="line">kube-system   kube-controller-manager-master   1&#x2F;1     Running   0          39m</span><br><span class="line">kube-system   kube-flannel-ds-amd64-2rzqc      1&#x2F;1     Running   0          8m10s</span><br><span class="line">kube-system   kube-proxy-mb87m                 1&#x2F;1     Running   0          40m</span><br><span class="line">kube-system   kube-scheduler-master            1&#x2F;1     Running   0          40m</span><br></pre></td></tr></table></figure>

<p>如果发现有状态错误的Pod，可以通过命令 <code>kubectl --namespace=kube-system describe pod &lt;pod_name&gt;</code> 来查看具体错误原因。</p>
<p>查看集群中各个组件的状态：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜  ~ kubectl get cs</span><br><span class="line">NAME                 STATUS    MESSAGE             ERROR</span><br><span class="line">scheduler            Healthy   ok</span><br><span class="line">controller-manager   Healthy   ok</span><br><span class="line">etcd-0               Healthy   &#123;&quot;health&quot;:&quot;true&quot;&#125;</span><br></pre></td></tr></table></figure>

<h6 id="设置Master节点调度Pod"><a href="#设置Master节点调度Pod" class="headerlink" title="设置Master节点调度Pod"></a>设置Master节点调度Pod</h6><p>Kubeadm 在 master节点上也安装了 <code>kubelet</code>，出于安全考虑Pod不会被调度到Master Node上，也就是说Master Node不参与工作负载。这是因为master节点被打上了 <code>node-role.kubernetes.io/master:NoSchedule</code> 的标记：</p>
<p>查看Master节点的 Taint <code>kubectl describe node &lt;host_name&gt; | grep Taint</code>:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜  ~ kubectl describe node master | grep Taint</span><br><span class="line">Taints:             node-role.kubernetes.io&#x2F;master:NoSchedule</span><br></pre></td></tr></table></figure>

<p>如果希望在 Master 节点上也可以运行 Pod，可以执行如下命令（删除 Node 的 Label “node-role.kubernetes.io/master”，让Master节点成为Node节点）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 当前只有一个master节点，可以使用 --all 来执行</span><br><span class="line">kubectl taint nodes --all node-role.kubernetes.io&#x2F;master-</span><br><span class="line"># 或者指定节点名称</span><br><span class="line">kubectl taint nodes &lt;host_name&gt; node-role.kubernetes.io&#x2F;master-</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜  ~ kubectl taint nodes --all node-role.kubernetes.io&#x2F;master-</span><br><span class="line">node&#x2F;master untainted</span><br></pre></td></tr></table></figure>

<p>另外，如果要恢复禁止master部署Pod，可以执行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kubectl taint nodes &lt;host_name&gt; node-role.kubernetes.io&#x2F;master:NoSchedule</span><br></pre></td></tr></table></figure>

<hr>
<h5 id="向Kubernetes集群中添加Node节点"><a href="#向Kubernetes集群中添加Node节点" class="headerlink" title="向Kubernetes集群中添加Node节点"></a>向Kubernetes集群中添加Node节点</h5><p><strong>注意：在 Node 节点上操作</strong></p>
<p>按照上面的第三步操作，直接在 Node 节点上执行，这里需要注意的是必须以root权限来执行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kubeadm join 192.168.5.28:6443 --token runell.pdp1y28g1dsayy1o \</span><br><span class="line">    --discovery-token-ca-cert-hash sha256:349ee7b8a8f8a255065ebdbd1de2a98127f45fd190716af6a7a780e025f8cdfd</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@node1 ~]# kubeadm join 192.168.5.28:6443 --token runell.pdp1y28g1dsayy1o \</span><br><span class="line">&gt;     --discovery-token-ca-cert-hash sha256:349ee7b8a8f8a255065ebdbd1de2a98127f45fd190716af6a7a780e025f8cdfd</span><br><span class="line">[preflight] Running pre-flight checks</span><br><span class="line">[preflight] Reading configuration from the cluster...</span><br><span class="line">[preflight] FYI: You can look at this config file with &#39;kubectl -n kube-system get cm kubeadm-config -oyaml&#39;</span><br><span class="line">[kubelet-start] Downloading configuration for the kubelet from the &quot;kubelet-config-1.14&quot; ConfigMap in the kube-system namespace</span><br><span class="line">[kubelet-start] Writing kubelet configuration to file &quot;&#x2F;var&#x2F;lib&#x2F;kubelet&#x2F;config.yaml&quot;</span><br><span class="line">[kubelet-start] Writing kubelet environment file with flags to file &quot;&#x2F;var&#x2F;lib&#x2F;kubelet&#x2F;kubeadm-flags.env&quot;</span><br><span class="line">[kubelet-start] Activating the kubelet service</span><br><span class="line">[kubelet-start] Waiting for the kubelet to perform the TLS Bootstrap...</span><br><span class="line"></span><br><span class="line">This node has joined the cluster:</span><br><span class="line">* Certificate signing request was sent to apiserver and a response was received.</span><br><span class="line">* The Kubelet was informed of the new secure connection details.</span><br><span class="line"></span><br><span class="line">Run &#39;kubectl get nodes&#39; on the control-plane to see this node join the cluster.</span><br></pre></td></tr></table></figure>

<h6 id="查看集群节点状态"><a href="#查看集群节点状态" class="headerlink" title="查看集群节点状态"></a>查看集群节点状态</h6><p>回到主节点master上，查看集群节点状态：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜  ~ kubectl get nodes</span><br><span class="line">NAME     STATUS   ROLES    AGE   VERSION</span><br><span class="line">master   Ready    master   65m   v1.14.1</span><br><span class="line">node1    Ready    &lt;none&gt;   77s   v1.14.1</span><br></pre></td></tr></table></figure>

<p>至此，<code>node1</code> 节点顺利添加到了集群中。</p>
<hr>
<h4 id="kube-proxy开启ipvs"><a href="#kube-proxy开启ipvs" class="headerlink" title="kube-proxy开启ipvs"></a>kube-proxy开启ipvs</h4><p><strong>注意：在 Master 节点下操作</strong></p>
<p>通过命令 <code>ipvsadm -L -n</code> 查看当前ipvs状态：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜  ~ sudo ipvsadm -L -n</span><br><span class="line">IP Virtual Server version 1.2.1 (size&#x3D;4096)</span><br><span class="line">Prot LocalAddress:Port Scheduler Flags</span><br><span class="line">  -&gt; RemoteAddress:Port           Forward Weight ActiveConn InActConn</span><br></pre></td></tr></table></figure>

<p>发现并没有使用ipvs。</p>
<p>修改 <code>ConfigMap的kube-system/kube-proxy</code> 中的 <code>config.conf</code>，执行命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜  ~ kubectl edit cm kube-proxy -n kube-system</span><br></pre></td></tr></table></figure>

<p>找到其中的如下部分：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">    kind: KubeProxyConfiguration</span><br><span class="line">    metricsBindAddress: 127.0.0.1:10249</span><br><span class="line">    mode: &quot;&quot;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>将 <code>mode: &quot;&quot;</code> 改为 <code>mode: &quot;ipvs&quot;</code>。</p>
<p>之后重启各个节点上的kube-proxy Pod:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kubectl get pod -n kube-system | grep kube-proxy | awk &#39;&#123;system(&quot;kubectl delete pod &quot;$1&quot; -n kube-system&quot;)&#125;&#39;</span><br></pre></td></tr></table></figure>

<p>上面的命令是将原有 kube-proxy 的 Pod 删除，然后重新创建的。执行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜  ~ kubectl get pod -n kube-system | grep kube-proxy</span><br><span class="line">kube-proxy-d78m2                 1&#x2F;1     Running   0          55m</span><br><span class="line">kube-proxy-mb87m                 1&#x2F;1     Running   0          119m</span><br><span class="line">➜  ~ kubectl get pod -n kube-system | grep kube-proxy | awk &#39;&#123;system(&quot;kubectl delete pod &quot;$1&quot; -n kube-system&quot;)&#125;&#39;</span><br><span class="line">pod &quot;kube-proxy-d78m2&quot; deleted</span><br><span class="line">pod &quot;kube-proxy-mb87m&quot; deleted</span><br><span class="line">➜  ~ kubectl get pod -n kube-system | grep kube-proxy</span><br><span class="line">kube-proxy-8x8f6                 1&#x2F;1     Running   0          10s</span><br><span class="line">kube-proxy-k54d5                 1&#x2F;1     Running   0          3s</span><br><span class="line">➜  ~</span><br></pre></td></tr></table></figure>

<p>查看其中一个 kube-proxy Pod 的日志输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜  ~ kubectl logs kube-proxy-k54d5 -n kube-system</span><br><span class="line">I0517 02:04:00.609209       1 server_others.go:177] Using ipvs Proxier.</span><br><span class="line">W0517 02:04:00.609514       1 proxier.go:381] IPVS scheduler not specified, use rr by default</span><br><span class="line">I0517 02:04:00.609660       1 server.go:555] Version: v1.14.1</span><br><span class="line">I0517 02:04:00.619582       1 conntrack.go:52] Setting nf_conntrack_max to 131072</span><br><span class="line">I0517 02:04:00.620296       1 config.go:202] Starting service config controller</span><br><span class="line">I0517 02:04:00.620318       1 controller_utils.go:1027] Waiting for caches to sync for service config controller</span><br><span class="line">I0517 02:04:00.620338       1 config.go:102] Starting endpoints config controller</span><br><span class="line">I0517 02:04:00.621083       1 controller_utils.go:1027] Waiting for caches to sync for endpoints config controller</span><br><span class="line">I0517 02:04:00.720469       1 controller_utils.go:1034] Caches are synced for service config controller</span><br><span class="line">I0517 02:04:00.721541       1 controller_utils.go:1034] Caches are synced for endpoints config controller</span><br><span class="line">➜  ~</span><br></pre></td></tr></table></figure>

<p>日志中打印出了 <code>Using ipvs Proxier</code> ，说明ipvs模式已经开启。</p>
<p>再次通过 <code>ipvsadm -L -n</code> 命令查看：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜  ~ sudo ipvsadm -L -n</span><br><span class="line">[sudo] password for tiger:</span><br><span class="line">IP Virtual Server version 1.2.1 (size&#x3D;4096)</span><br><span class="line">Prot LocalAddress:Port Scheduler Flags</span><br><span class="line">  -&gt; RemoteAddress:Port           Forward Weight ActiveConn InActConn</span><br><span class="line">TCP  10.96.0.1:443 rr</span><br><span class="line">  -&gt; 192.168.5.28:6443            Masq    1      0          0</span><br><span class="line">TCP  10.96.0.10:53 rr</span><br><span class="line">  -&gt; 10.244.0.2:53                Masq    1      0          0</span><br><span class="line">  -&gt; 10.244.0.3:53                Masq    1      0          0</span><br><span class="line">TCP  10.96.0.10:9153 rr</span><br><span class="line">  -&gt; 10.244.0.2:9153              Masq    1      0          0</span><br><span class="line">  -&gt; 10.244.0.3:9153              Masq    1      0          0</span><br><span class="line">UDP  10.96.0.10:53 rr</span><br><span class="line">  -&gt; 10.244.0.2:53                Masq    1      0          0</span><br><span class="line">  -&gt; 10.244.0.3:53                Masq    1      0          0</span><br><span class="line">➜  ~</span><br></pre></td></tr></table></figure>

<p>也显示出了相应的配置信息。</p>
<hr>
<p>至此，kubeadm配置Kubernetes集群的操作就完成了。</p>
<hr>
<h4 id="相关参考"><a href="#相关参考" class="headerlink" title="相关参考"></a>相关参考</h4><ul>
<li><a href="https://blog.frognew.com/2019/04/kubeadm-install-kubernetes-1.14.html#2-6-%E5%90%91kubernetes%E9%9B%86%E7%BE%A4%E4%B8%AD%E6%B7%BB%E5%8A%A0node%E8%8A%82%E7%82%B9" target="_blank" rel="noopener">使用kubeadm安装Kubernetes 1.14 - 青蛙小白</a></li>
<li><a href="https://blog.51cto.com/nhylovezyh/2377982" target="_blank" rel="noopener">centos7.4 kubeadm安装Kubernetes 1.14.1 集群-随记千秋-51CTO博客</a></li>
<li><a href="https://kubernetes.io/docs/setup/independent/create-cluster-kubeadm/#control-plane-node-isolation" target="_blank" rel="noopener">Creating a single master cluster with kubeadm - Kubernetes</a></li>
</ul>
]]></content>
      <categories>
        <category>云原生系列</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
        <tag>云原生</tag>
      </tags>
  </entry>
  <entry>
    <title>zsh无法更换主题</title>
    <url>/2019/05/15/zsh-cannot-change-themes/</url>
    <content><![CDATA[<p>今天在知乎上发现一款zsh的主题，感觉比较好看，推荐给大家。</p>
<p>可能很多人都用过 <code>ys</code> 这款主题，显示的信息很全也很清爽。但是对于我来说，不太喜欢它的一点就是前面的 <code># user @ hostname in</code> 部分，感觉这部分完全没有显示的必要，同时如果进入的目录比较深的话，还会导致显示的提示信息很长。所以我就一直没有选择这款主题。</p>
<p>偶然看到一个名为 <code>astro</code> 的zsh主题 <a href="https://github.com/iplaces/astro-zsh-theme" target="_blank" rel="noopener">iplaces/astro-zsh-theme: Astro Theme for Oh My ZSH</a>，是基于 <code>ys</code> 修改而来的。没想到也遇到了和我有同样想法的同学（ps: 只不过人家已经把想法变成了现实，而我却…）</p>
<blockquote>
<p>因为加上用户名和 machine 信息之后很容易在文件路径较长时候产生换行，而且用户名和 machine 信息在我们使用 iTerm 的时候基本上用处很小所以我直接把他们省略掉了，看着清爽。</p>
<p>主要的部分就是文件路径、git 状态、git hash 和时间</p>
</blockquote>
<p><code>Astro</code> 主题的安装方法也很简单，直接按照给出的命令操作即可。</p>
<hr>
<p>我之前一直使用的是 <code>spaceship</code> 这款主题。</p>
<p>要想修改zsh的主题设置，只需要将 <code>~/.zshrc</code> 文件中的 <code>ZSH_THEME=&quot;spaceship&quot;</code> 部分，改成相应主题的名字即可。</p>
<p>但当我将其改成 <code>ZSH_THEME=&quot;astro&quot;</code> 之后，却发现 <code>source ~/.zshrc</code> 无法切换到新的主题，显示的还是之前的 <code>spaceship</code> 的主题样式：</p>
<p><code>spaceship theme</code>:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Leafney.github.io on  hexo [⇡] is 📦 v0.0.0</span><br><span class="line">3.7.1 via ⬢ v10.15.3</span><br><span class="line">➜</span><br></pre></td></tr></table></figure>

<p>然后我去 <code>zsh</code> 的 github 中查询是否有相关的 issues。发现其中一种方法是将：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">plugins&#x3D;(</span><br><span class="line">  git</span><br><span class="line">  zsh-autosuggestions</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>改成在一行的方式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">plugins&#x3D;(git zsh-autosuggestions)</span><br></pre></td></tr></table></figure>

<p>不过这个方法在测试后无效。</p>
<hr>
<p>然后我又将其尝试更改成其他的主题样式，如默认的 <code>robbyrussell</code>，结果发现还是 <code>spaceship</code> 的主题样式。那么到这里，基本上可以确定是 <code>spaceship</code> 这个主题的问题了，可能是当初我在配置 <code>spaceship</code> 主题时有什么全局设置，导致它每次 <code>source</code> 时都会覆盖更改的主题。</p>
<p>随后，我去 <code>spaceship</code> 主题的官方网站 <a href="https://denysdovhan.com/spaceship-prompt/#example" target="_blank" rel="noopener">Home · Spaceship ZSH</a> 查找是否有相关的全局设置。发现了下面的一段：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Set Spaceship ZSH as a prompt</span><br><span class="line">autoload -U promptinit; promptinit</span><br><span class="line">prompt spaceship</span><br></pre></td></tr></table></figure>

<p>当我把 <code>~/.zshrc</code> 中这部分注释掉之后再次 <code>source</code>，发现新的主题可以正常使用了：</p>
<p><code>astro theme</code>:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># ~&#x2F;Project&#x2F;Leafney.github.io [hexo ● (0673186)] [11:53:36]</span><br><span class="line">➜ hexo s -g</span><br></pre></td></tr></table></figure>

<p>更换成其他的主题，也一样可以正常切换：<br><code>robbyrussell theme</code>:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜  Leafney.github.io git:(hexo) hexo s -g</span><br></pre></td></tr></table></figure>

<p>至于上面这段关于 <code>prompt</code> 的配置，<strong>“咱也不知道为啥，咱也不敢问”</strong>。</p>
<hr>
<ul>
<li><a href="https://www.zhihu.com/question/33277508/answer/205705091" target="_blank" rel="noopener">oh my zsh 哪些主题比较好看、有特点？ - 木童的回答 - 知乎</a></li>
<li><a href="https://github.com/iplaces/astro-zsh-theme" target="_blank" rel="noopener">iplaces/astro-zsh-theme: Astro Theme for Oh My ZSH</a></li>
<li><a href="https://stackoverflow.com/questions/43402753/oh-my-zsh-not-applying-themes?answertab=active#tab-top" target="_blank" rel="noopener">oh my zsh - oh-my-zsh not applying themes - Stack Overflow</a></li>
<li><a href="https://denysdovhan.com/spaceship-prompt/#example" target="_blank" rel="noopener">Home · Spaceship ZSH</a></li>
</ul>
]]></content>
      <tags>
        <tag>zsh</tag>
      </tags>
  </entry>
  <entry>
    <title>如何添加URL到shadowsocks的列表让其使用代理访问</title>
    <url>/2019/05/13/ss-add-urls-use-proxy/</url>
    <content><![CDATA[<h4 id="添加自定义网址"><a href="#添加自定义网址" class="headerlink" title="添加自定义网址"></a>添加自定义网址</h4><p>开启 <code>Shadowsockets</code> 的 <code>自动代理模式</code> 一般情况下并不能正常访问到 <code>medium.com</code> 的站点。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20190411162943.png" alt=""></p>
<p>选择 <code>编辑自动模式的PAC...</code> 选项，会打开一个名为 <code>gfwlist.js</code> 的配置文件：</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20190411163111.png" alt=""></p>
<p>按照该文件中已有URL的格式，将我们的 <code>medium.com</code> 添加到文件中：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var rules &#x3D; [</span><br><span class="line">  &quot;||medium.com&quot;,</span><br><span class="line">  &quot;||altrec.com&quot;, </span><br><span class="line">  &quot;||darpa.mil&quot;, </span><br><span class="line">  ...</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>保存修改。</p>
<p>之后直接刷新页面即可，无需重启 <code>ss</code> ，立即生效了。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20190411163429.png" alt=""></p>
<hr>
<h4 id="MAC-下点击“从-GFWList-更新-PAC”，提示“404”错误"><a href="#MAC-下点击“从-GFWList-更新-PAC”，提示“404”错误" class="headerlink" title="MAC 下点击“从 GFWList 更新 PAC”，提示“404”错误"></a>MAC 下点击“从 GFWList 更新 PAC”，提示“404”错误</h4><blockquote>
<p>由于太久没更新，且 gfwlist.txt 是 hard code 在代码里面的，所以升级 GFWList 会报 404 错误。主要是因为原来的 GFWList 托管在 Google Code 上，现在托管在 GitHub 上。</p>
</blockquote>
<p>所以，就不要去管这一项了。</p>
<ul>
<li><a href="https://github.com/shadowsocks/shadowsocks-iOS/issues/212" target="_blank" rel="noopener">不能更新 PAC 文件 · Issue #212 · shadowsocks/shadowsocks-iOS</a></li>
<li><a href="https://gist.github.com/rambolee/ba7e2d5e0e340c5a1070bf543ad28b7b" target="_blank" rel="noopener">shadowSocks 从 gwflist更新 PAC 时404</a></li>
</ul>
<hr>
<h4 id="不支持Google-Play服务，无法运行"><a href="#不支持Google-Play服务，无法运行" class="headerlink" title="不支持Google Play服务，无法运行"></a>不支持Google Play服务，无法运行</h4><p>使用ss-android的扫码方式添加ss配置时，提示设备不支持Google Play服务，无法运行</p>
<blockquote>
<p>不要使用扫码功能，手动设置添加完美解决这个问题</p>
</blockquote>
<ul>
<li><a href="https://github.com/shadowsocks/shadowsocks-android/issues/2171" target="_blank" rel="noopener">设备不支持Google Play服务，无法运行 · Issue #2171 · shadowsocks/shadowsocks-android</a></li>
</ul>
<hr>
]]></content>
      <tags>
        <tag>Shadowsocks</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客添加Gitalk评论系统</title>
    <url>/2019/04/30/hexo-add-gitalk-comment/</url>
    <content><![CDATA[<p>经朋友的提醒，我发现我的博客中的评论插件Gitment已经不能正常使用了。简单的分析了一下：发布评论内容后 <code>Gitment</code> 区域就会一直显示 <code>Logging in...</code> 的加载错误信息，查看网络请求，发现是Gitment插件中使用的一个域名 <code>https://gh-oauth.imsun.net</code> 的Https证书已经过期了。</p>
<p>查看了一下该域名的证书，发现早在 <code>2018年9月14日</code> 就到期了，哎，我说为什么我的博客一直没有人评论呢，原来是这个原因。</p>
<p>问题是找到了，但博客评论的功能可不能去掉，毕竟这是一个很好的交流问题的地方。</p>
<p>在网上搜索了一下，发现了一款名为 <code>Gitalk</code> 的评论插件，和 <code>Gitment</code> 功能实现差不多。看了看github中的issues信息，发现 <code>Gitalk</code> 的活跃度还是很高的。</p>
<p>因为我用的是 <code>Hexo</code> 的 <code>Next</code> 主题，去 <code>Next</code> 的官网中找了一下文档，发现并没有直接集成  <code>Gitalk</code> 评论插件。那看来只能自己改造了。</p>
<p>想想当时我加入 <code>Gitment</code> 评论插件时，Next主题已经集成好了，所以只要打开并添加好自己的 <code>GitHub token</code> 信息之后，就能正常使用了。而 <code>Gitment</code> 和 <code>Gitalk</code> 都是评论插件，所以只要按照 <code>Gitment</code>的方式来修改即可，也是很简单的。</p>
<p>废话不多说，<code>Gitalk</code> 用起来。</p>
<p><strong>提示：建议和我之前的文章 <a href="/2018/09/17/hexo-add-gitment-review-system/">Hexo博客添加Gitment评论系统 | IT范儿</a> 一起食用，体验更好哟！！！</strong></p>
<hr>
<h4 id="禁用Gitment"><a href="#禁用Gitment" class="headerlink" title="禁用Gitment"></a>禁用Gitment</h4><p>将 <code>themes/next/_config.yml</code> 文件中的 <code>gitment: enable:true</code> 改为 <code>false</code>。关闭 Gitment 的评论插件。</p>
<hr>
<h4 id="使用Gitalk"><a href="#使用Gitalk" class="headerlink" title="使用Gitalk"></a>使用Gitalk</h4><p>先简单过一下 Gitalk 的文档：<a href="https://github.com/gitalk/gitalk" target="_blank" rel="noopener">gitalk/gitalk: Gitalk is a modern comment component based on Github Issue and Preact.</a></p>
<p><code>Gitalk</code> 的使用非常简单：</p>
<ol>
<li>导入链接</li>
<li>添加占位标签</li>
<li>初始化插件</li>
<li>自定义设置</li>
</ol>
<h5 id="添加初始化代码"><a href="#添加初始化代码" class="headerlink" title="添加初始化代码"></a>添加初始化代码</h5><p>在 <code>Next</code> 主题中，第三方的插件都放在了 <code>_third-party</code> 目录下。</p>
<p>在 <code>themes/next/layout/third-party/comments</code> 中新建 <code>gitalk.swig</code>:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% if page.comments &amp;&amp; theme.gitalk.enable %&#125;</span><br><span class="line"></span><br><span class="line">  &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;https:&#x2F;&#x2F;unpkg.com&#x2F;gitalk&#x2F;dist&#x2F;gitalk.css&quot;&gt;</span><br><span class="line">  &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;unpkg.com&#x2F;gitalk&#x2F;dist&#x2F;gitalk.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">   &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">        var gitalk &#x3D; new Gitalk(&#123;</span><br><span class="line">          clientID: &#39;&#123;&#123; theme.gitalk.ClientID &#125;&#125;&#39;,</span><br><span class="line">          clientSecret: &#39;&#123;&#123; theme.gitalk.ClientSecret &#125;&#125;&#39;,</span><br><span class="line">          repo: &#39;&#123;&#123; theme.gitalk.repo &#125;&#125;&#39;,</span><br><span class="line">          owner: &#39;&#123;&#123; theme.gitalk.owner &#125;&#125;&#39;,</span><br><span class="line">          admin: [&#39;&#123;&#123; theme.gitalk.adminUser &#125;&#125;&#39;],</span><br><span class="line">          id:&#39;&#123;&#123; theme.gitalk.IdPrefix || gitalk &#125;&#125;_&#123;&#123; date(page.date, &quot;YYYYMMDDHHmmss&quot;) &#125;&#125;&#39;,</span><br><span class="line">          labels: &#39;&#123;&#123; theme.gitalk.labels &#125;&#125;&#39;,</span><br><span class="line">          perPage: &#123;&#123; theme.gitalk.perPage &#125;&#125;,</span><br><span class="line">          pagerDirection: &#39;&#123;&#123; theme.gitalk.pagerDirection &#125;&#125;&#39;,</span><br><span class="line">          createIssueManually: &#123;&#123; theme.gitalk.createIssueManually &#125;&#125;,</span><br><span class="line">          distractionFreeMode: &#123;&#123; theme.gitalk.distractionFreeMode &#125;&#125;</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        gitalk.render(&#39;gitalk-container&#39;)           </span><br><span class="line">       &lt;&#x2F;script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<h5 id="载入插件"><a href="#载入插件" class="headerlink" title="载入插件"></a>载入插件</h5><p>在 <code>themes/next/layout/third-party/comments</code> 中找到 <code>index.swig</code> 文件，新增 <code>gitalk.swig</code>:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% include &#39;gitalk.swig&#39; %&#125;</span><br></pre></td></tr></table></figure>

<h5 id="添加占位标签"><a href="#添加占位标签" class="headerlink" title="添加占位标签"></a>添加占位标签</h5><p>在 <code>themes/next/layout/_partials</code> 中，找到 <code>comments.swig</code> 文件，这里面是所有支持的评论插件的占位符所放的位置。就拿之前使用的 <code>gitment</code> 来说，可以看到如下的代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% elseif theme.gitment.enable %&#125;</span><br><span class="line">  &lt;div class&#x3D;&quot;comments&quot; id&#x3D;&quot;comments&quot;&gt;</span><br><span class="line">    &#123;% if theme.gitment.lazy %&#125;</span><br><span class="line">      &lt;div onclick&#x3D;&quot;showGitment()&quot; id&#x3D;&quot;gitment-display-button&quot;&gt;&#123;&#123; __(&#39;gitmentbutton&#39;) &#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">      &lt;div id&#x3D;&quot;gitment-container&quot; style&#x3D;&quot;display:none&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">    &#123;% else %&#125;</span><br><span class="line">      &lt;div id&#x3D;&quot;gitment-container&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<p>其中的每一个</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% elseif theme.xxxxx.enable %&#125;</span><br></pre></td></tr></table></figure>

<p>部分，表示的就是一个评论插件功能。</p>
<p>将上面代码段精简一下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% elseif theme.gitment.enable %&#125;</span><br><span class="line">  &lt;div class&#x3D;&quot;comments&quot; id&#x3D;&quot;comments&quot;&gt;</span><br><span class="line">      &lt;div id&#x3D;&quot;gitment-container&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<p>可以发现：<code>&lt;div id=&quot;gitment-container&quot;&gt;&lt;/div&gt;</code> 就是评论框的占位标签了。</p>
<p>那么依葫芦画瓢，我们将上面的代码稍微修改成 <code>gitealk</code> 的占位标签：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% elseif theme.gitalk.enable %&#125;</span><br><span class="line">  &lt;div class&#x3D;&quot;comments&quot; id&#x3D;&quot;comments&quot;&gt;</span><br><span class="line">      &lt;div id&#x3D;&quot;gitalk-container&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<p>然后将其加入到任意两个</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% elseif theme.xxxxx.enable %&#125;</span><br></pre></td></tr></table></figure>
<p>代码段之间即可。</p>
<h5 id="自定义配置"><a href="#自定义配置" class="headerlink" title="自定义配置"></a>自定义配置</h5><p>打开 <code>Next</code> 主题的配置文件 <code>themes/next/_config.yml</code> ，加上如下内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gitalk:</span><br><span class="line">  enable: true</span><br><span class="line">  ClientID: xxxxxx</span><br><span class="line">  ClientSecret: xxxxxxxxxxxx</span><br><span class="line">  repo: gitalk</span><br><span class="line">  owner: xxxxx</span><br><span class="line">  adminUser: xxxxx</span><br><span class="line">  IdPrefix: gitalk</span><br><span class="line">  labels: gitalk</span><br><span class="line">  perPage: 10</span><br><span class="line">  pagerDirection: last</span><br><span class="line">  createIssueManually: true</span><br><span class="line">  distractionFreeMode: false</span><br></pre></td></tr></table></figure>

<p>其中：<code>repo</code> 表示将 issues 提交到哪个仓库。 <code>IdPrefix</code> 是我自定义添加的参数，表示<code>ID</code> 值的前缀。其他项可直接参考官方的文档来进行修改：<a href="https://github.com/gitalk/gitalk/blob/master/readme-cn.md#%E8%AE%BE%E7%BD%AE" target="_blank" rel="noopener">gitalk/readme-cn.md at master · gitalk/gitalk</a></p>
<hr>
<h4 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h4><h5 id="i-concat-…-join-is-not-a-function"><a href="#i-concat-…-join-is-not-a-function" class="headerlink" title="i.concat(…).join is not a function"></a>i.concat(…).join is not a function</h5><p>执行 <code>hexo s -g</code> 预览博客，发现评论部分报错：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Error: i.concat(...).join is not a function</span><br></pre></td></tr></table></figure>

<p>这个问题是 <code>labels</code> 部分的问题，通过如下方式处理，将 <code>labels</code> 修改为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   labels: &#39;&#123;&#123; theme.gitalk.labels &#125;&#125;&#39;.split(&#39;,&#39;).filter(l &#x3D;&gt; l),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><a href="https://github.com/gitalk/gitalk/issues/114" target="_blank" rel="noopener">Error: u.concat(…).join is not a function! · Issue #114 · gitalk/gitalk</a></li>
</ul>
<h5 id="未找到相关的-Issues-进行评论"><a href="#未找到相关的-Issues-进行评论" class="headerlink" title="未找到相关的 Issues 进行评论"></a>未找到相关的 Issues 进行评论</h5><p>更改为 <code>Gitalk</code> 之后，发现之前使用 <code>Gitment</code> 已经创建了 <code>issues</code> 的文章却提示 <code>未找到相关的 Issues 进行评论</code> :</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20190430111233.png" alt=""></p>
<p>原因是：</p>
<p><code>Gitalk</code> 评论插件是通过 <code>issues</code> 的 <code>labels</code> 来标识一篇文章的。如果 <code>labels</code> 中存在相应文章的 <code>label</code> 标签，那就说明该文章已经初始化过了。</p>
<p>比如 我一篇文章设置的 <code>ID</code> 为 <code>itfanr_blog_20190426225702</code> ，默认的 <code>labels</code> 为 <code>gitalk</code>，那么相应的issues如下：</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20190430115237.png" alt=""></p>
<p>这两个label一起来标识一篇文章。</p>
<p>因为上面我将ID值的格式进行了修改：</p>
<p>原来:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">id: &#39;itfanr_blog_&#123;&#123; date(page.date, &quot;YYYYMMDDhhmmss&quot;) &#125;&#125;&#39;,</span><br></pre></td></tr></table></figure>

<p>现在：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">id:&#39;&#123;&#123; theme.gitalk.IdPrefix || gitalk &#125;&#125;_&#123;&#123; date(page.date, &quot;YYYYMMDDHHmmss&quot;) &#125;&#125;&#39;,</span><br></pre></td></tr></table></figure>

<p>其中的时间戳格式进行了更改，也就导致了 <code>labels</code> 不匹配而找不到了。</p>
<p>由于暂时没有找到如何批量更新 <code>labels</code> 的方法，而一个一个的手动更改又太麻烦了。所以我就删除原来的 <code>issues</code>，重新进行创建。此时，我发现 <code>Gitalk</code> 一个好用的地方是，当将配置项 <code>createIssueManually</code> 设置为 <code>false</code> 时，如果发现是管理员浏览文章，会自动为该文章初始化评论功能，非常方便。</p>
<p>另外一个主要的原因是：这几个月我的博客一直没有评论，所以好多都是空的 <code>issues</code>，删除重建也就没有什么犹豫了。</p>
<h5 id="关于文章ID"><a href="#关于文章ID" class="headerlink" title="关于文章ID"></a>关于文章ID</h5><p>这里需要说明的是 <code>ID</code> 这一项。</p>
<p>依照gitalk文档中的解释，该值表示当前页面的唯一id，且长度不能超过50：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">The unique id of the page. Length must less than 50.</span><br></pre></td></tr></table></figure>

<p>所以，我这里设置为了 <code>前缀+文章create时间戳</code>的方式来实现唯一性。</p>
<p>通过在配置文件中指定 <code>IdPrefix</code> 来表示前缀，默认值为 <code>gitalk</code>。</p>
<p>如果你不想用时间戳的方式，也可以使用文章链接的MD5值来实现唯一ID，方法如下：</p>
<p>在上面 <code>themes/next/layout/third-party/comments/gitalk.swig</code> 中添加对 <code>md5.js</code>的引用：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.bootcss.com&#x2F;blueimp-md5&#x2F;2.10.0&#x2F;js&#x2F;md5.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<p>修改ID部分为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">id: md5(location.pathname),</span><br></pre></td></tr></table></figure>

<p>即可。</p>
<p>但是，不建议直接使用默认的 <code>id: location.pathname,</code> 即 文章链接。有时候文章标题可能会很长，当超过50个字符之后就会提交失败，这个是由 GitHub中的 <code>Issues labels</code> 限制的。</p>
<hr>
<h4 id="相关参考"><a href="#相关参考" class="headerlink" title="相关参考"></a>相关参考</h4><ul>
<li><a href="https://github.com/gitalk/gitalk" target="_blank" rel="noopener">gitalk/gitalk: Gitalk is a modern comment component based on Github Issue and Preact.</a></li>
<li><a href="https://iochen.com/2018/01/06/use-gitalk-in-hexo/" target="_blank" rel="noopener">Hexo中Gitalk配置使用教程-可能是目前最详细的教程 | ioChen’s Blog</a></li>
</ul>
]]></content>
      <categories>
        <category>Hexo博客搭建</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS中安装pip</title>
    <url>/2019/04/26/centos-install-pip/</url>
    <content><![CDATA[<p>直接执行 <code>yum install python-pip</code> 会报错:找不到 <code>python-pip</code> 安装包</p>
<p>需要先安装 <code>epel-release</code> :</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo yum -y install epel-release</span><br></pre></td></tr></table></figure>

<p>再安装:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo yum -y install python-pip</span><br></pre></td></tr></table></figure>

<p>将pip更新到最新:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo pip install --upgrade pip</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Shell命令自动补全插件zsh-autosuggestions</title>
    <url>/2019/04/26/shell-command-auto-completion-plug-in-zsh-autosuggestions/</url>
    <content><![CDATA[<p>Talk is cheep , show you the code.</p>
<h4 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h4><p>Clone this repository into <code>$ZSH_CUSTOM/plugins</code> (by default <code>~/.oh-my-zsh/custom/plugins</code>):</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;zsh-users&#x2F;zsh-autosuggestions $&#123;ZSH_CUSTOM:-~&#x2F;.oh-my-zsh&#x2F;custom&#125;&#x2F;plugins&#x2F;zsh-autosuggestions</span><br></pre></td></tr></table></figure>

<p>Add the plugin to the list of plugins for Oh My Zsh to load (inside <code>~/.zshrc</code>):</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">plugins&#x3D;(zsh-autosuggestions)</span><br></pre></td></tr></table></figure>

<p>Start a new terminal session or run <code>source ~/.zshrc</code>.</p>
<p>More: <a href="https://github.com/zsh-users/zsh-autosuggestions/blob/master/INSTALL.md" target="_blank" rel="noopener">zsh-autosuggestions/INSTALL.md at master · zsh-users/zsh-autosuggestions</a></p>
<hr>
<h4 id="Change-default-color"><a href="#Change-default-color" class="headerlink" title="Change default color"></a>Change default color</h4><p>This color can be changed by setting the <code>ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE</code> variable. </p>
<p>For Example:</p>
<p>You can edit your <code>~/.zshrc</code> and change/add the variable  <code>ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE=&#39;fg=value&#39;</code> like <code>ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE=&#39;fg=66&#39;</code>.</p>
<p>The number of colors is in any case limited to 256(i.e. the range 0 to 255).</p>
<p>You can view the detailed colors from here:</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20190426214758.png" alt=""></p>
<p>When the auto prompt appears, press <code>→</code> key or <code>Ctrl(Control) + f</code> to enter the auto prompt command into the current terminal.</p>
<ul>
<li><a href="https://stackoverflow.com/questions/47310537/how-to-change-zsh-autosuggestions-color" target="_blank" rel="noopener">linux - How to change zsh-autosuggestions color - Stack Overflow</a></li>
<li><a href="https://coderwall.com/p/pb1uzq/z-shell-colors" target="_blank" rel="noopener">Z Shell colors! (Example)</a></li>
</ul>
]]></content>
      <tags>
        <tag>zsh</tag>
      </tags>
  </entry>
  <entry>
    <title>Puppeteer配置小记</title>
    <url>/2019/04/10/configuration-development-of-puppeteer/</url>
    <content><![CDATA[<p>最近项目中需要实现动态数据的抓取，之前在抓取动态页面的时候都是通过 <code>Phantomjs</code> 、<code>Selenium</code> 、Chrome 或 Firefox的 <code>Headless</code> 模式等方法来实现，自从 Google Chrome 团队推出官方的 <code>Headless Chrome</code> 工具 <code>Puppeteer</code> 之后，似乎之前使用的那些工具一下都黯淡了。</p>
<p><code>Puppeteer</code> 是一个 <code>Node</code> 代码库，基于 <code>DevTools</code> 协议，提供高级 API 自动化控制谷歌 Chrome 或 Chromium  浏览器。<code>Puppeteer</code> 默认以 <code>无界面方式</code> 运行。</p>
<p>安装 Puppeteer 过程中会下载完整版的谷歌Chromium浏览器到 <code>node_modules</code> 目录。</p>
<p>从 <code>1.7.0</code> 版后，谷歌发布了新的 <code>puppeteer-core</code> 安装包，默认不再自动下载谷歌Chromium浏览器。</p>
<p><code>puppeteer-core</code> 是 <code>Puppeteer</code> 的轻量级版本，复用本地已安装的浏览器，或者连接到远程浏览器。</p>
<hr>
<h4 id="安装yarn"><a href="#安装yarn" class="headerlink" title="安装yarn"></a>安装yarn</h4><p>这里我使用 <code>yarn</code> 来管理依赖包。</p>
<h5 id="Mac"><a href="#Mac" class="headerlink" title="Mac"></a>Mac</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ brew install yarn</span><br><span class="line"># 由于地址源的问题，该命令执行失败</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo npm install -g yarn</span><br><span class="line"># 使用这条命令安装成功</span><br></pre></td></tr></table></figure>

<h5 id="Win"><a href="#Win" class="headerlink" title="Win"></a>Win</h5><p><code>Chocolatey</code> 是一个windows下的包管理器。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">choco install yarn</span><br></pre></td></tr></table></figure>

<ul>
<li><a href="https://chocolatey.org/" target="_blank" rel="noopener">Chocolatey - The package manager for Windows</a></li>
</ul>
<hr>
<h4 id="使用yarn"><a href="#使用yarn" class="headerlink" title="使用yarn"></a>使用yarn</h4><h5 id="查看版本信息"><a href="#查看版本信息" class="headerlink" title="查看版本信息"></a>查看版本信息</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ yarn -v</span><br><span class="line">1.15.2</span><br></pre></td></tr></table></figure>

<h5 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ yarn init</span><br></pre></td></tr></table></figure>

<h5 id="添加一个依赖"><a href="#添加一个依赖" class="headerlink" title="添加一个依赖"></a>添加一个依赖</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ yarn add [package]</span><br><span class="line">$ yarn add [package]@[version]</span><br><span class="line">$ yarn add [package]@[tag]</span><br></pre></td></tr></table></figure>

<h5 id="全局安装依赖"><a href="#全局安装依赖" class="headerlink" title="全局安装依赖"></a>全局安装依赖</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ yarn global add [package]</span><br></pre></td></tr></table></figure>

<h5 id="更新一个依赖"><a href="#更新一个依赖" class="headerlink" title="更新一个依赖"></a>更新一个依赖</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ yarn upgrade [package]</span><br><span class="line">$ yarn upgrade [package]@[version]</span><br><span class="line">$ yarn upgrade [package]@[tag]</span><br></pre></td></tr></table></figure>

<h5 id="移除一个依赖"><a href="#移除一个依赖" class="headerlink" title="移除一个依赖"></a>移除一个依赖</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ yarn remove [package]</span><br></pre></td></tr></table></figure>

<h5 id="安装package-json中所有的依赖项"><a href="#安装package-json中所有的依赖项" class="headerlink" title="安装package.json中所有的依赖项"></a>安装package.json中所有的依赖项</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ yarn</span><br><span class="line"># or:</span><br><span class="line">$ yarn install</span><br></pre></td></tr></table></figure>

<h5 id="查看yarn配置"><a href="#查看yarn配置" class="headerlink" title="查看yarn配置"></a>查看yarn配置</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ yarn config list</span><br></pre></td></tr></table></figure>

<h5 id="更改-registry"><a href="#更改-registry" class="headerlink" title="更改 registry"></a>更改 registry</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#安装淘宝镜像</span><br><span class="line">$ yarn config set registry &quot;https:&#x2F;&#x2F;registry.npm.taobao.org&quot;</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="安装Puppeteer"><a href="#安装Puppeteer" class="headerlink" title="安装Puppeteer"></a>安装Puppeteer</h4><h5 id="修改地址源"><a href="#修改地址源" class="headerlink" title="修改地址源"></a>修改地址源</h5><p>这里我采用的是 <code>puppeteer-core</code>。由于国内网络原因，需要修改仓库源地址：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm config set registry &quot;https:&#x2F;&#x2F;registry.npm.taobao.org&quot;</span><br><span class="line"></span><br><span class="line">$ yarn config set registry &quot;https:&#x2F;&#x2F;registry.npm.taobao.org&quot;</span><br><span class="line"></span><br><span class="line">$ yarn add puppeteer-core</span><br></pre></td></tr></table></figure>

<h5 id="配置Chrome路径"><a href="#配置Chrome路径" class="headerlink" title="配置Chrome路径"></a>配置Chrome路径</h5><p>使用 <code>puppeteer-core</code>，需要手动指定已安装的Chrome浏览器的安装路径。</p>
<p>Mac电脑上Chrome浏览器的的安装路径，可以通过在浏览器中输入 <code>chrome:\\version</code> 来查看。</p>
<p>我的电脑上的路径为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;Applications&#x2F;Google\ Chrome.app&#x2F;Contents&#x2F;MacOS&#x2F;Google\ Chrome</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="Puppeteer配置"><a href="#Puppeteer配置" class="headerlink" title="Puppeteer配置"></a>Puppeteer配置</h4><h5 id="无界面模式"><a href="#无界面模式" class="headerlink" title="无界面模式"></a>无界面模式</h5><p>Puppeteer 默认使用 <code>headless</code> 模式运行，通过设置 <code>headless:false</code> 来显示GUI界面：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const browser &#x3D; await puppeteer.launch(&#123;</span><br><span class="line">  headless: false</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h5 id="其他配置参数"><a href="#其他配置参数" class="headerlink" title="其他配置参数"></a>其他配置参数</h5><p>其他 <code>puppeteer.launch()</code> 配置项：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">     &#x2F;&#x2F; 若是手动下载的chromium需要指定chromium地址, 默认引用地址为 &#96;&#x2F;项目目录&#x2F;node_modules&#x2F;puppeteer&#x2F;.local-chromium&#x2F;&#96;</span><br><span class="line">    executablePath: &#39;&#x2F;Applications&#x2F;Google\ Chrome.app&#x2F;Contents&#x2F;MacOS&#x2F;Google\ Chrome&#39;,</span><br><span class="line">    &#x2F;&#x2F;设置超时时间</span><br><span class="line">    timeout: 15000,</span><br><span class="line">    &#x2F;&#x2F;如果是访问https页面 此属性会忽略https错误</span><br><span class="line">    ignoreHTTPSErrors: true,</span><br><span class="line">    &#x2F;&#x2F; 打开开发者工具, 当此值为true时, headless总为false</span><br><span class="line">    devtools: false,</span><br><span class="line">    &#x2F;&#x2F; 关闭headless模式, 不会打开浏览器</span><br><span class="line">    headless: false,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="沙箱、共享内存"><a href="#沙箱、共享内存" class="headerlink" title="沙箱、共享内存"></a>沙箱、共享内存</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const browser &#x3D; await puppeteer.launch(&#123;</span><br><span class="line">  args: [&#39;--no-sandbox&#39;, &#39;--disable-dev-shm-usage&#39;]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li><code>--no-sandbox</code>: 去沙箱运行</li>
<li><code>--disable-dev-shm-usage</code>: 默认情况下，Docker运行一个 <code>/dev/shm</code> 共享内存空间为64MB 的容器。这通常对Chrome来说太小，并且会导致Chrome在渲染大页面时崩溃。要修复，必须运行容器 <code>docker run --shm-size=1gb</code> 以增加 <code>/dev/shm</code> 的容量。从Chrome 65开始，使用 <code>--disable-dev-shm-usage</code> 标志启动浏览器即可，这将会写入共享内存文件 <code>/tmp</code> 而不是 <code>/dev/shm</code> .</li>
</ul>
<p>Linux沙箱：在计算机安全领域，沙箱(Sandbox)是一种程序的隔离运行机制，其目的是限制不可信进程的权限。沙箱技术经常被用于执行未经测试的或不可信的客户程序。为了避免不可信程序可能破坏其它程序的运行。</p>
<ul>
<li>参考 <a href="https://juejin.im/post/5bbc96785188255c72286403" target="_blank" rel="noopener">截图的诱惑：Docker部署Puppeteer项目 - 掘金</a></li>
</ul>
<h5 id="跳转到指定页"><a href="#跳转到指定页" class="headerlink" title="跳转到指定页"></a>跳转到指定页</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">await page.goto(&#39;https:&#x2F;&#x2F;github.com&#x2F;login&#39;);</span><br></pre></td></tr></table></figure>

<h5 id="等待"><a href="#等待" class="headerlink" title="等待"></a>等待</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 等待指定时间 ，second</span><br><span class="line">await page.waitFor(2*1000);</span><br><span class="line"></span><br><span class="line"># 等待某元素显示</span><br><span class="line">await page.waitForSelector(&#39;body.blog&#39;);</span><br></pre></td></tr></table></figure>

<h5 id="设置视图大小"><a href="#设置视图大小" class="headerlink" title="设置视图大小"></a>设置视图大小</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">await page.setViewport(&#123;width: 1280, height: 600&#125;)</span><br></pre></td></tr></table></figure>

<p>要注意：这里的视图大小指的是网页页面显示的大小，和浏览器界面的大小是两个概念。</p>
<h5 id="截屏"><a href="#截屏" class="headerlink" title="截屏"></a>截屏</h5><p><code>fullPage</code> 可以控制是否截取整个页面:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">await page.screenshot(&#123;</span><br><span class="line">  path: &#39;jd.png&#39;,</span><br><span class="line">  fullPage: true</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h5 id="设置UserAgent"><a href="#设置UserAgent" class="headerlink" title="设置UserAgent"></a>设置UserAgent</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">await page.setUserAgent(&#39;Mozilla&#x2F;5.0 (iPhone; CPU iPhone OS 9_0_1 like Mac OS X) AppleWebKit&#x2F;601.1.46 (KHTML, like Gecko) Version&#x2F;9.0 Mobile&#x2F;13A404 Safari&#x2F;601.1&#39;)</span><br></pre></td></tr></table></figure>

<h5 id="获取页面内容"><a href="#获取页面内容" class="headerlink" title="获取页面内容"></a>获取页面内容</h5><p>返回页面的完整 <code>html</code> 代码，包括 <code>doctype</code> ：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">page.content();</span><br></pre></td></tr></table></figure>

<h5 id="拦截请求页面中的图片"><a href="#拦截请求页面中的图片" class="headerlink" title="拦截请求页面中的图片"></a>拦截请求页面中的图片</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 拦截请求页面中的图片</span><br><span class="line">await page.setRequestInterception(true);</span><br><span class="line">page.on(&#39;request&#39;, interceptedRequest &#x3D;&gt; &#123;</span><br><span class="line">    let url &#x3D; interceptedRequest.url();</span><br><span class="line">    if (url.indexOf(&#39;.png&#39;) &gt; -1 || url.indexOf(&#39;.jpg&#39;) &gt; -1) &#123;</span><br><span class="line">        interceptedRequest.abort();</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        interceptedRequest.continue();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li>参考 <a href="https://github.com/chenxiaochun/blog/issues/38" target="_blank" rel="noopener">Puppeteer：模拟浏览器操作行为的利器 · Issue #38 · chenxiaochun/blog</a></li>
</ul>
<h5 id="跳转等待页面加载完毕"><a href="#跳转等待页面加载完毕" class="headerlink" title="跳转等待页面加载完毕"></a>跳转等待页面加载完毕</h5><p>有时候使用 <code>timeout:3000</code> 这样的方式，并不能完全确定页面能在相应的时间范围内加载完而导致异常，可以通过如下的参数来实现，而尽量少用 <code>timeout</code> 这种限定性的方式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">await page.goto(&#39;https:&#x2F;&#x2F;discordbots.org&#39;, &#123;waitUntil: &#39;domcontentloaded&#39;&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li>参考 <a href="https://github.com/GoogleChrome/puppeteer/issues/2482" target="_blank" rel="noopener">UnhandledPromiseRejectionWarning on Navigation Timeout Exceeded · Issue #2482 · GoogleChrome/puppeteer</a></li>
</ul>
<h5 id="getBoundingClientRect"><a href="#getBoundingClientRect" class="headerlink" title="getBoundingClientRect()"></a>getBoundingClientRect()</h5><p>getBoundingClientRect()用于获得页面中某个元素的左，上，右和下分别相对浏览器视窗的位置。</p>
<hr>
<h4 id="一个例子"><a href="#一个例子" class="headerlink" title="一个例子"></a>一个例子</h4><p>这里，实现了一个简单的页面截屏的功能：</p>
<p><code>get_png.js</code>:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const puppeteer &#x3D; require(&#39;puppeteer-core&#39;);</span><br><span class="line">const execPath &#x3D; &#39;&#x2F;Applications&#x2F;Google\ Chrome.app&#x2F;Contents&#x2F;MacOS&#x2F;Google\ Chrome&#39;;</span><br><span class="line"></span><br><span class="line">(async () &#x3D;&gt; &#123;</span><br><span class="line">    const browser &#x3D; await puppeteer.launch(&#123;</span><br><span class="line">        &#x2F;&#x2F; 关闭headless模式, 会打开浏览器</span><br><span class="line">        headless: false,</span><br><span class="line">        executablePath: execPath,</span><br><span class="line">        args: [&#39;--no-sandbox&#39;, &#39;--disable-dev-shm-usage&#39;],</span><br><span class="line">        &#x2F;&#x2F; 超时时间</span><br><span class="line">        timeout: 30000,</span><br><span class="line">    &#125;);</span><br><span class="line">    const page &#x3D; await browser.newPage();</span><br><span class="line">    await page.setViewport(&#123;</span><br><span class="line">        width: 1280,</span><br><span class="line">        height: 800,</span><br><span class="line">        &#x2F;&#x2F; deviceScaleFactor: 1,</span><br><span class="line">        &#x2F;&#x2F; isMobile: true</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    await page.goto(&#39;https:&#x2F;&#x2F;www.cnblogs.com&#x2F;&#39;, &#123; waitUntil: &#39;domcontentloaded&#39; &#125;);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; wait for some seconds</span><br><span class="line">    await page.waitFor(3000);</span><br><span class="line"></span><br><span class="line">    let title &#x3D; await page.title();</span><br><span class="line">    console.log(title);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 截屏</span><br><span class="line">    await page.screenshot(&#123; path: &#39;test.png&#39;, fullPage: true &#125;);</span><br><span class="line"></span><br><span class="line">    await browser.close();</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>

<p>执行 <code>node get_png.js</code> 看效果。</p>
<hr>
<h4 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h4><h5 id="ERR-NAME-RESOLUTION-FAILED"><a href="#ERR-NAME-RESOLUTION-FAILED" class="headerlink" title="ERR_NAME_RESOLUTION_FAILED"></a>ERR_NAME_RESOLUTION_FAILED</h5><p>使用 <code>puppeteer</code> 测试时报错：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2019-04-07 19:41:50: received 12260073</span><br><span class="line">2019-04-07 19:41:50: https:&#x2F;&#x2F;item.jd.com&#x2F;12260073.html</span><br><span class="line">2019-04-07 19:41:56: the task data for 12260073 get result error:  Error: net::ERR_NAME_RESOLUTION_FAILED at https:&#x2F;&#x2F;item.jd.com&#x2F;12260073.html</span><br><span class="line">2019-04-07 19:41:56:     at navigate (&#x2F;app&#x2F;node_modules&#x2F;puppeteer-core&#x2F;lib&#x2F;FrameManager.js:101:37)</span><br><span class="line">2019-04-07 19:41:56:     at processTicksAndRejections (internal&#x2F;process&#x2F;task_queues.js:86:5)</span><br><span class="line">2019-04-07 19:41:56:   -- ASYNC --</span><br><span class="line">2019-04-07 19:41:56:     at Frame.&lt;anonymous&gt; (&#x2F;app&#x2F;node_modules&#x2F;puppeteer-core&#x2F;lib&#x2F;helper.js:110:27)</span><br><span class="line">2019-04-07 19:41:56:     at Page.goto (&#x2F;app&#x2F;node_modules&#x2F;puppeteer-core&#x2F;lib&#x2F;Page.js:656:49)</span><br><span class="line">2019-04-07 19:41:56:     at Page.&lt;anonymous&gt; (&#x2F;app&#x2F;node_modules&#x2F;puppeteer-core&#x2F;lib&#x2F;helper.js:111:23)</span><br><span class="line">2019-04-07 19:41:56:     at Object.runPuppet (&#x2F;app&#x2F;src&#x2F;puppet.js:51:16)</span><br><span class="line">2019-04-07 19:41:56:     at processTicksAndRejections (internal&#x2F;process&#x2F;task_queues.js:86:5)</span><br></pre></td></tr></table></figure>

<p>找到一种说法：设置 <code>UserAgent</code> ，如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(async function main() &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        const browser &#x3D; await puppeteer.launch(&#123;headless: true&#125;);</span><br><span class="line">        const page &#x3D; await browser.newPage();</span><br><span class="line">        await page.setUserAgent(&#39;Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;68.0.3419.0 Safari&#x2F;537.36&#39;);</span><br><span class="line">        await page.goto(&#39;http:&#x2F;&#x2F;example.com&#39;);</span><br><span class="line">         &#x2F;&#x2F;your code</span><br><span class="line">         await browser.close();</span><br><span class="line">    &#125;</span><br><span class="line">    catch(e)&#123;</span><br><span class="line">        console.log(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>

<ul>
<li>参考 <a href="https://github.com/GoogleChrome/puppeteer/issues/1477#issuecomment-437568281" target="_blank" rel="noopener">page.goto() method generates <code>Error: net::ERR_CONNECTION_RESET</code> error · Issue #1477 · GoogleChrome/puppeteer</a></li>
</ul>
<p>经测试观察，添加了 <code>UserAgent</code> 设置后确实不会报错了。</p>
<h5 id="Promise中的console-log"><a href="#Promise中的console-log" class="headerlink" title="Promise中的console.log"></a>Promise中的console.log</h5><p>在函数内有 <code>console.log(&#39;按f12,我出现在浏览器的console中，并不在node命令行&#39;)</code></p>
<p>你会发现node命令行看不到这句话，而在Chromium的console中看见。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const result &#x3D; await page.$eval(selector, el &#x3D;&gt; &#123;</span><br><span class="line">    &#x2F;&#x2F;如果需要赋值要返回Promise</span><br><span class="line">    return new Promise(resolve &#x3D;&gt; &#123;</span><br><span class="line">        &#x2F;&#x2F;...一波骚操作</span><br><span class="line">        &#x2F;&#x2F;可以用Dom api啦</span><br><span class="line">        reslove(obj)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br><span class="line">await iframe.$$eval(selector, el &#x3D;&gt; &#123;...&#125;);</span><br></pre></td></tr></table></figure>

<p>在page.evaluate中用console是不能在node命令行打印出来的，不过有了监听事件就可以改变这个规则了。也可以在监听事件里面做容错处理。</p>
<p>如下的方式实现监听事件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">page.on(&#39;console&#39;, msg &#x3D;&gt; &#123;</span><br><span class="line">    console.log(msg);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li>参考 <a href="https://juejin.im/post/5af6876b518825426726218f" target="_blank" rel="noopener">我常用的puppeteer爬虫api - 掘金</a></li>
</ul>
<hr>
<h4 id="Docker镜像"><a href="#Docker镜像" class="headerlink" title="Docker镜像"></a>Docker镜像</h4><p>为了部署的方便，我实现了 <code>puppeteer</code> 环境的Docker镜像，具体可查看：</p>
<ul>
<li><a href="https://github.com/leafney/alpine-puppeteer" target="_blank" rel="noopener">leafney/alpine-puppeteer: Alpine Docker Puppeteer Environment</a></li>
</ul>
<hr>
<h4 id="相关参考"><a href="#相关参考" class="headerlink" title="相关参考"></a>相关参考</h4><ul>
<li><a href="https://zhaoqize.github.io/puppeteer-api-zh_CN/" target="_blank" rel="noopener">Puppeteer v1.14.0</a></li>
<li><a href="https://juejin.im/post/5bbc96785188255c72286403#heading-4" target="_blank" rel="noopener">截图的诱惑：Docker部署Puppeteer项目 - 掘金</a> <strong>值的参考</strong></li>
<li><a href="https://juejin.im/post/5a506682f265da3e474435d9" target="_blank" rel="noopener">爬虫利器 Puppeteer 实战 - 掘金</a></li>
<li><a href="https://juejin.im/post/5ac20c9c5188255c620f3f88" target="_blank" rel="noopener">puppeteer初体验 - 掘金</a></li>
<li><a href="https://juejin.im/post/5b7a8e796fb9a01a0717b2b9" target="_blank" rel="noopener">「译」如何用 Node.Js 和 Puppeteer 爬取网页 - 掘金</a></li>
<li><a href="https://www.jianshu.com/p/873f0bb2c3e5" target="_blank" rel="noopener">手动下载 Chrome，解决 puppeteer 无法使用问题 - 简书</a></li>
</ul>
]]></content>
      <tags>
        <tag>数据抓取</tag>
        <tag>Puppeteer</tag>
      </tags>
  </entry>
  <entry>
    <title>通过Docker部署Nodejs项目产生的一些思考</title>
    <url>/2019/04/08/deploying-nodejs-applications-with-docker/</url>
    <content><![CDATA[<p>最近遇到动态页面数据抓取的需求，所以有在研究 <code>Puppeteer</code> 的使用方法。不过之前没有接触过 Nodejs，所以也是通过网上的几篇教程在不断的摸索和测试中一点点了解。</p>
<p>也可以说是自己习惯了但凡遇到一个项目都想要把它Docker容器化来便于后续的操作，也就顺便研究了一下Nodejs项目的Docker化部署。</p>
<p>期间一些小的思考，随手记录一下。</p>
<h4 id="第一版Dockerfile"><a href="#第一版Dockerfile" class="headerlink" title="第一版Dockerfile"></a>第一版Dockerfile</h4><p>从网上搜索了一些通过docker部署nodejs项目的文章，其中大部分的 <code>Dockerfile</code> 文件写法都如下面的方式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">FROM node:11-alpine</span><br><span class="line">LABEL maintainer&#x3D;&quot;leafney &lt;babycoolzx@126.com&gt;&quot;</span><br><span class="line"></span><br><span class="line"># 设置国内阿里云镜像站、安装chromium 68、文泉驿免费中文字体等依赖库</span><br><span class="line">RUN echo &quot;https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;alpine&#x2F;v3.9&#x2F;main&#x2F;&quot; &gt; &#x2F;etc&#x2F;apk&#x2F;repositories &amp;&amp; \</span><br><span class="line">    echo &quot;https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;alpine&#x2F;v3.9&#x2F;community&#x2F;&quot; &gt;&gt; &#x2F;etc&#x2F;apk&#x2F;repositories &amp;&amp; \</span><br><span class="line">    echo &quot;https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;alpine&#x2F;edge&#x2F;testing&#x2F;&quot; &gt;&gt; &#x2F;etc&#x2F;apk&#x2F;repositories &amp;&amp; \</span><br><span class="line">    apk -U --no-cache update &amp;&amp; \</span><br><span class="line">    apk -U --no-cache --allow-untrusted add tzdata chromium ttf-freefont wqy-zenhei ca-certificates &amp;&amp; \</span><br><span class="line">    ln -sf &#x2F;usr&#x2F;share&#x2F;zoneinfo&#x2F;Asia&#x2F;Shanghai &#x2F;etc&#x2F;localtime &amp;&amp; \</span><br><span class="line">    echo &quot;Asia&#x2F;Shanghai&quot; &gt; &#x2F;etc&#x2F;timezone &amp;&amp; \</span><br><span class="line">    mkdir -p &#x2F;logs &amp;&amp; \</span><br><span class="line">    rm -rf &#x2F;var&#x2F;cache&#x2F;apk&#x2F;*</span><br><span class="line"></span><br><span class="line">WORKDIR &#x2F;app</span><br><span class="line"></span><br><span class="line"># 复制宿主机当前路径下所有文件到docker的工作目录</span><br><span class="line">COPY . &#x2F;app</span><br><span class="line"></span><br><span class="line">RUN npm config set registry &#39;https:&#x2F;&#x2F;registry.npm.taobao.org&#39; &amp;&amp; \</span><br><span class="line">    yarn config set registry &#39;https:&#x2F;&#x2F;registry.npm.taobao.org&#39; &amp;&amp; \</span><br><span class="line">    yarn global add pm2 &amp;&amp; \</span><br><span class="line">    yarn install &amp;&amp; \</span><br><span class="line">    yarn cache clean</span><br><span class="line"></span><br><span class="line">VOLUME [&quot;&#x2F;logs&quot;]</span><br><span class="line"></span><br><span class="line"># Start pm2.json process file</span><br><span class="line">CMD [&quot;pm2-runtime&quot;, &quot;start&quot;, &quot;ecosystem.config.js&quot;]</span><br></pre></td></tr></table></figure>

<p>一般的项目目录结构如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">|-- node_app</span><br><span class="line">    -- src</span><br><span class="line">        -- index.js</span><br><span class="line">    -- package.json</span><br><span class="line">    -- ecosystem.config.js</span><br><span class="line">    -- Dockerfile</span><br></pre></td></tr></table></figure>

<p>按照上面的 <code>Dockerfile</code> 文件操作步骤，其中关键的一步：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 复制宿主机当前路径下所有文件到docker的工作目录</span><br><span class="line">COPY . &#x2F;app</span><br></pre></td></tr></table></figure>

<p>表示将 <code>node_app</code> 项目目录下的所有文件拷贝到了Docker镜像中，然后执行 <code>yarn install</code> 来安装所有依赖包，最后通过 <code>pm2</code> 启动项目。之后基于该镜像来构建容器直接运行即可。</p>
<p>那么问题来了，当我的项目代码有更新后需要重新上线新版本时，要如何操作呢？</p>
<p>按照上面的 <code>Dockerfile</code> ，操作步骤应该是：</p>
<ol>
<li>停止容器，删除容器</li>
<li>从git拉取最新项目代码</li>
<li>重新 <code>docker build</code> 镜像，同时把代码打包到镜像中</li>
<li>通过新镜像创建容器，并启动容器运行</li>
</ol>
<p>过程似乎很简单，但细想一下，每次一有代码更新，都需要重新来构建镜像。那如果每次的更新都是一些比较小的改动呢？相比之下重新构建镜像所耗费的时间就比较长了。</p>
<p>更严重的是，每一次重新构建镜像，之前可用的镜像就直接作废了，如果不及时删除，会占用很大的硬盘空间。</p>
<p>基于以上诸多的问题，我们来考虑如何优化？</p>
<hr>
<h4 id="第二版Dockerfile"><a href="#第二版Dockerfile" class="headerlink" title="第二版Dockerfile"></a>第二版Dockerfile</h4><p>那么，在我看来，理想状态的操作应该是这样的：</p>
<ol>
<li>停止容器</li>
<li>从git拉取最新项目代码</li>
<li>重启容器</li>
</ol>
<p>That’t all! 就是这么简单。</p>
<p>操作非常的简单明了，那看一下如何修改上面第一版的 <code>Dockerfile</code> 文件吧：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">FROM node:11-alpine</span><br><span class="line">LABEL maintainer&#x3D;&quot;leafney &lt;babycoolzx@126.com&gt;&quot;</span><br><span class="line"></span><br><span class="line"># 在国内由于网络原因，软件下载比较慢，所以加入了国内的软件源以加速构建</span><br><span class="line"># 设置国内阿里云镜像站，安装chromium、文泉驿免费中文字体等依赖库，配置npm和yarn的taobao仓库</span><br><span class="line"></span><br><span class="line">RUN echo &quot;https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;alpine&#x2F;v3.9&#x2F;main&#x2F;&quot; &gt; &#x2F;etc&#x2F;apk&#x2F;repositories &amp;&amp; \</span><br><span class="line">    echo &quot;https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;alpine&#x2F;v3.9&#x2F;community&#x2F;&quot; &gt;&gt; &#x2F;etc&#x2F;apk&#x2F;repositories &amp;&amp; \</span><br><span class="line">    echo &quot;https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;alpine&#x2F;edge&#x2F;testing&#x2F;&quot; &gt;&gt; &#x2F;etc&#x2F;apk&#x2F;repositories &amp;&amp; \</span><br><span class="line">    apk add -U --no-cache --allow-untrusted tzdata chromium ttf-freefont wqy-zenhei ca-certificates &amp;&amp; \</span><br><span class="line">    mkdir -p &#x2F;app &#x2F;logs &amp;&amp; \</span><br><span class="line">    npm config set registry &#39;https:&#x2F;&#x2F;registry.npm.taobao.org&#39; &amp;&amp; \</span><br><span class="line">    yarn config set registry &#39;https:&#x2F;&#x2F;registry.npm.taobao.org&#39; &amp;&amp; \</span><br><span class="line">    yarn global add pm2 &amp;&amp; \</span><br><span class="line">    yarn cache clean &amp;&amp; \</span><br><span class="line">    rm -rf &#x2F;var&#x2F;cache&#x2F;apk&#x2F;*</span><br><span class="line"></span><br><span class="line">COPY .&#x2F;startup.sh &#x2F;usr&#x2F;local&#x2F;bin&#x2F;</span><br><span class="line">RUN chmod +x usr&#x2F;local&#x2F;bin&#x2F;startup.sh</span><br><span class="line"></span><br><span class="line">WORKDIR &#x2F;app</span><br><span class="line">VOLUME [&quot;&#x2F;app&quot;]</span><br><span class="line"></span><br><span class="line">EXPOSE 8000</span><br><span class="line">CMD [ &quot;startup.sh&quot; ]</span><br></pre></td></tr></table></figure>

<p><code>startup.sh</code> :</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;sh</span><br><span class="line">set -e</span><br><span class="line"></span><br><span class="line">WDir&#x3D;&#x2F;app</span><br><span class="line"></span><br><span class="line">if [ &quot;$(ls -A $&#123;WDir&#125;)&quot; ]; then</span><br><span class="line">    echo &quot;[i] ***** dir &#x2F;app have files,so start init. *****&quot;</span><br><span class="line"></span><br><span class="line">    echo &quot;[i] ***** yarn install *****&quot;</span><br><span class="line">    yarn install</span><br><span class="line">    </span><br><span class="line">    echo &quot;[i] ***** pm2 start *****&quot;</span><br><span class="line">    pm2-runtime start ecosystem.config.js</span><br><span class="line">else</span><br><span class="line">    echo &quot;[e] ***** dir &#x2F;app is empty,so can not run. *****&quot;</span><br><span class="line"></span><br><span class="line">    echo &quot;[i] ***** Please copy project files to VOLUME for &#x2F;app and then restart docker container *****&quot;</span><br><span class="line">    node</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<p>总体来说，改动的思路就是：将不需要变化的那些操作打包进docker镜像中，而需要经常改动的操作如 更新项目代码，执行 <code>yarn install</code> 安装新的依赖包等，都放到 <code>startup.sh</code> 中。而对于更复杂的操作，后续可以基于该镜像直接做扩展。</p>
<p>另外，这里使用 <code>yarn install</code> 而没有用 <code>npm install</code> 的一个优势是 如果你的 <code>package.json</code> 文件在更新时没有变化，<code>yarn install</code> 也只会执行一次，后续的操作都是读取cache缓存了，所以后续的代码更新操作也就非常快速了。</p>
<p>具体关于 <code>yarn</code> 和 <code>npm</code> 的区别，这里不再详细展开说明。</p>
<hr>
<h4 id="进一步优化"><a href="#进一步优化" class="headerlink" title="进一步优化"></a>进一步优化</h4><p>上面的操作虽说已经很简便了，但每次更新代码的时候还是需要重启一下容器才能应用上最新的改动。那还有没有优化的空间呢？</p>
<p>答案是 当然。</p>
<p>一般的Nodejs项目我们可以通过 <code>pm2</code> 来管理和监控进程，保证node进程持续运行或崩溃时自动重启。而 <code>pm2</code> 的 <code>watch</code> 参数可以监听应用目录的变化，一旦发生变化，就会自动重启。我们可以利用这个功能来实现改动代码的自动更新效果。</p>
<p>在 <code>pm2</code> 的配置文件中增加如下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;watch&quot;: [&quot;server&quot;, &quot;client&quot;],</span><br><span class="line">  &quot;ignore_watch&quot; : [&quot;node_modules&quot;, &quot;client&#x2F;img&quot;],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>watch</code> 参数默认情况下为 <code>false</code> ,可以设置需要监听改动的文件或目录。在 <code>ignore_watch</code> 参数中设置排除监听改动的文件或目录。</p>
<p>这样，只要监听到代码有改动，<code>pm2</code> 就会自动重启。对于项目更新的操作我们需要做的也就只有一项 <strong>从git拉取最新项目代码</strong> 而已了。</p>
<hr>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>其实无论是第一种的每次生成镜像还是第三种更加灵活的自动重启，具体如何应用还是需要看所对应的需求而言的，并不能一味的评判孰优孰劣。</p>
<p>我实现的Docker镜像地址：<a href="https://hub.docker.com/r/leafney/alpine-nodejs" target="_blank" rel="noopener">leafney/alpine-nodejs - Docker Hub</a></p>
<p>简单的实现了一个Nodejs项目的Docker镜像，如有考虑不到的地方，欢迎大家提出建议和讨论。</p>
<hr>
<h4 id="相关参考"><a href="#相关参考" class="headerlink" title="相关参考"></a>相关参考</h4><ul>
<li><a href="http://pm2.keymetrics.io/docs/usage/watch-and-restart/" target="_blank" rel="noopener">PM2 - Watch &amp; Restart</a></li>
</ul>
]]></content>
      <tags>
        <tag>Docker</tag>
        <tag>Nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>关于Python依赖包文件requirements</title>
    <url>/2019/03/22/requirements-for-python/</url>
    <content><![CDATA[<p>Python项目中的依赖包一般通过 <code>requirements.txt</code> 来记录。</p>
<h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>一般情况下我们都是通过命令 <code>pip freeze &gt; requirements.txt</code> 来生成项目依赖文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">amqp&#x3D;&#x3D;2.4.2</span><br><span class="line">aniso8601&#x3D;&#x3D;6.0.0</span><br><span class="line">billiard&#x3D;&#x3D;3.5.0.5</span><br><span class="line">celery&#x3D;&#x3D;4.2.2</span><br><span class="line">certifi&#x3D;&#x3D;2019.3.9</span><br><span class="line">chardet&#x3D;&#x3D;3.0.4</span><br><span class="line">Click&#x3D;&#x3D;7.0</span><br><span class="line">Flask&#x3D;&#x3D;1.0.2</span><br><span class="line">Flask-RESTful&#x3D;&#x3D;0.3.7</span><br><span class="line">Flask-Script&#x3D;&#x3D;2.0.6</span><br><span class="line">idna&#x3D;&#x3D;2.8</span><br><span class="line">itsdangerous&#x3D;&#x3D;1.1.0</span><br><span class="line">Jinja2&#x3D;&#x3D;2.10</span><br><span class="line">kombu&#x3D;&#x3D;4.3.0</span><br><span class="line">MarkupSafe&#x3D;&#x3D;1.1.1</span><br><span class="line">pytz&#x3D;&#x3D;2018.9</span><br><span class="line">requests&#x3D;&#x3D;2.21.0</span><br><span class="line">six&#x3D;&#x3D;1.12.0</span><br><span class="line">urllib3&#x3D;&#x3D;1.24.1</span><br><span class="line">vine&#x3D;&#x3D;1.3.0</span><br><span class="line">Werkzeug&#x3D;&#x3D;0.15.0</span><br></pre></td></tr></table></figure>

<p>但看到这么多的依赖包不禁要产生一些疑问了：<strong>难道这些都是我这个项目需要的依赖包吗？？？</strong></p>
<p>查看当前环境下安装的所有依赖包：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜ pip list</span><br><span class="line">Package       Version </span><br><span class="line">------------- --------</span><br><span class="line">amqp          2.4.2   </span><br><span class="line">aniso8601     6.0.0   </span><br><span class="line">billiard      3.5.0.5 </span><br><span class="line">celery        4.2.2   </span><br><span class="line">certifi       2019.3.9</span><br><span class="line">chardet       3.0.4   </span><br><span class="line">Click         7.0     </span><br><span class="line">Flask         1.0.2   </span><br><span class="line">Flask-RESTful 0.3.7   </span><br><span class="line">Flask-Script  2.0.6   </span><br><span class="line">idna          2.8     </span><br><span class="line">itsdangerous  1.1.0   </span><br><span class="line">Jinja2        2.10    </span><br><span class="line">kombu         4.3.0   </span><br><span class="line">MarkupSafe    1.1.1   </span><br><span class="line">pip           19.0.3  </span><br><span class="line">pytz          2018.9  </span><br><span class="line">requests      2.21.0  </span><br><span class="line">setuptools    18.1    </span><br><span class="line">six           1.12.0  </span><br><span class="line">urllib3       1.24.1  </span><br><span class="line">vine          1.3.0   </span><br><span class="line">Werkzeug      0.15.0</span><br></pre></td></tr></table></figure>

<p>可以看到是一样的。也就是说通过 <code>pip freeze</code> 生成的是当前环境下的所有依赖包，而不是当前项目所需的依赖包。</p>
<h4 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h4><p>要想生成当前项目所需的依赖包文件列表，可以通过 <code>pipreqs</code> 来实现。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ pip install pipreqs</span><br></pre></td></tr></table></figure>

<h5 id="命令介绍"><a href="#命令介绍" class="headerlink" title="命令介绍"></a>命令介绍</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜ pipreqs --help</span><br><span class="line">pipreqs - Generate pip requirements.txt file based on imports</span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line">    pipreqs [options] &lt;path&gt;</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">    --use-local           Use ONLY local package info instead of querying PyPI</span><br><span class="line">    --pypi-server &lt;url&gt;   Use custom PyPi server</span><br><span class="line">    --proxy &lt;url&gt;         Use Proxy, parameter will be passed to requests library. You can also just set the</span><br><span class="line">                          environments parameter in your terminal:</span><br><span class="line">                          $ export HTTP_PROXY&#x3D;&quot;http:&#x2F;&#x2F;10.10.1.10:3128&quot;</span><br><span class="line">                          $ export HTTPS_PROXY&#x3D;&quot;https:&#x2F;&#x2F;10.10.1.10:1080&quot;</span><br><span class="line">    --debug               Print debug information</span><br><span class="line">    --ignore &lt;dirs&gt;...    Ignore extra directories, each separated by a comma</span><br><span class="line">    --encoding &lt;charset&gt;  Use encoding parameter for file open</span><br><span class="line">    --savepath &lt;file&gt;     Save the list of requirements in the given file</span><br><span class="line">    --print               Output the list of requirements in the standard output</span><br><span class="line">    --force               Overwrite existing requirements.txt</span><br><span class="line">    --diff &lt;file&gt;         Compare modules in requirements.txt to project imports.</span><br><span class="line">    --clean &lt;file&gt;        Clean up requirements.txt by removing modules that are not imported in project.</span><br></pre></td></tr></table></figure>

<h5 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 查看当前项目所有的依赖包</span><br><span class="line">$ pipreqs --print .&#x2F;</span><br><span class="line"></span><br><span class="line"># 获取当前项目所需的依赖包并保存到默认的 requirements.txt </span><br><span class="line">$ pipreqs .&#x2F;</span><br><span class="line"></span><br><span class="line"># 获取当前项目所需的依赖包并保存到默认的 requirements.txt ，如果已存在则覆盖</span><br><span class="line">$ pipreqs --force .&#x2F;</span><br></pre></td></tr></table></figure>

<h4 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h4><p>由于我的项目下已经通过 <code>freeze</code> 命令生成了 <code>requirements.txt</code> 文件，所以需要执行如下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ pipreqs --force .&#x2F;</span><br></pre></td></tr></table></figure>

<p>之后，再查看：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Flask_Script&#x3D;&#x3D;2.0.6</span><br><span class="line">Flask_RESTful&#x3D;&#x3D;0.3.7</span><br><span class="line">Flask&#x3D;&#x3D;1.0.2</span><br><span class="line">celery&#x3D;&#x3D;4.2.2</span><br></pre></td></tr></table></figure>

<p>这才是当前项目真正需要的依赖包。</p>
<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ pip install -r requirements.txt</span><br></pre></td></tr></table></figure>

<hr>
<p>这算是一个小的注意事项吧！</p>
]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>磨刀不误砍柴工 -- Flutter开发技巧</title>
    <url>/2019/03/11/flutter-development-skills/</url>
    <content><![CDATA[<p>上一篇文章中我们配置好了Flutter的开发环境，可以选择 <code>VS Code</code>(以下简称<code>VS</code>) 或 <code>Android Studio</code>(以下简称<code>AS</code>) 其中任意一款工具来开发。</p>
<p>下面，我整理了这两款工具中常用的快捷键及一些技巧，以帮助大家在开发过程中提高效率。</p>
<hr>
<h4 id="StatelessWidget和StatefulWidget"><a href="#StatelessWidget和StatefulWidget" class="headerlink" title="StatelessWidget和StatefulWidget"></a>StatelessWidget和StatefulWidget</h4><h5 id="快速创建基于StatelessWidget和StatefulWidget的组件"><a href="#快速创建基于StatelessWidget和StatefulWidget的组件" class="headerlink" title="快速创建基于StatelessWidget和StatefulWidget的组件"></a>快速创建基于StatelessWidget和StatefulWidget的组件</h5><p>只需要输入 <code>stless</code> 就可以创建一个StatelessWidget。</p>
<p>只需要输入 <code>stful</code> 就可以创建一个StatefulWidget。</p>
<table>
<thead>
<tr>
<th>功能</th>
<th>VS Code</th>
<th>Android Studio</th>
</tr>
</thead>
<tbody><tr>
<td>StatelessWidget</td>
<td><code>stless</code> + Tab</td>
<td><code>stless</code> + Tab / <code>stless</code> + Enter</td>
</tr>
<tr>
<td>StatefulWidget</td>
<td><code>stful</code> + Tab</td>
<td><code>stful</code> + Tab / <code>stful</code> + Enter</td>
</tr>
</tbody></table>
<h5 id="将-StatelessWidget-改成-StatefulWidget"><a href="#将-StatelessWidget-改成-StatefulWidget" class="headerlink" title="将 StatelessWidget 改成 StatefulWidget"></a>将 StatelessWidget 改成 StatefulWidget</h5><p>在 <code>AS</code> 中，将光标放在 <code>StatelessWidget</code> 上，按住 <code>Alt+Enter</code> (in Mac is <code>Option+Enter</code>) ，然后单击 <code>Convert to StatefulWidget</code> 将自动进行转换。</p>
<p>在 <code>VS Code</code> 中，将光标放在 <code>StatelessWidget</code> 上，按住 <code>Ctrl + .</code> (in Mac is <code>Cmd + .</code>) ，然后单击 <code>Convert to StatefulWidget</code> 将自动进行转换。</p>
<hr>
<h4 id="Alt-Enter-扩展选项"><a href="#Alt-Enter-扩展选项" class="headerlink" title="Alt+Enter 扩展选项"></a>Alt+Enter 扩展选项</h4><h5 id="AS"><a href="#AS" class="headerlink" title="AS"></a>AS</h5><ul>
<li>Win: <code>单击任意组件名称 + Alt + Enter</code></li>
<li>Mac: <code>单击任意组件名称 + Option + Enter</code></li>
</ul>
<h5 id="VS-Code"><a href="#VS-Code" class="headerlink" title="VS Code"></a>VS Code</h5><ul>
<li>Win: <code>单击任意组件名称 + Ctrl + .</code></li>
<li>Mac: <code>单击任意组件名称 + Command + .</code></li>
</ul>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20190225205422.png" alt=""></p>
<hr>
<h4 id="将代码块提取到方法中-Extract-Method"><a href="#将代码块提取到方法中-Extract-Method" class="headerlink" title="将代码块提取到方法中 Extract Method"></a>将代码块提取到方法中 Extract Method</h4><p>提取一段代码块，生成一个新的方法。当你发现某个方法里面过于复杂，需要将某一段代码提取成单独的方法时，该技巧是很有用的。</p>
<h5 id="AS-1"><a href="#AS-1" class="headerlink" title="AS"></a>AS</h5><p>在 <code>AS</code> 中，<code>选中代码段</code> – <code>Menu</code> – <code>Refactor</code> – <code>Extract</code> – <code>Method...</code> ：</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20190226122412.png" alt=""></p>
<p>对应的快捷键是：<br>    * Win: <code>选中代码段</code> + <code>Ctrl + Alt + M</code><br>    * Mac: <code>选中代码段</code> + <code>Command + Option + M</code></p>
<ul>
<li><a href="https://blog.51cto.com/31329846/1845347" target="_blank" rel="noopener">最强 Android Studio 使用小技巧和快捷键-设计师-51CTO博客</a></li>
</ul>
<hr>
<h5 id="VS-Code-1"><a href="#VS-Code-1" class="headerlink" title="VS Code"></a>VS Code</h5><p>在 <code>VS Code</code> 中，<code>选中代码段</code> – <code>右键菜单</code> – <code>重构...</code> – <code>Extract Method</code> :</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20190226120402.png" alt=""></p>
<p>对应的快捷键：<br>    * Win: <code>选中代码段</code> + <code>Ctrl + .</code> + 选择 <code>Extract Method</code><br>    * Mac: <code>选中代码段</code> + <code>Command + .</code> + 选择 <code>Extract Method</code></p>
<p>参考：</p>
<ul>
<li><a href="https://dartcode.org/releases/v2-12/#extract-method-refactor" target="_blank" rel="noopener">v2.12 - Dart Code - Dart &amp; Flutter support for Visual Studio Code</a></li>
<li><a href="https://code.visualstudio.com/docs/editor/refactoring" target="_blank" rel="noopener">Refactoring source code in Visual Studio Code</a></li>
</ul>
<hr>
<h4 id="匹配括号高亮"><a href="#匹配括号高亮" class="headerlink" title="匹配括号高亮"></a>匹配括号高亮</h4><p>当代码量多了之后，想要找到某一部分代码时，通过匹配的括号来找是比较方便的。</p>
<h5 id="AS-2"><a href="#AS-2" class="headerlink" title="AS"></a>AS</h5><p>在 <code>AS</code> 中，默认支持匹配括号高亮：</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20190226103153.png" alt=""></p>
<h5 id="VS-Code-2"><a href="#VS-Code-2" class="headerlink" title="VS Code"></a>VS Code</h5><p>在 VS Code 中，默认的括号匹配比较简单：</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20190226104555.png" alt=""></p>
<p>当代码量多了之后，找起来让人看着有些眼晕。</p>
<p>这里，推荐一个比较好用的插件：<code>Bracket Pair Colorizer 2</code> :</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20190226104555.png" alt=""></p>
<p>安装之后，相邻的括号颜色不同，区分起来很明显。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20190226105411.png" alt=""></p>
<p>不过，这里我不太喜欢自带的这个匹配线，所以我就把它去掉了。在该插件的官方介绍中，可以看到是通过 <code>&quot;bracket-pair-colorizer-2.showHorizontalScopeLine&quot;</code> 类似的选项定义的，在 <code>用户设置</code> 中可以关闭这些。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20190226110223.png" alt=""></p>
<hr>
<h4 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h4><h5 id="AS-中快捷键"><a href="#AS-中快捷键" class="headerlink" title="AS 中快捷键"></a>AS 中快捷键</h5><p>格式化代码：<br>    * Win: <code>Ctrl +Alt + L</code><br>    * Mac: <code>Command + Option + L</code></p>
<p>快速选中整个小部件：<br>    * Win: <code>双击选中部件名称 + Ctrl + W</code><br>    * Mac: <code>双击选中部件名称 + Option + Up</code></p>
<p>部件操作（Alt + Enter）：<br>    * Win: <code>单击任意组件名称 + Alt + Enter</code><br>    * Mac: <code>单击任意组件名称 + Option + Enter</code></p>
<p>重命名：<br>    * <code>点击选中任意组件名称 + Shift + F6</code></p>
<p>查看组件源码:<br>    * Win:<br>        * <code>Ctrl + Click</code><br>        * <code>Ctrl + B</code><br>        * <code>F4</code><br>        * <code>Ctrl + Enter</code><br>    * Mac:<br>        * <code>Command + Click</code><br>        * <code>Command + B</code><br>        * <code>F4</code><br>        * <code>Command + Down</code></p>
<p>注意：我只找到了跳转过去的快捷键，但没找到跳转回来的快捷键。</p>
<p>查看 Widget 包含的属性：<br>    * Win: <code>单击任意组件名称 + Ctrl + Shift + I</code><br>    * Mac: <code>单击任意组件名称 + Command + Y</code></p>
<p>移除没用的 imports:<br>    * Win: <code>Ctrl + Alt + O</code><br>    * Mac: <code>Command + Option + O</code></p>
<p>上下移动行：<br>    * Win: <code>单击任意行 + Alt + Shift + Up/Down</code><br>    * Mac: <code>单击任意行 + Option + Shift + Up/Down</code></p>
<p>上下移动方法：<br>    * Win: <code>单击任意方法名称 + Ctrl + Shift + Up/Down</code><br>    * Mac: <code>单击任意方法名称 + Command + Shift + Up/Down</code></p>
<ul>
<li><a href="https://juejin.im/post/5c5d970e6fb9a049af6db7cd" target="_blank" rel="noopener">Flutter开发中常用的快捷键 - 掘金</a></li>
<li><a href="http://w4mxl.github.io/2019/02/12/flutter-ide-shortcuts-for-fast-development/" target="_blank" rel="noopener">提升 Flutter 开发效率的快捷键 | Wml’Blog</a></li>
<li><a href="https://blog.51cto.com/31329846/1845347" target="_blank" rel="noopener">最强 Android Studio 使用小技巧和快捷键-设计师-51CTO博客</a> <strong>⭐️⭐️⭐️</strong></li>
</ul>
<h5 id="VS-Code-中快捷键"><a href="#VS-Code-中快捷键" class="headerlink" title="VS Code 中快捷键"></a>VS Code 中快捷键</h5><p>我们知道 VS Code 的插件非常丰富。其中一款名为 <code>Awesome Flutter Snippets</code> 为我们整理了常用的方法和组件的快捷键操作。</p>
<hr>
<h4 id="VS-Code-调试-Flutter"><a href="#VS-Code-调试-Flutter" class="headerlink" title="VS Code 调试 Flutter"></a>VS Code 调试 Flutter</h4><h5 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h5><p>点击 <code>F5</code> 进入调试模式。<br>点击 <code>Shift + F5</code> 退出调试模式。</p>
<hr>
<h5 id="“Hot-Reload”-and-“Hot-Restart”"><a href="#“Hot-Reload”-and-“Hot-Restart”" class="headerlink" title="“Hot Reload” and “Hot Restart”"></a>“Hot Reload” and “Hot Restart”</h5><h6 id="调试模式下"><a href="#调试模式下" class="headerlink" title="调试模式下"></a>调试模式下</h6><p>Hot Reload:</p>
<p>保存后自动重载<br>    * Win: <code>Ctrl + S</code><br>    * Mac: <code>Command + S</code></p>
<p>点击调试菜单中的 <code>重载按钮</code> 或使用快捷键：<br>    * Win: <code>Ctrl + Shift + F5</code><br>    * Mac: <code>Command + Shift + F5</code></p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20190225140010.png" alt=""></p>
<p>Hot Restart:<br>    * Win: <code>Ctrl + F5</code><br>    * Mac: <code>Control + F5</code></p>
<ul>
<li><a href="https://github.com/Dart-Code/Dart-Code/issues/754" target="_blank" rel="noopener">How to do full reload? · Issue #754 · Dart-Code/Dart-Code</a></li>
<li><a href="https://dartcode.org/docs/key-bindings/#debug-key-bindings" target="_blank" rel="noopener">Key Bindings - Dart Code - Dart &amp; Flutter support for Visual Studio Code</a></li>
</ul>
<hr>
<h6 id="命令模式下"><a href="#命令模式下" class="headerlink" title="命令模式下"></a>命令模式下</h6><p>Hot Reload:<br>    * 在命令窗口输入 <code>r</code></p>
<p>Hot Restart:<br>    * 在命令窗口输入 <code>R</code></p>
<hr>
<h4 id="代码自动格式化"><a href="#代码自动格式化" class="headerlink" title="代码自动格式化"></a>代码自动格式化</h4><h5 id="AS-或-IntelliJ-IDE"><a href="#AS-或-IntelliJ-IDE" class="headerlink" title="AS 或 IntelliJ IDE"></a>AS 或 IntelliJ IDE</h5><h6 id="手动执行"><a href="#手动执行" class="headerlink" title="手动执行"></a>手动执行</h6><p>在代码窗口中，右键单击代码窗口并选择 <code>Reformat code with dartfmt</code> 菜单，实现自动格式化代码。</p>
<p>相应的快捷键：<br>    * Win: <code>Ctrl + Alt + L</code><br>    * Mac: <code>Command + Option + L</code></p>
<h6 id="自动执行"><a href="#自动执行" class="headerlink" title="自动执行"></a>自动执行</h6><p>选择菜单 <code>Android Studio</code> – <code>Preferences</code> – 搜索 <code>flutter</code> – 在 <code>Languages &amp; Frameworks</code> 中的 <code>Flutter</code> 右侧界面中，找到 <code>General</code> 选项。</p>
<p>勾选 <code>Format code on save</code> 一项。也可以将子项 <code>Organize imports on save</code> 同时选中。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20190225202632.png" alt=""></p>
<p>这里我使用的 <code>Android Studio</code> 版本为 <code>Android Studio 3.3.1</code> 。其他版本可能位置有变化。</p>
<hr>
<h5 id="VS-Code-3"><a href="#VS-Code-3" class="headerlink" title="VS Code"></a>VS Code</h5><h6 id="手动执行-1"><a href="#手动执行-1" class="headerlink" title="手动执行"></a>手动执行</h6><p>在 <code>VS Code</code> 代码界面中，右键单击代码窗口并选择 <code>Format Document（格式化文档）</code> 菜单，实现自动格式化代码。</p>
<p>相应的快捷键：<br>    * Win: <code>Alt + Shift + F</code><br>    * Mac: <code>Option + Shift + F</code></p>
<h6 id="自动执行-1"><a href="#自动执行-1" class="headerlink" title="自动执行"></a>自动执行</h6><p>相比起手动执行的方式，更多人都会选择通过在保存文档时来实现代码的自动格式化。</p>
<p>在 <code>VS Code</code> 界面中，通过快捷键 <code>Ctrl + ,</code> ( <code>Command + ,</code> in Mac) 打开 <code>设置</code> 窗口，或者通过 <code>文件</code> – <code>首选项</code> – <code>设置</code>（ <code>Code</code> – <code>首选项</code> – <code>设置</code> in Mac） 打开 <code>设置</code> 窗口。在搜索栏中输入 <code>edit:formatonsave</code> 打开设置界面。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20190225194726.png" alt=""></p>
<p>默认情况下，在保存文件时不会自动格式化文件。</p>
<p>当勾选这一项后，表示在格式化程序可用的前提下，保存文件时会自动格式化。</p>
<p>也可以选择下面的 <code>在 settings.json 中编辑</code> 一项，来自定义该项。</p>
<p>当勾选上面的选项后，默认是在 <code>settings.json</code> 中添加了一行:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;editor.formatOnSave&quot;: true,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>默认为 <code>false</code>。</p>
<h6 id="个性化设置"><a href="#个性化设置" class="headerlink" title="个性化设置"></a>个性化设置</h6><p>比如，我想只在 <code>Dart</code> 代码中实现保存时自动格式化的操作，那么可以这样来设置：编辑 <code>settings.json</code> 文件，增加如下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;editor.formatOnSave&quot;: false,</span><br><span class="line">    &quot;[dart]&quot;:&#123;</span><br><span class="line">        &quot;editor.formatOnSave&quot;: true,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再比如，我想在所有语言下都支持保存时自动格式化的操作，但只在 <code>javascript</code> 代码中不支持保存时自动格式化的功能，那么可以通过如下的方式来设置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;editor.formatOnSave&quot;: true,</span><br><span class="line">    &quot;[javascript]&quot;: &#123;</span><br><span class="line">        &quot;editor.formatOnSave&quot;: false,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可见，<code>VS Code</code> 的设置是非常灵活的。</p>
<h5 id="相关参考"><a href="#相关参考" class="headerlink" title="相关参考"></a>相关参考</h5><ul>
<li><a href="https://flutterchina.club/formatting/" target="_blank" rel="noopener">格式化Flutter代码 - Flutter中文网</a></li>
</ul>
<hr>
<p>至此，关于工具的一些使用技巧也就介绍完了。</p>
]]></content>
      <categories>
        <category>Flutter之旅</category>
      </categories>
      <tags>
        <tag>Flutter</tag>
      </tags>
  </entry>
  <entry>
    <title>兵马未动，粮草先行 -- Flutter开发环境配置</title>
    <url>/2019/03/08/flutter-development-environment-configuration/</url>
    <content><![CDATA[<p>对于Flutter开发环境的配置，官方网站 <a href="https://flutter.dev/docs/get-started/install" target="_blank" rel="noopener">Install - Flutter</a> 中已经介绍的非常详细了，只要按照步骤来操作即可。</p>
<p>我也是按照官方的教程来操作的，这里只是做一个记录。另外，我的操作并不是完全按照官方的流程来的，这里也仅仅是给各位做一个参考。</p>
<hr>
<h4 id="关于系统"><a href="#关于系统" class="headerlink" title="关于系统"></a>关于系统</h4><p>我的电脑是 Mac，系统版本为 <code>macOS Mojave 10.14.3</code>。</p>
<h4 id="配置Flutter-SDK"><a href="#配置Flutter-SDK" class="headerlink" title="配置Flutter SDK"></a>配置Flutter SDK</h4><p>我安装的时候Flutter的版本还是 <code>v1.0.0</code> ，今天看已经更新到 <code>v1.2.1</code> 了。不得不说Flutter的更新是真给力。</p>
<h5 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h5><p>从网站地址 <a href="https://flutter.dev/docs/get-started/install/macos" target="_blank" rel="noopener">MacOS install - Flutter</a> 下载 <code>Flutter SDK</code> 安装包。</p>
<p>我将 <code>flutter sdk</code> 安装在 <code>~/sdk</code> (或者写成 <code>$HOME/sdk</code>) 目录下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cd ~&#x2F;sdk</span><br><span class="line">$ unzip ~&#x2F;Downloads&#x2F;flutter_macos_v1.0.0-stable.zip</span><br></pre></td></tr></table></figure>

<h5 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h5><p>添加 <code>flutter</code> 相关工具到环境变量 <code>path</code> 中:</p>
<p>编辑 <code>$HOME/.bash_profile</code> 文件，在底部添加如下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export PATH&#x3D;&quot;$PATH:[PATH_TO_FLUTTER_GIT_DIRECTORY]&#x2F;flutter&#x2F;bin&quot;</span><br></pre></td></tr></table></figure>

<p>其中的 <code>[PATH_TO_FLUTTER_GIT_DIRECTORY]</code> 表示你解压 <code>flutter sdk</code> 的目录，我这里就是 <code>~/sdk</code>。即：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export PATH&#x3D;&quot;$PATH:~&#x2F;sdk&#x2F;flutter&#x2F;bin&quot;</span><br></pre></td></tr></table></figure>

<hr>
<p>另外，在国内由于 <code>众所周知</code> 的原因，还需要设置一下pub源，用以下载相关的依赖文件。其中 <code>PUB_HOSTED_URL</code> 和 <code>FLUTTER_STORAGE_BASE_URL</code> 是google为国内开发者搭建的临时镜像。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export PUB_HOSTED_URL&#x3D;https:&#x2F;&#x2F;pub.flutter-io.cn</span><br><span class="line">export FLUTTER_STORAGE_BASE_URL&#x3D;https:&#x2F;&#x2F;storage.flutter-io.cn</span><br></pre></td></tr></table></figure>

<p>所以，需要添加的就是上面的三条命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export PUB_HOSTED_URL&#x3D;https:&#x2F;&#x2F;pub.flutter-io.cn</span><br><span class="line">export FLUTTER_STORAGE_BASE_URL&#x3D;https:&#x2F;&#x2F;storage.flutter-io.cn</span><br><span class="line">export PATH&#x3D;[PATH_TO_FLUTTER_GIT_DIRECTORY]&#x2F;flutter&#x2F;bin:$PATH</span><br></pre></td></tr></table></figure>

<p>其中 <code>PATH_TO_FLUTTER_GIT_DIRECTORY</code> 为你 <code>flutter sdk</code> 的路径。如我这里就是改成(推荐用这种方式)：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export PATH&#x3D;$HOME&#x2F;sdk&#x2F;flutter&#x2F;bin:$PATH</span><br></pre></td></tr></table></figure>

<p>刷新bash:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ source $HOME&#x2F;.bash_profile</span><br></pre></td></tr></table></figure>

<p>如果使用的是 <code>zsh</code> ，则执行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ source $HOME&#x2F;.zshrc</span><br></pre></td></tr></table></figure>

<p>查看：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo $PATH</span><br></pre></td></tr></table></figure>

<p>验证是否配置成功：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flutter -h</span><br></pre></td></tr></table></figure>

<p><strong>2019-10-20 更新</strong>：最近在安装最新的 <code>flutter_1.9.1</code> 版本时发现，配置好上面的环境变量后，第一次运行 <code>flutter -h</code> 不会立即显示出下面的结果，就是我们通常所说的 <code>卡住了</code> 。观察发现在第一次执行 <code>flutter -h</code> 命令的时候会去执行一些后台的操作(比如git)，所以<strong>第一次</strong>执行的时候会需要等待一段时间。</p>
<p>这个时候应该能展示flutter的命令帮助：</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20190223120927.png" alt=""></p>
<hr>
<h4 id="检查flutter环境"><a href="#检查flutter环境" class="headerlink" title="检查flutter环境"></a>检查flutter环境</h4><p>在安装环境的过程中，Flutter官方提供了一个依赖检查的命令 <code>flutter doctor</code> ，可以查看到哪些依赖项或程序没有安装成功。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ flutter doctor</span><br></pre></td></tr></table></figure>

<p>另外，该命令的 <code>-v</code> 选项在开发过程中也非常有帮助，执行 <code>flutter doctor -v</code> 查看。</p>
<p><strong>第一次运行时间会有点长</strong>(所以。。。如果看到没反应的话千万别慌，等等就好了；另外，如果你是安装最新的flutter版本，在执行 <code>flutter -h</code> 时<code>卡住了</code>，那么在执行 <code>flutter doctor</code> 时则不会了)，它会去下载相关的依赖项并自行编译。执行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜ flutter doctor</span><br><span class="line">Doctor summary (to see all details, run flutter doctor -v):</span><br><span class="line">[✓] Flutter (Channel stable, v1.0.0, on Mac OS X 10.14.3 18D109, locale zh-Hans-CN)</span><br><span class="line">[!] Android toolchain - develop for Android devices</span><br><span class="line">    ✗ No valid Android SDK platforms found in &#x2F;usr&#x2F;local&#x2F;Caskroom&#x2F;android-platform-tools&#x2F;latest&#x2F;platforms. Directory was</span><br><span class="line">      empty.</span><br><span class="line">[!] iOS toolchain - develop for iOS devices (Xcode 10.1)</span><br><span class="line">    ✗ Xcode requires additional components to be installed in order to run.</span><br><span class="line">      Launch Xcode and install additional required components when prompted.</span><br><span class="line">    ✗ libimobiledevice and ideviceinstaller are not installed. To install with Brew, run:</span><br><span class="line">        brew update</span><br><span class="line">        brew install --HEAD usbmuxd</span><br><span class="line">        brew link usbmuxd</span><br><span class="line">        brew install --HEAD libimobiledevice</span><br><span class="line">        brew install ideviceinstaller</span><br><span class="line">    ✗ ios-deploy not installed. To install with Brew:</span><br><span class="line">        brew install ios-deploy</span><br><span class="line">    ✗ CocoaPods not installed.</span><br><span class="line">        CocoaPods is used to retrieve the iOS platform side&#39;s plugin code that responds to your plugin usage on the Dart</span><br><span class="line">        side.</span><br><span class="line">        Without resolving iOS dependencies with CocoaPods, plugins will not work on iOS.</span><br><span class="line">        For more info, see https:&#x2F;&#x2F;flutter.io&#x2F;platform-plugins</span><br><span class="line">      To install:</span><br><span class="line">        brew install cocoapods</span><br><span class="line">        pod setup</span><br><span class="line">[!] Android Studio (not installed)</span><br><span class="line">[!] VS Code (version 1.31.1)</span><br><span class="line">[!] Connected device</span><br><span class="line">    ! No devices available</span><br><span class="line"></span><br><span class="line">! Doctor found issues in 5 categories.</span><br></pre></td></tr></table></figure>

<p>通过上面的提示信息，可以看到 <code>Android toolchain</code> 或 <code>iOS toolchain</code> 是必须安装其一的。这里我是都要安装，毕竟两个平台都想要体验一下的。</p>
<p>开发工具呢除了之前 <code>官方</code> 的 <code>Android Studio</code> 和 <code>XCode</code> 之前，Flutter非常推荐通过轻量级的 <code>VS Code</code> 来进行开发。</p>
<hr>
<h4 id="配置VS-Code"><a href="#配置VS-Code" class="headerlink" title="配置VS Code"></a>配置VS Code</h4><p>安装VS Code ,安装1.20.1或更高版本.</p>
<h5 id="安装Flutter插件"><a href="#安装Flutter插件" class="headerlink" title="安装Flutter插件"></a>安装Flutter插件</h5><ol>
<li>启动 <code>VS Code</code></li>
<li>调用 <code>View &gt; Command Palette…</code></li>
<li>输入 <code>install</code>, 然后选择 <code>Extensions: Install Extension action</code></li>
<li>在搜索框输入 <code>flutter</code> , 在搜索结果列表中选择 <code>Flutter</code>, 然后点击 <code>Install</code>(会自动附带安装好 <code>Dart</code> 插件)</li>
<li>选择 <code>OK</code> 重新启动 <code>VS Code</code></li>
</ol>
<h5 id="通过Flutter-Doctor验证您的设置"><a href="#通过Flutter-Doctor验证您的设置" class="headerlink" title="通过Flutter Doctor验证您的设置"></a>通过Flutter Doctor验证您的设置</h5><ol>
<li>调用 <code>View &gt; Command Palette…</code></li>
<li>输入 <code>doctor</code>, 然后选择 <code>Flutter: Run Flutter Doctor</code> 选项</li>
<li>查看 “OUTPUT” 窗口中的输出是否有问题</li>
</ol>
<p>运行 <code>flutter doctor</code> 查看结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜ flutter doctor</span><br><span class="line">Doctor summary (to see all details, run flutter doctor -v):</span><br><span class="line">[✓] Flutter (Channel stable, v1.0.0, on Mac OS X 10.14.3 18D109, locale zh-Hans-CN)</span><br><span class="line">[!] Android toolchain - develop for Android devices</span><br><span class="line">    ✗ No valid Android SDK platforms found in &#x2F;usr&#x2F;local&#x2F;Caskroom&#x2F;android-platform-tools&#x2F;latest&#x2F;platforms. Directory was</span><br><span class="line">      empty.</span><br><span class="line">[!] iOS toolchain - develop for iOS devices (Xcode 10.1)</span><br><span class="line">    ✗ libimobiledevice and ideviceinstaller are not installed. To install with Brew, run:</span><br><span class="line">        brew update</span><br><span class="line">        brew install --HEAD usbmuxd</span><br><span class="line">        brew link usbmuxd</span><br><span class="line">        brew install --HEAD libimobiledevice</span><br><span class="line">        brew install ideviceinstaller</span><br><span class="line">    ✗ ios-deploy not installed. To install with Brew:</span><br><span class="line">        brew install ios-deploy</span><br><span class="line">    ✗ CocoaPods not installed.</span><br><span class="line">        CocoaPods is used to retrieve the iOS platform side&#39;s plugin code that responds to your plugin usage on the Dart</span><br><span class="line">        side.</span><br><span class="line">        Without resolving iOS dependencies with CocoaPods, plugins will not work on iOS.</span><br><span class="line">        For more info, see https:&#x2F;&#x2F;flutter.io&#x2F;platform-plugins</span><br><span class="line">      To install:</span><br><span class="line">        brew install cocoapods</span><br><span class="line">        pod setup</span><br><span class="line">[!] Android Studio (not installed)</span><br><span class="line">[✓] VS Code (version 1.31.1)</span><br><span class="line">[✓] Connected device (1 available)</span><br><span class="line"></span><br><span class="line">! Doctor found issues in 3 categories.</span><br></pre></td></tr></table></figure>

<p>可以看到 <code>[✓] VS Code (version 1.31.1)</code> 一项已经打钩了。</p>
<ul>
<li><a href="https://flutterchina.club/get-started/editor/#vscode" target="_blank" rel="noopener">起步: 配置编辑器 - Flutter中文网</a></li>
</ul>
<h5 id="创建Flutter项目"><a href="#创建Flutter项目" class="headerlink" title="创建Flutter项目"></a>创建Flutter项目</h5><p>通过 VS Code 创建Flutter项目非常简单。直接调出VS Code的命令模式 <code>Cmd(Control) + Shift + P</code> 或者选择菜单 <code>View &gt; Command Palette…</code> 输入 <code>flutter new</code> 选择 <code>Flutter: New Project</code> 选项，回车，输入项目目录名称，会让你选择项目保存目录，然后等待自动初始化项目。</p>
<hr>
<h4 id="Android环境配置"><a href="#Android环境配置" class="headerlink" title="Android环境配置"></a>Android环境配置</h4><p><code>Android toolchain</code> 中要求必须安装好 <code>Android SDK</code> ，而 <code>Android SDK</code> 的安装方法常见的有两种：</p>
<ol>
<li>通过安装 <code>Android Studio</code> 会自动给安装好 <code>Android SDK</code> ,这种方法操作起来比较简单，基本上 <code>Android Studio</code> 都帮你配置好了；</li>
<li>直接下载 <code>Android SDK</code> 安装包，但需要自己去手动配置，而该配置过程稍显复杂；</li>
</ol>
<p>虽然开发工具上面已经配置了 <code>VS Code</code>也就没必要再安装 <code>Android Studio</code> 了，不过为了方便快捷，这里我选择采用第一种方式来安装。</p>
<p>这里需要注意的是：最好自备 <code>梯子</code> ，有些Android依赖包下载的过程中可能会由于网络原因需要多次重试。</p>
<h5 id="安装-Android-Studio-及配置"><a href="#安装-Android-Studio-及配置" class="headerlink" title="安装 Android Studio 及配置"></a>安装 Android Studio 及配置</h5><p>打开官网 <a href="https://developer.android.com/studio/" target="_blank" rel="noopener"></a> ，会直接根据当前系统显示推荐下载版本：</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20181222203818.png" alt=""></p>
<p>直接点开安装即可。结果弹出了一个错误页面：</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20190223153756.png" alt=""></p>
<p>出现这个错误的原因是：在第一次安装AS，启动后，检测到电脑没有安装 Android SDK。</p>
<p>相应的解决方法是直接点击 <code>Cancel</code> 选项，在后续的界面中再安装SDK。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20190223155254.png" alt=""></p>
<p>点击 <code>Next</code> 后，我这里选择的是 <code>Custom</code> （自定义）选项。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20190223155655.png" alt=""></p>
<p>可以看到 <code>Android SDK</code> 是默认勾选的。另外两项我这里全部勾选上了。还可以在这里选择自定义安装目录。</p>
<p>下一页是Android模拟器的内存设置：</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20190223155931.png" alt=""></p>
<p>SDK Path 默认为 <code>/Users/xyz/Library/Android/sdk</code> 。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20190223160142.png" alt=""></p>
<p>然后就是等待下载安装的过程：</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20190223160710.png" alt=""></p>
<p>由于某些资源包是访问的 <code>google.com</code> 网址，如果没有 <code>梯子</code> ，是需要等待很久。。。很久。。。的。</p>
<p>等待安装完成后，再次查看：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜ flutter doctor</span><br><span class="line">Doctor summary (to see all details, run flutter doctor -v):</span><br><span class="line">[✓] Flutter (Channel stable, v1.0.0, on Mac OS X 10.14.3 18D109, locale zh-Hans-CN)</span><br><span class="line">[!] Android toolchain - develop for Android devices (Android SDK 28.0.3)</span><br><span class="line">    ✗ Android licenses not accepted.  To resolve this, run: flutter doctor --android-licenses</span><br><span class="line">[!] iOS toolchain - develop for iOS devices (Xcode 10.1)</span><br><span class="line">    ✗ libimobiledevice and ideviceinstaller are not installed. To install with Brew, run:</span><br><span class="line">        brew update</span><br><span class="line">        brew install --HEAD usbmuxd</span><br><span class="line">        brew link usbmuxd</span><br><span class="line">        brew install --HEAD libimobiledevice</span><br><span class="line">        brew install ideviceinstaller</span><br><span class="line">    ✗ ios-deploy not installed. To install with Brew:</span><br><span class="line">        brew install ios-deploy</span><br><span class="line">    ✗ CocoaPods not installed.</span><br><span class="line">        CocoaPods is used to retrieve the iOS platform side&#39;s plugin code that responds to your plugin usage on the Dart</span><br><span class="line">        side.</span><br><span class="line">        Without resolving iOS dependencies with CocoaPods, plugins will not work on iOS.</span><br><span class="line">        For more info, see https:&#x2F;&#x2F;flutter.io&#x2F;platform-plugins</span><br><span class="line">      To install:</span><br><span class="line">        brew install cocoapods</span><br><span class="line">        pod setup</span><br><span class="line">[✓] Android Studio (version 3.3)</span><br><span class="line">    ✗ Flutter plugin not installed; this adds Flutter specific functionality.</span><br><span class="line">    ✗ Dart plugin not installed; this adds Dart specific functionality.</span><br><span class="line">[✓] VS Code (version 1.31.1)</span><br><span class="line">[!] Connected device</span><br><span class="line">    ! No devices available</span><br><span class="line"></span><br><span class="line">! Doctor found issues in 3 categories.</span><br></pre></td></tr></table></figure>

<h5 id="解决-Android-licenses-问题"><a href="#解决-Android-licenses-问题" class="headerlink" title="解决 Android licenses 问题"></a>解决 Android licenses 问题</h5><p>看上面的提示，这里不得不夸赞一下Flutter工具的🐂🍺了。有什么问题直接在下面显示并给出解决方法，不会让一些小白再需要去网上搜索了。</p>
<p>看上面的错误提示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[!] Android toolchain - develop for Android devices (Android SDK 28.0.3)</span><br><span class="line">    ✗ Android licenses not accepted.  To resolve this, run: flutter doctor --android-licenses</span><br></pre></td></tr></table></figure>

<p>直接执行命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜ flutter doctor --android-licenses</span><br><span class="line">Warning: File &#x2F;Users&#x2F;xyz&#x2F;.android&#x2F;repositories.cfg could not be loaded..</span><br><span class="line">6 of 6 SDK package licenses not accepted. 100% Computing updates...</span><br><span class="line">Review licenses that have not been accepted (y&#x2F;N)?</span><br><span class="line">...</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>按照提示，一直输入 <code>y</code> 即可。直到看到：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">All SDK package licenses accepted</span><br></pre></td></tr></table></figure>

<p>就说明配置成功了。再次查看：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜ flutter doctor</span><br><span class="line">Doctor summary (to see all details, run flutter doctor -v):</span><br><span class="line">[✓] Flutter (Channel stable, v1.0.0, on Mac OS X 10.14.3 18D109, locale zh-Hans-CN)</span><br><span class="line">[✓] Android toolchain - develop for Android devices (Android SDK 28.0.3)</span><br><span class="line">[!] iOS toolchain - develop for iOS devices (Xcode 10.1)</span><br><span class="line">    ✗ libimobiledevice and ideviceinstaller are not installed. To install with Brew, run:</span><br><span class="line">        brew update</span><br><span class="line">        brew install --HEAD usbmuxd</span><br><span class="line">        brew link usbmuxd</span><br><span class="line">        brew install --HEAD libimobiledevice</span><br><span class="line">        brew install ideviceinstaller</span><br><span class="line">    ✗ ios-deploy not installed. To install with Brew:</span><br><span class="line">        brew install ios-deploy</span><br><span class="line">    ✗ CocoaPods not installed.</span><br><span class="line">        CocoaPods is used to retrieve the iOS platform side&#39;s plugin code that responds to your plugin usage on the Dart</span><br><span class="line">        side.</span><br><span class="line">        Without resolving iOS dependencies with CocoaPods, plugins will not work on iOS.</span><br><span class="line">        For more info, see https:&#x2F;&#x2F;flutter.io&#x2F;platform-plugins</span><br><span class="line">      To install:</span><br><span class="line">        brew install cocoapods</span><br><span class="line">        pod setup</span><br><span class="line">[✓] Android Studio (version 3.3)</span><br><span class="line">    ✗ Flutter plugin not installed; this adds Flutter specific functionality.</span><br><span class="line">    ✗ Dart plugin not installed; this adds Dart specific functionality.</span><br><span class="line">[✓] VS Code (version 1.31.1)</span><br><span class="line">[!] Connected device</span><br><span class="line">    ! No devices available</span><br><span class="line"></span><br><span class="line">! Doctor found issues in 2 categories.</span><br></pre></td></tr></table></figure>

<p>发现 <code>[✓] Android toolchain</code> 配置成功了。</p>
<h5 id="安装Flutter插件-1"><a href="#安装Flutter插件-1" class="headerlink" title="安装Flutter插件"></a>安装Flutter插件</h5><p>看上面的错误提示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[✓] Android Studio (version 3.3)</span><br><span class="line">    ✗ Flutter plugin not installed; this adds Flutter specific functionality.</span><br><span class="line">    ✗ Dart plugin not installed; this adds Dart specific functionality.</span><br></pre></td></tr></table></figure>

<p>看提示，需要在 <code>Android Studio</code> 中安装两个必要的插件：<code>Flutter plugin</code> 和 <code>Dart plugin</code></p>
<p>打开 Android Studio，可以不用新建项目，直接选择菜单栏中的 <code>Android Studio</code> – <code>Preferences</code> – 选择或者搜索 <code>Plugins</code> 菜单 – 然后搜索 <code>Flutter</code> 插件，可以看到会自动提示安装依赖的 <code>Dart</code> 插件：</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20190223183743.png" alt=""></p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20190223184006.png" alt=""></p>
<p>之后，需要重启。</p>
<p>再次查看：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜ flutter doctor</span><br><span class="line">Doctor summary (to see all details, run flutter doctor -v):</span><br><span class="line">[✓] Flutter (Channel stable, v1.0.0, on Mac OS X 10.14.3 18D109, locale zh-Hans-CN)</span><br><span class="line">[✓] Android toolchain - develop for Android devices (Android SDK 28.0.3)</span><br><span class="line">[!] iOS toolchain - develop for iOS devices (Xcode 10.1)</span><br><span class="line">    ✗ libimobiledevice and ideviceinstaller are not installed. To install with Brew, run:</span><br><span class="line">        brew update</span><br><span class="line">        brew install --HEAD usbmuxd</span><br><span class="line">        brew link usbmuxd</span><br><span class="line">        brew install --HEAD libimobiledevice</span><br><span class="line">        brew install ideviceinstaller</span><br><span class="line">    ✗ ios-deploy not installed. To install with Brew:</span><br><span class="line">        brew install ios-deploy</span><br><span class="line">    ✗ CocoaPods not installed.</span><br><span class="line">        CocoaPods is used to retrieve the iOS platform side&#39;s plugin code that responds to your plugin usage on the Dart</span><br><span class="line">        side.</span><br><span class="line">        Without resolving iOS dependencies with CocoaPods, plugins will not work on iOS.</span><br><span class="line">        For more info, see https:&#x2F;&#x2F;flutter.io&#x2F;platform-plugins</span><br><span class="line">      To install:</span><br><span class="line">        brew install cocoapods</span><br><span class="line">        pod setup</span><br><span class="line">[✓] Android Studio (version 3.3)</span><br><span class="line">[✓] VS Code (version 1.31.1)</span><br><span class="line">[!] Connected device</span><br><span class="line">    ! No devices available</span><br><span class="line"></span><br><span class="line">! Doctor found issues in 2 categories.</span><br></pre></td></tr></table></figure>

<ul>
<li><a href="https://blog.csdn.net/xx326664162/article/details/50563122" target="_blank" rel="noopener">unable to access android sdk add-on list - 薛瑄的博客 - CSDN博客</a></li>
</ul>
<h5 id="创建Flutter项目-1"><a href="#创建Flutter项目-1" class="headerlink" title="创建Flutter项目"></a>创建Flutter项目</h5><p>使用 Android Studio 创建 Flutter 项目也非常便捷。直接选择启动页中的 <code>Start a new Flutter project</code> 菜单，然后选择 <code>Flutter Application</code> – <code>Next</code> – 输入 <code>Project name</code> 及保存目录后，即可初始化一个 Flutter 项目。</p>
<hr>
<h4 id="连接Android真机运行"><a href="#连接Android真机运行" class="headerlink" title="连接Android真机运行"></a>连接Android真机运行</h4><p>上面 <code>Android</code> 的环境已经配置好了，我就有些迫不及待的想要在手机上运行了。</p>
<h5 id="跑起来"><a href="#跑起来" class="headerlink" title="跑起来"></a>跑起来</h5><p>连接上安卓手机，开始运行 <code>flutter run</code> 命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜ flutter run   </span><br><span class="line">No connected devices.</span><br><span class="line"></span><br><span class="line">Run &#39;flutter emulators&#39; to list and start any available device emulators.</span><br><span class="line"></span><br><span class="line">If you expected your device to be detected, please run &quot;flutter doctor&quot; to diagnose</span><br><span class="line">potential issues, or visit https:&#x2F;&#x2F;flutter.io&#x2F;setup&#x2F; for troubleshooting tips.</span><br></pre></td></tr></table></figure>

<p>结果却提示 <code>No connected devices</code> 。根据提示，执行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜ flutter emulators</span><br><span class="line">2 available emulators:</span><br><span class="line"></span><br><span class="line">Nexus_5X_API_28_x86 • Nexus 5X      • Google • Nexus 5X API 28 x86</span><br><span class="line">apple_ios_simulator • iOS Simulator • Apple</span><br><span class="line"></span><br><span class="line">To run an emulator, run &#39;flutter emulators --launch &lt;emulator id&gt;&#39;.</span><br><span class="line">To create a new emulator, run &#39;flutter emulators --create [--name xyz]&#39;.</span><br><span class="line"></span><br><span class="line">You can find more information on managing emulators at the links below:</span><br><span class="line">  https:&#x2F;&#x2F;developer.android.com&#x2F;studio&#x2F;run&#x2F;managing-avds</span><br><span class="line">  https:&#x2F;&#x2F;developer.android.com&#x2F;studio&#x2F;command-line&#x2F;avdmanager</span><br></pre></td></tr></table></figure>

<p>按照提示，执行 <code>flutter emulators --launch &lt;emulator id&gt;</code> 命令:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜ flutter run -d Nexus_5X</span><br><span class="line">No devices found with name or id matching &#39;Nexus_5X&#39;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">➜ flutter run -d Nexus_5X_API_28_x86</span><br><span class="line">No devices found with name or id matching &#39;Nexus_5X_API_28_x86&#39;</span><br></pre></td></tr></table></figure>

<p>结果仍然是 <code>找不到设备</code>。</p>
<ul>
<li><a href="https://stackoverflow.com/questions/52573901/flutter-command-line-emulator-device-not-found" target="_blank" rel="noopener">dart - Flutter - Command line - Emulator- Device not found - Stack Overflow</a></li>
</ul>
<p>到这里的结果就是：</p>
<ul>
<li>安卓手机发现不了设备。</li>
<li>Android模拟器一直连接失败，即使连接上了，在安装app的时候也会提示 <code>no devices</code> 的信息。好不容易安装成功后，发现网上提到的 <code>hot reload</code> 的功能却用不了。<code>Android Studio</code> 上的热加载 ⚡️ 按钮也是灰色的。</li>
<li>ios模拟器安装启动正常，而且热更新的功能也能正常使用。</li>
</ul>
<p>后来再次查看了官方的安装文档，恍然大悟之间，才发现我忘记操作了一步：我只安装了 <code>Android Studio</code> ，<strong>但并没有配置 <code>ANDROID_HOME</code> 环境变量</strong>，而是直接就开始安装App了。</p>
<p>见官方文档：<a href="https://flutter.dev/docs/get-started/install/macos#set-up-your-android-device" target="_blank" rel="noopener">Set up your Android device - Flutter</a></p>
<h5 id="配置-ANDROID-HOME-环境变量"><a href="#配置-ANDROID-HOME-环境变量" class="headerlink" title="配置 ANDROID_HOME 环境变量"></a>配置 ANDROID_HOME 环境变量</h5><p>查看当前环境变量：</p>
<p>打开 AS ，找到 <code>Preferences</code> – <code>Appearance &amp; Behavior</code> – <code>System Settings</code> – <code>Android SDK</code> – 在右侧找到 <code>Android SDK Location</code> – 复制</p>
<p>在命令行中输入 <code>echo $ANDROID_HOME</code>，发现当前值确实为空。</p>
<p>然后在 <code>$HOME/.bash_profile</code> 中加入下列代码:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export ANDROID_HOME&#x3D;$HOME&#x2F;Library&#x2F;Android&#x2F;sdk</span><br><span class="line">export PATH&#x3D;$&#123;PATH&#125;:$&#123;ANDROID_HOME&#125;&#x2F;tools</span><br><span class="line">export PATH&#x3D;$&#123;PATH&#125;:$&#123;ANDROID_HOME&#125;&#x2F;platform-tools</span><br></pre></td></tr></table></figure>

<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20190311150318.png" alt=""></p>
<p>重启命令行窗口或者执行 <code>source $HOME/.bash_profile</code> or <code>source $HOME/.zshrc</code> 刷新配置。</p>
<h5 id="配置Android模拟器"><a href="#配置Android模拟器" class="headerlink" title="配置Android模拟器"></a>配置Android模拟器</h5><p>打开 AS, <code>Android Studio</code> &gt; <code>Tools</code> &gt; <code>Android</code> &gt; <code>AVD Manager and select Create Virtual Device</code> . （更多的去参考一下文档去吧）&gt; <a href="https://flutter.dev/docs/get-started/install/macos#set-up-the-android-emulator" target="_blank" rel="noopener">Set up the Android emulator - Flutter</a></p>
<p>后来发现，如果没有配置，是会启动一个默认的模拟器。</p>
<p>在上面的操作中，由于我太着急，直接就运行程序了，所以默认给我创建了一个 <code>Nexus 5X</code> 的模拟器。</p>
<hr>
<h5 id="ADB-server-didn’t-ACK"><a href="#ADB-server-didn’t-ACK" class="headerlink" title="ADB server didn’t ACK"></a>ADB server didn’t ACK</h5><p>将手机通过usb连接，通过 <code>adb devices</code> 命令来查看设备连接状态:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜ adb devices</span><br><span class="line">List of devices attached</span><br><span class="line">adb server version (40) doesn&#39;t match this client (39); killing...</span><br><span class="line">ADB server didn&#39;t ACK</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>结果却报了 <code>ADB server didn&#39;t ACK</code> 的错误。</p>
<p>相应的解决方法如下：</p>
<ol>
<li>查看端口被占用情况：在终端输入 <code>lsof -i tcp:5037</code> 查看占用 <code>5037</code> 端口的pid号</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜ lsof -i tcp:5037</span><br><span class="line">COMMAND   PID USER   FD   TYPE             DEVICE SIZE&#x2F;OFF NODE NAME</span><br><span class="line">adb     38752  xyz    3u  IPv4 0xec93d79cdb5a9d91      0t0  TCP localhost:49653-&gt;localhost:5037 (CLOSED)</span><br><span class="line">adb     38752  xyz   11u  IPv4 0xec93x80a5492d411      0t0  TCP localhost:5037 (LISTEN)</span><br></pre></td></tr></table></figure>

<p>2.去任务管理器（应用程序-其他-活动监视器）找到对应pid号(这里是38752)的进程，并关闭 </p>
<ol start="3">
<li>再次查看：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜ adb devices</span><br><span class="line">List of devices attached</span><br><span class="line">adb server version (40) doesn&#39;t match this client (39); killing...</span><br><span class="line">* daemon started successfully</span><br><span class="line">FA6AB0311758    device</span><br></pre></td></tr></table></figure>

<p>现在，设备已经正常连接了。</p>
<ul>
<li><a href="https://blog.csdn.net/XieYupeng520/article/details/46660517" target="_blank" rel="noopener">【MAC版】Android ADB server didn’t ACK failed to start daemon 解决办法 - AZZ的博客 - CSDN博客</a></li>
</ul>
<hr>
<h5 id="Android-license-status-unknown"><a href="#Android-license-status-unknown" class="headerlink" title="Android license status unknown"></a>Android license status unknown</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜ flutter doctor</span><br><span class="line">Doctor summary (to see all details, run flutter doctor -v):</span><br><span class="line">[✓] Flutter (Channel stable, v1.0.0, on Mac OS X 10.14.3 18D109, locale zh-Hans-CN)</span><br><span class="line">[!] Android toolchain - develop for Android devices (Android SDK 28.0.3)</span><br><span class="line">    ✗ Android license status unknown.</span><br><span class="line">[✓] Android Studio (version 3.3)</span><br><span class="line">。。。</span><br><span class="line">。。。</span><br></pre></td></tr></table></figure>

<p>解决方法是：再执行一次 <code>flutter doctor --android-licenses</code> 命令，在提示后输入 <code>y</code> 确认，然后再通过 <code>flutter doctor</code> 查看。</p>
<ul>
<li><a href="https://github.com/flutter/flutter/issues/16025" target="_blank" rel="noopener">✗ Android license status unknown. · Issue #16025 · flutter/flutter</a></li>
<li><a href="https://my.oschina.net/falcon10086/blog/1827718" target="_blank" rel="noopener">Android license status unknown - Code is Poetry - 开源中国</a></li>
</ul>
<hr>
<h5 id="某些安卓手机需要解锁"><a href="#某些安卓手机需要解锁" class="headerlink" title="某些安卓手机需要解锁"></a>某些安卓手机需要解锁</h5><p>对于某些安卓设备默认情况下都没有启用开发者调试的功能，这次我换用一台小米手机来进行真机调试。</p>
<p>当有多个设备连接时，可以通过 <code>-d &lt;deviceId&gt;</code> 连接指定设备，或者使用 <code>-d all</code> 连接所有设备来调试。其中 <code>&lt;deviceId&gt;</code> 支持模糊匹配设备名称：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜ flutter run</span><br><span class="line">More than one device connected; please specify a device with the &#39;-d &lt;deviceId&gt;&#39; flag, or use &#39;-d all&#39; to act</span><br><span class="line">on all devices.</span><br><span class="line"></span><br><span class="line">Redmi Note 4X             • a1529b418604  • android-arm64 • Android 7.0 (API 24)</span><br><span class="line">Android SDK built for x86 • emulator-5554 • android-x86   • Android 9 (API 28) (emulator)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">➜ flutter run -d Redmi</span><br><span class="line">Launching lib&#x2F;main.dart on Redmi Note 4X in debug mode...</span><br><span class="line">Initializing gradle...                                       1.0s</span><br><span class="line">Resolving dependencies...                                    7.7s</span><br><span class="line">Gradle task &#39;assembleDebug&#39;...                                   </span><br><span class="line">Gradle task &#39;assembleDebug&#39;... Done                         10.4s</span><br><span class="line">Built build&#x2F;app&#x2F;outputs&#x2F;apk&#x2F;debug&#x2F;app-debug.apk.</span><br><span class="line">Installing build&#x2F;app&#x2F;outputs&#x2F;apk&#x2F;app.apk...                  8.1s</span><br><span class="line">Error: ADB exited with exit code 1</span><br><span class="line">adb: failed to install &#x2F;Users&#x2F;xyz&#x2F;Learn&#x2F;flutter&#x2F;hello_world&#x2F;build&#x2F;app&#x2F;outputs&#x2F;apk&#x2F;app.apk: Failure</span><br><span class="line">[INSTALL_FAILED_USER_RESTRICTED: Install canceled by user]</span><br><span class="line">Error launching application on Redmi Note 4X.</span><br></pre></td></tr></table></figure>

<p>可以看到，我这里设备选择成功了，但当运行到 <code>Install</code> 阶段报错了。</p>
<p>这里，需要更改一下手机设置，以小米手机为例：</p>
<ol>
<li>打开手机的开发者模式: <code>设置</code> – <code>我的设备</code> – <code>全部参数</code> – <code>MIUI版本</code> – 连续点击7下即可</li>
<li>再次点击 <code>设置</code> – <code>更多设置</code> – <code>开发者选项</code> – 将 <code>开启开发者选项</code> 启用 、 <code>USB调试</code> 启用 、 <code>USB安装</code> 启用</li>
<li>再次执行 <code>flutter run</code> 命令进行安装，此时手机上会弹出 <code>USB安装提示</code> 的命令，选择 <code>允许</code> 即可</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜ flutter run</span><br><span class="line">Launching lib&#x2F;main.dart on Redmi Note 4X in debug mode...</span><br><span class="line">Initializing gradle...                                       0.8s</span><br><span class="line">Resolving dependencies...                                    1.5s</span><br><span class="line">Gradle task &#39;assembleDebug&#39;...                                   </span><br><span class="line">Gradle task &#39;assembleDebug&#39;... Done                          1.5s</span><br><span class="line">Built build&#x2F;app&#x2F;outputs&#x2F;apk&#x2F;debug&#x2F;app-debug.apk.</span><br><span class="line">Installing build&#x2F;app&#x2F;outputs&#x2F;apk&#x2F;app.apk...                 14.6s</span><br><span class="line">Syncing files to device Redmi Note 4X...                     1.6s</span><br><span class="line"></span><br><span class="line">🔥  To hot reload changes while running, press &quot;r&quot;. To hot restart (and rebuild state), press &quot;R&quot;.</span><br><span class="line">An Observatory debugger and profiler on Redmi Note 4X is available at: http:&#x2F;&#x2F;127.0.0.1:61766&#x2F;</span><br><span class="line">For a more detailed help message, press &quot;h&quot;. To detach, press &quot;d&quot;; to quit, press &quot;q&quot;.</span><br></pre></td></tr></table></figure>

<ul>
<li><a href="https://stackoverflow.com/a/54127898/6246673" target="_blank" rel="noopener">INSTALL_FAILED_USER_RESTRICTED : android studio using redmi 4 device
</a></li>
</ul>
<hr>
<h5 id="最终运行"><a href="#最终运行" class="headerlink" title="最终运行"></a>最终运行</h5><p>再次检查状态：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜ flutter doctor</span><br><span class="line">Doctor summary (to see all details, run flutter doctor -v):</span><br><span class="line">[✓] Flutter (Channel stable, v1.0.0, on Mac OS X 10.14.3 18D109, locale zh-Hans-CN)</span><br><span class="line">[✓] Android toolchain - develop for Android devices (Android SDK 28.0.3)</span><br><span class="line">[!] iOS toolchain - develop for iOS devices (Xcode 10.1)</span><br><span class="line">    ✗ libimobiledevice and ideviceinstaller are not installed. To install with Brew, run:</span><br><span class="line">        brew update</span><br><span class="line">        brew install --HEAD usbmuxd</span><br><span class="line">        brew link usbmuxd</span><br><span class="line">        brew install --HEAD libimobiledevice</span><br><span class="line">        brew install ideviceinstaller</span><br><span class="line">    ✗ ios-deploy not installed. To install with Brew:</span><br><span class="line">        brew install ios-deploy</span><br><span class="line">    ✗ CocoaPods not installed.</span><br><span class="line">        CocoaPods is used to retrieve the iOS platform side&#39;s plugin code that responds to your plugin usage on the Dart</span><br><span class="line">        side.</span><br><span class="line">        Without resolving iOS dependencies with CocoaPods, plugins will not work on iOS.</span><br><span class="line">        For more info, see https:&#x2F;&#x2F;flutter.io&#x2F;platform-plugins</span><br><span class="line">      To install:</span><br><span class="line">        brew install cocoapods</span><br><span class="line">        pod setup</span><br><span class="line">[✓] Android Studio (version 3.3)</span><br><span class="line">[✓] VS Code (version 1.31.1)</span><br><span class="line">[✓] Connected device (1 available)</span><br><span class="line"></span><br><span class="line">! Doctor found issues in 1 category.</span><br></pre></td></tr></table></figure>

<p>打开 <code>VS Code</code>, 在终端中运行 <code>flutter run</code> 命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜ flutter run</span><br><span class="line">Launching lib&#x2F;main.dart on Pixel in debug mode...</span><br><span class="line">Initializing gradle...                                       1.1s</span><br><span class="line">Resolving dependencies...                                    8.2s</span><br><span class="line">Gradle task &#39;assembleDebug&#39;...                                   </span><br><span class="line">Gradle task &#39;assembleDebug&#39;... Done                         12.4s</span><br><span class="line">Built build&#x2F;app&#x2F;outputs&#x2F;apk&#x2F;debug&#x2F;app-debug.apk.</span><br><span class="line">Installing build&#x2F;app&#x2F;outputs&#x2F;apk&#x2F;app.apk...                  3.4s</span><br><span class="line">Syncing files to device Pixel...                             1.5s</span><br><span class="line"></span><br><span class="line">🔥  To hot reload changes while running, press &quot;r&quot;. To hot restart (and rebuild state), press &quot;R&quot;.</span><br><span class="line">An Observatory debugger and profiler on Pixel is available at: http:&#x2F;&#x2F;127.0.0.1:49724&#x2F;</span><br><span class="line">For a more detailed help message, press &quot;h&quot;. To detach, press &quot;d&quot;; to quit, press &quot;q&quot;.</span><br></pre></td></tr></table></figure>

<p>可以看到，现在才是正常运行的状态。已经成功的连接上了我的 <code>Pixel</code> 手机，同时在手机端，已经打开了示例app的界面。输入 <code>r</code> 来实现热更新。</p>
<hr>
<h4 id="IOS环境配置"><a href="#IOS环境配置" class="headerlink" title="IOS环境配置"></a>IOS环境配置</h4><p>查看当前的状态：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜ flutter doctor</span><br><span class="line">Doctor summary (to see all details, run flutter doctor -v):</span><br><span class="line">[✓] Flutter (Channel stable, v1.0.0, on Mac OS X 10.14.3 18D109, locale zh-Hans-CN)</span><br><span class="line">[✓] Android toolchain - develop for Android devices (Android SDK 28.0.3)</span><br><span class="line">[!] iOS toolchain - develop for iOS devices (Xcode 10.1)</span><br><span class="line">    ✗ libimobiledevice and ideviceinstaller are not installed. To install with Brew, run:</span><br><span class="line">        brew update</span><br><span class="line">        brew install --HEAD usbmuxd</span><br><span class="line">        brew link usbmuxd</span><br><span class="line">        brew install --HEAD libimobiledevice</span><br><span class="line">        brew install ideviceinstaller</span><br><span class="line">    ✗ ios-deploy not installed. To install with Brew:</span><br><span class="line">        brew install ios-deploy</span><br><span class="line">    ✗ CocoaPods not installed.</span><br><span class="line">        CocoaPods is used to retrieve the iOS platform side&#39;s plugin code that responds to your plugin usage on the Dart</span><br><span class="line">        side.</span><br><span class="line">        Without resolving iOS dependencies with CocoaPods, plugins will not work on iOS.</span><br><span class="line">        For more info, see https:&#x2F;&#x2F;flutter.io&#x2F;platform-plugins</span><br><span class="line">      To install:</span><br><span class="line">        brew install cocoapods</span><br><span class="line">        pod setup</span><br><span class="line">[✓] Android Studio (version 3.3)</span><br><span class="line">[✓] VS Code (version 1.31.1)</span><br><span class="line">[✓] Connected device (1 available)</span><br><span class="line"></span><br><span class="line">! Doctor found issues in 1 category.</span><br></pre></td></tr></table></figure>

<p>依照上面的提示信息，依次执行，安装 <code>iOS toolchain</code> 所有相关依赖。</p>
<h4 id="连接IPhone真机运行"><a href="#连接IPhone真机运行" class="headerlink" title="连接IPhone真机运行"></a>连接IPhone真机运行</h4><h5 id="No-valid-code-signing-certificates-were-found"><a href="#No-valid-code-signing-certificates-were-found" class="headerlink" title="No valid code signing certificates were found"></a>No valid code signing certificates were found</h5><p>没想到第一次运行却报错了：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜ flutter run</span><br><span class="line">Launching lib&#x2F;main.dart on xyz的iPhone in debug mode...</span><br><span class="line">════════════════════════════════════════════════════════════════════════════════</span><br><span class="line">No valid code signing certificates were found</span><br><span class="line">You can connect to your Apple Developer account by signing in with your Apple ID</span><br><span class="line">in Xcode and create an iOS Development Certificate as well as a Provisioning </span><br><span class="line">Profile for your project by:</span><br><span class="line">  1- Open the Flutter project&#39;s Xcode target with</span><br><span class="line">       open ios&#x2F;Runner.xcworkspace</span><br><span class="line">  2- Select the &#39;Runner&#39; project in the navigator then the &#39;Runner&#39; target</span><br><span class="line">     in the project settings</span><br><span class="line">  3- In the &#39;General&#39; tab, make sure a &#39;Development Team&#39; is selected. </span><br><span class="line">     You may need to:</span><br><span class="line">         - Log in with your Apple ID in Xcode first</span><br><span class="line">         - Ensure you have a valid unique Bundle ID</span><br><span class="line">         - Register your device with your Apple Developer Account</span><br><span class="line">         - Let Xcode automatically provision a profile for your app</span><br><span class="line">  4- Build or run your project again</span><br><span class="line">  5- Trust your newly created Development Certificate on your iOS device</span><br><span class="line">     via Settings &gt; General &gt; Device Management &gt; [your new certificate] &gt; Trust</span><br><span class="line"></span><br><span class="line">For more information, please visit:</span><br><span class="line">  https:&#x2F;&#x2F;developer.apple.com&#x2F;library&#x2F;content&#x2F;documentation&#x2F;IDEs&#x2F;Conceptual&#x2F;</span><br><span class="line">  AppDistributionGuide&#x2F;MaintainingCertificates&#x2F;MaintainingCertificates.html</span><br><span class="line"></span><br><span class="line">Or run on an iOS simulator without code signing</span><br><span class="line">════════════════════════════════════════════════════════════════════════════════</span><br><span class="line">No development certificates available to code sign app for device deployment</span><br></pre></td></tr></table></figure>


<p>按照上面的提示，用 Xcode 打开示例项目中的 <code>ios/Runner.xcworkspace</code> 这个文件，</p>
<p>选择项目菜单 <code>Runner</code> – General 选项 ，可以看到 <code>Signing</code> 中的 <code>Status</code> 提示错误信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Signing for &quot;Runner&quot; requires a development team.</span><br><span class="line">Select a development team in the projct editor.</span><br></pre></td></tr></table></figure>

<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20190224163145.png" alt=""></p>
<p>点击 <code>Team</code> 选项的 <code>Add Account...</code> 按钮，登录 <code>Apple ID</code> ，没有则需要创建一个。回到 <code>General</code> 界面，选择 <code>Team</code> 名称。等待验证。</p>
<h5 id="No-profiles-for-xxx-were-found"><a href="#No-profiles-for-xxx-were-found" class="headerlink" title="No profiles for xxx were found"></a>No profiles for xxx were found</h5><p>现在又提示下面的错误：</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20190224165204.png" alt=""></p>
<p>在 VSCode中执行 <code>flutter run</code> 命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜ flutter run</span><br><span class="line">Launching lib&#x2F;main.dart on xyz的iPhone in debug mode...</span><br><span class="line">Automatically signing iOS for device deployment using specified development team in Xcode project:</span><br><span class="line">9Y41Q9PF28</span><br><span class="line">Starting Xcode build...                                          </span><br><span class="line">Xcode build done.                                            1.3s</span><br><span class="line">Failed to build iOS app</span><br><span class="line">Error output from Xcode build:</span><br><span class="line">↳</span><br><span class="line">    ** BUILD FAILED **</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Xcode&#39;s output:</span><br><span class="line">↳</span><br><span class="line">    &#x3D;&#x3D;&#x3D; BUILD TARGET Runner OF PROJECT Runner WITH CONFIGURATION Debug &#x3D;&#x3D;&#x3D;</span><br><span class="line">    Code Signing Error: No profiles for &#39;com.example.helloWorld&#39; were found:  Xcode couldn&#39;t find any</span><br><span class="line">    iOS App Development provisioning profiles matching &#39;com.example.helloWorld&#39;. Automatic signing is</span><br><span class="line">    disabled and unable to generate a profile. To enable automatic signing, pass</span><br><span class="line">    -allowProvisioningUpdates to xcodebuild.</span><br><span class="line">    Code Signing Error: Code signing is required for product type &#39;Application&#39; in SDK &#39;iOS 12.1&#39;</span><br><span class="line">    Code Signing Error: Code signing is required for product type &#39;Application&#39; in SDK &#39;iOS 12.1&#39;</span><br><span class="line">    Code Signing Error: Code signing is required for product type &#39;Application&#39; in SDK &#39;iOS 12.1&#39;</span><br><span class="line"></span><br><span class="line">Could not build the precompiled application for the device.</span><br><span class="line"></span><br><span class="line">It appears that your application still contains the default signing identifier.</span><br><span class="line">Try replacing &#39;com.example&#39; with your signing id in Xcode:</span><br><span class="line">  open ios&#x2F;Runner.xcworkspace</span><br><span class="line"></span><br><span class="line">Error launching application on xyz的iPhone.</span><br></pre></td></tr></table></figure>

<p>在 XCode中编译，提示如下错误：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Failed to create provisioning profile. The app ID &quot;com.example.helloWorld&quot; cannot be registered to your development team. Change your bundle identifier to a unique string to try again.</span><br><span class="line"></span><br><span class="line">No profiles for &#39;com.example.helloWorld&#39; were found:  Xcode couldn&#39;t find any iOS App Development provisioning profiles matching &#39;com.example.helloWorld&#39;.</span><br><span class="line"></span><br><span class="line">Code signing is required for product type &#39;Application&#39; in SDK &#39;iOS 12.1&#39;</span><br><span class="line">Code signing is required for product type &#39;Application&#39; in SDK &#39;iOS 12.1&#39;</span><br><span class="line">Code signing is required for product type &#39;Application&#39; in SDK &#39;iOS 12.1&#39;</span><br></pre></td></tr></table></figure>

<p>通过一番查找，在 Stack Overflow 上找到了一个解决方法：</p>
<p><strong>将 <code>Bundle Identifier</code> 的值改变一下，比如在结尾随机加上几个数字。</strong></p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20190224171103.png" alt=""></p>
<ul>
<li><a href="https://stackoverflow.com/a/43687946/6246673" target="_blank" rel="noopener">Failed to create provisioning profile</a></li>
</ul>
<p>再次在 <code>VS Code</code> 中运行：</p>
<p>期间需要输入密码。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜ flutter run </span><br><span class="line">Launching lib&#x2F;main.dart on xyz的iPhone in debug mode...</span><br><span class="line">Automatically signing iOS for device deployment using specified development team in Xcode project:</span><br><span class="line">9Y41Q9PF28</span><br><span class="line">Starting Xcode build...                                          </span><br><span class="line"> ├─Assembling Flutter resources...                    1.3s</span><br><span class="line"> </span><br><span class="line"> └─Compiling, linking and signing...                  3.4s</span><br><span class="line"> </span><br><span class="line">Xcode build done.                                            6.2s</span><br><span class="line">Installing and launching...                                  4.6s</span><br><span class="line">⢿2019-02-24 17:17:33.270 ios-deploy[15328:80609] [ !! ] Unable to locate DeviceSupport directory with suffix &#39;Symbols&#39;. This probably means you don&#39;t have Xcode installed, you will need to launch the app manually and logging output will not be shown!</span><br><span class="line"> 6.8s</span><br><span class="line">Could not install build&#x2F;ios&#x2F;iphoneos&#x2F;Runner.app on f1b5b10369882093413772c363995b5cda163c34.</span><br><span class="line">Try launching Xcode and selecting &quot;Product &gt; Run&quot; to fix the problem:</span><br><span class="line">  open ios&#x2F;Runner.xcworkspace</span><br><span class="line"></span><br><span class="line">Error launching application on xyz的iPhone.</span><br></pre></td></tr></table></figure>

<h5 id="Device-is-locked"><a href="#Device-is-locked" class="headerlink" title="Device is locked"></a>Device is locked</h5><p>使用 XCode编译，提示如下错误：</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20190224172722.png" alt=""></p>
<p>这个问题是需要在手机端开启允许调试。</p>
<p>依次点击 <code>通用</code> – <code>设备管理</code> – <code>开发者应用</code> – 点击开发者账号 – 点击 <code>信任应用</code> </p>
<p>再次在 VS Code 中运行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜ flutter run </span><br><span class="line">Launching lib&#x2F;main.dart on xyz的iPhone in debug mode...</span><br><span class="line">Automatically signing iOS for device deployment using specified development team in Xcode project:</span><br><span class="line">9Y41Q9PF28</span><br><span class="line">Starting Xcode build...                                          </span><br><span class="line"> ├─Assembling Flutter resources...                    1.4s</span><br><span class="line"> </span><br><span class="line"> └─Compiling, linking and signing...                  4.6s</span><br><span class="line"> </span><br><span class="line">Xcode build done.                                            7.7s</span><br><span class="line">Installing and launching...                                  6.1s</span><br><span class="line">12.0s</span><br><span class="line">Syncing files to device xyz的iPhone...                        1.7s</span><br><span class="line"></span><br><span class="line">🔥  To hot reload changes while running, press &quot;r&quot;. To hot restart (and rebuild state), press &quot;R&quot;.</span><br><span class="line">An Observatory debugger and profiler on xyz的iPhone is available at: http:&#x2F;&#x2F;127.0.0.1:1024&#x2F;</span><br><span class="line">For a more detailed help message, press &quot;h&quot;. To detach, press &quot;d&quot;; to quit, press &quot;q&quot;.</span><br></pre></td></tr></table></figure>

<p>这次能够正常运行了，也支持热加载调试。</p>
<hr>
<h4 id="Flutter版本更新"><a href="#Flutter版本更新" class="headerlink" title="Flutter版本更新"></a>Flutter版本更新</h4><p>对于Flutter的版本更新，看最近的形势迭代频率越来越快，而更新操作也很简单：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜ flutter doctor</span><br><span class="line">  ╔════════════════════════════════════════════════════════════════════════════╗</span><br><span class="line">  ║ A new version of Flutter is available!                                     ║</span><br><span class="line">  ║                                                                            ║</span><br><span class="line">  ║ To update to the latest version, run &quot;flutter upgrade&quot;.                    ║</span><br><span class="line">  ╚════════════════════════════════════════════════════════════════════════════╝</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Doctor summary (to see all details, run flutter doctor -v):</span><br><span class="line">[✓] Flutter (Channel stable, v1.0.0, on Mac OS X 10.14.3 18D109, locale zh-Hans-CN)</span><br><span class="line">[✓] Android toolchain - develop for Android devices (Android SDK 28.0.3)</span><br><span class="line">[✓] iOS toolchain - develop for iOS devices (Xcode 10.1)</span><br><span class="line">[✓] Android Studio (version 3.3)</span><br><span class="line">[✓] VS Code (version 1.31.1)</span><br><span class="line">[!] Connected device</span><br><span class="line">    ! No devices available</span><br><span class="line"></span><br><span class="line">! Doctor found issues in 1 category.</span><br></pre></td></tr></table></figure>

<p>直接按照官方给出的提示执行 <code>flutter upgrade</code> 即可。</p>
<hr>
<p>至此，Android和iOS的开发环境配置基本ok了。</p>
]]></content>
      <categories>
        <category>Flutter之旅</category>
      </categories>
      <tags>
        <tag>Flutter</tag>
      </tags>
  </entry>
  <entry>
    <title>打开新世界的大门 -- Flutter介绍</title>
    <url>/2019/03/08/flutter-get-start/</url>
    <content><![CDATA[<p>Flutter是一个由谷歌开发的开源移动应用软件开发工具包，用于为Android和iOS开发应用，同时也将是Google Fuchsia下开发应用的主要工具。</p>
<h4 id="系列文章列表"><a href="#系列文章列表" class="headerlink" title="系列文章列表"></a>系列文章列表</h4><ol>
<li><a href="/2019/03/08/flutter-get-start/">打开新世界的大门 – Flutter介绍 | IT范儿</a></li>
<li><a href="/2019/03/08/flutter-devemopment-environment-configuration/">兵马未动，粮草先行 – Flutter开发环境配置 | IT范儿</a></li>
<li><a href="/2019/03/11/flutter-development-skills/">磨刀不误砍柴工 – Flutter开发技巧 | IT范儿</a></li>
</ol>
]]></content>
      <categories>
        <category>Flutter之旅</category>
      </categories>
      <tags>
        <tag>Flutter</tag>
      </tags>
  </entry>
  <entry>
    <title>解决Golang下json.Marshal默认对html标签转义问题</title>
    <url>/2018/12/27/golang-json-marshal-for-html/</url>
    <content><![CDATA[<p>最近在用Golang下的json对含有html标签的Object序列化的时候，发现Golang会默认对html标签做转义处理。比如我的一段html代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;choose-results&quot; class&#x3D;&quot;li&quot; style&#x3D;&quot;display:none&quot;&gt;&lt;div class&#x3D;&quot;dt&quot;&gt;已选择&lt;&#x2F;div&gt;&lt;div class&#x3D;&quot;dd&quot;&gt;&lt;&#x2F;div&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;choose-luodipei&quot; class&#x3D;&quot;choose-luodipei li&quot; style&#x3D;&quot;display&lt;div class&#x3D;&quot;dt&quot;&gt;送装服务&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;dd&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;choose-suits&quot; class&#x3D;&quot;li choose-suits&quot; style&#x3D;&quot;display:none&quot;&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;dt&quot;&gt;套&amp;#x3000;&amp;#x3000;装&lt;&#x2F;div&gt;</span><br><span class="line">            &lt;div class&#x3D;&quot;dd clearfix&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">                &lt;&#x2F;div&gt;</span><br><span class="line">                                &lt;div id&#x3D;&quot;choose-gift&quot; class&#x3D;&quot;choose-gift li&quot;  style&#x3D;&quot;display: none;&quot;&gt;</span><br><span class="line">                    &lt;div class&#x3D;&quot;dt&quot;&gt;搭配赠品&lt;&#x2F;div&gt;</span><br><span class="line">                    &lt;div class&#x3D;&quot;dd clearfix&quot;&gt;</span><br><span class="line">                        &lt;div class&#x3D;&quot;gift J-gift&quot; clstag&#x3D;&quot;shangpin|keycount|product|dapeizengpin&quot;&gt;</span><br><span class="line">                            &lt;i class&#x3D;&quot;sprite-gift J-popup&quot;&gt;&lt;&#x2F;i&gt;&lt;span class&#x3D;&quot;gift-tips&quot;&gt;选择搭配赠品(共&lt;em&gt;0&lt;&#x2F;em&gt;个)&lt;&#x2F;span&gt;</span><br><span class="line">                        &lt;&#x2F;div&gt;</span><br><span class="line">                        &lt;!--choosed--&gt;</span><br><span class="line">                        &lt;div class&#x3D;&quot;J-gift-selected hide&quot;&gt;</span><br><span class="line">                            &lt;div class&#x3D;&quot;gift choosed J-gift-choosed&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">                            &lt;a href&#x3D;&quot;#none&quot; class&#x3D;&quot;gift-modify J-popup&quot; clstag&#x3D;&quot;shangpin|keycount|product|zengpin-genggai&quot;&gt;更改&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure>

<p>在经过 <code>json.Marshal()</code> 处理之后就变成了：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\u003cdiv id&#x3D;\&quot;choose-results\&quot; class&#x3D;\&quot;li\&quot; style&#x3D;\&quot;display:none\&quot;\u003e\u003cdiv class&#x3D;\&quot;dt\&quot;\u003e已选择\u003c&#x2F;div\u003e\u003cdiv class&#x3D;\&quot;dd\&quot;\u003e\u003c&#x2F;div\u003e\u003c&#x2F;div\u003e\n                                    \u003c&#x2F;div\u003e\n\n                                                \n                                                                                                \u003cdiv id&#x3D;\&quot;choose-luodipei\&quot; class&#x3D;\&quot;choose-luodipei li\&quot; style&#x3D;\&quot;display:none\&quot;\u003e\n                    \u003cdiv class&#x3D;\&quot;dt\&quot;\u003e送装服务\u003c&#x2F;div\u003e\n                    \u003cdiv class&#x3D;\&quot;dd\&quot;\u003e\u003c&#x2F;div\u003e\n                \u003c&#x2F;div\u003e\n                                                                \u003cdiv id&#x3D;\&quot;choose-suits\&quot; class&#x3D;\&quot;li choose-suits\&quot; style&#x3D;\&quot;display:none\&quot;\u003e\n                    \u003cdiv class&#x3D;\&quot;dt\&quot;\u003e套\u0026#x3000;\u0026#x3000;装\u003c&#x2F;div\u003e\n                    \u003cdiv class&#x3D;\&quot;dd clearfix\&quot;\u003e\u003c&#x2F;div\u003e\n                \u003c&#x2F;div\u003e\n                                \u003cdiv id&#x3D;\&quot;choose-gift\&quot; class&#x3D;\&quot;choose-gift li\&quot;  style&#x3D;\&quot;display: none;\&quot;\u003e\n                    \u003cdiv class&#x3D;\&quot;dt\&quot;\u003e搭配赠品\u003c&#x2F;div\u003e\n                    \u003cdiv class&#x3D;\&quot;dd clearfix\&quot;\u003e\n                        \u003cdiv class&#x3D;\&quot;gift J-gift\&quot; clstag&#x3D;\&quot;shangpin|keycount|product|dapeizengpin\&quot;\u003e\n                            \u003ci class&#x3D;\&quot;sprite-gift J-popup\&quot;\u003e\u003c&#x2F;i\u003e\u003cspan class&#x3D;\&quot;gift-tips\&quot;\u003e选择搭配赠品(共\u003cem\u003e0\u003c&#x2F;em\u003e个)\u003c&#x2F;span\u003e\n                        \u003c&#x2F;div\u003e\n                        \u003c!--choosed--\u003e\n                        \u003cdiv class&#x3D;\&quot;J-gift-selected hide\&quot;\u003e\n                            \u003cdiv class&#x3D;\&quot;gift choosed J-gift-choosed\&quot;\u003e\u003c&#x2F;div\u003e\n                            \u003ca href&#x3D;\&quot;#none\&quot; class&#x3D;\&quot;gift-modify J-popup\&quot; clstag&#x3D;\&quot;shangpin|keycount|product|zengpin-genggai\&quot;\u003e更改\u003c&#x2F;a\u003e\n</span><br></pre></td></tr></table></figure>

<hr>
<p>通过上网搜索，发现Golang为我们提供了一个 <code>SetEscapeHTML()</code> 方法，默认情况下该值为 <code>true</code> ，我们只要将其设置为 <code>false</code> 即可实现不对html标签转义。</p>
<p>我的封装方法如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package utils</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">    &quot;bytes&quot;</span><br><span class="line">    &quot;encoding&#x2F;json&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; json.Marshal方法优化，不对html做转义处理</span><br><span class="line">func MarshalHTML(v interface&#123;&#125;) ([]byte, error) &#123;</span><br><span class="line">    var buf bytes.Buffer</span><br><span class="line">    enc :&#x3D; json.NewEncoder(&amp;buf)</span><br><span class="line">    enc.SetEscapeHTML(false)</span><br><span class="line">    err :&#x3D; enc.Encode(v)</span><br><span class="line">    if err !&#x3D; nil &#123;</span><br><span class="line">        return nil, err</span><br><span class="line">    &#125;</span><br><span class="line">    return buf.Bytes(), nil</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<ul>
<li><a href="https://stackoverflow.com/questions/28595664/how-to-stop-json-marshal-from-escaping-and" target="_blank" rel="noopener">go - How to stop json.Marshal from escaping &lt; and &gt;? - Stack Overflow</a></li>
</ul>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>为什么我要放弃Python而转投Golang</title>
    <url>/2018/12/21/why-me-give-up-python-to-golang/</url>
    <content><![CDATA[<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20181221160022.png" alt=""></p>
<p><strong>扎心了，老铁！！！</strong></p>
]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Fiddler抓包时HTTPS证书报错问题</title>
    <url>/2018/12/13/fiddler-cannot-create-the-key-of-the-subject-joesoft-failed/</url>
    <content><![CDATA[<p>今天项目中通过Fiddler抓包的时候，发现遇到 <code>https</code> 的请求无法抓取到，在<code>Host</code>一栏显示的是 <code>Tunnel to</code> 。我的第一感觉推测是Fiddler的证书出问题了。</p>
<p>当在Fiddler中选择 <code>Tools</code> – <code>Fiddler Options</code> – <code>HTTPS</code> 中的选项移除证书的时候，却发现报错了。</p>
<p>错误信息为： <code>Can&#39;t create the key of the subject (&#39;JoeSoft&#39;) Failed</code> </p>
<p>如下面的形式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--------------------------- </span><br><span class="line">Unable to Generate Certificate </span><br><span class="line">--------------------------- </span><br><span class="line">Creation of the interception certificate failed. </span><br><span class="line">makecert.exe returned -1. </span><br><span class="line">Results from C:\Program Files\Fiddler2\MakeCert.exe -ss my -n </span><br><span class="line">&quot;CN&#x3D;DO_NOT_TRUST_FiddlerRoot, O&#x3D;DO_NOT_TRUST, OU&#x3D;Created by </span><br><span class="line">http:&#x2F;&#x2F;www.fiddler2.com&quot; -eku 1.3.6.1.5.5.7.3.1 -r -cy authority -a </span><br><span class="line">sha1 </span><br><span class="line">Error: Can&#39;t create the key of the subject (&#39;JoeSoft&#39;) </span><br><span class="line">Failed </span><br><span class="line">-------------------------------------------</span><br></pre></td></tr></table></figure>

<p>有时候，也可能是下面的错误：</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20190107192103.png" alt=""></p>
<hr>
<h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><p>在网上搜索，找到一种简单粗暴的方式，经测试后确实有效。</p>
<ol>
<li>在Fiddler的选项中操作移除现有证书–见下面的 <code>移除证书</code> 方法。</li>
<li>退出Fiddler。</li>
<li>打开windows资源管理器，输入 <code>%userprofile%\AppData\Roaming\Microsoft\Crypto\RSA</code> ，回车打开；</li>
<li>将该目录下的文件夹删除即可（删除之前以防出问题可以备份一下）。</li>
</ol>
<p>然后，就可以为Fiddler重新添加证书了–见下面的 <code>安装证书</code> 方法。</p>
<hr>
<h4 id="移除证书"><a href="#移除证书" class="headerlink" title="移除证书"></a>移除证书</h4><p>打开Fiddler，选择 <code>Tools</code> – <code>Fiddler Options</code> – <code>HTTPS</code> 选项，</p>
<p>去掉勾选 <code>Capture HTTPS CONNECTs</code> 的对勾：</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20190107191528.png" alt=""></p>
<p>此时，窗口中右下角的 <code>Remove Interception Certificates</code> 按钮就可以点击了：</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20190107191642.png" alt=""></p>
<p>点击移除即可。</p>
<p>另外需要说明一点的是，即使你的证书移除失败了，也要把 <code>Capture HTTPS CONNECTs</code> 一项前面的对勾取消掉，<strong>这很关键</strong>。</p>
<hr>
<h4 id="安装证书"><a href="#安装证书" class="headerlink" title="安装证书"></a>安装证书</h4><p>打开Fiddler，选择 <code>Tools</code> – <code>Fiddler Options</code> – <code>HTTPS</code> 选项，</p>
<p>勾选 <code>Capture HTTPS CONNECTs</code> <code>Decrypt HTTPS traffic</code> 选项，会弹出安装证书文件的提示，点击确定即可安装。</p>
<p>点到 <code>第2步</code> 的时候就会弹出安装证书的弹窗，选择 <code>Yes</code>：</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20190107190523.png" alt=""></p>
<p>完成后点击最下面的 <code>OK</code> 选项。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20181213122350.png" alt=""></p>
<p><strong>然后将Fiddler关闭，再重新打开。</strong></p>
<p>之后，就可以对HTTPS的请求进行抓包了。</p>
<hr>
<h4 id="相关参考"><a href="#相关参考" class="headerlink" title="相关参考"></a>相关参考</h4><ul>
<li><a href="https://www.telerik.com/forums/creation-of-the-interception-certificate-failed" target="_blank" rel="noopener">Creation of the interception certificate failed. - Fiddler on PCs - Fiddler Forum</a></li>
</ul>
]]></content>
      <tags>
        <tag>数据抓取</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang通过Channel实现N个任务并发执行并统一返回结果</title>
    <url>/2018/12/12/golang-task-concurrent-execution-through-channel/</url>
    <content><![CDATA[<p>最近在项目中想要实现一个需求：</p>
<ol>
<li>在一个过程中，可以实现多个任务并发执行，并同时返回结果</li>
<li>多个任务的入参相同或入参类型相同，返回结果类型相同</li>
<li>设置默认的超时时间，当某一任务执行超时，则返回默认值</li>
</ol>
<p>举一个例子如：根据一个用户的 <code>userId</code>，<code>任务1</code> 查询用户信息；<code>任务2</code> 查询用户所有订单信息；<code>任务3</code> 查询用户关注的商品信息；三个任务并发执行，并将三个任务的执行结果统一返回。</p>
<hr>
<h4 id="一个🌰"><a href="#一个🌰" class="headerlink" title="一个🌰"></a>一个🌰</h4><p>参考自：<a href="https://www.jianshu.com/p/42e89de33065" target="_blank" rel="noopener">Golang 中的并发限制与超时控制 - 简书</a> 中的 “超时控制” 示例:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">func main()&#123;</span><br><span class="line">    Test()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func Run(task_id, sleeptime, timeout int, ch chan string) &#123;</span><br><span class="line">    ch_run :&#x3D; make(chan string)</span><br><span class="line">    go run(task_id, sleeptime, ch_run)</span><br><span class="line">    select &#123;</span><br><span class="line">    case re :&#x3D; &lt;-ch_run:</span><br><span class="line">        ch &lt;- re</span><br><span class="line">    case &lt;-time.After(time.Duration(timeout) * time.Second):</span><br><span class="line">        re :&#x3D; fmt.Sprintf(&quot;task id %d, timeout &quot;, task_id)</span><br><span class="line">        ch &lt;- re</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func run(task_id, sleeptime int, ch chan string) &#123;</span><br><span class="line">    time.Sleep(time.Duration(sleeptime) * time.Second)</span><br><span class="line">    ch &lt;- fmt.Sprintf(&quot;task id %d,sleep %d second&quot;, task_id, sleeptime)</span><br><span class="line">    return</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func Test() &#123;</span><br><span class="line">    input :&#x3D; []int&#123;3, 5, 8&#125;</span><br><span class="line">    timeout :&#x3D; 8</span><br><span class="line">    &#x2F;&#x2F; 创建N个任务管道，用来接收各个并发任务的完成结果</span><br><span class="line">    chs :&#x3D; make([]chan string, len(input))</span><br><span class="line">    sTime :&#x3D; time.Now()</span><br><span class="line">    fmt.Println(&quot;start&quot;)</span><br><span class="line"></span><br><span class="line">    for i, sleeptime :&#x3D; range input &#123;</span><br><span class="line">        chs[i] &#x3D; make(chan string)</span><br><span class="line">        go Run(i, sleeptime, timeout, chs[i])</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 获取结果</span><br><span class="line">    for _, ch :&#x3D; range chs &#123;</span><br><span class="line">        fmt.Println(&lt;-ch)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    eTime :&#x3D; time.Now()</span><br><span class="line">    fmt.Printf(&quot;finished,Process time %s. Number of task is %d \n&quot;, eTime.Sub(sTime), len(input))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="我的改造"><a href="#我的改造" class="headerlink" title="我的改造"></a>我的改造</h4><p>我将上面的示例改造成了：将要执行的方法作为参数传入，这样就可以随意传入不同的任务了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">func main()&#123;</span><br><span class="line">    Test()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func Run(f func(s string, ch chan string), s string, timeout int, cOut chan string) &#123;</span><br><span class="line">    ch_run :&#x3D; make(chan string)</span><br><span class="line">    &#x2F;&#x2F; go run(s, ch_run)</span><br><span class="line">    go f(s, ch_run)</span><br><span class="line"></span><br><span class="line">    select &#123;</span><br><span class="line">    case re :&#x3D; &lt;-ch_run:</span><br><span class="line">        cOut &lt;- re</span><br><span class="line">    case &lt;-time.After(time.Duration(timeout) * time.Second):</span><br><span class="line">        re :&#x3D; fmt.Sprintf(&quot;task timeout &quot;)</span><br><span class="line">        cOut &lt;- re</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; func run(s string, ch chan string) &#123;</span><br><span class="line">&#x2F;&#x2F;  time.Sleep(time.Duration(3) * time.Second)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;  ch &lt;- fmt.Sprintf(&quot;task input %s,sleep %d second&quot;, s, 3)</span><br><span class="line">&#x2F;&#x2F;  return</span><br><span class="line">&#x2F;&#x2F; &#125;</span><br><span class="line"></span><br><span class="line">func aa1(s string, ch chan string) &#123;</span><br><span class="line">    time.Sleep(time.Duration(3) * time.Second)</span><br><span class="line">    ch &lt;- fmt.Sprintf(&quot;task1 input %s,sleep %d second&quot;, s, 3)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func aa2(s string, ch chan string) &#123;</span><br><span class="line">    time.Sleep(time.Duration(5) * time.Second)</span><br><span class="line">    ch &lt;- fmt.Sprintf(&quot;task2 input %s,sleep %d second&quot;, s, 5)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func aa3(s string, ch chan string) &#123;</span><br><span class="line">    time.Sleep(time.Duration(10) * time.Second)</span><br><span class="line">    ch &lt;- fmt.Sprintf(&quot;task3 input %s,sleep %d second&quot;, s, 10)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func Test() &#123;</span><br><span class="line">    a :&#x3D; synchron(20, &quot;aaa&quot;, aa1, aa2, aa3)</span><br><span class="line">    fmt.Printf(&quot;result: %v \n&quot;, a)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; timeout: 超时时间</span><br><span class="line">&#x2F;&#x2F; input: 统一入参</span><br><span class="line">&#x2F;&#x2F; args: 方法</span><br><span class="line">func synchron(timeout int, input string, args ...func(s string, ch chan string)) []string &#123;</span><br><span class="line">    &#x2F;&#x2F; input :&#x3D; []string&#123;&quot;aaa&quot;, &quot;bbb&quot;, &quot;ccc&quot;&#125;</span><br><span class="line">    &#x2F;&#x2F; timeout :&#x3D; 8</span><br><span class="line">    &#x2F;&#x2F; 创建N个任务管道，用来接收各个并发任务的完成结果</span><br><span class="line">    chs :&#x3D; make([]chan string, len(args))</span><br><span class="line"></span><br><span class="line">    defer func() &#123;</span><br><span class="line">        for _, c :&#x3D; range chs &#123;</span><br><span class="line">            if c !&#x3D; nil &#123;</span><br><span class="line">                close(c)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    sTime :&#x3D; time.Now()</span><br><span class="line">    fmt.Println(&quot;start&quot;)</span><br><span class="line"></span><br><span class="line">    for i, f :&#x3D; range args &#123;</span><br><span class="line">        chs[i] &#x3D; make(chan string)</span><br><span class="line">        go Run(f, input, timeout, chs[i])</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    resList :&#x3D; []string&#123;&#125;</span><br><span class="line">    &#x2F;&#x2F; 获取结果</span><br><span class="line">    for _, ch :&#x3D; range chs &#123;</span><br><span class="line">        v :&#x3D; &lt;-ch</span><br><span class="line">        fmt.Println(v)</span><br><span class="line">        resList &#x3D; append(resList, v)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    eTime :&#x3D; time.Now()</span><br><span class="line">    fmt.Printf(&quot;finished,Process time %s. Number of task is %d \n&quot;, eTime.Sub(sTime), len(args))</span><br><span class="line">    &#x2F;&#x2F; 将多个异步任务同时返回</span><br><span class="line">    return resList</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># timeout 20 input &quot;aaa&quot;</span><br><span class="line">➜ go run main.go</span><br><span class="line">start</span><br><span class="line">task1 input aaa,sleep 3 second</span><br><span class="line">task2 input aaa,sleep 5 second</span><br><span class="line">task3 input aaa,sleep 10 second</span><br><span class="line">finished,Process time 10.0028964s. Number of task is 3</span><br><span class="line">result: [task1 input aaa,sleep 3 second task2 input aaa,sleep 5 second task3 input aaa,sleep 10 second]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># timeout 7 input &quot;aaa&quot;</span><br><span class="line">➜ go run main.go</span><br><span class="line">start</span><br><span class="line">task1 input aaa,sleep 3 second</span><br><span class="line">task2 input aaa,sleep 5 second</span><br><span class="line">task timeout</span><br><span class="line">finished,Process time 7.001273493s. Number of task is 3</span><br><span class="line">result: [task1 input aaa,sleep 3 second task2 input aaa,sleep 5 second task timeout ]</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="你的扩展"><a href="#你的扩展" class="headerlink" title="你的扩展"></a>你的扩展</h4><p>当然，我上面只是实现了一种情况，还可以修改成为不同的方法传入相应类型的参数等等。</p>
<p>目前我对Golang的Channel了解的不深，只是想要实现类似的效果就在网上找了一下，后期会再深入去学习。</p>
<hr>
<h4 id="相关参考"><a href="#相关参考" class="headerlink" title="相关参考"></a>相关参考</h4><ul>
<li>这个讲的挺全的:</li>
<li><a href="https://www.jianshu.com/p/42e89de33065" target="_blank" rel="noopener">Golang 中的并发限制与超时控制 - 简书</a></li>
<li>你可以从一个简单的例子入手:</li>
<li><a href="https://blog.csdn.net/lanyang123456/article/details/79250015" target="_blank" rel="noopener">golang 多个routine之间的同步 - 翔云 - CSDN博客</a></li>
<li>尝试封装一个并发执行器:</li>
<li><a href="https://blog.csdn.net/love_gaohz/article/details/79659518" target="_blank" rel="noopener">golang 并发之后同步 - @奮 鬥@的专栏 - CSDN博客</a></li>
<li>Channel详解:</li>
<li><a href="https://colobu.com/2016/04/14/Golang-Channels/" target="_blank" rel="noopener">Go Channel 详解 | 鸟窝</a></li>
</ul>
<hr>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Git主分支有更改后如何合并提交</title>
    <url>/2018/11/30/how-to-merge-when-main-branch-changed/</url>
    <content><![CDATA[<p>公司里的项目部署在私有的GitLab站点上，项目的 <code>master</code> 分支不能直接进行 <code>git push</code> 操作，只能通过将其他分支合并到 <code>master</code> 分支来上线新功能。</p>
<p>比如我基于 <code>master</code> 分支创建了一个名为 <code>dev-1130</code> 的分支做功能开发。当功能开发完成后需要合并到 <code>master</code> 分支，却发现 <code>master</code> 分支上已经有同事提交了自己的分支，提示有代码合并冲突，不能自动合并。</p>
<p>那么这种情况下该如何合并当前的分支呢？</p>
<p>其实解决方法有很多，下面说一种。其他的方法后续补充。</p>
<hr>
<h4 id="相关"><a href="#相关" class="headerlink" title="相关"></a>相关</h4><p>2019-10-21 更新：</p>
<ul>
<li><a href="/2018/11/30/how-to-merge-when-main-branch-changed/">Git主分支有更改后如何合并提交 | IT范儿</a></li>
<li><a href="/2019/10/20/how-to-merge-rejected-git-branch-md/">临时分支法解决git提交代码冲突 | IT范儿</a></li>
</ul>
<hr>
<h4 id="分之合并法"><a href="#分之合并法" class="headerlink" title="分之合并法"></a>分之合并法</h4><h5 id="查看当前分支状态"><a href="#查看当前分支状态" class="headerlink" title="查看当前分支状态"></a>查看当前分支状态</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜ git status</span><br><span class="line">On branch dev-1130</span><br><span class="line">nothing to commit, working tree clean</span><br></pre></td></tr></table></figure>

<h5 id="拉取当前分支最新代码"><a href="#拉取当前分支最新代码" class="headerlink" title="拉取当前分支最新代码"></a>拉取当前分支最新代码</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜ git pull origin dev-1130:dev-1130</span><br><span class="line">Already up to date.</span><br></pre></td></tr></table></figure>

<h5 id="切换到master分支"><a href="#切换到master分支" class="headerlink" title="切换到master分支"></a>切换到master分支</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜ git checkout master</span><br><span class="line">Switched to branch &#39;master&#39;</span><br><span class="line">Your branch is up to date with &#39;origin&#x2F;master&#39;.</span><br></pre></td></tr></table></figure>

<h5 id="拉取master分支最新代码"><a href="#拉取master分支最新代码" class="headerlink" title="拉取master分支最新代码"></a>拉取master分支最新代码</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜ git pull origin master:master</span><br><span class="line">Already up to date.</span><br></pre></td></tr></table></figure>

<h5 id="手动合并dev-1130到master分支"><a href="#手动合并dev-1130到master分支" class="headerlink" title="手动合并dev-1130到master分支"></a>手动合并dev-1130到master分支</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜ git merge dev-1130</span><br><span class="line">Auto-merging hello_world&#x2F;hello.py</span><br><span class="line">CONFLICT (content): Merge conflict in hello_world&#x2F;hello.py</span><br><span class="line">Automatic merge failed; fix conflicts and then commit the result.</span><br></pre></td></tr></table></figure>

<h5 id="提示代码冲突，手动解决"><a href="#提示代码冲突，手动解决" class="headerlink" title="提示代码冲突，手动解决"></a>提示代码冲突，手动解决</h5><h5 id="提交更改"><a href="#提交更改" class="headerlink" title="提交更改"></a>提交更改</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜ git add .</span><br><span class="line"></span><br><span class="line">➜ git commit -m &quot;解决冲突&quot;</span><br><span class="line">[master 9c7471f] 解决冲突</span><br></pre></td></tr></table></figure>

<h5 id="查看当前分支状态-1"><a href="#查看当前分支状态-1" class="headerlink" title="查看当前分支状态"></a>查看当前分支状态</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜ git status</span><br><span class="line">On branch master</span><br><span class="line">Your branch is ahead of &#39;origin&#x2F;master&#39; by 3 commits.</span><br><span class="line">  (use &quot;git push&quot; to publish your local commits)</span><br></pre></td></tr></table></figure>

<h5 id="将当前master分支提交到远端的dev-1130分支"><a href="#将当前master分支提交到远端的dev-1130分支" class="headerlink" title="将当前master分支提交到远端的dev-1130分支"></a>将当前master分支提交到远端的dev-1130分支</h5><p>注意这里，是将本地我们解决冲突合并之后的 <code>master</code> 分支代码提交到远端的 <code>dev-1130</code> 分支上。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜ git push origin master:dev-1130</span><br><span class="line">Counting objects: 4, done.</span><br><span class="line">Delta compression using up to 8 threads.</span><br><span class="line">Compressing objects: 100% (4&#x2F;4), done.</span><br><span class="line">Writing objects: 100% (4&#x2F;4), 548 bytes | 548.00 KiB&#x2F;s, done.</span><br><span class="line">Total 4 (delta 2), reused 0 (delta 0)</span><br><span class="line">To mycompany_gitlab:Leafney&#x2F;hello_world.git</span><br><span class="line">   49c7684..9c7471f  master -&gt; dev-1130</span><br></pre></td></tr></table></figure>

<h5 id="拉取远端的dev-1130分支到本地的dev-1130分支"><a href="#拉取远端的dev-1130分支到本地的dev-1130分支" class="headerlink" title="拉取远端的dev-1130分支到本地的dev-1130分支"></a>拉取远端的dev-1130分支到本地的dev-1130分支</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜ git pull origin dev-1130:dev-1130</span><br><span class="line">From mycompany_gitlab:Leafney&#x2F;hello_world</span><br><span class="line">   49c7684..9c7471f  dev-1130    -&gt; dev-1130</span><br><span class="line">Already up to date.</span><br></pre></td></tr></table></figure>

<p>至此，操作完毕。</p>
<hr>
]]></content>
      <categories>
        <category>Git操作系列</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Fork别人的项目源作者更新后如何同步更新</title>
    <url>/2018/11/29/synchronize-project-updated-after-fork/</url>
    <content><![CDATA[<h4 id="fork项目同步更新"><a href="#fork项目同步更新" class="headerlink" title="fork项目同步更新"></a>fork项目同步更新</h4><p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20181103172652.png" alt=""></p>
<p>我之前 fork 了 <a href="https://github.com/imroc/req" target="_blank" rel="noopener">https://github.com/imroc/req</a> 这个项目，今天看到这个项目进行了一些更新操作。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20181103172619.png" alt=""></p>
<p>该项目的最新更新：</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20181103172803.png" alt=""></p>
<p>我的更新：</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20181103172830.png" alt=""></p>
<hr>
<p>更新操作如下：</p>
<p>回到我fork过来的项目主页面，点击 <code>New pull request</code> 按钮：</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20181103173029.png" alt=""></p>
<p>在进入的界面中，将左侧的 <code>base fork</code> 选为自己的仓库，源fork项目作为右边的 <code>head fork</code> ：</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20181103173340.png" alt=""></p>
<p>当选择完左侧 <code>base fork</code> 后，界面会变成如下：</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20181103173519.png" alt=""></p>
<p>此时，点击右上角的 <code>compare across forks</code> ，下面就会出现可选择的选框：</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20181103173811.png" alt=""></p>
<p>这时，再将左侧选择为自己的仓库，右侧选择为源fork项目：</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20181103174331.png" alt=""></p>
<p>可以看到，下面已经显示出了源作者的变更操作。</p>
<p>点击 <code>Create pull request</code> 按钮，填写提交的信息：</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20181103174810.png" alt=""></p>
<p>之后，点击 <code>Create pull request</code> 即可。</p>
<p>至此，就将源项目的变更在自己的项目下作了一个 <code>Pull requests</code> 的合并请求。点击下面的 <code>Merge pull request</code> ,完成合并。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20181103175235.png" alt=""></p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20181103175315.png" alt=""></p>
<hr>
<h4 id="修改了项目提交更新"><a href="#修改了项目提交更新" class="headerlink" title="修改了项目提交更新"></a>修改了项目提交更新</h4><p>未完待续。。。</p>
<hr>
<h4 id="相关参考"><a href="#相关参考" class="headerlink" title="相关参考"></a>相关参考</h4><ul>
<li><a href="https://blog.csdn.net/qq_26787115/article/details/52133008" target="_blank" rel="noopener">Github上怎么修改别人的项目并且提交给原作者！图文并茂！ - 刘桂林的博客 - CSDN博客</a></li>
<li><a href="https://blog.csdn.net/zhongzunfa/article/details/80344585" target="_blank" rel="noopener">github fork 别人的项目源作者更新后如何同步更新 - zhongzunfa的专栏 - CSDN博客</a></li>
</ul>
]]></content>
      <categories>
        <category>Git操作系列</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang http malformed HTTP response 探究</title>
    <url>/2018/11/28/golang-http-error-malformed-http-response/</url>
    <content><![CDATA[<h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>处理请求返回内容的时候， 遇到 <code>error malformed HTTP response &quot;&lt;html&gt;&quot;</code> 异常信息</p>
<h4 id="探究"><a href="#探究" class="headerlink" title="探究"></a>探究</h4><p>根据目前的测试情况，得出的结论是：</p>
<ol>
<li>在请求返回结果为 <code>html</code> 页面时，proxy 需要带上 <code>http://</code> 前缀。</li>
<li>在请求返回结果为 <code>api</code> 接口时，proxy 需要去掉 <code>http://</code> 前缀。</li>
</ol>
<p>待后续多次验证。</p>
<p><strong>经验证：</strong> 以上结论 <strong>错误</strong>。</p>
<p>| 请求网址 | 返回结果类型 | proxy格式 | proxy是否带http | 请求结果 |<br>| ——- | ——– | ——– | ——– |<br>| <code>http://ip38.com/</code> | <code>html</code> | <code>http://27.203.219.181:8060</code> | 是 | ok，已验证 |<br>| <code>http://ip38.com/</code> | <code>html</code> | <code>27.203.219.181:8060</code> | 否 | 请求正常，代理未生效,已验证 |<br>|  <code>https://www.cnblogs.com/</code> | <code>html</code> | <code>http://27.203.219.181:8060</code> | 是 | <code>error,malformed HTTP response &quot;&lt;html&gt;&quot;</code>,已验证  |<br>|  <code>https://www.cnblogs.com/</code> | <code>html</code> | <code>27.203.219.181:8060</code> | 否 |  ok，已验证 |<br>| <code>https://p.3.cn/prices/mgets</code> | <code>json</code> | <code>http://27.203.219.181:8060</code> | 是 | <code>error,malformed HTTP response &quot;&lt;html&gt;&quot;</code>,已验证  |<br>| <code>https://p.3.cn/prices/mgets</code> | <code>json</code> | <code>27.203.219.181:8060</code> | 否 |  ok,已验证  |</p>
<p>即：</p>
<ul>
<li>请求 <code>http://ip38.com/</code> 时，需要使用 proxy格式为 <code>http://27.203.219.181:8060</code> 才能访问成功。</li>
<li>请求 <code>https://www.cnblogs.com/</code> 时，需要使用proxy格式为 <code>27.203.219.181:8060</code> 才能访问成功。</li>
<li>请求 <code>https://p.3.cn/prices/mgets</code> 时，需要使用proxy格式为 <code>27.203.219.181:8060</code> 才能访问成功。</li>
</ul>
<hr>
<h4 id="我的一种解法"><a href="#我的一种解法" class="headerlink" title="我的一种解法"></a>我的一种解法</h4><p>项目中在测试使用代理的代码段：</p>
<p>代码中的 <code>req.XReq()</code> 是对 <a href="https://github.com/imroc/req" target="_blank" rel="noopener">imroc/req: a golang http request library for humans</a> 的封装。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F; 使用了代理ip</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;为防止使用代理ip请求超时太长，设置默认超时时间为30s</span><br><span class="line">    if _, ok :&#x3D; rh[&quot;time-out&quot;]; !ok &#123;</span><br><span class="line">        &#x2F;&#x2F; 请求头中 time-out 参数不存在</span><br><span class="line">        rh[&quot;time-out&quot;] &#x3D; 30</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    is_malformedHttp :&#x3D; false</span><br><span class="line"></span><br><span class="line">HandleProxy:</span><br><span class="line">    for _, ag :&#x3D; range rAgents &#123;</span><br><span class="line">        &#x2F;&#x2F; 表示在使用proxy ip时，是否遇到返回错误信息为 malformed HTTP response &quot;&lt;html&gt;&quot; 的情况</span><br><span class="line"></span><br><span class="line">        if is_malformedHttp &#123;</span><br><span class="line">            &#x2F;&#x2F; 将代理ip的 http:&#x2F;&#x2F; 去掉</span><br><span class="line">            ag &#x3D; GetHostAndPort(ag)</span><br><span class="line">            fmt.Printf(&quot;[info] remove http for proxy ip: %s .\n&quot;, ag)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        rh[&quot;proxy&quot;] &#x3D; ag</span><br><span class="line">        fmt.Printf(&quot;[info] use proxy to request: %s .\n&quot;, ag)</span><br><span class="line"></span><br><span class="line">        resData, errMsg &#x3D; req.XReq(rUrl, rh, rp)</span><br><span class="line">        if errMsg !&#x3D; nil &#123;</span><br><span class="line">            fmt.Printf(&quot;[info] the proxy result error: %s .\n&quot;, errMsg.Error())</span><br><span class="line"></span><br><span class="line">            if !is_malformedHttp &#123;</span><br><span class="line">                &#x2F;&#x2F; 当 is_malf 为 false时，才对 mailformed http response 处理</span><br><span class="line">                if strings.Contains(errMsg.Error(), &quot;malformed HTTP response&quot;) &#123;</span><br><span class="line">                    fmt.Printf(&quot;[error] the proxy ip format error: %s .\n&quot;, errMsg.Error())</span><br><span class="line">                    is_malformedHttp &#x3D; true</span><br><span class="line">                    time.Sleep(1 * time.Second)</span><br><span class="line">                    goto HandleProxy</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            continue</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            fmt.Printf(&quot;[info] the proxy ok %s .\n&quot;, ag)</span><br><span class="line">            break</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>实现逻辑是：</p>
<p>当传入的代理ip格式为 <code>http://27.203.219.181:8060</code> ，先发起请求，如果请求报错，判断错误信息是否包含 <code>malformed HTTP response</code> ，如果包含，则认为是代理ip的格式错误，需要对代理ip处理。</p>
<p>通过 <code>goto</code> 语句，直接跳回到 <code>for</code> 循环之外，对代理ip做格式化处理，截取到 <code>host:port</code> 的格式再次去请求。</p>
<p>为了防止第二次请求时再遇到 <code>malformed HTTP response</code> 错误的话，又会 <code>goto</code> 到 <code>for</code> 循环之外，所以这里加一个标记 <code>is_malformedHttp</code> ，标明代理ip出现格式问题时是否被处理过。</p>
<p>后经测试验证，这种方法无效。</p>
<hr>
<p>验证结果：</p>
<ol>
<li>当代理格式为 <code>[&quot;http://192.168.1.100:8080&quot;,&quot;192.168.1.120:8080&quot;]</code> 时，proxy1第一次请求异常，经“处理”后请求仍异常，proxy2第一次请求异常。请求结束。</li>
<li>当代理格式为 <code>[&quot;192.168.1.100:8080&quot;,&quot;192.168.1.120:8080&quot;]</code> 时，proxy1第一次请求正常。请求结束。</li>
</ol>
<hr>
<h4 id="猜测"><a href="#猜测" class="headerlink" title="猜测"></a>猜测</h4><p>为什么在代理Ip经处理后的请求，仍然会出错呢？</p>
<p>个人怀疑是 <code>defer</code> 导致的。</p>
<blockquote>
<p>defer语句调用一个函数，这个函数执行会推迟，直到外围的函数返回，或者外围函数运行到最后，或者相应的goroutine panic.</p>
</blockquote>
<p>在请求之后，需要 <code>defer</code> 去 <code>close</code> 请求。而 <code>defer</code> 又有延后性，也就导致了在 <code>for</code> 循环中的多次请求之间都是有关联的，第一次的请求对象并没有被关闭就继续进行了后续的请求，直到函数结束，请求才被关闭掉。</p>
<p>也就导致了，即使第二次请求时的代理ip去掉了 <code>http://</code> ，请求仍然会失败。</p>
<hr>
<h4 id="之后如何处理"><a href="#之后如何处理" class="headerlink" title="之后如何处理"></a>之后如何处理</h4><ol>
<li>先用 <code>http://27.203.219.181:8060</code> 的代理格式去请求，当遇到 <code>malformed HTTP response</code> 错误时，直接抛出异常，等待下次请求。</li>
<li>在第二次请求时，将代理ip的格式更改为 <code>27.203.219.181:8060</code> 传入，再去执行请求操作。</li>
</ol>
<h4 id="相关"><a href="#相关" class="headerlink" title="相关"></a>相关</h4><ul>
<li><a href="https://github.com/golang/go/blob/master/src/net/http/response.go#L168" target="_blank" rel="noopener">https://github.com/golang/go/blob/master/src/net/http/response.go#L168</a></li>
<li><a href="http://holys.im/2015/06/28/debug-http/" target="_blank" rel="noopener">HTTP Method | holys’</a></li>
</ul>
<h4 id="推荐"><a href="#推荐" class="headerlink" title="推荐"></a>推荐</h4><p>推荐两个请求类：</p>
<ul>
<li>req: <a href="https://github.com/imroc/req" target="_blank" rel="noopener">imroc/req: a golang http request library for humans</a></li>
<li>gorequest: <a href="https://github.com/parnurzeal/gorequest" target="_blank" rel="noopener">parnurzeal/gorequest: GoRequest – Simplified HTTP client ( inspired by nodejs SuperAgent )</a></li>
</ul>
<hr>
<p>以上，仅做记录。由于暂未查询到问题原因，后续持续更新。</p>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客Next主题解决不蒜子统计不显示问题</title>
    <url>/2018/11/12/busuanzi-counter-error/</url>
    <content><![CDATA[<p>今天在查看博客中文章的时候，发现页面中的统计都不显示了：</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20181112154409.png" alt=""></p>
<p>看了一下Chrome的控制台，发现是 <code>不蒜子</code> 统计的js文件找不到而报错了：</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20181112154303.png" alt=""></p>
<p>打开 <code>不蒜子</code> 的官方网站 <a href="http://ibruce.info/2015/04/04/busuanzi/" target="_blank" rel="noopener">不蒜子 | 不如</a> 居然看到了如下的提示：</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20181112154539.png" alt=""></p>
<p>竟然是原来的域名不可用了。</p>
<p>额。。。看完我只想说：七牛确实坑啊。。。</p>
<hr>
<p>解决方法：</p>
<p>官方也给出了相应的方法，即只需要更改 <code>next</code> 主题下的 <code>不蒜子</code> 插件的js引用链接即可。</p>
<p>进入 hexo 博客项目的 <code>themes</code> 目录下，在 <code>next</code> 主题目录中的 <code>layout/_third-party/analytics/</code> 下找到 <code>busuanzi-counter.swig</code> 文件，</p>
<p>将:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script async src&#x3D;&quot;https:&#x2F;&#x2F;dn-lbstatics.qbox.me&#x2F;busuanzi&#x2F;2.3&#x2F;busuanzi.pure.mini.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<p>换成：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script async src&#x3D;&quot;&#x2F;&#x2F;busuanzi.ibruce.info&#x2F;busuanzi&#x2F;2.3&#x2F;busuanzi.pure.mini.js&quot;&gt;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<p>即可。</p>
<hr>
<p>当然，改起来并不麻烦。关键是你得知道改哪里。</p>
]]></content>
      <categories>
        <category>Hexo博客搭建</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Google Pixel解锁BL、刷入Twrp及Root折腾小记</title>
    <url>/2018/10/16/google-pixel-unlock-bl-and-root/</url>
    <content><![CDATA[<p>因为个人项目上的需要，我从某宝入手了一款二手的Google Pixel 欧版手机。当初选择时主要是考虑到它的大内存–4G内存，可以流畅运行常用的程序。（不过入手之后的感觉就是，要想用好Google的手机，「科学上网」是必备的技能，否则的话，还是用国内的手机吧！）</p>
<p>因为需要在手机上安装按键精灵的手机版app，而调试按键精灵的脚本又需要获取手机的Root权限，所以就开始了我的Pixel刷机之旅。</p>
<hr>
<h4 id="准备工具"><a href="#准备工具" class="headerlink" title="准备工具"></a>准备工具</h4><ol>
<li>Google Pixel手机 欧版（国际版）</li>
<li>Android 8.1.0</li>
<li>Windows或Mac</li>
<li>twrp</li>
<li>Magisk</li>
<li>ss</li>
</ol>
<hr>
<h4 id="欧版判断"><a href="#欧版判断" class="headerlink" title="欧版判断"></a>欧版判断</h4><p>点击Settings(设置) -&gt; System(系统) -&gt; About phone(关于手机) -&gt; Regulatory labels(监管标签) 查看。</p>
<p>MODEL: G-2PW4200 ，其中 <code>4200</code> 表示欧版，<code>4100</code> 表示美版。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20181016195733.png" alt=""></p>
<hr>
<h4 id="解锁Bootloader"><a href="#解锁Bootloader" class="headerlink" title="解锁Bootloader"></a>解锁Bootloader</h4><p>（注意：解锁 Bootloader 重置设备数据，请注意备份。一定不要忘记退出你的Google账号和取消指纹识别及锁屏设置。）</p>
<p>由于我的手机是新买的，所以这些操作就免了。</p>
<hr>
<h5 id="开启USB调试和OEM解锁"><a href="#开启USB调试和OEM解锁" class="headerlink" title="开启USB调试和OEM解锁"></a>开启USB调试和OEM解锁</h5><p>安装「科学上网」工具，并成功接入互联网。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20181016143933.png" alt=""></p>
<p>选择 「设置-系统-关于手机-版本号」，猛击「版本号」7次开启 「开发者选项」。</p>
<p>返回「上一页」，在「开发者选项」中开启「USB调试」和「OEM解锁」两个选项。如果「OEM解锁」选项显示为灰色，请检查网络连接是否正常。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20181016144134.png" alt=""></p>
<p>通过数据线将手机连接至电脑，此时，手机端会弹出 USB 调试申请，点击「允许」。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20181016144340.png" alt=""></p>
<p>可以通过命令 <code>adb devices</code> 来验证是否允许adb调试：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜ adb devices</span><br><span class="line">List of devices attached</span><br><span class="line">FA6XXXXXXX53    device</span><br></pre></td></tr></table></figure>

<hr>
<h5 id="进入-Bootloader模式"><a href="#进入-Bootloader模式" class="headerlink" title="进入 Bootloader模式"></a>进入 Bootloader模式</h5><p>进入bootloader默认有两种方式，第一种是通过在关机状态下「按住电源键+音量减少键」；第二种是通过「ADB命令」进入。</p>
<p>这里我采用「adb命令」来操作。</p>
<p>回到命令提示符窗口，键入 <code>adb reboot bootloader</code> 并回车，手机会立即重启至 Bootloader 模式。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">~&#x2F;test&#x2F;pixel</span><br><span class="line">➜ adb reboot bootloader</span><br></pre></td></tr></table></figure>

<p>之后，通过 <code>fastboot devices</code> 命令验证 fastboot 是否成功：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜ fastboot devices</span><br><span class="line">FA6AB0311758    fastboot</span><br></pre></td></tr></table></figure>

<hr>
<h5 id="解锁-Bootloader"><a href="#解锁-Bootloader" class="headerlink" title="解锁 Bootloader"></a>解锁 Bootloader</h5><p>上一步进入Bootloader页面后，手机界面应该是如下图：</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20181016211926.png" alt=""></p>
<p>在命令提示符窗口键入 <code>fastboot flashing unlock</code> 并回车，手机进入 Bootloader 解锁界面。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜ fastboot flashing unlock</span><br><span class="line">...</span><br><span class="line">OKAY [  0.049s]</span><br><span class="line">finished. total time: 0.049s</span><br></pre></td></tr></table></figure>

<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20181016212056.png" alt=""></p>
<p>对于 <code>Pixel 2 XL</code> 机型，要用如下的命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fastboot flashing unlock_critical</span><br></pre></td></tr></table></figure>

<p>详情查看：<a href="https://developers.google.com/android/images" target="_blank" rel="noopener">Factory Images for Nexus and Pixel Devices  |  Google APIs for Android  |  Google Developers</a></p>
<p>在 Bootloader 解锁界面中，使用音量键 <code>+/-</code> 来控制光标，选择「Yes」并按下电源键来进行 Bootloader 解锁。</p>
<p>确认完毕后,稍作等待。通过 <code>fastboot reboot</code> 命令重启手机：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜ fastboot reboot</span><br><span class="line">rebooting...</span><br><span class="line"></span><br><span class="line">finished. total time: 0.050s</span><br></pre></td></tr></table></figure>

<p>稍等片刻之后，你的设备会自动重启。</p>
<hr>
<h5 id="判断解锁成功"><a href="#判断解锁成功" class="headerlink" title="判断解锁成功"></a>判断解锁成功</h5><p>当手机重启时出现黑底白字的英文警告页以及屏幕下方出现一把打开的小锁，那 Bootloader 就解锁成功啦。</p>
<p>重启手机，出现如下两个界面就算解锁成功：</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20181016191327.png" alt=""></p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20181016191719.png" alt=""></p>
<p>当然，还有一种更简单的方法，就是再次进入 <code>fastboot</code> 模式，查看：</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20181017110509.png" alt=""></p>
<hr>
<h4 id="解锁Bootloader后的两个问题"><a href="#解锁Bootloader后的两个问题" class="headerlink" title="解锁Bootloader后的两个问题"></a>解锁Bootloader后的两个问题</h4><h5 id="恢复初始"><a href="#恢复初始" class="headerlink" title="恢复初始"></a>恢复初始</h5><p>在解锁 Bootloader 之后，可以看到手机系统已经是完全初始化的状态了。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20181016212322.png" alt=""></p>
<p>在进入 「关于手机」 界面后，可以发现之前开启的「开发者选项」也是默认关闭了，需要再次点击7次「版本号」开启。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20181016212428.png" alt=""></p>
<p>那么，在执行后面的操作时是否仍需要再次将「OEM解锁」打开呢？答案是：<strong>不需要</strong>。</p>
<p>然而，因为后面需要用到 <code>adb</code> 命令去操作手机，所以「USB调试」选项还是需要打开的。</p>
<p>关于「OEM锁与bootloader锁的关系」，可以看下面的 <a href="#OEM锁与bootloader锁的关系">疑难解答</a> 。</p>
<hr>
<h5 id="错误提示"><a href="#错误提示" class="headerlink" title="错误提示"></a>错误提示</h5><p>成功解锁Bootloader后，每次手机启动或重启时，都会出现黑底白字的英文警告页，提示 “Your device software can’t be checked for corruption. Please lock the bootloader”。 </p>
<p><strong>这没有什么可担心的，这是正常的！</strong></p>
<p>这仅仅是提示你 Bootloader 被解锁了，直接忽视即可。</p>
<hr>
<h4 id="刷入第三方Recovery-TWRP及Root"><a href="#刷入第三方Recovery-TWRP及Root" class="headerlink" title="刷入第三方Recovery:TWRP及Root"></a>刷入第三方Recovery:TWRP及Root</h4><p>由于Pixel及Pixel XL都采用A/B升级系统，因而可以理解为手机里有2个系统，如果你按照传统刷入Twrp的方法刷入的话，那么你并不会获得一个永久的Twrp。所以需要先刷入一个临时的Twrp，在通过临时的Twrp来刷入永久的Twrp从而来获取Root权限。</p>
<h5 id="下载必要软件"><a href="#下载必要软件" class="headerlink" title="下载必要软件"></a>下载必要软件</h5><p>需要下载临时的Twrp、永久Twrp及Magisk三个文件。</p>
<p>首先，前往 TWRP 官网 <a href="https://twrp.me/Devices/" target="_blank" rel="noopener">Devices</a> 下载最新版 TWRP 压缩包（.zip）和临时 TWRP 镜像文件（.img）。</p>
<p>我的Pixel对应选择从这个页面 <a href="https://dl.twrp.me/sailfish/" target="_blank" rel="noopener">Download TWRP for sailfish</a> 下载的 <code>3.2.3-1</code> 版本：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">twrp-pixel-installer-sailfish-3.2.3-1.zip （永久twrp）</span><br><span class="line">twrp-3.2.3-1-sailfish.img (临时twrp)</span><br></pre></td></tr></table></figure>

<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20181016155219.png" alt=""></p>
<p>从github <a href="https://github.com/topjohnwu/Magisk/releases" target="_blank" rel="noopener">Releases · topjohnwu/Magisk</a> 下载最新的 Magisk 包。 这里我下载的是 <code>17.2</code> 版本：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Magisk-v17.2.zip</span><br></pre></td></tr></table></figure>

<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20181016161659.png" alt=""></p>
<hr>
<h5 id="拷贝文件到手机"><a href="#拷贝文件到手机" class="headerlink" title="拷贝文件到手机"></a>拷贝文件到手机</h5><p>假设我电脑上的操作目录为: <code>~/test/pixel</code> 。</p>
<p>将 <code>twrp-3.2.3-1-sailfish.img</code> 拷贝到该目录下。</p>
<p>将 <code>twrp-pixel-installer-sailfish-3.2.3-1.zip</code> 和 <code>Magisk-v17.2.zip</code> 拷贝到手机中。</p>
<p>在将文件拷贝到手机中时，我发现通过数据线连接到电脑时，选择 <code>传输文件</code> 电脑中并没有出现手机存储的盘符，也就无法直接将文件拖拽到手机中。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20181016183455.png" alt=""></p>
<p>在经过一番摆弄之后，我觉得最靠谱的还是通过 <code>adb</code> 的方式来上传文件。</p>
<p>连接手机，在手机端弹出「USB调试」点击确定，打开item2，切换到目录 <code>~/test/pixel</code> ：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">~&#x2F;test&#x2F;pixel</span><br><span class="line">➜ ls</span><br><span class="line">Magisk-v17.2.zip                          twrp-3.2.3-1-sailfish.img                 twrp-pixel-installer-sailfish-3.2.3-1.zip</span><br></pre></td></tr></table></figure>

<p>查看adb连接状态：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">~&#x2F;test&#x2F;pixel</span><br><span class="line">➜ adb devices</span><br><span class="line">List of devices attached</span><br><span class="line">FA6XXXXXXX53    device</span><br></pre></td></tr></table></figure>

<hr>
<p>先通过 <code>adb shell</code> 命令进入手机的bash命令下，在 <code>/sdcard</code> 目录下创建临时文件夹 <code>tmp</code> :</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">~&#x2F;test&#x2F;pixel</span><br><span class="line">➜ adb shell</span><br><span class="line">sailfish:&#x2F; $ cd sdcard&#x2F;</span><br><span class="line">sailfish:&#x2F;sdcard $ mkdir tmp</span><br><span class="line">sailfish:&#x2F;sdcard $ ls</span><br><span class="line">Alarms Android DCIM Download Movies Music Notifications Pictures Podcasts Ringtones tmp</span><br><span class="line">sailfish:&#x2F;sdcard $ ls -al</span><br><span class="line">total 100</span><br><span class="line">drwxrwx--x 13 root sdcard_rw 4096 2018-10-16 17:27 .</span><br><span class="line">drwx--x--x  4 root sdcard_rw 4096 2009-01-01 16:02 ..</span><br><span class="line">drwxrwx--x  2 root sdcard_rw 4096 2009-01-01 16:02 Alarms</span><br><span class="line">drwxrwx--x  3 root sdcard_rw 4096 2009-01-01 16:02 Android</span><br><span class="line">drwxrwx--x  2 root sdcard_rw 4096 2009-01-01 16:02 DCIM</span><br><span class="line">drwxrwx--x  2 root sdcard_rw 4096 2009-01-01 16:02 Download</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">drwxrwx--x  2 root sdcard_rw 4096 2018-10-16 17:27 tmp</span><br><span class="line">sailfish:&#x2F;sdcard $</span><br></pre></td></tr></table></figure>

<p>通过 <code>adb push &lt;local&gt; &lt;remote&gt;</code> 命令将文件上传到手机的 <code>/sdcard/tmp/</code> 目录中：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">~&#x2F;test&#x2F;pixel</span><br><span class="line">➜ adb push twrp-pixel-installer-sailfish-3.2.3-1.zip &#x2F;sdcard&#x2F;tmp&#x2F;</span><br><span class="line">twrp-pixel-installer-sailfish-3.2.3-1.zip: 1 file pushed. 14.6 MB&#x2F;s (11492088 bytes in 0.753s)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">~&#x2F;test&#x2F;pixel</span><br><span class="line">➜ adb push Magisk-v17.2.zip &#x2F;sdcard&#x2F;tmp&#x2F;</span><br><span class="line">Magisk-v17.2.zip: 1 file pushed. 16.3 MB&#x2F;s (4174026 bytes in 0.245s)</span><br></pre></td></tr></table></figure>

<p>查看手机中文件列表：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">~&#x2F;test&#x2F;pixel</span><br><span class="line">➜ adb shell ls -al &#x2F;sdcard&#x2F;tmp&#x2F;</span><br><span class="line">total 15328</span><br><span class="line">drwxrwx--x  2 root sdcard_rw     4096 2018-10-16 17:32 .</span><br><span class="line">drwxrwx--x 13 root sdcard_rw     4096 2018-10-16 17:27 ..</span><br><span class="line">-rw-rw----  1 root sdcard_rw  4174026 2018-10-16 16:07 Magisk-v17.2.zip</span><br><span class="line">-rw-rw----  1 root sdcard_rw 11492088 2018-10-16 15:56 twrp-pixel-installer-sailfish-3.2.3-1.zip</span><br></pre></td></tr></table></figure>

<p>注：对于为什么将文件拷贝到手机的 <code>/sdcard</code> 目录，可以看下面的 <a href="#adbpush文件时权限不够">疑难解答</a></p>
<hr>
<h5 id="刷临时Twrp"><a href="#刷临时Twrp" class="headerlink" title="刷临时Twrp"></a>刷临时Twrp</h5><h6 id="引导进入-Bootloader"><a href="#引导进入-Bootloader" class="headerlink" title="引导进入 Bootloader"></a>引导进入 Bootloader</h6><p>执行命令 <code>adb reboot bootloader</code>:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">~&#x2F;test&#x2F;pixel</span><br><span class="line">➜ adb reboot bootloader</span><br></pre></td></tr></table></figure>

<hr>
<h6 id="刷入临时Twrp"><a href="#刷入临时Twrp" class="headerlink" title="刷入临时Twrp"></a>刷入临时Twrp</h6><p>执行命令 <code>fastboot boot *.img</code> 来启动临时Twrp：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">~&#x2F;test&#x2F;pixel took 5s</span><br><span class="line">➜ fastboot boot twrp-3.2.3-1-sailfish.img</span><br><span class="line">downloading &#39;boot.img&#39;...</span><br><span class="line">OKAY [  0.712s]</span><br><span class="line">booting...</span><br><span class="line">OKAY [  0.903s]</span><br><span class="line">finished. total time: 1.615s</span><br></pre></td></tr></table></figure>

<p>之后，手机会进入到临时的Twrp中：</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20181016184210.png" alt=""></p>
<p>滑动下面的 <code>Swipe to Allow Modifications</code> 滑条，进入Twrp操作页面：</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20181016184312.png" alt=""></p>
<hr>
<h5 id="刷入永久Twrp"><a href="#刷入永久Twrp" class="headerlink" title="刷入永久Twrp"></a>刷入永久Twrp</h5><p>选择 <code>Install</code> – 找到目录 <code>/sdcard/tmp/</code> – 选择 <code>twrp*.zip</code> 文件 – 弹出安装界面 – 直接滑动底部的滑条 <code>Swipe to confirm Flash</code> 安装：</p>
<blockquote>
<p>这里也间接验证了为什么要选择 <code>/sdcard</code> 目录：点击 <code>Install</code> 按钮后，直接进入的就是 <code>/sdcard</code> 目录，即只能操作这个目录。</p>
</blockquote>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20181016184418.png" alt=""></p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20181016184615.png" alt=""></p>
<p>等待进度条执行完毕，最后会显示 <code>...done</code> 的提示。说明这一步执行完成。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20181016184814.png" alt=""></p>
<hr>
<h5 id="刷入Magisk"><a href="#刷入Magisk" class="headerlink" title="刷入Magisk"></a>刷入Magisk</h5><p>上一步安装完成后，我们发现界面中只有两个按钮：<code>Wipe cache/dalvik</code> 和 <code>Reboot System</code> 。后一项肯定不能选，如果选择重启，那还有一个 <code>Magisk</code> 文件没有刷入，否则的话还需要走一遍上面的 <code>刷入临时Twrp</code> 的操作；而第一项 清除临时缓存文件，只是我不清楚该文件具体是干什么用的，所以也怕点了之后会出问题。</p>
<p>这种情况下，我只好上网去查询看看是否有相关的操作介绍，可想而知，这个问题可能太简单了，很难找到相关的介绍。</p>
<p>正当我一脸迷蒙时，我的手误按了顶部的 “蓝色条” 部分，发现… 界面返回了 <code>Install</code> 页面：</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20181016184312.png" alt=""></p>
<p>我只想说，这操作简直是 <code>666</code> 啊！！！</p>
<p>经过验证，只要点击顶部的「install Zip」 蓝色条部分左侧的「图标」处，就会返回 <code>Team Win Recovery Project</code> 界面。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20181016184919.png" alt=""></p>
<p>依照上面的安装步骤，继续安装 <code>Magisk-v17.2.zip</code> 文件。直到界面中提示 <code>...done</code> 时，说明安装完成。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20181016185120.png" alt=""></p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20181016185217.png" alt=""></p>
<p>安装完成后，点击下面的 <code>Reboot System</code> 按钮，重启系统。</p>
<p>不过，这时候发现界面会提示询问是否安装 <code>TWRP App</code> ？</p>
<p>这里，<strong>千万不要安装</strong>。直接点击中间的 <strong><code>Do Not Install</code></strong> 即可。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20181016185342.png" alt=""></p>
<p>待手机重启进入系统后，可以发现手机APP中多了一个 <code>Magisk</code> 的脸谱Logo图标。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20181016185438.png" alt=""></p>
<p>至此，整个刷机过程就结束了。</p>
<hr>
<h4 id="验证是否成功Root"><a href="#验证是否成功Root" class="headerlink" title="验证是否成功Root"></a>验证是否成功Root</h4><p>至于如何验证是否成功Root，最简单的方法就是安装几个需要获取Root权限的软件就可以了。</p>
<p>可以在「脸谱Logo」的菜单中选择「超级用户」，为相应的软件开启Root权限。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20181017101716.png" alt=""></p>
<hr>
<h4 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h4><h5 id="去掉wifi叉号标记"><a href="#去掉wifi叉号标记" class="headerlink" title="去掉wifi叉号标记"></a>去掉wifi叉号标记</h5><p>在国内的网络环境下，通过wifi联网之后，Pixel的wifi图标上会默认显示一个「叉号」。虽然能够正常联网，但对于强迫症来说，还是觉得很碍眼。</p>
<p>对于这个问题，原理性的解释是：</p>
<blockquote>
<p>谷歌原生安卓系统当连接到移动数据网络或者WIFI网络的时候，其NetworkMonitor模块会向特定的服务器发起一个http的请求并利用收到的响应进行网络状态判断。由于谷歌的服务器被GFW屏蔽，所以导致没有返回值，这个时候谷歌安卓系统就会在信号或者wifi上打一个感叹号或叉号。</p>
</blockquote>
<p>可以通过换成v2ex的验证方式来解决。在命令提示符中执行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb shell settings put global captive_portal_https_url https:&#x2F;&#x2F;www.google.cn&#x2F;generate_204</span><br></pre></td></tr></table></figure>

<p>然后开启飞行模式，再关闭飞行模式即解决！</p>
<p>操作前：</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20181017104902.png" alt=""></p>
<p>执行命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">~&#x2F;test&#x2F;pixel</span><br><span class="line">➜ adb shell settings put global captive_portal_https_url https:&#x2F;&#x2F;www.google.cn&#x2F;generate_204</span><br><span class="line"></span><br><span class="line">~&#x2F;test&#x2F;pixel</span><br><span class="line">➜</span><br></pre></td></tr></table></figure>

<p>操作后：</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20181017105009.png" alt=""></p>
<p>如果你想恢复的话，使用下面的命令：（未亲测）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb shell settings delete global captive_portal_server  </span><br><span class="line">adb shell settings put global captive_portal_detection_enabled 1</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="疑难解答"><a href="#疑难解答" class="headerlink" title="疑难解答"></a>疑难解答</h4><h5 id="fastboot-oem-unlock-or-fastboot-flashing-unlock"><a href="#fastboot-oem-unlock-or-fastboot-flashing-unlock" class="headerlink" title="fastboot oem unlock or fastboot flashing unlock"></a><code>fastboot oem unlock</code> or <code>fastboot flashing unlock</code></h5><p>在网上搜索到的一些教程中，有的说是使用 <code>fastboot oem unlock</code> 来解BL，有的说是通过 <code>fastboot flashing unlock</code> 来解BL。</p>
<p>最终在google的官网中，我找到了如下的介绍：</p>
<blockquote>
<p>If necessary, unlock the device’s bootloader using one of the following methods:</p>
<p>If you are updating a Nexus or Pixel device that is manufactured in 2015 or later (for example, a Nexus 5X, Nexus 6P, Pixel, Pixel XL, Pixel 2 or Pixel 2 XL device), run this command:</p>
<p>fastboot flashing unlock</p>
<p>If you are updating an older device, run this command:</p>
<p>fastboot oem unlock</p>
</blockquote>
<p>更多介绍，请看： <a href="https://developers.google.com/android/images" target="_blank" rel="noopener">Factory Images for Nexus and Pixel Devices  |  Google APIs for Android  |  Google Developers</a></p>
<hr>
<h5 id="OEM锁与bootloader锁的关系"><a href="#OEM锁与bootloader锁的关系" class="headerlink" title="OEM锁与bootloader锁的关系"></a>OEM锁与bootloader锁的关系</h5><p>OEM锁是限制了bootloader锁，OEM锁系统默认是关闭的，必须在开发者中手动打开。之后 bootloader锁才能进行解锁。</p>
<p>通俗一点的说，OEM锁只跟bootloader锁有关系，和之后的Root操作没有关系。所以当解锁Bootloader后系统配置被重置了，即使 「开发者选项」中的 「OEM解锁」显示为灰色不能操作，也无关紧要了。</p>
<p>参考：<a href="http://bbs.zhiyoo.com/thread-13220001-1-1.html" target="_blank" rel="noopener">关于解锁bootloader的重要性.机友们务必细读,生死问题,请勿忽视! - Pixel | Pixel XL 论坛 - 智友论坛</a></p>
<hr>
<h5 id="解锁bootloader的好处"><a href="#解锁bootloader的好处" class="headerlink" title="解锁bootloader的好处"></a>解锁bootloader的好处</h5><ol>
<li>最重要是为自己的手机买了份保险,留了条生路.卡死 系统抽风或变砖后,<br>可在bootloader界面下线刷原厂镜像恢复系统。(不解锁的无法刷机救回)</li>
<li>作为亲儿子机型，XDA上很多资源，有大量第三方ROM、优化补丁、Recoovery、ROOT</li>
<li>解锁bootloader后，不ROOT和修改系统文件，不影响在线OTA升级。</li>
</ol>
<p>解锁后 开机Google logo下有个小锁和两秒钟的警示语说你的手机已经解了bootloader锁,<br>机友们可以无视之，不影响使用。</p>
<hr>
<h5 id="adbpush文件时权限不够"><a href="#adbpush文件时权限不够" class="headerlink" title="adbpush文件时权限不够"></a>adbpush文件时权限不够</h5><p>在使用命令 <code>adb push</code> 将文件 <code>twrp-pixel-installer-sailfish-3.2.3-1.zip</code> 上传到手机时，可能由于权限问题而报错：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">~&#x2F;test&#x2F;pixel</span><br><span class="line">➜ adb push twrp-pixel-installer-sailfish-3.2.3-1.zip &#x2F;</span><br><span class="line">adb: error: failed to copy &#39;twrp-pixel-installer-sailfish-3.2.3-1.zip&#39; to &#39;&#x2F;twrp-pixel-installer-sailfish-3.2.3-1.zip&#39;: remote couldn&#39;t create file: Read-only file system</span><br><span class="line">twrp-pixel-installer-sailfish-3.2.3-1.zip: 0 files pushed. 22.7 MB&#x2F;s (1048448 bytes in 0.044s)</span><br></pre></td></tr></table></figure>

<p>我们可以通过 <code>adb shell</code> 命令来进入到手机的bash命令下，也可以直接在后面跟上bash命令来执行。进行验证：</p>
<p><code>adb shell</code> :</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">~&#x2F;test&#x2F;pixel</span><br><span class="line">➜ adb shell</span><br><span class="line">sailfish:&#x2F; $ </span><br><span class="line">sailfish:&#x2F; $ ls</span><br><span class="line">ls: .&#x2F;verity_key: Permission denied</span><br><span class="line">ls: .&#x2F;init.rc: Permission denied</span><br><span class="line">ls: .&#x2F;postinstall: Permission denied</span><br><span class="line">ls: .&#x2F;init.usb.configfs.rc: Permission denied</span><br><span class="line">ls: .&#x2F;init.zygote64_32.rc: Permission denied</span><br><span class="line">...</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>或者</p>
<p><code>adb shell mkdir tmp</code> :</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">~&#x2F;test&#x2F;pixel</span><br><span class="line">➜ adb shell mkdir tmp</span><br><span class="line">mkdir: &#39;tmp&#39;: Read-only file system</span><br></pre></td></tr></table></figure>

<p>发现，果然是当前用户的权限不够。</p>
<p>经过验证，发现当前用户对 <code>/sdcard</code> 目录是有权限进行文件或目录的操作的。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">~&#x2F;test&#x2F;pixel</span><br><span class="line">➜ adb shell</span><br><span class="line">sailfish:&#x2F; $ cd sdcard&#x2F;</span><br><span class="line">sailfish:&#x2F;sdcard $ ls</span><br><span class="line">Alarms Android DCIM Download Movies Music Notifications Pictures Podcasts Ringtones</span><br><span class="line">sailfish:&#x2F;sdcard $ mkdir tmp</span><br><span class="line">sailfish:&#x2F;sdcard $ ls</span><br><span class="line">Alarms Android DCIM Download Movies Music Notifications Pictures Podcasts Ringtones tmp</span><br><span class="line"></span><br><span class="line">sailfish:&#x2F;sdcard $ rm -rf tmp</span><br><span class="line">sailfish:&#x2F;sdcard $ ls</span><br><span class="line">Alarms Android DCIM Download Movies Music Notifications Pictures Podcasts Ringtones</span><br><span class="line">sailfish:&#x2F;sdcard $ exit</span><br></pre></td></tr></table></figure>

<hr>
<p><strong>码字不易，以上操作均为本人实际操作并验证。如果该文章对您有所帮助，可以赠送一杯咖啡！！！</strong></p>
<hr>
<h4 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h4><h5 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h5><ul>
<li><a href="https://github.com/shadowsocks/shadowsocks-android/releases" target="_blank" rel="noopener">Releases · shadowsocks/shadowsocks-android</a></li>
<li><a href="https://dl.twrp.me/sailfish/" target="_blank" rel="noopener">Download TWRP for sailfish</a></li>
<li><a href="https://github.com/topjohnwu/Magisk/releases" target="_blank" rel="noopener">Releases · topjohnwu/Magisk</a></li>
</ul>
<h5 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h5><ul>
<li><a href="https://www.xzymoe.com/pixel-xl-unlockbl-root/" target="_blank" rel="noopener">Pixel XL解锁BL、刷入Twrp及Root教程 | XZYMOE’S BLOG</a> <strong>☆</strong></li>
<li><a href="https://sspai.com/post/38319" target="_blank" rel="noopener">从 Bootloader 解锁到必备应用推荐：我的 Google Pixel 折腾手记 - 少数派</a></li>
<li><a href="https://blog.csdn.net/ekeuy/article/details/43112645" target="_blank" rel="noopener">Android ADB命令大全(通过ADB命令查看wifi密码、MAC地址、设备信息、操作文件、查看文件、日志信息、卸载、启动和安装APK等) - mingy的专栏 - CSDN博客</a></li>
</ul>
<hr>
<p><strong>2019年08月27日 Update</strong></p>
<h4 id="Magisk更新"><a href="#Magisk更新" class="headerlink" title="Magisk更新"></a>Magisk更新</h4><p>将 Magisk 从 <code>v17.2</code> 版本升级到 <code>v19.3</code> 版本。</p>
<p>可以从 <a href="https://github.com/topjohnwu/Magisk/releases" target="_blank" rel="noopener">Magisk</a> 下载最新版本的Magisk的zip压缩包。</p>
<h5 id="第一步-adb连接"><a href="#第一步-adb连接" class="headerlink" title="第一步 adb连接"></a>第一步 adb连接</h5><p>要确保手机设备通过adb正确连接。如果提示为 <code>offline</code> 则需要重新设置手机的连接。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜ adb devices</span><br><span class="line">List of devices attached</span><br><span class="line">FA6XXXXXXX53	offline</span><br></pre></td></tr></table></figure>

<p>直到出现 <code>device</code> 时，说明手机正确连接了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜ adb devices</span><br><span class="line">List of devices attached</span><br><span class="line">FA6XXXXXXX53	device</span><br></pre></td></tr></table></figure>

<p>一般出现 <code>offline</code> 的情况可能是usb数据线的问题，或者连接设置的问题。</p>
<p>这里我的解决方法是：</p>
<ol>
<li>断开usb设备连接</li>
<li>执行命令 <code>adb kill-server</code> 来停止adb服务</li>
<li>执行命令 <code>adb start-server</code> 来重新运行adb服务</li>
<li>重新通过usb连接手机设备</li>
<li>打开 <code>开发者选项</code> ，重新勾选 <code>usb调试</code>，在弹出的窗口选择 <code>确定</code></li>
<li>再次执行命令 <code>adb devices</code>，发现显示 <code>device</code> 了</li>
</ol>
<h5 id="第二步-拷贝Magisk文件"><a href="#第二步-拷贝Magisk文件" class="headerlink" title="第二步 拷贝Magisk文件"></a>第二步 拷贝Magisk文件</h5><p>通过 <code>adb push</code> 命令将新版的Magisk文件拷贝到手机设备中：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜ adb push Magisk-v19.3.zip &#x2F;sdcard&#x2F;tmp&#x2F;</span><br><span class="line">Magisk-v19.3.zip: 1 file pushed. 21.0 MB&#x2F;s (5348187 bytes in 0.243s)</span><br></pre></td></tr></table></figure>

<p>这里我之前使用的是 <code>Magisk-v17.2.zip</code> 版本，现在要更新到 <code>Magisk-v19.3.zip</code> 版本。</p>
<h5 id="第三步-进入Bootloader"><a href="#第三步-进入Bootloader" class="headerlink" title="第三步 进入Bootloader"></a>第三步 进入Bootloader</h5><p>执行 <code>adb reboot bootloader</code> 进入 <code>Bootloader</code> 界面。</p>
<h5 id="第四步-进入临时Twrp"><a href="#第四步-进入临时Twrp" class="headerlink" title="第四步 进入临时Twrp"></a>第四步 进入临时Twrp</h5><p>通过 <code>twrp*.img</code> 文件，启动进入临时Twrp：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜ fastboot boot twrp-3.2.3-1-sailfish.img</span><br><span class="line">ERROR: Couldn&#39;t create a device interface iterator: (e00002bd)</span><br><span class="line">downloading &#39;boot.img&#39;...</span><br><span class="line">OKAY [  0.712s]</span><br><span class="line">booting...</span><br><span class="line">OKAY [  0.893s]</span><br><span class="line">finished. total time: 1.605s</span><br></pre></td></tr></table></figure>

<h5 id="第五步-安装Magisk"><a href="#第五步-安装Magisk" class="headerlink" title="第五步 安装Magisk"></a>第五步 安装Magisk</h5><p>进入 <code>Twrp</code> 页面后，滑动下面的 <code>Swipe to Allow Modifications</code> 滑条，进入Twrp操作页面。</p>
<p>选择 <code>Install</code> – 找到目录 <code>/sdcard/tmp/</code> – 选择 <code>Magisk-v19.3.zip</code> 文件，滑动 <code>Swipe to confirm Flash</code> 来安装。</p>
<p>安装完成后，点击下面的 <code>Reboot System</code> 按钮，进入下一步。</p>
<p>之后，直接点击中间的 <code>Do Not Install</code> 等待手机重启进入系统即可。</p>
<hr>
]]></content>
      <tags>
        <tag>Skill</tag>
      </tags>
  </entry>
  <entry>
    <title>OmniGraffle常用快捷键</title>
    <url>/2018/10/10/omnigraffle-shortcut-keys/</url>
    <content><![CDATA[<p>OmniGraffle 是 Mac 上的绘图利器。Graffle 在很多方面对标 Windows 系统上的 Microsoft Visio，是制作各种文档的绝妙工具。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20181010134917.png" alt=""></p>
<hr>
<h4 id="变换移动"><a href="#变换移动" class="headerlink" title="变换移动"></a>变换移动</h4><p>放大：<code>Cmd+Shift+.</code> 或 <code>z+点击</code></p>
<p>缩小：<code>Cmd+Shift+,</code> 或 <code>z+Option+点击</code></p>
<p>缩放：<code>按住Cmd+双指推移</code></p>
<p>中心缩放：<code>按住Cmd + 按住Option + 双指推移</code></p>
<p>旋转对象：<code>点击对象 + 选择定位块 + 旋转</code></p>
<hr>
<h4 id="常用工具"><a href="#常用工具" class="headerlink" title="常用工具"></a>常用工具</h4><p>选取工具：<code>按住 v 不放并拖拽对象</code> 或 <code>按 1 切换：按一次选中 ；按二次保持选中</code></p>
<p>形状工具：<code>按住 s 不放并在空白处拖拽</code> 或 <code>按 2 切换：按一次选中 ；按二次保持选中</code></p>
<p>线条工具：<code>按住 c 不放先后点击目标形状连接</code> 或 <code>按 3 切换：按一次选中 ；按二次保持选中</code></p>
<p>文字工具：<code>按住 t 并单击后输入文字</code> 或 <code>按 4 切换：按一次选中 ；按二次保持选中</code></p>
<p>磁化工具：<code>按住 m 不放并点击形状内任意位置</code> 或 <code>按 9 切换：按一次选中 ；按二次保持选中</code></p>
<p>其他：</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20181010135036.png" alt=""></p>
<hr>
<h4 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h4><p>复制对象：<code>选中对象 + Cmd+d</code></p>
<hr>
<h4 id="磁化点"><a href="#磁化点" class="headerlink" title="磁化点"></a>磁化点</h4><p>添加磁化点：<code>按住 m 不放并点击形状内任意位置</code> 或 <code>按 9 切换：按一次选中 ；按二次保持选中</code></p>
<p>删除磁化点：<code>在磁化按钮保持选中状态下 + Option + 点击磁化点</code></p>
<hr>
<h4 id="检查器面板"><a href="#检查器面板" class="headerlink" title="检查器面板"></a>检查器面板</h4><p>切换检查器面板：<code>Cmd+1/2/3/4/5</code></p>
<p>对象检查器：<code>Cmd+1</code></p>
<p>类型检查器：<code>Cmd+2</code></p>
<p>…以此类推。</p>
<hr>
<h4 id="层级"><a href="#层级" class="headerlink" title="层级"></a>层级</h4><p>前移对象：<code>Cmd+Option+F</code></p>
<p>后移对象：<code>Cmd+Option+B</code></p>
<p>置于最前：<code>Cmd+Shift+F</code></p>
<p>置于最后：<code>Cmd+Shift+B</code></p>
<p>锁定：<code>选中对象 + Cmd+L</code></p>
<p>解锁：<code>选中对象 + Cmd+Option+L</code></p>
<p>创建群组：<code>Cmd+Shift+G</code> (Group)</p>
<p>解散群组：<code>Cmd+Shift+U</code> (Ungroup)</p>
<hr>
<h4 id="导出"><a href="#导出" class="headerlink" title="导出"></a>导出</h4><p>在将完成后的流程图导出成jpg等其他格式时，有一个「导出区域」的选项。默认情况下是「所有对象」，但选择这种后导出的图片中可能出现元素显示的不完整的情况。</p>
<p>要想将所有元素都显示，那么需要选择「当前版面」选项。</p>
<hr>
<h4 id="相关参考"><a href="#相关参考" class="headerlink" title="相关参考"></a>相关参考</h4><ul>
<li><a href="https://www.cnblogs.com/huangshiyu13/p/7169600.html" target="_blank" rel="noopener">Omnigraffle快捷键 - Shiyu_Huang - 博客园</a></li>
<li><a href="https://sspai.com/post/41950" target="_blank" rel="noopener">OmniGraffle 基础入门（一）：从工具栏开始 - 少数派</a></li>
</ul>
]]></content>
      <tags>
        <tag>Skill</tag>
        <tag>Tools</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker图形化管理工具Portainer</title>
    <url>/2018/09/30/docker-management-tool-portainer/</url>
    <content><![CDATA[<p><code>Portainer</code> 是一个轻量级的Docker容器管理界面，可让您轻松管理 <code>Docker</code> 主机 或 <code>Swarm</code> 集群。</p>
<p>在服务器上部署了很多Docker容器后，总觉得还差点什么。感觉确实需要一个图形化的容器管理工具，便于直观的查看目前服务器中容器的状态等。</p>
<p>通过对各种管理工具的比较，最后确定使用 <code>Portainer</code> 这款轻量级的。毕竟是个人服务器，也用不到特别大的量级。</p>
<h4 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h4><p>这里我直接使用官网提供的 <code>docker-compose.yml</code> 来启动portainer容器。下载该文件: <a href="https://portainer.io/download/docker-compose.yml" target="_blank" rel="noopener">Download the Compose file</a> ，更多的安装信息可见官方文档：<a href="https://portainer.readthedocs.io/en/stable/deployment.html" target="_blank" rel="noopener">Deployment — Portainer 1.20.1 documentation</a> 。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">version: &#39;2&#39;</span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">  portainer:</span><br><span class="line">    image: portainer&#x2F;portainer</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;9000:9000&quot;</span><br><span class="line">    command: -H unix:&#x2F;&#x2F;&#x2F;var&#x2F;run&#x2F;docker.sock</span><br><span class="line">    volumes:</span><br><span class="line">      - &#x2F;var&#x2F;run&#x2F;docker.sock:&#x2F;var&#x2F;run&#x2F;docker.sock</span><br><span class="line">      - portainer_data:&#x2F;data</span><br><span class="line"></span><br><span class="line">volumes:</span><br><span class="line">  portainer_data:</span><br></pre></td></tr></table></figure>

<p>第一次登录，需要输入管理员的密码。</p>
<p>管理界面：</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20180930185744.png" alt=""></p>
<hr>
<p>更多内容可以查看官方文档。</p>
<h4 id="相关参考"><a href="#相关参考" class="headerlink" title="相关参考"></a>相关参考</h4><ul>
<li><a href="https://portainer.readthedocs.io/en/stable/deployment.html" target="_blank" rel="noopener">Deployment — Portainer 1.20.1 documentation</a></li>
</ul>
]]></content>
      <categories>
        <category>Docker容器技术</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTPS泛域名证书申请之三-七牛云图片链接升级https</title>
    <url>/2018/09/24/https-certificate-three-of-qiniu-https/</url>
    <content><![CDATA[<p>上篇文章 <a href="/2018/09/24/https-certificate-two-of-nginx-settings/">HTTPS泛域名证书申请之二-Nginx配置</a> 说道，要让我的博客 <code>https://www.itfanr.cc</code> 用上全站的HTTPS安全模式，必须解决七牛云图片链接http的问题。</p>
<p>而七牛云官方推荐的https方案，费用比价高。那有没有什么免费的方法呢？答案就是通过 <code>自定义域名</code> 来设置。</p>
<p>也就是域名我们自定义，证书使用之前设置的泛域名证书，那么问题就搞定了。</p>
<h4 id="在七牛云中添加自定义域名"><a href="#在七牛云中添加自定义域名" class="headerlink" title="在七牛云中添加自定义域名"></a>在七牛云中添加自定义域名</h4><p>在个人的 “存储空间” 设置菜单中选择 “绑定域名” ，域名类型中选择 “普通域名” 即可。</p>
<p>在 “加速域名” 处设置一个自定义的域名，比如我设置的是 <code>qiniu.itfanr.cc</code> 。</p>
<p>“通信协议” 选择 <code>HTTPS</code> 方式。</p>
<p>由于要为自定义域名添加证书文件，而之前也没有添加过，所以这里选择 “SSL 证书管理” 来设置。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20180924112100.png" alt=""></p>
<p>在 “SSL证书服务 &gt; 证书管理” 界面中，选择 “上传自有证书” 来添加之前申请到的证书文件。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20180920204113.png" alt=""></p>
<p>设置完成后，等待七牛云处理。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20180920203520.png" alt=""></p>
<p>处理完成后，会给出如下提示：</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20180920203108.png" alt=""></p>
<h4 id="在阿里云设置域名CNAME"><a href="#在阿里云设置域名CNAME" class="headerlink" title="在阿里云设置域名CNAME"></a>在阿里云设置域名CNAME</h4><p>七牛云自定义域名添加成功后，还要添加域名的解析。也就是需要在域名服务商处添加一条 <code>CNAME</code> 记录。</p>
<p>以下是我在阿里云中添加的配置：</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20180920203411.png" alt=""></p>
<p>稍等片刻，等待生效。</p>
<h4 id="设置七牛云图片外链默认域名"><a href="#设置七牛云图片外链默认域名" class="headerlink" title="设置七牛云图片外链默认域名"></a>设置七牛云图片外链默认域名</h4><p>域名解析成功后，还要在七牛云中添加图片的默认域名。</p>
<p>打开七牛云 “存储空间” 设置，在 “内容管理” 中的 “外链默认域名” 处选择刚刚添加的 自定义域名，之后 “保存默认域名” 即可。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20180924113506.png" alt=""></p>
<p>选择一张图片，通过自定义域名访问：</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20180920204430.png" alt=""></p>
<p>可以看到，已经能正常支持https了。</p>
<h4 id="图片优化"><a href="#图片优化" class="headerlink" title="图片优化"></a>图片优化</h4><p>一般直接截图或者上传本地的图片到七牛云后，通过链接直接访问，图片体积都会很大，加载时间也会很长。</p>
<p>而七牛云中也有相关的图片优化设置。打开 “存储空间设置” – “图片样式” 选项，在这里可以添加自定义的图片优化方案。</p>
<p>在 “样式分隔符设置” 中，可以设置分隔符。</p>
<p>那么，添加上图片优化的链接就如下：我的图片样式定义为<code>blog</code>，分隔符为 <code>-</code> </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;qiniu.itfanr.cc&#x2F;blog&#x2F;170809&#x2F;26B1D9j4eI.jpg-blog</span><br></pre></td></tr></table></figure>

<h4 id="替换Hexo博客中已有的图片链接"><a href="#替换Hexo博客中已有的图片链接" class="headerlink" title="替换Hexo博客中已有的图片链接"></a>替换Hexo博客中已有的图片链接</h4><p>因为之前的文章中也有添加很多的七牛云图片链接，但都是<code>http</code> 的，想要一篇文章一篇文章的替换也很麻烦，所以我就写了一个Py脚本来做替换的事。</p>
<p>Py脚本主要内容如下：完整代码查看：<a href="https://github.com/Leafney/md-qiniu-imges-replace" target="_blank" rel="noopener">Leafney/md-qiniu-imges-replace: markdown文件中七牛云图片链接替换</a>  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def md_img_replace(md_file):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    替换md文件中的图片链接</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    result&#x3D;False</span><br><span class="line">    post&#x3D;md_read(md_file)</span><br><span class="line">    matches &#x3D; re.compile(</span><br><span class="line">        &#39;!\\[.*?\\]\\((.*?)\\)|&lt;img.*?src&#x3D;[\&#39;\&quot;](.*?)[\&#39;\&quot;].*?&gt;&#39;).findall(post)</span><br><span class="line">    </span><br><span class="line">    if matches and len(matches)&gt;0:</span><br><span class="line">        # 该md文件中有图片</span><br><span class="line"></span><br><span class="line">        # 输出文件名称</span><br><span class="line">        print(&#39;文件：[&#123;0&#125;] 中含有图片&#39;.format(md_file))</span><br><span class="line">        new_post&#x3D;post</span><br><span class="line">        for sub_match in matches: # 正则里包含或，所以这里sub_matth是元组</span><br><span class="line">            # print(sub_match)</span><br><span class="line">            for match in sub_match:</span><br><span class="line">                if match and len(match)&gt;0:</span><br><span class="line">                    # 得到单张图片链接</span><br><span class="line">                    print(&#39;找到图片链接：[&#123;0&#125;]&#39;.format(match))</span><br><span class="line">                    # 在这里遍历一遍后，发现我的文章中图片链接的特点主要有三种格式：</span><br><span class="line">                    &quot;&quot;&quot;</span><br><span class="line">                    https:&#x2F;&#x2F;gitee.com&#x2F;leafney&#x2F;blogimage&#x2F;raw&#x2F;master&#x2F;blog&#x2F;20180924112100.png  -- 已经符合要求的</span><br><span class="line">                    http:&#x2F;&#x2F;ouej55gp9.bkt.clouddn.com&#x2F;blog&#x2F;20180920204113.png   -- 只有旧版链接的</span><br><span class="line">                    http:&#x2F;&#x2F;ouej55gp9.bkt.clouddn.com&#x2F;blog&#x2F;180116&#x2F;B2c2Deah5B.png?imageslim -- 旧版链接带优化参数的</span><br><span class="line">                    所以，下面的操作主要针对于上面的三种情况来处理</span><br><span class="line"></span><br><span class="line">                    ***** 所以，这里要改成针对于你自己的文章图片链接来处理 *****</span><br><span class="line">                    </span><br><span class="line">                    &quot;&quot;&quot;</span><br><span class="line">                    # print(&#39;----------------&#39;)</span><br><span class="line"></span><br><span class="line">                    # 判断图片域名是否为 http:&#x2F;&#x2F;ouej55gp9.bkt.clouddn.com&#x2F; 是的话，则替换为 https:&#x2F;&#x2F;qiniu.itfanr.cc</span><br><span class="line">                    if match.startswith(&#39;http:&#x2F;&#x2F;ouej55gp9.bkt.clouddn.com&#39;):</span><br><span class="line">                        # 记录下替换前的链接</span><br><span class="line">                        old_url&#x3D;match</span><br><span class="line">                        new_url &#x3D; match.replace(</span><br><span class="line">                            &#39;http:&#x2F;&#x2F;ouej55gp9.bkt.clouddn.com&#39;, &#39;https:&#x2F;&#x2F;qiniu.itfanr.cc&#39;)</span><br><span class="line">                        # print(&#39;step_1_new_url:[&#123;0&#125;]&#39;.format(new_url))</span><br><span class="line"></span><br><span class="line">                        # 判断是否以 ?imageslim 结尾</span><br><span class="line">                        if not match.endswith(&#39;imageslim&#39;):</span><br><span class="line">                            # 不是，在结尾添加</span><br><span class="line">                            new_url +&#x3D; &#39;?imageslim&#39;</span><br><span class="line">                        </span><br><span class="line">                        print(&#39;step_2_new_url:[&#123;0&#125;]&#39;.format(new_url))</span><br><span class="line">                        # 替换 post 中的 old_url为 new_url，并将新内容写回文件</span><br><span class="line">                        new_post &#x3D; new_post.replace(old_url, new_url)</span><br><span class="line">                        result &#x3D; True</span><br><span class="line">                    </span><br><span class="line">                    print(&#39;----------------&#39;)</span><br><span class="line">        if result:</span><br><span class="line">            # 将内容重新写回文件</span><br><span class="line">            # print(new_post)</span><br><span class="line">            md_write(md_file,new_post)</span><br><span class="line">            print(&#39;ok-修改成功&#39;)</span><br><span class="line">        print(&#39;****************&#39;)</span><br><span class="line">    </span><br><span class="line">    return result</span><br></pre></td></tr></table></figure>

<p>执行过程记录：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">文件：[.&#x2F;_posts&#x2F;https-certificate-two-of-nginx-settings.md] 中含有图片</span><br><span class="line">找到图片链接：[http:&#x2F;&#x2F;ouej55gp9.bkt.clouddn.com&#x2F;blog&#x2F;20180919001532.png]</span><br><span class="line">step_2_new_url:[https:&#x2F;&#x2F;qiniu.itfanr.cc&#x2F;blog&#x2F;20180919001532.png?imageslim]</span><br><span class="line">----------------</span><br><span class="line">找到图片链接：[http:&#x2F;&#x2F;ouej55gp9.bkt.clouddn.com&#x2F;blog&#x2F;20180919180924.png]</span><br><span class="line">step_2_new_url:[https:&#x2F;&#x2F;qiniu.itfanr.cc&#x2F;blog&#x2F;20180919180924.png?imageslim]</span><br><span class="line">----------------</span><br><span class="line">找到图片链接：[http:&#x2F;&#x2F;ouej55gp9.bkt.clouddn.com&#x2F;blog&#x2F;20180919171901.png]</span><br><span class="line">step_2_new_url:[https:&#x2F;&#x2F;qiniu.itfanr.cc&#x2F;blog&#x2F;20180919171901.png?imageslim]</span><br><span class="line">----------------</span><br><span class="line">找到图片链接：[https:&#x2F;&#x2F;qiniu.itfanr.cc&#x2F;blog&#x2F;20180924000202.png?imageslim]</span><br><span class="line">----------------</span><br><span class="line">找到图片链接：[https:&#x2F;&#x2F;qiniu.itfanr.cc&#x2F;blog&#x2F;20180924000229.png?imageslim]</span><br><span class="line">----------------</span><br><span class="line">找到图片链接：[http:&#x2F;&#x2F;ouej55gp9.bkt.clouddn.com&#x2F;blog&#x2F;20180919165205.png]</span><br><span class="line">step_2_new_url:[https:&#x2F;&#x2F;qiniu.itfanr.cc&#x2F;blog&#x2F;20180919165205.png?imageslim]</span><br><span class="line">----------------</span><br><span class="line">找到图片链接：[http:&#x2F;&#x2F;ouej55gp9.bkt.clouddn.com&#x2F;blog&#x2F;20180919170111.png]</span><br><span class="line">step_2_new_url:[https:&#x2F;&#x2F;qiniu.itfanr.cc&#x2F;blog&#x2F;20180919170111.png?imageslim]</span><br><span class="line">----------------</span><br><span class="line">找到图片链接：[http:&#x2F;&#x2F;ouej55gp9.bkt.clouddn.com&#x2F;blog&#x2F;20180919173643.png]</span><br><span class="line">step_2_new_url:[https:&#x2F;&#x2F;qiniu.itfanr.cc&#x2F;blog&#x2F;20180919173643.png?imageslim]</span><br><span class="line">----------------</span><br><span class="line">找到图片链接：[http:&#x2F;&#x2F;ouej55gp9.bkt.clouddn.com&#x2F;blog&#x2F;20180919180924.png]</span><br><span class="line">step_2_new_url:[https:&#x2F;&#x2F;qiniu.itfanr.cc&#x2F;blog&#x2F;20180919180924.png?imageslim]</span><br><span class="line">----------------</span><br><span class="line">找到图片链接：[http:&#x2F;&#x2F;ouej55gp9.bkt.clouddn.com&#x2F;blog&#x2F;20180919180907.png]</span><br><span class="line">step_2_new_url:[https:&#x2F;&#x2F;qiniu.itfanr.cc&#x2F;blog&#x2F;20180919180907.png?imageslim]</span><br><span class="line">----------------</span><br><span class="line">ok-修改成功</span><br><span class="line">****************</span><br><span class="line">文件：[.&#x2F;_posts&#x2F;https-certificate-one-of-application.md] 中含有图片</span><br><span class="line">找到图片链接：[https:&#x2F;&#x2F;qiniu.itfanr.cc&#x2F;blog&#x2F;20180921175821.png?imageslim]</span><br><span class="line">----------------</span><br><span class="line">找到图片链接：[http:&#x2F;&#x2F;ouej55gp9.bkt.clouddn.com&#x2F;blog&#x2F;20180918225700.png]</span><br><span class="line">step_2_new_url:[https:&#x2F;&#x2F;qiniu.itfanr.cc&#x2F;blog&#x2F;20180918225700.png?imageslim]</span><br><span class="line">----------------</span><br><span class="line">找到图片链接：[http:&#x2F;&#x2F;ouej55gp9.bkt.clouddn.com&#x2F;blog&#x2F;20180918232923.png]</span><br><span class="line">step_2_new_url:[https:&#x2F;&#x2F;qiniu.itfanr.cc&#x2F;blog&#x2F;20180918232923.png?imageslim]</span><br><span class="line">----------------</span><br><span class="line">ok-修改成功</span><br><span class="line">****************</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>HTTPS</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>HTTPS</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTPS泛域名证书申请之二-Nginx配置</title>
    <url>/2018/09/24/https-certificate-two-of-nginx-settings/</url>
    <content><![CDATA[<p>在申请成功https的泛域名证书账号，接下来就是为主域名以及二级域名配置添加证书文件，以让“小绿锁” 显示出来。</p>
<h4 id="显示小绿锁却提示404NotFound"><a href="#显示小绿锁却提示404NotFound" class="headerlink" title="显示小绿锁却提示404NotFound"></a>显示小绿锁却提示404NotFound</h4><p>上篇文章末尾，我为二级域名 <code>gogit.itfanr.cc</code> 的Nginx配置中指定了证书目录，网站也正常应用上了https：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 443 ssl;</span><br><span class="line">    server_name gogit.itfanr.cc;</span><br><span class="line"></span><br><span class="line">    ssl_certificate &#x2F;etc&#x2F;acme.sh&#x2F;itfanr.cc&#x2F;fullchain.cer;</span><br><span class="line">    ssl_certificate_key &#x2F;etc&#x2F;acme.sh&#x2F;itfanr.cc&#x2F;itfanr.cc.key;</span><br><span class="line">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line"></span><br><span class="line">    proxy_set_header Host $host;</span><br><span class="line">    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">    proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">    proxy_set_header X-Forwarded-Proto $scheme;</span><br><span class="line"></span><br><span class="line">    location &#x2F; &#123;</span><br><span class="line">        proxy_pass http:&#x2F;&#x2F;127.0.0.1:3000&#x2F;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name gogit.itfanr.cc;</span><br><span class="line">        return 301 https:&#x2F;&#x2F;$server_name$request_uri;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但当我按照上面的配置为主域名 <code>www.itfanr.cc</code> 也指定https证书后：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 443 ssl;</span><br><span class="line">    server_name www.itfanr.cc;</span><br><span class="line"></span><br><span class="line">    ssl_certificate &#x2F;etc&#x2F;acme.sh&#x2F;itfanr.cc&#x2F;fullchain.cer;</span><br><span class="line">    ssl_certificate_key &#x2F;etc&#x2F;acme.sh&#x2F;itfanr.cc&#x2F;itfanr.cc.key;</span><br><span class="line">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line"></span><br><span class="line">    proxy_set_header Host $host;</span><br><span class="line">    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">    proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">    proxy_set_header X-Forwarded-Proto $scheme;</span><br><span class="line"></span><br><span class="line">    location &#x2F; &#123;</span><br><span class="line">        proxy_pass http:&#x2F;&#x2F;localhost:8080&#x2F;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name www.itfanr.cc;</span><br><span class="line">        return 301 https:&#x2F;&#x2F;$server_name$request_uri;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果，页面却显示了 <code>404 Not Found</code> 的错误。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20180919001532.png" alt=""></p>
<h4 id="解决多域名下设置证书"><a href="#解决多域名下设置证书" class="headerlink" title="解决多域名下设置证书"></a>解决多域名下设置证书</h4><p>通过相关问题的搜索，结果却没有找到什么有效的解决方法。另外由于我对Nginx的配置也不是特别精通，所以一下子陷入了迷茫中。</p>
<p>后来，在一篇相关文章 <a href="https://godruoyi.com/posts/let-s-encrypt-generic-domain-name-certificate-application-and-configuration" target="_blank" rel="noopener">Let’s Encrypt 泛域名证书申请及配置</a> 中找到了一种方法。</p>
<h5 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h5><p>在Nginx的 <code>snippets</code> 目录下，创建一个配置文件，我这里命名为 <code>ssl-itfanr.conf</code>，内容用来设置SSL相关的配置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># &#x2F;etc&#x2F;nginx&#x2F;snippets&#x2F;ssl-itfanr.conf</span><br><span class="line"></span><br><span class="line">server_tokens   off;</span><br><span class="line"></span><br><span class="line">ssl_session_cache        shared:SSL:10m;</span><br><span class="line">ssl_session_timeout      60m;</span><br><span class="line"></span><br><span class="line">ssl_session_tickets      on;</span><br><span class="line"></span><br><span class="line">ssl_stapling             on;</span><br><span class="line">ssl_stapling_verify      on;</span><br><span class="line"></span><br><span class="line">resolver                 8.8.4.4 8.8.8.8  valid&#x3D;300s;</span><br><span class="line">resolver_timeout         10s;</span><br><span class="line">ssl_prefer_server_ciphers on;</span><br><span class="line"></span><br><span class="line"># 证书路径 绝对地址</span><br><span class="line">ssl_certificate         &#x2F;etc&#x2F;acme.sh&#x2F;itfanr.cc&#x2F;fullchain.cer;</span><br><span class="line">ssl_certificate_key     &#x2F;etc&#x2F;acme.sh&#x2F;itfanr.cc&#x2F;itfanr.cc.key;</span><br><span class="line"></span><br><span class="line">ssl_protocols            TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line"></span><br><span class="line">ssl_ciphers &quot;EECDH+AESGCM:EDH+AESGCM:ECDHE-RSA-AES128-GCM-SHA256:AES256+EECDH:DHE-RSA-AES128-GCM-SHA256:AES256+EDH:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES256-GCM-SHA384:AES128-GCM-SHA256:AES256-SHA256:AES128-SHA256:AES256-SHA:AES128-SHA:DES-CBC3-SHA:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!MD5:!PSK:!RC4&quot;;</span><br><span class="line"></span><br><span class="line">add_header Strict-Transport-Security &quot;max-age&#x3D;31536000;includeSubDomains;preload&quot;;</span><br><span class="line">add_header  X-Frame-Options  deny;</span><br><span class="line">add_header  X-Content-Type-Options  nosniff;</span><br><span class="line">add_header x-xss-protection &quot;1; mode&#x3D;block&quot;;</span><br><span class="line">add_header Content-Security-Policy &quot;default-src &#39;self&#39;; script-src &#39;self&#39; &#39;unsafe-inline&#39; &#39;unsafe-eval&#39; blob: https:; connect-src &#39;self&#39; https:; img-src &#39;self&#39; data: https: blob:; style-src &#39;unsafe-inline&#39; https:; font-src https:&quot;;</span><br></pre></td></tr></table></figure>

<h5 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h5><p>然后在 <code>Nginx</code> 主配置文件中开启 <code>SSL</code> 支持：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># &#x2F;etc&#x2F;nginx&#x2F;nginx.conf</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    ...</span><br><span class="line">    ...</span><br><span class="line">    ##</span><br><span class="line">    # SSL Settings</span><br><span class="line">    ##</span><br><span class="line"></span><br><span class="line">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2; # Dropping SSLv3, ref: POODLE</span><br><span class="line">    ssl_prefer_server_ciphers on;</span><br><span class="line">    ...</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我的配置文件中 <code>SSL配置</code> 这里默认是启用状态，所以保持默认即可。</p>
<h5 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h5><p>修改域名的配置文件。</p>
<p>比如，修改我的网站主域名 <code>itfanr.cc</code> 配置文件如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;itfanr.conf</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        listen [::]:80;</span><br><span class="line"></span><br><span class="line">        server_name itfanr.cc www.itfanr.cc;</span><br><span class="line">        return 301 https:&#x2F;&#x2F;$server_name$request_uri;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">        listen 443 default_server;</span><br><span class="line">        listen [::]:443 default_server;</span><br><span class="line">        server_name itfanr.cc www.itfanr.cc;</span><br><span class="line"></span><br><span class="line">        include snippets&#x2F;ssl-itfanr.conf;</span><br><span class="line"></span><br><span class="line">        location &#x2F; &#123;</span><br><span class="line">                proxy_pass http:&#x2F;&#x2F;localhost:8080&#x2F;;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>同时，修改二级域名 <code>gogit.itfanr.cc</code> 的配置文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;gogit.conf</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name gogit.itfanr.cc;</span><br><span class="line">        return 301 https:&#x2F;&#x2F;$server_name$request_uri;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">        listen 443 ssl;</span><br><span class="line">        listen [::]:443 ssl;</span><br><span class="line">        server_name gogit.itfanr.cc;</span><br><span class="line"></span><br><span class="line">        include snippets&#x2F;ssl-itfanr.conf;</span><br><span class="line"></span><br><span class="line">        location &#x2F; &#123;</span><br><span class="line">                proxy_pass http:&#x2F;&#x2F;127.0.0.1:3000&#x2F;;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中，关键的一点就是在配置文件中包含SSL的配置文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">include snippets&#x2F;ssl-itfanr.conf;</span><br></pre></td></tr></table></figure>

<h5 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h5><p>如果还有其他的二级域名，同样依照上面的方法进行配置，然后重新载入Nginx配置文件。</p>
<p>在重载之前，可以先验证一下刚刚修改的配置文件是否有误：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo nginx -t</span><br><span class="line">nginx: the configuration file &#x2F;etc&#x2F;nginx&#x2F;nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file &#x2F;etc&#x2F;nginx&#x2F;nginx.conf test is successful</span><br></pre></td></tr></table></figure>

<p>无误后，再执行重载操作：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo nginx -s reload</span><br></pre></td></tr></table></figure>

<p>此时，再次访问两个域名地址，可以发现都能够正常访问且都是https安全连接了。</p>
<p>itfanr.cc:</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20180919180924.png" alt=""></p>
<p>gogit.itfanr.cc:</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20180919171901.png" alt=""></p>
<h4 id="设置默认站点"><a href="#设置默认站点" class="headerlink" title="设置默认站点"></a>设置默认站点</h4><p>因为我的域名设置了支持泛域名，所以支持的二级域名都会跳转到我的服务器的IP地址。</p>
<p>那么，对于一些我们没有添加到二级域名在没有进行定义时，会返回什么呢？这就需要设置 <code>默认站点</code> 了。</p>
<p>也就是通过参数 <code>default_server</code> 来指定。</p>
<p>我们可以查看一下 <code>/etc/nginx/sites-available/default</code> 文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen 80 default_server;</span><br><span class="line">        listen [::]:80 default_server;</span><br><span class="line">        ...</span><br><span class="line">        ...</span><br><span class="line">        root &#x2F;var&#x2F;www&#x2F;html;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>上面的设置说明，当访问域名是没有匹配到我们添加的域名，那么就会返回默认的地址。也就是这里的 Nginx默认的页面。</p>
<p>比如，我访问 <code>http://abc.itfanr.cc</code> 时：</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20180924000202.png" alt=""></p>
<p>而该文件中并没有配置当使用 <code>https</code> 方式访问时，要返回什么默认页面。所以我在上面的 <code>itfanr.conf</code>配置中添加了一项：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">listen 443 default_server;</span><br><span class="line">listen [::]:443 default_server;</span><br><span class="line">server_name itfanr.cc www.itfanr.cc;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>默认返回我的博客地址。比如访问 <code>https://abc.itfanr.cc</code> 时：</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20180924000229.png" alt=""></p>
<p>另外，要注意的是：只能设置一个网址为默认地址，当设置了多个时会提示错误：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo nginx -t</span><br><span class="line">nginx: [emerg] a duplicate default server for 0.0.0.0:80 in &#x2F;etc&#x2F;nginx&#x2F;sites-enabled&#x2F;default:17</span><br><span class="line">nginx: configuration file &#x2F;etc&#x2F;nginx&#x2F;nginx.conf test failed</span><br></pre></td></tr></table></figure>

<h4 id="解决网站中的-data-类型字体图片无法载入问题"><a href="#解决网站中的-data-类型字体图片无法载入问题" class="headerlink" title="解决网站中的 data 类型字体图片无法载入问题"></a>解决网站中的 <code>data</code> 类型字体图片无法载入问题</h4><p>配置好Nginx的 <code>https</code> 配置后，再次请求网址 <code>https://gogit.itfanr.cc</code>，发现浏览器地址栏中已经显示了安全的 “小绿锁” 标志。但是一打开Chrome浏览器的F12调试工具，发现有一些请求是报错的。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20180919165205.png" alt=""></p>
<p>可以发现，报错的基本都是前缀为 <code>data:application</code> 类型的字体图片文件。</p>
<p>通过查询，在 <code>Content-Security-Policy</code> 段中应该包含以下内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">font-src &#39;self&#39; data:;</span><br></pre></td></tr></table></figure>

<p>所以只需要在 <code>font-src</code> 和 <code>https</code> 之间添加 ：<code>&#39;self&#39; data:</code> 即可。注意前后之间要用空格分隔。</p>
<p>原：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># &#x2F;etc&#x2F;nginx&#x2F;snippets&#x2F;ssl-itfanr.conf</span><br><span class="line"></span><br><span class="line">add_header Content-Security-Policy &quot;default-src &#39;self&#39;; script-src &#39;self&#39; &#39;unsafe-inline&#39; &#39;unsafe-eval&#39; blob: https:; connect-src &#39;self&#39; https:; img-src &#39;self&#39; data: https: blob:; style-src &#39;unsafe-inline&#39; https:; font-src https:&quot;;</span><br></pre></td></tr></table></figure>

<p>修改后：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># &#x2F;etc&#x2F;nginx&#x2F;snippets&#x2F;ssl-itfanr.conf</span><br><span class="line"></span><br><span class="line">add_header Content-Security-Policy &quot;default-src &#39;self&#39;; script-src &#39;self&#39; &#39;unsafe-inline&#39; &#39;unsafe-eval&#39; blob: https:; connect-src &#39;self&#39; https:; img-src &#39;self&#39; data: https: blob:; style-src &#39;unsafe-inline&#39; https:; font-src &#39;self&#39; data: https:&quot;;</span><br></pre></td></tr></table></figure>

<p>修改完成后，重新载入Nginx配置，再次刷新网站，发现已经没有 <code>data:application</code> 红色的错误请求链接了：</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20180919170111.png" alt=""></p>
<ul>
<li><a href="https://stackoverflow.com/questions/45366744/refused-to-load-the-font-datafont-woff-it-violates-the-following-content" target="_blank" rel="noopener">javascript - Refused to load the font ‘data:font/woff…..’it violates the following Content Security Policy directive: “default-src ‘self’”. Note that ‘font-src’ - Stack Overflow</a></li>
</ul>
<hr>
<h4 id="解决七牛云图片外链http无法载入的问题"><a href="#解决七牛云图片外链http无法载入的问题" class="headerlink" title="解决七牛云图片外链http无法载入的问题"></a>解决七牛云图片外链http无法载入的问题</h4><p>访问我的博客网址 <code>https://www.itfanr.cc</code> ，发现有些文章中的七牛云外链图片都不显示了。查看F12调试工具：</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20180919173643.png" alt=""></p>
<p>发现所有的七牛云 <code>http</code> 外链图片均不加载。</p>
<p>然后我又去七牛云的网站中查看了一下配置，发现如果按照官方的方法切换成 <code>https</code> 的链接，是需要收费的，此时心里是一万头草泥马狂奔的景象…</p>
<p>无奈只能找寻其他的解决方法了。</p>
<p>查看F12的Console中的错误信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Refused to load the image &#39;http:&#x2F;&#x2F;ouej55gp9.bkt.clouddn.com&#x2F;blog&#x2F;20180917193602.png&#39; because it violates the following Content Security Policy directive: &quot;img-src &#39;self&#39; data: https: blob:&quot;.</span><br></pre></td></tr></table></figure>

<p>搜索到 <code>Content-Security-Policy</code> 介绍页面：<a href="https://content-security-policy.com/" target="_blank" rel="noopener">Content Security Policy CSP Reference &amp; Examples</a></p>
<p>参照里面的介绍，尝试把七牛云图片的域名加到 <code>img-src</code> 中，更改如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">img-src &#39;self&#39; data: https: blob:;</span><br><span class="line"></span><br><span class="line"># 更改为：</span><br><span class="line"></span><br><span class="line">img-src &#39;self&#39; ouej55gp9.bkt.clouddn.com data: https: blob:;</span><br></pre></td></tr></table></figure>

<p>再次刷新页面后，发现如果页面中没有引用到七牛云的图片链接，地址栏中是显示“小绿锁”的，比如首页；而到了文章详情页中，引用了七牛云的图片链接后，地址栏中就会显示“叹号”的不安全标志。</p>
<p>访问首页，提示“安全连接”：</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20180919180924.png" alt=""></p>
<p>访问带有http外链图片的文章详情，提示“连接并非完全安全”：</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20180919180907.png" alt=""></p>
<p>根据上面的验证发现，必须得整站的链接都是 <code>https</code> 的情况下，才会是一直处于“小绿锁”的安全模式下。那么接下来就是解决整站<code>https</code>的问题了。目前来看，也就是解决七牛云图片链接如何从 <code>http</code> 到 <code>https</code> 的问题。</p>
<h4 id="遗留的问题"><a href="#遗留的问题" class="headerlink" title="遗留的问题"></a>遗留的问题</h4><p>虽然通过独立出SSL配置，然后在需要启用 <code>https</code> 的域名配置文件 <code>server{}</code> 中 <code>include</code> 的方式能够正常运行，但我心里一直还是有个疑问的：为什么分别指定证书文件地址时配置却不生效？</p>
<p>由于目前还未找到原因，这个问题暂留，以待后续解答。</p>
]]></content>
      <categories>
        <category>HTTPS</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>HTTPS</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTPS泛域名证书申请之一-申请流程</title>
    <url>/2018/09/24/https-certificate-one-of-application/</url>
    <content><![CDATA[<p>自从 <code>Let&#39;s Encrypt</code> 支持泛域名之后，为网站设置https就变得非常简单了。之前需要维护多个子域名的证书更新，操作起来也是很麻烦的。</p>
<p>因为最近我的 <code>gogit.itfanr.cc</code> 的https证书到期，所以就研究了一下泛域名的申请过程，想要将我所有 <code>itfanr.cc</code> 下的二级域名都设置成https的请求方式。</p>
<p>目前比较常用的为 <code>Let&#39;s Encrypt</code> 生成证书的工具比较多，比如 <code>certbot</code> 和 <code>acme.sh</code> 是我之前接触过的两款。这里我要使用 <code>acme.sh</code> 这个工具来安装 <code>Let&#39;s Encrypt</code> 证书。</p>
<h4 id="acme-sh"><a href="#acme-sh" class="headerlink" title="acme.sh"></a>acme.sh</h4><p><code>acme.sh</code> 是由国人利用 <code>shell</code> 脚本开发的，兼容各种 <code>Linux</code> 系统。仅仅依赖 <code>curl</code>。 <code>acme.sh</code> 实现了 <code>acme</code> 协议, 可以从 <code>letsencrypt</code> 生成免费的证书。</p>
<p>acme.sh 支持 <code>--webroot</code>, <code>--standalone</code>, <code>--apache</code>, <code>--nginx</code> and <code>--dns</code> 5种证书申请模式。</p>
<h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><p>可以直接通过下面的脚本来安装 <code>acme.sh</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl https:&#x2F;&#x2F;get.acme.sh | sh</span><br></pre></td></tr></table></figure>

<p>安装过程不会污染已有的系统任何功能和文件，<code>acme.sh</code> 会被自动安装到 <code>~/.acme.sh/</code> 中。</p>
<p>并且，还默认创建一个 <code>bash</code> 的 <code>alias</code>, 方便你的使用: <code>alias acme.sh=~/.acme.sh/acme.sh</code> 。</p>
<p>此外，<code>acme.sh</code> 还自动创建了 <code>cronjob</code>任务, 每天 <code>0:00</code> 点自动检测所有的证书, 如果快过期了, 需要更新, 则会自动更新证书.</p>
<h5 id="单域名申请"><a href="#单域名申请" class="headerlink" title="单域名申请"></a>单域名申请</h5><p>当你只想要为一个域名设置 <code>https</code> 时，可以使用 <code>--standalone</code> 模式来申请。</p>
<p>比如我之前在为 <code>gogit.itfanr.cc</code> 设置时，我的网站程序是跑在Docker容器下的，外面用 <code>Nginx</code> 来做跳转。</p>
<p>首先，我需要先将占用 <code>80</code> 端口的 <code>Nginx</code> 服务停掉，然后再设置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo service nginx stop</span><br></pre></td></tr></table></figure>

<p>然后，生成https证书：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ acme.sh --issue -d gogit.itfanr.cc --standalone</span><br></pre></td></tr></table></figure>

<p>其中，<code>gogit.itfanr.cc</code> 请换成自己的站点域名。</p>
<p>Standalone 模式默认使用的是 <code>80</code> 端口，如果你的 <code>80</code> 端口无法使用的话，也可以指定相应的端口：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ acme.sh --issue -d gogit.itfanr.cc --standalone --httpport 88</span><br></pre></td></tr></table></figure>

<hr>
<h5 id="获取AccessKeys"><a href="#获取AccessKeys" class="headerlink" title="获取AccessKeys"></a>获取AccessKeys</h5><p>因为我要将 <code>itfanr.cc</code> 域名下所有的二级域名都设置成 <code>https</code> ，那么上面一个域名一个域名的设置方法就不行了。</p>
<p>泛域名就是类似于 <code>*.example.com</code> 这样的域名。</p>
<p><code>acme.sh</code> 目前支持数十种域名解析商的API，可以自动添加 <code>TXT</code> 记录来验证。</p>
<p>这里我以阿里云DNS为例，其他支持的域名验证方式，可以<a href="https://github.com/Neilpang/acme.sh#7-automatic-dns-api-integration" target="_blank" rel="noopener">查看这里了解</a> 以及<a href="https://github.com/Neilpang/acme.sh/blob/master/dnsapi/README.md" target="_blank" rel="noopener">相应的设置方法</a></p>
<p><code>acme.sh</code> 访问阿里云 DNS 是通过阿里云 DNS 公开的 API 以及用户的 <code>AccessKeys</code> 来进行交互的。</p>
<p>为了保证安全，阿里云 <code>AccessKeys</code> 是使用 <code>阿里云子账户</code> 来添加的。</p>
<p>登录 <code>[阿里云管理控制台](https://home.console.aliyun.com/)</code> – 点击头像中的 <code>accesskeys</code> – 选择 <code>开始使用子用户AccessKeys</code> {或者直接点击该<a href="https://ak-console.aliyun.com/#/accesskey" target="_blank" rel="noopener">网址</a>} – 设置 <code>用户名</code> – 选择权限中输入“DNS”，选择 <code>AliyunDNSFullAccess(管理员解析（DNS）的权限)</code> 这项 – 之后子账户和AK都创建成功了。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20180921175821.png" alt=""></p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20180918225700.png" alt=""></p>
<p><code>AliyunDNSFullAccess</code> 表示 “管理员解析（DNS）的权限”，既该账户就有了添加DNS记录和删除DNS记录的权限，但没有其他权限。</p>
<p>一定要在这一步记录下这个 <code>AccessKey</code> 信息，之后就无法看到了。</p>
<hr>
<h5 id="添加配置"><a href="#添加配置" class="headerlink" title="添加配置"></a>添加配置</h5><p>在 <code>bash</code> 中执行如下命令，将参数添加到环境变量中：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export Ali_Key&#x3D;&quot;AccessKeyId&quot;</span><br><span class="line">export Ali_Secret&#x3D;&quot;AccessKeySecret&quot;</span><br></pre></td></tr></table></figure>

<p>注意，这里的 <code>Ali_Key</code> 和 <code>Ali_Secret</code> 是和你所使用的域名提供商一一对应的。具体的可在这里查找：<a href="https://github.com/Neilpang/acme.sh/blob/master/dnsapi/README.md" target="_blank" rel="noopener">相应的设置方法</a></p>
<p>另外，这个临时环境变量只需配置这一次，当成功申请证书后，API信息会被自动保存在 <code>~/.acme.sh/account.conf</code> ，下次你使用 <code>acme.sh</code> 的时候会被自动使用。</p>
<hr>
<h5 id="生成泛域名证书"><a href="#生成泛域名证书" class="headerlink" title="生成泛域名证书"></a>生成泛域名证书</h5><p>接下来正式开始申请泛域名证书，将 <code>example.com</code> 换成你自己的域名：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ acme.sh --issue --dns dns_ali -d example.com -d &#39;*.example.com&#39;</span><br></pre></td></tr></table></figure>

<p>申请完成后可以在 <code>~/.acme.sh/example.com</code> 下看到证书文件：</p>
<p>证书文件是 <code>fullchain.cer</code><br>密钥文件是 <code>example.com.key</code></p>
<hr>
<h5 id="证书续期"><a href="#证书续期" class="headerlink" title="证书续期"></a>证书续期</h5><p>Let’s Encrypt 证书的有效期为三个月，acme.sh会每隔60天自动帮你续期。在以上命令执行后，会在 <code>crontab</code> 里添加计划，通过命令查看：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ crontab -l</span><br></pre></td></tr></table></figure>

<hr>
<h5 id="将证书配置到Nginx"><a href="#将证书配置到Nginx" class="headerlink" title="将证书配置到Nginx"></a>将证书配置到Nginx</h5><p>放在 <code>~/.acme.sh/example.com</code> 目录下的证书文件不能直接拿来使用，需要拷贝到一个自定义的目录下，再配置到Nginx中才能正常的使用。</p>
<hr>
<h4 id="Docker使用acme-sh"><a href="#Docker使用acme-sh" class="headerlink" title="Docker使用acme.sh"></a>Docker使用acme.sh</h4><p>上面的方法安装起来虽说已经很简单了，但是对于像我这种但凡能用Docker来解决的问题绝对不用其他方式。</p>
<h5 id="获取镜像"><a href="#获取镜像" class="headerlink" title="获取镜像"></a>获取镜像</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ docker pull neilpang&#x2F;acme.sh</span><br></pre></td></tr></table></figure>

<h5 id="创建acme-sh证书保存目录"><a href="#创建acme-sh证书保存目录" class="headerlink" title="创建acme.sh证书保存目录"></a>创建acme.sh证书保存目录</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ mkdir &#x2F;etc&#x2F;acme.sh</span><br></pre></td></tr></table></figure>

<h5 id="运行-acme-sh-容器"><a href="#运行-acme-sh-容器" class="headerlink" title="运行 acme.sh 容器"></a>运行 acme.sh 容器</h5><p>这里依然需要从域名服务商处获得的ID和Secret：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ docker run --rm \</span><br><span class="line">-v &#x2F;etc&#x2F;acme.sh:&#x2F;acme.sh \</span><br><span class="line">-e Ali_Key&#x3D;&quot;sdfsdfsdfljlbjkljlkjsdfoiwje&quot; \</span><br><span class="line">-e Ali_Secret&#x3D;&quot;jlsdflanljkljlfdsaklkjflsa&quot; \</span><br><span class="line">neilpang&#x2F;acme.sh --issue --dns dns_ali -d example.com -d &#39;*.example.com&#39;</span><br></pre></td></tr></table></figure>

<p>注意这里第一个域名为顶级域名，后面一个为泛域名。</p>
<p>这种方式将自动为你的域名添加一条 <code>txt</code> 解析，验证成功后，这条解析记录会被删除，所以对你来说是无感的，就是要等待 <code>120</code> 秒。</p>
<p>证书生成成功后，默认保存在 <code>.acme.sh/example.com</code> 中。</p>
<h5 id="容器化自动续期"><a href="#容器化自动续期" class="headerlink" title="容器化自动续期"></a>容器化自动续期</h5><p>可以以后台进程的方式运行一个容器：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ docker run --name acme.sh \</span><br><span class="line">-d --restart unless-stopped \</span><br><span class="line">-v &#x2F;etc&#x2F;acme.sh:&#x2F;acme.sh \</span><br><span class="line">neilpang&#x2F;acme.sh daemon</span><br></pre></td></tr></table></figure>

<p>这样，<code>acme.sh</code> 证书到60天就会自动更新。</p>
<hr>
<h5 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h5><p>当我按照如上方法生成域名证书时，执行命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ docker run --rm \</span><br><span class="line">-v &#x2F;etc&#x2F;acme.sh:&#x2F;acme.sh \</span><br><span class="line">-e Ali_Key&#x3D;&quot;sdfsdfsdfljlbjkljlkjsdfoiwje&quot; \</span><br><span class="line">-e Ali_Secret&#x3D;&quot;jlsdflanljkljlfdsaklkjflsa&quot; \</span><br><span class="line">neilpang&#x2F;acme.sh --issue --dns dns_ali -d itfanr.cc -d *.itfanr.cc</span><br></pre></td></tr></table></figure>

<p>发现会提示如下错误：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜  acme.sh docker run --rm \</span><br><span class="line">-v &#x2F;etc&#x2F;acme.sh:&#x2F;acme.sh \</span><br><span class="line">-e Ali_Key&#x3D;&quot;sdfsdfsdfljlbjkljlkjsdfoiwje&quot; \</span><br><span class="line">-e Ali_Secret&#x3D;&quot;jlsdflanljkljlfdsaklkjflsa&quot; \</span><br><span class="line">neilpang&#x2F;acme.sh --issue --dns dns_ali -d itfanr.cc -d *.itfanr.cc</span><br><span class="line">zsh: no matches found: *.itfanr.cc</span><br><span class="line">➜  acme.sh</span><br></pre></td></tr></table></figure>

<p>经查证，其中的泛域名 <code>*.example.com</code> 中由于带有 <code>*</code> 号，会报错。相应的解决方法是添加引号：<code>-d &#39;*.example.com&#39;</code></p>
<ul>
<li><a href="https://github.com/Neilpang/acme.sh/issues/1334" target="_blank" rel="noopener">Issue Wildcard certificate with zsh failed · Issue #1334 · Neilpang/acme.sh</a></li>
</ul>
<hr>
<h5 id="我的操作记录"><a href="#我的操作记录" class="headerlink" title="我的操作记录"></a>我的操作记录</h5><p>创建本地证书保存目录：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ mkdir &#x2F;etc&#x2F;acme.sh</span><br></pre></td></tr></table></figure>

<p>执行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜  acme.sh docker run --rm \</span><br><span class="line">-v &#x2F;etc&#x2F;acme.sh:&#x2F;acme.sh \</span><br><span class="line">-e Ali_Key&#x3D;&quot;sdfsdfsdfljlbjkljlkjsdfoiwje&quot; \</span><br><span class="line">-e Ali_Secret&#x3D;&quot;jlsdflanljkljlfdsaklkjflsa&quot; \</span><br><span class="line">neilpang&#x2F;acme.sh --issue --dns dns_ali -d itfanr.cc -d &#39;*.itfanr.cc&#39;</span><br><span class="line">[Tue Sep 18 15:11:27 UTC 2018] Registering account</span><br><span class="line">[Tue Sep 18 15:11:28 UTC 2018] Registered</span><br><span class="line">[Tue Sep 18 15:11:28 UTC 2018] ACCOUNT_THUMBPRINT&#x3D;&#39;AR2Gc73349sl32z_kw-kY9nP7qqesQqFlK8&#39;</span><br><span class="line">[Tue Sep 18 15:11:28 UTC 2018] Creating domain key</span><br><span class="line">[Tue Sep 18 15:11:29 UTC 2018] The domain key is here: &#x2F;acme.sh&#x2F;itfanr.cc&#x2F;itfanr.cc.key</span><br><span class="line">[Tue Sep 18 15:11:29 UTC 2018] Multi domain&#x3D;&#39;DNS:itfanr.cc,DNS:*.itfanr.cc&#39;</span><br><span class="line">[Tue Sep 18 15:11:29 UTC 2018] Getting domain auth token for each domain</span><br><span class="line">[Tue Sep 18 15:11:30 UTC 2018] Getting webroot for domain&#x3D;&#39;itfanr.cc&#39;</span><br><span class="line">[Tue Sep 18 15:11:30 UTC 2018] Getting webroot for domain&#x3D;&#39;*.itfanr.cc&#39;</span><br><span class="line">[Tue Sep 18 15:11:30 UTC 2018] Found domain api file: &#x2F;root&#x2F;.acme.sh&#x2F;dnsapi&#x2F;dns_ali.sh</span><br><span class="line">[Tue Sep 18 15:11:31 UTC 2018] Found domain api file: &#x2F;root&#x2F;.acme.sh&#x2F;dnsapi&#x2F;dns_ali.sh</span><br><span class="line">[Tue Sep 18 15:11:32 UTC 2018] Sleep 120 seconds for the txt records to take effect</span><br></pre></td></tr></table></figure>

<p>发现，当最后一行提示信息为 <code>Sleep 120 seconds for the txt records to take effect</code> 时，说明正在自动执行DNS绑定的操作。</p>
<p>当日志继续输出时，可以看到最后提示执行成功了 <code>Cert success.</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[Tue Sep 18 15:11:32 UTC 2018] Sleep 120 seconds for the txt records to take effect</span><br><span class="line">[Tue Sep 18 15:13:32 UTC 2018] Verifying:itfanr.cc</span><br><span class="line">[Tue Sep 18 15:13:35 UTC 2018] Success</span><br><span class="line">[Tue Sep 18 15:13:35 UTC 2018] Verifying:*.itfanr.cc</span><br><span class="line">[Tue Sep 18 15:13:38 UTC 2018] Success</span><br><span class="line">[Tue Sep 18 15:13:38 UTC 2018] Removing DNS records.</span><br><span class="line">[Tue Sep 18 15:13:42 UTC 2018] Verify finished, start to sign.</span><br><span class="line">[Tue Sep 18 15:13:44 UTC 2018] Cert success.</span><br><span class="line">-----BEGIN CERTIFICATE-----</span><br><span class="line">MIIGCjCCBPKgAwIBAgISA95TIaF4XRlosoA&#x2F;zwdEbLRaMA0GCSqGSIb3DQEBCwUA</span><br><span class="line">MEoxCzAJBgNVBAYTAlVTMR34dcvKEw1MZXQncyBFbmNyeXB0MSMwIQYDVQQD</span><br><span class="line">ExpMZXQncyBFbmNyeXB0IEF1dGhvcml0eSBYMzAeFw0xODA5MTgxNDEzNDJaFw0x</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">A6l0KWm2&#x2F;jjYcf5YPGIoK3jMzNm17B88yoPYoDwecxWC59t5+DQjpQo7iM7tyTV+</span><br><span class="line">q4UZMY9jlrbaCJVSdrM&#x3D;</span><br><span class="line">-----END CERTIFICATE-----</span><br><span class="line">[Tue Sep 18 15:13:44 UTC 2018] Your cert is in  &#x2F;acme.sh&#x2F;itfanr.cc&#x2F;itfanr.cc.cer</span><br><span class="line">[Tue Sep 18 15:13:44 UTC 2018] Your cert key is in  &#x2F;acme.sh&#x2F;itfanr.cc&#x2F;itfanr.cc.key</span><br><span class="line">[Tue Sep 18 15:13:44 UTC 2018] The intermediate CA cert is in  &#x2F;acme.sh&#x2F;itfanr.cc&#x2F;ca.cer</span><br><span class="line">[Tue Sep 18 15:13:44 UTC 2018] And the full chain certs is there:  &#x2F;acme.sh&#x2F;itfanr.cc&#x2F;fullchain.cer</span><br><span class="line">➜  acme.sh</span><br></pre></td></tr></table></figure>


<p>查看 <code>/etc/acme.sh</code> 目录下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜  acme.sh ls</span><br><span class="line">account.conf  ca  http.header  itfanr.cc</span><br><span class="line">➜  acme.sh ls itfanr.cc</span><br><span class="line">ca.cer  fullchain.cer  itfanr.cc.cer  itfanr.cc.conf  itfanr.cc.csr  itfanr.cc.csr.conf  itfanr.cc.key</span><br><span class="line">➜  acme.sh</span><br></pre></td></tr></table></figure>

<p>其中， 证书文件是 <code>fullchain.cer</code> ，密钥文件是 <code>itfanr.cc.key</code> 。</p>
<hr>
<h4 id="配置Nginx"><a href="#配置Nginx" class="headerlink" title="配置Nginx"></a>配置Nginx</h4><p>在域名的nginx配置文件中新增证书配置，例如我的 <code>gogit.itfanr.cc</code> 域名的配置文件 <code>gogit.conf</code> 如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 443 ssl;</span><br><span class="line">    server_name gogit.itfanr.cc;</span><br><span class="line"></span><br><span class="line">    ssl_certificate &#x2F;etc&#x2F;acme.sh&#x2F;itfanr.cc&#x2F;fullchain.cer;</span><br><span class="line">    ssl_certificate_key &#x2F;etc&#x2F;acme.sh&#x2F;itfanr.cc&#x2F;itfanr.cc.key;</span><br><span class="line">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line"></span><br><span class="line">    proxy_set_header Host $host;</span><br><span class="line">    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">    proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">    proxy_set_header X-Forwarded-Proto $scheme;</span><br><span class="line"></span><br><span class="line">    location &#x2F; &#123;</span><br><span class="line">        proxy_pass http:&#x2F;&#x2F;127.0.0.1:3000&#x2F;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name gogit.itfanr.cc;</span><br><span class="line">        return 301 https:&#x2F;&#x2F;$server_name$request_uri;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后更新nginx，重新载入配置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo nginx -s reload</span><br></pre></td></tr></table></figure>

<p>在浏览器中访问域名，可以看到地址栏中的小绿锁已经出现了。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20180918232923.png" alt=""></p>
<h4 id="相关参考"><a href="#相关参考" class="headerlink" title="相关参考"></a>相关参考</h4><ul>
<li><a href="https://github.com/Neilpang/acme.sh/wiki/%E8%AF%B4%E6%98%8E" target="_blank" rel="noopener">说明 · Neilpang/acme.sh Wiki</a></li>
<li><a href="https://github.com/Neilpang/acme.sh/wiki/How-to-issue-a-cert" target="_blank" rel="noopener">How to issue a cert · Neilpang/acme.sh Wiki</a></li>
<li><a href="https://github.com/Neilpang/acme.sh/blob/master/dnsapi/README.md" target="_blank" rel="noopener">acme.sh/README.md at master · Neilpang/acme.sh</a></li>
<li><a href="https://blog.neroxps.cn/2018/03/17/acme/" target="_blank" rel="noopener">利用acme.sh申请 Letsencrypt 免费 SSL 证书 | Nero Blog</a></li>
</ul>
]]></content>
      <categories>
        <category>HTTPS</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>HTTPS</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客添加Gitment评论系统</title>
    <url>/2018/09/17/hexo-add-gitment-review-system/</url>
    <content><![CDATA[<p>之前我的Hexo博客中使用的是 <code>多说</code> 的评论插件，后来多说停止运营了之后就直接把评论功能去掉了，而后一直使用的是邮件的方式。但邮件也是很不方便的，是一种不得已的选择。</p>
<p>最近，看到好多博客中都添加了一个名为 <code>Gitment</code> 的评论插件，直接使用GitHub的 <code>Issues</code> 作为评论内容的存储位置，也是非常方便的。</p>
<p><strong>Update:2019-04-30</strong></p>
<p><strong><code>Gitment</code> 评论插件已经长时间不更新了，另外由于插件内引用的域名Https证书已经过期，导致无法提交评论。建议更换为更好用的 <code>Gitalk</code> 评论插件。</strong></p>
<p><strong>配置方法见：<a href="/2019/04/30/hexo-add-gitalk-comment/">Hexo博客添加Gitalk评论系统 | IT范儿</a></strong></p>
<hr>
<h4 id="Next主题版本"><a href="#Next主题版本" class="headerlink" title="Next主题版本"></a>Next主题版本</h4><p>我的hexo主题使用的是 <code>Next</code> 主题,当前版本为 <code>v5.1.3</code> 。这一版是直接内置支持 <code>gitment</code> 功能的。关于如何升级 <code>Next</code> 主题，可以看我之前的文章：<a href="/2017/10/27/add-search-function-to-hexo-blog/">Hexo博客添加搜索功能</a></p>
<p>另外我发现，当前 <code>Next</code> 主题的最新版本为 <code>v6.4.1</code>，而 <code>v6.x.x</code> 版本和 <code>v5.x.x</code> 版本又有所不同，不能平滑的升级，所以这里我就没有升级 <code>Next</code> 到最新，直接使用的 <code>v5.1.3</code> 版本。</p>
<h4 id="添加Gitment评论"><a href="#添加Gitment评论" class="headerlink" title="添加Gitment评论"></a>添加Gitment评论</h4><h5 id="创建GitHub-OAuth-Apps"><a href="#创建GitHub-OAuth-Apps" class="headerlink" title="创建GitHub OAuth Apps"></a>创建GitHub OAuth Apps</h5><p>打开链接 <a href="https://github.com/settings/developers" target="_blank" rel="noopener">OAuth Apps</a> – <code>New OAuth App</code> 。按要求填写相应内容即可。</p>
<p>其中，<code>Homepage URL</code> 表示站点的网址。<code>Authorization callback URL</code> 为站点的回调地址，一般也默认为站点的网址。</p>
<p>最后，得到 <code>Client ID</code> 和 <code>Client Secret</code> 备用。</p>
<h5 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h5><p><del>在 <code>themes/next</code> 目录下，找到 <code>_config.yml</code> 配置文件，找到 <code>gitment</code> 配置段：</del></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Gitment</span><br><span class="line"># Introduction: https:&#x2F;&#x2F;imsun.net&#x2F;posts&#x2F;gitment-introduction&#x2F;</span><br><span class="line">gitment:</span><br><span class="line">  enable: false</span><br><span class="line">  mint: true # RECOMMEND, A mint on Gitment, to support count, language and proxy_gateway</span><br><span class="line">  count: true # Show comments count in post meta area</span><br><span class="line">  lazy: false # Comments lazy loading with a button</span><br><span class="line">  cleanly: false # Hide &#39;Powered by ...&#39; on footer, and more</span><br><span class="line">  language: # Force language, or auto switch by theme</span><br><span class="line">  github_user: # MUST HAVE, Your Github Username</span><br><span class="line">  github_repo: # MUST HAVE, The name of the repo you use to store Gitment comments</span><br><span class="line">  client_id: # MUST HAVE, Github client id for the Gitment</span><br><span class="line">  client_secret: # EITHER this or proxy_gateway, Github access secret token for the Gitment</span><br><span class="line">  proxy_gateway: # Address of api proxy, See: https:&#x2F;&#x2F;github.com&#x2F;aimingoo&#x2F;intersect</span><br><span class="line">  redirect_protocol: # Protocol of redirect_uri with force_redirect_protocol when mint enabled</span><br></pre></td></tr></table></figure>

<p><del>设置 <code>enable</code> 为 <code>true</code> ，表示启用 <code>gitment</code> 评论插件。</del></p>
<p><strong>Update:2019-04-30</strong></p>
<p><strong><code>Gitment</code> 评论插件已经长时间不更新了，另外由于插件内引用的域名Https证书已经过期，导致无法提交评论。建议更换为更好用的 <code>Gitalk</code> 评论插件。</strong></p>
<p><strong>配置方法见：<a href="/2019/04/30/hexo-add-gitalk-comment/">Hexo博客添加Gitalk评论系统 | IT范儿</a></strong></p>
<p>其他的必需项是 <code>github_user</code> ，表示你的github账号名称。 <code>github_repo</code> 表示保存评论数据的仓库名称，这里可以使用当前博客所在的仓库名称，也可以单独设置一个专门的仓库。<code>client_id</code> 和 <code>client_secret</code> 为上面创建的值。</p>
<p>修改完成后，将hexo博客文件上传到github。因为gitment功能必需在线上才能进行操作。</p>
<h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><h5 id="点击登录github发现一直显示loading"><a href="#点击登录github发现一直显示loading" class="headerlink" title="点击登录github发现一直显示loading"></a>点击登录github发现一直显示loading</h5><p>在创建 <code>OAuth Apps</code> 中填写 <code>Authorization callback URL</code> 时，网站的地址末尾不能带有 <code>/</code> 。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20180917193416.png" alt=""></p>
<hr>
<h5 id="某些文章不能生成Issues"><a href="#某些文章不能生成Issues" class="headerlink" title="某些文章不能生成Issues"></a>某些文章不能生成Issues</h5><p>当点击文章页面底部的 <code>初始化本文的评论页</code> 按钮时，页面会弹出错误信息：<code>Error:Validation Failed</code> 信息。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20180917193521.png" alt=""></p>
<p>通过查看操作请求，gitment会在生成Issues时创建两个 <code>label</code> 标签。</p>
<p>一个是文章标题的路径: <code>window.location.pathname</code> 值，如 <code>/2018/09/05/pip-install-locale-error-unsupported-locale-setting/</code> ；另一个是定值 <code>gitment</code> 。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20180917193602.png" alt=""></p>
<p>而由于 github 中 <code>Issues</code> 的 <code>label</code> 长度限制为最大 <code>50</code> 个字符，当 文章标题长度过长时，该label就会生成失败，而导致初始化错误，弹出 <code>Validation Failed</code> 的提示。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20180917193631.png" alt=""></p>
<p>通过网上的搜索，发现可以使用文章创建时的时间来代替文章标题，作为这个唯一的label标签。</p>
<p>找到giment的配置：<code>/themes/next/layout/_third-party/comments/gitment.swig</code> 文件：</p>
<p>找到如下部分：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var gitment &#x3D; new &#123;&#123;CommentsClass&#125;&#125;(&#123;</span><br><span class="line">    id: window.location.pathname,</span><br><span class="line">    owner: &#39;&#123;&#123; theme.gitment.github_user &#125;&#125;&#39;,</span><br><span class="line">    repo: &#39;&#123;&#123; theme.gitment.github_repo &#125;&#125;&#39;,</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>

<p>修改为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var gitment &#x3D; new &#123;&#123;CommentsClass&#125;&#125;(&#123;</span><br><span class="line">    id: &#39;itfanr_blog_&#123;&#123; date(page.date, &quot;YYYYMMDDhhmmss&quot;) &#125;&#125;&#39;,</span><br><span class="line">    owner: &#39;&#123;&#123; theme.gitment.github_user &#125;&#125;&#39;,</span><br><span class="line">    repo: &#39;&#123;&#123; theme.gitment.github_repo &#125;&#125;&#39;,</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>

<p>这样，在初始化时就不会出错了。</p>
<hr>
<h4 id="有新的Issues时发送钉钉提醒"><a href="#有新的Issues时发送钉钉提醒" class="headerlink" title="有新的Issues时发送钉钉提醒"></a>有新的Issues时发送钉钉提醒</h4><p>上面我们添加了评论功能，但是在使用中会出现不能及时响应的问题。当有人对文章做了评论或提出什么疑问后，我们并不能及时的知道或者回复，这样给人的感觉是不好的。虽然添加了评论功能，但反而不如使用邮件的方式高效了。</p>
<p>经过一番思考后，我发现平时工作中用到的钉钉中是可以添加GitHub的钉钉机器人的。而手机端的钉钉也能做到有新提醒后立即响应。所以，可以设置当GitHub的Issues有变动时，通过钉钉机器人提醒我们查看新的评论或作出回复。</p>
<h5 id="生成Github机器人WebHook地址"><a href="#生成Github机器人WebHook地址" class="headerlink" title="生成Github机器人WebHook地址"></a>生成Github机器人WebHook地址</h5><p>钉钉机器人只有在群中才能添加，个人是无法添加的。但是一个人又无法创建群。那么该如何添加一个钉钉群机器人呢？</p>
<p><strong>Update:2019-05-05</strong></p>
<p>我采用的方法是 “偷梁换柱” 的方式。首先呢，在手机或PC端选择 “发起群聊”，至少选择二个人进来，此时注意不要在群里发任何信息。然后在 <code>群设置</code> 中的 <code>群成员</code> 选项中移除其他人就可以了，整个过程其他人不会接收到任何消息（有点类似于微信清理联系人的操作）。就这么简单。这样，这个群里就只有你一个人了，添加群机器人后也不会打扰到别人。</p>
<p>之前钉钉中组建群组至少必须是二个人，最近测试发现组建群组<strong>至少必须是三个人</strong>了。也就是必须选择另外两个好友才能组成一个群组。如果只选择一个好友，那进入的就是 “发消息” 的界面了。</p>
<p>然后在 <code>群</code> 设置中选择 <code>群机器人</code> 选项，选择 <code>GitHub机器人</code> ，按照设置流程生成GitHub机器人，即可获取到相应群的WebHook地址，其格式如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;oapi.dingtalk.com&#x2F;robot&#x2F;send?access_token&#x3D;xxxxxxxx</span><br></pre></td></tr></table></figure>

<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20180917193733.png" alt=""></p>
<h5 id="在GitHub中设置项目的webhook"><a href="#在GitHub中设置项目的webhook" class="headerlink" title="在GitHub中设置项目的webhook"></a>在GitHub中设置项目的webhook</h5><p>进入 GitHub 的 Hexo 博客仓库，依次点击 <code>Settings</code> – <code>Webhooks &amp; Services</code> – <code>Add Webhook</code> ，新增一项。</p>
<p>在 <code>payload URL</code> 中填写刚才获得的钉钉WebHook地址；</p>
<p>在 <code>Content type</code> 选项下选择 <code>application/json</code> 项；</p>
<p>在 <code>Secret</code> 中不填写内容，保持空值即可；</p>
<p>在 <code>Event</code> 选项下，我这里选择了 <code>issues</code> 相关的所有 <code>event</code> 事件，也可以按照自己的需求自定义。</p>
<p>然后，点击 <code>Add webhook</code> 按钮即可。</p>
<p>至此，当 <code>Issues</code> 中有新的评论时，在钉钉手机客户端就能立即接收到提醒了。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20180917193816.png" alt=""></p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul>
<li><a href="http://pacez.github.io/2018/03/08/%E8%A7%A3%E5%86%B3Gitment%E5%88%9D%E5%A7%8B%E5%8C%96%E8%AF%84%E8%AE%BA%E6%97%B6validation%20failed/" target="_blank" rel="noopener">解决Gitment初始化评论时validation failed | Pace’s Blog</a></li>
<li><a href="https://github.com/swlfigo/Study/wiki/Hexo%E5%8D%9A%E5%AE%A2Next%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0Gitment%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F%E5%9D%91%E7%82%B9" target="_blank" rel="noopener">Hexo博客Next主题添加Gitment评论系统坑点 · swlfigo/Study Wiki</a></li>
<li><a href="https://blog.csdn.net/Q563573095/article/details/79580249" target="_blank" rel="noopener">钉钉中设置代码提交提醒–Github机器人 - CSDN博客</a></li>
</ul>
]]></content>
      <categories>
        <category>Hexo博客搭建</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>解决pip install时unsupported locale setting错误</title>
    <url>/2018/09/05/pip-install-locale-error-unsupported-locale-setting/</url>
    <content><![CDATA[<p>今天在安装 <code>docker-compose</code> 时，使用 <code>pip install</code> 命令出现了下面这个错误：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜  sudo pip install -U docker-compose</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&#x2F;usr&#x2F;bin&#x2F;pip&quot;, line 11, in &lt;module&gt;</span><br><span class="line">    sys.exit(main())</span><br><span class="line">  File &quot;&#x2F;usr&#x2F;lib&#x2F;python2.7&#x2F;dist-packages&#x2F;pip&#x2F;__init__.py&quot;, line 215, in main</span><br><span class="line">    locale.setlocale(locale.LC_ALL, &#39;&#39;)</span><br><span class="line">  File &quot;&#x2F;usr&#x2F;lib&#x2F;python2.7&#x2F;locale.py&quot;, line 581, in setlocale</span><br><span class="line">    return _setlocale(category, locale)</span><br><span class="line">locale.Error: unsupported locale setting</span><br></pre></td></tr></table></figure>

<p>后来查询到是语言配置错误导致的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜  locale -a</span><br><span class="line">locale: Cannot set LC_CTYPE to default locale: No such file or directory</span><br><span class="line">C</span><br><span class="line">C.UTF-8</span><br><span class="line">en_US</span><br><span class="line">en_US.iso88591</span><br><span class="line">en_US.utf8</span><br><span class="line">POSIX</span><br></pre></td></tr></table></figure>

<p>解决方法：</p>
<p>执行如下命令即可。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜  export LC_ALL&#x3D;C</span><br></pre></td></tr></table></figure>

<p>再次尝试安装：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜  sudo pip install -U docker-compose</span><br><span class="line">The directory &#39;&#x2F;home&#x2F;ubuntu&#x2F;.cache&#x2F;pip&#x2F;http&#39; or its parent directory is not owned by the current user and the cache has been disabled. Please check the permissions and owner of that directory. If executing pip with sudo, you may want sudo&#39;s -H flag.</span><br><span class="line">The directory &#39;&#x2F;home&#x2F;ubuntu&#x2F;.cache&#x2F;pip&#39; or its parent directory is not owned by the current user and caching wheels has been disabled. check the permissions and owner of that directory. If executing pip with sudo, you may want sudo&#39;s -H flag.</span><br><span class="line">Collecting docker-compose</span><br><span class="line">  Downloading https:&#x2F;&#x2F;files.pythonhosted.org&#x2F;packages&#x2F;67&#x2F;03&#x2F;b833b571595e05c933d3af3685be3b27b1166c415d005b3eadaa5be80d25&#x2F;docker_compose-1.22.0-py2.py3-none-any.whl (126kB)</span><br><span class="line">    100% |################################| 133kB 143kB&#x2F;s</span><br><span class="line">Collecting websocket-client&lt;1.0,&gt;&#x3D;0.32.0 (from docker-compose)</span><br><span class="line">  Downloading https:&#x2F;&#x2F;files.pythonhosted.org&#x2F;packages&#x2F;09&#x2F;12&#x2F;d21872b618befc489cabde794c7af281d12fa2e194e279132ef1f04a3b07&#x2F;websocket_client-0.52.0-py2.py3-none-any.whl (198kB)</span><br><span class="line">    100% |################################| 204kB 34kB&#x2F;s</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">Successfully installed PyYAML-3.11 backports.ssl-match-hostname-3.5.0.1 cached-property-1.4.3 certifi-2018.8.24 chardet-2.3.0 docker-3.5.0 docker-compose-1.22.0 docker-pycreds-0.3.0 dockerpty-0.4.1 docopt-0.6.2 enum34-1.1.2 functools32-3.2.3.post2 idna-2.0 ipaddress-1.0.16 jsonschema-2.6.0 requests-2.9.1 six-1.10.0 texttable-0.9.1 urllib3-1.13.1 websocket-client-0.52.0</span><br><span class="line">You are using pip version 8.1.1, however version 18.0 is available.</span><br><span class="line">You should consider upgrading via the &#39;pip install --upgrade pip&#39; command.</span><br></pre></td></tr></table></figure>

<hr>
<p><strong>关于<code>LC_ALL=C</code></strong></p>
<p><code>LC_ALL=C</code> 是为了去除所有本地化的设置，让命令能正确执行。</p>
<p>在Linux中通过 <code>locale</code> 来设置程序运行的不同语言环境，<code>locale</code> 由ANSI C提供支持。<code>locale</code> 的命名规则为 <code>&lt;语言&gt;_&lt;地区&gt;.&lt;字符集编码&gt;</code> ，如<code>zh_CN.UTF-8</code>，zh代表中文，CN代表大陆地区，UTF-8表示字符集。</p>
<p>在shell控制台中输入 <code>locale</code> 就可以查看本地默认设置:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜ locale</span><br><span class="line">LANG&#x3D;&quot;zh_CN.UTF-8&quot;</span><br><span class="line">LC_COLLATE&#x3D;&quot;zh_CN.UTF-8&quot;</span><br><span class="line">LC_CTYPE&#x3D;&quot;zh_CN.UTF-8&quot;</span><br><span class="line">LC_MESSAGES&#x3D;&quot;zh_CN.UTF-8&quot;</span><br><span class="line">LC_MONETARY&#x3D;&quot;zh_CN.UTF-8&quot;</span><br><span class="line">LC_NUMERIC&#x3D;&quot;zh_CN.UTF-8&quot;</span><br><span class="line">LC_TIME&#x3D;&quot;zh_CN.UTF-8&quot;</span><br><span class="line">LC_ALL&#x3D;</span><br></pre></td></tr></table></figure>

<p>“C”是系统默认的<code>locale</code> ，”POSIX”是”C”的别名。所以当我们新安装完一个系统时，默认的 <code>locale</code> 就是 <code>C</code> 或 <code>POSIX</code> 。</p>
<p><code>LANG</code> <code>LC_*</code> 的默认值，是最低级别的设置。可以理解成 <code>LANG</code>是一个缺省值，所有没有显式设置值的 <code>LC_*</code> 变量都会取LANG的值。类似于 <code>LC_ALL</code> 。</p>
<p><code>LC_ALL</code> 它是一个宏，如果该值设置了，则该值会覆盖所有 <code>LC_*</code> 的设置值。注意，LANG的值不受该宏影响。</p>
<p><strong>注意:</strong> <code>LC_ALL</code> 并不是一个环境变量，而是一个glibc中定义的一个宏。<code>LC_ALL=C</code> 这样的语法实际上是调用了 <code>setlocale</code> 把所有的 <code>LC_*</code> 的变量设置了一遍，所以在终端中直接 <code>echo $LANG</code> 等可以输出对应变量的值，但是 <code>echo $LC_ALL</code> 什么都没有，因为它压根就不是一个变量。</p>
<p>所以设置 <code>LC_ALL=C</code> ，就是解决各种与区域设置有关的warning。从程序运行角度看，就是保持程序输出的统一格式，这样有些程序才能正确执行下去。</p>
<hr>
<p>相关参考：</p>
<ul>
<li><a href="http://linfuyan.com/locale_error_unsupported_locale_setting/" target="_blank" rel="noopener">解决pip install时unsupported locale setting错误 | 阿阿燃</a></li>
<li><a href="http://www.maixj.net/ict/lc-all-20255" target="_blank" rel="noopener">LC_ALL=C表示什么？ | 云上小悟</a></li>
</ul>
]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>保定市如何更换驾驶证</title>
    <url>/2018/06/17/how-to-change-the-driver-license-in-baoding/</url>
    <content><![CDATA[<p>6月15日周五我去保定车管所（保定市长城北大街2601号）更换了新驾照，以下是我的换证记录，希望能帮到想要更换驾照的朋友们。</p>
<h4 id="上班时间"><a href="#上班时间" class="headerlink" title="上班时间"></a>上班时间</h4><p>周一到周五</p>
<p>冬季：</p>
<p>9:00 – 12:00   14:00 – 17:00</p>
<p>夏季：</p>
<p>9:30 – 12:30   14:30 – 17:30</p>
<p>首先，对于周六日能不能办理，这个我没有专门去向车管所的办公人员考证，所以在这里也就不能确认。我也是为了防止周六日白跑一趟，才在周五这天请了一天假过来的。</p>
<p>15号当天我是大概12点10分左右到的车管所，结果进去却被告知要下班了等下午再来，一问下午上班时间是14:30 。</p>
<p>另外，车管所分两个服务大厅（在外面有相应的标识），A区应该主要是办理车辆相关的业务，B区主要是办理证件相关的业务。</p>
<p>所以，要更换新驾照，直接去B区就好了。</p>
<p>在中午这段时间呢，车管所的两个服务大厅都会锁门，也就是说，在这里是没有可以休息的地方的。</p>
<p>15号这天的温度大概在29°左右，已经是相当的闷热了。中午这段时间来这里办理业务的人也是络绎不绝，一看关着门也就只好在外面等着了。</p>
<p>在两个大厅之间有可以遮阳的顶棚，两边各有一排座椅可以休息。但对于夏季29°的闷热气温来说，也着实热的不行。</p>
<p>所以我建议大家如果来的话，尽量赶在上午或者下午2点之后再过来。当天中午我在外面坐着等了两个多小时实在是难受啊。</p>
<h4 id="需要带什么"><a href="#需要带什么" class="headerlink" title="需要带什么"></a>需要带什么</h4><p>要更换新驾照， <code>身份证</code> 和 <code>驾驶证</code> 当然是必需的。</p>
<p>首先要说明的一点是，服务大厅的入口是需要刷身份证并且需要人脸比对才能进去的，应该是为了防止黄牛的一种措施。</p>
<p>其次，还需要带上一些零钱。这里要着重解释一下，这里指的是“纸币”，主要是相对于的微信和支付宝而言的，因为是不支持用微信和支付宝来缴费的。</p>
<p>其中一部分是需要进行体检，体检费是15元。另一部分是换证的工本费是10元。</p>
<p>再者，可以自行携带照片。注意，照片的要求是 <code>一寸白底免冠彩照</code>，需要两张。如果没有照片的话，在服务大厅内是有两台可以照相的机器的，立等可取。费用好像是10元一份吧。因为我是自己带的照片，所以拍照片就不太清楚了。</p>
<p>总结一下：</p>
<ol>
<li>身份证</li>
<li>驾驶证</li>
<li>人民币 （大概共计 15+10+10 元，一共带50或100左右就够了 <strong>注意：最好是带零钱，要带个整的50元或100元过去，光找零钱就很浪费时间了；再者，大家都带整钱不一定能找开…</strong></li>
</ol>
<h4 id="办理流程"><a href="#办理流程" class="headerlink" title="办理流程"></a>办理流程</h4><p>因为我是第一次去，对于办理的流程刚开始也不是很清楚，也是一点一点的看着别人是怎么弄得，然后自己也跟着去做，慢慢的就了解了。</p>
<h5 id="身份证复印件"><a href="#身份证复印件" class="headerlink" title="身份证复印件"></a>身份证复印件</h5><p>首先呢，要有身份证复印件。这个在大厅的进门左手边是有一台身份证复印机的。</p>
<h5 id="体检"><a href="#体检" class="headerlink" title="体检"></a>体检</h5><p>其次，需要进行体检。在大厅的进门左手边有一条通道，进去第一个门口就是了，写着体检呢。</p>
<p>进去后是先在门口处缴费，然后去旁边第二个办公人员那里等着叫名字，按照她的要求去做就好了。然后是到旁边第三个人那里测视力。</p>
<p>最后通过后会给你一张单子，签名然后去大厅排队拿号。</p>
<h5 id="排队拿号"><a href="#排队拿号" class="headerlink" title="排队拿号"></a>排队拿号</h5><p>在大厅里，进门右手边是排队拿号的地方。也是有摄像头通过人脸识别给号。</p>
<p>这里要说一下，在这里排队拿号和当时进门时刷身份证人脸比对属于先后的步骤。如果你在进门时没有刷上或人脸比对不成功就进来了，在这里拿号的时候就没有你的信息。我在排队时看到好几人去又重新去门口刷了一遍才能拿号。</p>
<p>拿完号后进入业务大厅等着叫号就行了。</p>
<h4 id="需要多久"><a href="#需要多久" class="headerlink" title="需要多久"></a>需要多久</h4><p>总的来说，从我进入办证大厅，到我办好证件走出大厅，大概是花了50分钟左右。当然，这是对于一个像我这样的第一次换证的小白而言的，毕竟我在里面浪费了很多“学习”的时间。</p>
<p>你说我想快点办，有没有什么秘籍呢？  当然，秘籍当然有了。那么下面，我就把我总结的 “快速换证” 秘籍告诉你。</p>
<h4 id="如何快速换证"><a href="#如何快速换证" class="headerlink" title="如何快速换证"></a>如何快速换证</h4><ol>
<li>带好 <code>身份证</code> <code>驾驶证</code> <code>人民币</code></li>
<li>刷身份证进入大厅后，先去大厅入口左手边的 “身份证复印机” 去复印身份证，按照机器上的要求做就好了。</li>
<li>如果自己有携带照片，直接进行下一步。如果没有携带照片，在 “身份证复印机” 旁边有两台 “相片快照机” ，直接进去照相。</li>
<li>去旁边的通道里的第一个房间，进行体检。</li>
<li>拿着 <code>身份证复印件</code> 和 <code>照片</code> 及 <code>体检单</code> 到大厅入口右手边去排队拿号。</li>
<li>进入大厅后等着叫号办理即可。</li>
</ol>
<p>对于第一次来办理的人来说，时间应该就是浪费在了来回的咨询中，像无头苍蝇那样。</p>
<p>我刚进去的时候，看到好多人直接就奔着大厅入口右手边的排队叫号处就去了，应该是看到了上面写着“业务办理”的字样，结果被告知先要进行体检才能拿号。等找到体检的地方，又被告知必须有照片才行，因为体检单上需要贴照片。</p>
<h4 id="体会"><a href="#体会" class="headerlink" title="体会"></a>体会</h4><p>通过这次换证，也有一些个人的体会，当然并不算是吐槽。</p>
<ol>
<li>挺大的一个车管所，没有一个让来办理业务的群众可以休息或坐着的 “凉快儿” 的地方，毕竟大热的天，感觉非常不人性化。办公人员可以在办公室里吹着空调休息，让来办理业务的群众们在外面晒着大太阳等着。。。</li>
<li>在业务大厅中没有可以咨询的工作人员。我看到的只有一个机器人。就是你说一句它回一句的那种。</li>
<li>感觉如果没有安排相应的咨询人员的话，可以贴一张业务办理流程图，标明第一二三步，不会让来办业务的群众在里面团团转。</li>
<li>在来办理之前也在网上查到过这里有提供自助服务办理的机器。我也看到了是摆放在“身份证复印机”旁边的，有两台。我去旁边看了看，没有找到更换驾驶证的按钮或标识，倒是有几个来办理违章的人在那里排队。因为旁边也没有找到可以咨询的工作人员，所以我也就没太关注这个。本来来之前是想着如果这种自助服务机上可以直接办理的话我就直接在机器上办理了，毕竟相比人工的要快很多。不过办完后想想，这个流程下来要进行体检，贴照片，当场制作新证件等等操作，还是人工的要靠谱一些。</li>
<li>感觉办公人员的服务态度不是很好。</li>
<li>总的来说，办理业务还算非常快速的，业务大厅内也是井然有序。</li>
</ol>
<p>如果真的帮到了你，别忘了回来给个小小的鼓励呀！！！</p>
]]></content>
      <tags>
        <tag>人在帝都</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker共享volume的权限问题</title>
    <url>/2018/06/12/docker-volume-permission/</url>
    <content><![CDATA[<p>有时候在创建Docke容器时，我一般都会先在host主机下创建一个用来映射到容器内的目录作为 <code>volume</code> 映射目录。但在某些情况下，我们可能会忘记提前创建该目录，而直接执行了 <code>docker run .... -v /data/sites:/app ....ubuntu:latest</code> 命令。该命令会自行在 <code>host</code> 主机下创建目录 <code>/data/sites</code> 。</p>
<p>但当向该文件中拷贝文件时，就会提示 <code>permission denied</code> 的错误，这是因为当前用户对该目录没有可操作权限导致的。</p>
<p><code>volume</code> 的权限在于主机是怎么给的，如果你想要给phpfpm文件夹 <code>www-data:www-data</code> 权限，在你的主机挂载目录执行 <code>chown -R www-data:www-data /data/sites</code> 即可。</p>
<p>在宿主机为 <code>volume</code> 目录重新设置host主机下当前用户的权限即可：</p>
<p>如在 <code>host</code> 主机下，当前用户为 <code>tiger</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ chown -R tiger:tiger &#x2F;data&#x2F;sites</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Docker容器技术</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac系统下快速搜索神器Spotlight</title>
    <url>/2018/05/14/spotlight-skills/</url>
    <content><![CDATA[<p>在Mac系统下如何更快速的找到想要的文件？</p>
<h4 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h4><ol>
<li>直接按下 <code>Command + Space</code> 显示</li>
<li>输入文件名或相关字符，回车直接打开。</li>
<li>列表文件通过上/下箭头选择</li>
<li>查看全部搜索结果，点击 “在Finder中显示全部” 后回车</li>
<li>查找并打开文件所在文件夹：选中要查找的文件后按下Command+回车</li>
<li>显示文件完整路径：选中要查找的文件后按下Command键，在下方出现完整路径名；</li>
<li>进行数学计算、单位转换：直接输入数学公式进行计算；直接输入货币单位进行转换；</li>
<li>定制查找范围：“系统偏好设置–Spotlight”。</li>
<li>利用文件类型查找：“<code>kind:(file type)</code>” 如 <code>find:image</code> 。“find type”可选：“image”、“movie”、“music”、“email”、“application”、“text”、“archive”等</li>
<li>通过文件格式查找：“<code>kind:(file format)</code>” 如 <code>find:pdf</code>。 “find format”可选：“jpeg”、“gif”、“pdf”、“mp3”、“mp4”、“zip”等。</li>
<li>联合文件类型和文件名查找：“<code>kind:(file type/file fromat) &quot;file name&quot;</code>” 如 <code>kind:pdf &quot;python&quot;</code> 即搜索文件名带有“python”的pdf文件。</li>
</ol>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul>
<li><a href="https://zhuanlan.zhihu.com/p/29796308" target="_blank" rel="noopener">Spotlight–Mac上的查询利器</a></li>
</ul>
]]></content>
      <tags>
        <tag>Skill</tag>
      </tags>
  </entry>
  <entry>
    <title>同一设备下多重SSH Keys管理</title>
    <url>/2018/05/14/multiple-ssh-keys-management-under-the-same-device/</url>
    <content><![CDATA[<p>一般我们在自己的个人电脑上使用git时都会通过SSH的方式来连接代码管理站点如Github等。但有时候我们也会遇到多重SSH的问题。</p>
<h4 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h4><p>最常见的情况就是一般的公司都会有自己的私有git仓库，比如用gitlab来搭建的git仓库站点。而公司里也会为每位员工设置一个个人专属的公司域名邮箱，这样的情况下就遇到问题了：我们在自己的电脑上已经配置了自己的邮箱账号作为主力的git账户，而在开发公司的项目时，用来提交git操作的时候就要切换为公司分配的邮箱账号了。虽然我们可以在项目目录内使用 <code>git config user.name</code> 和 <code>git config user.email</code> 来为该项目指定单独的git提交账户，但在 <code>git pull</code> 和 <code>git push</code> 时，每次都需要使用 <code>http</code> 的方式输入密码才行，非常的麻烦。</p>
<h4 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h4><p>那么现在问题就来了，个人使用的git账户和公司分配的git账户应该如何在一台电脑上同时存在并保证都能分别使用SSH的方式来提交代码呢？</p>
<p>首先，我们指定下面示例使用的git账户：</p>
<p>我的个人git账户: <code>leafney</code> <code>leafney@gmail.com</code> git仓库：<code>github.com</code><br>我的公司git账户: <code>wuyazi</code> <code>wuyazi@company.com</code> git仓库：<code>111.206.223.205:8080</code> （公司配置的gitlab对应ip地址）<br>我使用的Bash : <code>iTerm2+zsh</code></p>
<p>我的需求是，因为我使用的是个人电脑，所以我希望的是在默认情况下，仍然使用我自己的git账户 <code>leafney@gmail.com</code> 作为全局账户来提交项目。对于公司的项目，则使用公司的git账户 <code>wuyazi@company.com</code> 作为局部账户来仅提交公司的项目。</p>
<p>之前在我的mac下已经设置了默认的git账号 <code>leafney@gmail.com</code> 对应的ssh密钥 。如果你还没有设置过SSH，可以参考我之前的文章：<a href="/2017/03/03/using-ssh-key-connection-github-in-linux/">Linux下使用SSH密钥连接Github
</a></p>
<h4 id="新增SSH-key"><a href="#新增SSH-key" class="headerlink" title="新增SSH key"></a>新增SSH key</h4><p>现在要新增一个工作的账号，以 <code>wuyazi</code> <code>wuyazi@company.com</code> 为示例账户来添加。</p>
<h5 id="查看已添加SSH密钥"><a href="#查看已添加SSH密钥" class="headerlink" title="查看已添加SSH密钥"></a>查看已添加SSH密钥</h5><p>查看mac下已经添加的我的个人git账号信息:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">~&#x2F;.ssh</span><br><span class="line">➜ ls</span><br><span class="line">id_rsa      id_rsa.pub  known_hosts</span><br></pre></td></tr></table></figure>

<p>查看 <code>id_rsa.pub</code> 内容:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜ vim id_rsa.pub</span><br><span class="line">ssh-ras xxxxxxxxxxxx  leafney@gmail.com</span><br></pre></td></tr></table></figure>

<hr>
<h5 id="新增SSH密钥"><a href="#新增SSH密钥" class="headerlink" title="新增SSH密钥"></a>新增SSH密钥</h5><p>创建新的 ssh key：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 切换到 .ssh 目录下</span><br><span class="line">➜ cd ~&#x2F;.ssh</span><br><span class="line">&#x2F;&#x2F; 输入工作邮箱来创建新的ssh key,git唯一认证标准是邮箱</span><br><span class="line">➜ ssh-keygen -t rsa -C &quot;wuyazi@company.com&quot;</span><br></pre></td></tr></table></figure>

<p>需要注意的一点是，当提示 <code>Enter file in which to save the key (/Users/leafney/.ssh/id_rsa):</code> 时，我们不使用默认的名称 <code>id_rsa</code> ，因为该名称我们之前在设置个人git账户时已经使用过了，所以这里新设置一个针对于公司git账户的名称 <code>id_rsa_work</code>。</p>
<p>操作记录：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">~&#x2F;.ssh</span><br><span class="line">➜ ssh-keygen -t rsa -C &quot;wuyazi@company.com&quot;</span><br><span class="line">Generating public&#x2F;private rsa key pair.</span><br><span class="line">Enter file in which to save the key (&#x2F;Users&#x2F;leafney&#x2F;.ssh&#x2F;id_rsa): id_rsa_work</span><br><span class="line">Enter passphrase (empty for no passphrase):</span><br><span class="line">Enter same passphrase again:</span><br><span class="line">Your identification has been saved in id_rsa_work.</span><br><span class="line">Your public key has been saved in id_rsa_work.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:gZO6tyeOrp0FLGT5q2kBn3+9Et+P1shzjuyv3rUXWY0 wuyazi@company.com</span><br><span class="line">The key&#39;s randomart image is:</span><br><span class="line">+---[RSA 2048]----+</span><br><span class="line">|                 |</span><br><span class="line">|       o         |</span><br><span class="line">|.     + .      . |</span><br><span class="line">| o o .   .    E .|</span><br><span class="line">|  B .   S    o . |</span><br><span class="line">| o &#x3D; ...    o    |</span><br><span class="line">|  . B oo.o o ..  |</span><br><span class="line">|   &#x3D; Ao.oo*++. . |</span><br><span class="line">|  +&#x3D;B.o+.+BB&#x3D;..  |</span><br><span class="line">+----[SHA256]-----+</span><br><span class="line"></span><br><span class="line">~&#x2F;.ssh took 22s</span><br></pre></td></tr></table></figure>

<h5 id="将密钥添加到ssh-agent管理"><a href="#将密钥添加到ssh-agent管理" class="headerlink" title="将密钥添加到ssh agent管理"></a>将密钥添加到ssh agent管理</h5><p>通过ssh agent对密钥的管理我们可以实现免密码提交。使用 <code>ssh-add</code> 命令来将新增的密钥添加到 <code>ssh-agent</code> 的高速缓存中：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">~&#x2F;.ssh</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;添加之前所新生成的用于work的密钥</span><br><span class="line">➜ ssh-add ~&#x2F;.ssh&#x2F;id_rsa_work</span><br><span class="line">Identity added: &#x2F;Users&#x2F;leafney&#x2F;.ssh&#x2F;id_rsa_work (&#x2F;Users&#x2F;leafney&#x2F;.ssh&#x2F;id_rsa_work)</span><br></pre></td></tr></table></figure>

<p>可以通过命令 <code>ssh-add -l</code> 来查看存在于 <code>ssh-agent</code> 密钥管理器中所有的密钥列表：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">~&#x2F;.ssh</span><br><span class="line">➜ ssh-add -l</span><br><span class="line">2048 SHA256:gZO6tyeOrp0FLGT5q2kBn3+9Et+P1shzjuyv3rUXWY0 &#x2F;Users&#x2F;leafney&#x2F;.ssh&#x2F;id_rsa_work (RSA)</span><br><span class="line">2048 SHA256:My6EL2r7d20oq01x1PeuRiYJSK2aID3sQlR+xCagPnE &#x2F;Users&#x2F;leafney&#x2F;.ssh&#x2F;id_rsa (RSA)</span><br></pre></td></tr></table></figure>

<p>这里如果发现之前的 <code>id_rsa</code> 的密钥不存在，可以重新添加一下。</p>
<p>如果要删除所有已添加的密钥，可以使用命令：<code>ssh-add -D</code> 。</p>
<h4 id="配置ssh-config"><a href="#配置ssh-config" class="headerlink" title="配置ssh config"></a>配置ssh config</h4><h5 id="编辑config"><a href="#编辑config" class="headerlink" title="编辑config"></a>编辑config</h5><p><code>SSH</code> 程序可以从以下途径获取配置参数： </p>
<p>用户配置文件：<code>~/.ssh/config</code><br>系统配置文件：<code>/etc/ssh/ssh_config</code></p>
<p>配置文件可分为多个配置区段，每个配置区段使用 <code>Host</code> 来区分。我们可以在命令行中输入不同的Host来加载不同的配置段。</p>
<p>在 <code>~/.ssh</code> 目录下打开配置文件 <code>config</code>(没有则新增该文件)，如下是我的配置示例：</p>
<p>新增：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜ cd ~&#x2F;.ssh&#x2F;</span><br><span class="line">➜ touch config</span><br></pre></td></tr></table></figure>

<p><code>config</code> 内容:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Host work</span><br><span class="line">    HostName 111.206.223.205:8080</span><br><span class="line">    User git</span><br><span class="line">    IdentityFile ~&#x2F;.ssh&#x2F;id_rsa_work</span><br><span class="line"></span><br><span class="line">Host github.com</span><br><span class="line">    HostName github.com</span><br><span class="line">    User git</span><br><span class="line">    IdentityFile ~&#x2F;.ssh&#x2F;id_rsa</span><br></pre></td></tr></table></figure>

<h5 id="配置项说明"><a href="#配置项说明" class="headerlink" title="配置项说明"></a>配置项说明</h5><p>常用的SSH配置项：</p>
<ul>
<li><code>Host</code> 别名 : <code>Host myhost</code> 表示自定义的host简称，以后连接远程服务器就可以使用命令 <code>ssh myhost</code> (注意下面有缩进)</li>
<li><code>HostName</code> 主机名 : 主机名可以是ip也可以是域名(如:github.com或者bitbucket.org);如果主机名中包含 <code>%h</code> ，则实际使用时会被命令行中的主机名替换。</li>
<li><code>Port</code> 端口 : 表示服务器open-ssh端口，默认22，默认时一般不写此行</li>
<li><code>User</code> 用户名 : <code>User git</code> 表示登录ssh的用户名，如 <code>git</code></li>
<li><code>IdentityFile</code> ： 表示证书文件路径（如 <code>~/.ssh/id_rsa_*</code>)</li>
</ul>
<p>其他SSH配置项：</p>
<ul>
<li><code>IdentitiesOnly</code> 只接受 SSH Key 登录  可选 <code>yes</code> or <code>no</code></li>
<li><code>PreferredAuthentications</code> 强制使用Public Key验证</li>
</ul>
<h5 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h5><p>如上，我用别名 <code>work</code> 指代了公司gitlab的ip地址 <code>111.206.223.205:8080</code> ，使用 <code>ssh -T</code> 命令来验证一下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜ ssh -T git@work</span><br><span class="line">The authenticity of host &#39;111.206.223.205:8080 (111.206.223.205:8080)&#39; can&#39;t be established.</span><br><span class="line">RSA key fingerprint is SHA256:&#x2F;UwiMSDZVkgF+3yLAxHwMJfYGxK2XGk5DU3txRr+LNg.</span><br><span class="line">Are you sure you want to continue connecting (yes&#x2F;no)? yes</span><br><span class="line">Warning: Permanently added &#39;111.206.223.205:8080&#39; (RSA) to the list of known hosts.</span><br><span class="line">Welcome to GitLab, 无崖子!</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="第一版示例"><a href="#第一版示例" class="headerlink" title="第一版示例"></a>第一版示例</h4><h5 id="项目clone"><a href="#项目clone" class="headerlink" title="项目clone"></a>项目clone</h5><p>如上的步骤配置完成后，我们就可以通过ssh别名的方式来区分使用不同的SSH Key了。</p>
<p>在 <code>clone</code> 项目到本地之前，我们需要进行一个小小的改动。</p>
<p>之前的clone命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜ git clone git@111.206.223.205:8080:how_to_use_multiple_git_ssh&#x2F;you_can_by_this_way.git</span><br></pre></td></tr></table></figure>

<p>更改后的clone命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜ git clone git@work:how_to_use_multiple_git_ssh&#x2F;you_can_by_this_way.git</span><br></pre></td></tr></table></figure>

<p>即我们将原来ssh地址中的域名用我们在配置文件中的别名来代替了，而相应的别名又对应着ssh密钥文件。</p>
<p>当然，我们还可以更精简一下，因为我们在<code>config</code> 文件中已经指定了用户为 <code>git</code> ，所以可将路径中的用户名也省略掉：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜ git clone work:how_to_use_multiple_git_ssh&#x2F;you_can_by_this_way.git</span><br></pre></td></tr></table></figure>

<p>这样，看起来是不是非常的舒服呢？</p>
<p>而如果我要clone自己的个人项目，则仍然按照之前的操作即可：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜ git clone git@github.com:Leafney&#x2F;docker-alpine-mysql.git</span><br></pre></td></tr></table></figure>

<h5 id="设置项目提交账户"><a href="#设置项目提交账户" class="headerlink" title="设置项目提交账户"></a>设置项目提交账户</h5><p>在将项目 <code>clone</code> 到本地之后，还要为该项目单独设置commit提交时使用的git账户。</p>
<p>因为我们在之前已经按照 <a href="/2017/03/03/using-ssh-key-connection-github-in-linux/">Linux下使用SSH密钥连接Github
</a> 操作中的方法将我的个人账户 <code>leafney</code> <code>leafney@gmail.com</code> 设置为了全局的git账户，在提交项目时如果没有设置项目单独的git账户，就会使用全局的，那这样就不对了。</p>
<p>不加 <code>--global</code> 参数，为刚刚clone下来的公司项目设置公司分配的git账户：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜ git config user.name &quot;wuyazi&quot;   # 双引号是为了防止name中含有空格而导致错误</span><br><span class="line">➜ git config user.email &quot;wuyazi@company.com&quot;</span><br></pre></td></tr></table></figure>

<p>这样就配置完成了。</p>
<hr>
<h4 id="还能再快一点吗"><a href="#还能再快一点吗" class="headerlink" title="还能再快一点吗"></a>还能再快一点吗</h4><p>总结上面的操作步骤，无非是设置了如下两项：</p>
<ol>
<li>指定git项目使用的SSH Key</li>
<li>指定git项目提交时使用的git账户</li>
</ol>
<p>那么第一步我们已经在ssh的 <code>config</code> 中做了指定，貌似已经是最快的操作了。那就看看第二项如何优化呢？</p>
<p>我们是在git项目clone到本地之后，再去为该项目添加了使用的git账户，那是否能将这两步合并为一步呢？</p>
<p><strong>答案当然是可以的。</strong></p>
<h4 id="设置Base-Zsh方便clone操作"><a href="#设置Base-Zsh方便clone操作" class="headerlink" title="设置Base/Zsh方便clone操作"></a>设置Base/Zsh方便clone操作</h4><p>为了以后方便使用不同git账户 <code>git clone</code> 项目，我们在 <code>bash</code> 的 <code>~/.bashrc</code> 或者 <code>zsh</code> 的 <code>~/.zshrc</code> 内加入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alias work-git-clone&#x3D;&#39;git clone --config user.name&#x3D;&quot;wuyazi&quot; --config user.email&#x3D;&quot;wuyazi@company.com&quot; $@&#39;</span><br></pre></td></tr></table></figure>

<p>以后就只要输入 <code>work-git-clone REPO-SSH-URL</code> ，效果就相当于执行了如下的命令:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone REPO-SSH-URL</span><br><span class="line">cd REPO</span><br><span class="line">git config user.name &quot;wuyazi&quot;</span><br><span class="line">git config user.email &quot;wuyazi@company.com&quot;</span><br></pre></td></tr></table></figure>

<p>然后，更新 <code>Bash/Zsh</code> 的设置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 更新Bash设置</span><br><span class="line">➜ source ~&#x2F;.bashrc</span><br><span class="line"></span><br><span class="line"># 更新zsh设置</span><br><span class="line">➜ source ~&#x2F;.zshrc</span><br></pre></td></tr></table></figure>

<p>参考自；<a href="https://kuanyui.github.io/2016/08/01/git-multiple-ssh-key/" target="_blank" rel="noopener">多重 SSH Keys 與 Github 帳號</a></p>
<h4 id="第二版示例"><a href="#第二版示例" class="headerlink" title="第二版示例"></a>第二版示例</h4><p>经过上面的操作，我们在 <code>git clone</code> 公司的git项目时，只需要执行如下简单的两步即可：</p>
<p>第一步：更改SSH地址</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 将项目SSH地址：</span><br><span class="line">git@111.206.223.205:8080:how_to_use_multiple_git_ssh&#x2F;you_can_by_this_way.git</span><br><span class="line"># 更改为:</span><br><span class="line">work:how_to_use_multiple_git_ssh&#x2F;you_can_by_this_way.git</span><br></pre></td></tr></table></figure>

<p>第二步：执行 <code>work-git-clone</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜ work-git-clone work:how_to_use_multiple_git_ssh&#x2F;you_can_by_this_way.git</span><br></pre></td></tr></table></figure>

<p>而操作个人的git项目，命令只需要一步：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜ git clone git@github.com:Leafney&#x2F;docker-alpine-mysql.git</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="新的复杂需求"><a href="#新的复杂需求" class="headerlink" title="新的复杂需求"></a>新的复杂需求</h4><p>上面的需求可能是相对来说比较常见而且普通的一种情况了，那么下面的需求算是一种稍微复杂的情况了。</p>
<p>因为在Github上发布私有的项目，是需要付费的，所以一般针对于个人的私有项目，我们一般会选择自己购买服务器来搭建属于自己的私有个人仓库，比如我自己的 <code>gogit.itfanr.cc</code> 就是我用开源项目 <code>Gogs</code> 来搭建的。有兴趣可查看我的开源项目：<a href="https://github.com/Leafney/ubuntu-gogs" target="_blank" rel="noopener">Docker Ubuntu-Gogs 用更简单的方式部署、升级或迁移Gogs服务。</a> 。</p>
<p>那么，现在就出现了下面的四种情况：</p>
<ol>
<li>对于我个人想要开源的代码项目，我会选择使用个人账户发布到 <code>github.com</code> 站点下；</li>
<li>对于我个人的私有代码项目，我会选择使用个人账户发布到我自己搭建的 <code>gogit.itfanr.cc</code> 仓库站点下；</li>
<li>对于公司的私有项目，我要选择使用公司分配的git账户发布到公司搭建的私有仓库 <code>111.206.223.205:8080</code> 站点下；</li>
<li>对于我在工作中的一些积累或私人的项目，我想使用公司分配的git账户发布到我个人的 <code>gogit.itfanr.cc</code> 仓库站点下；</li>
</ol>
<h5 id="修改ssh-config"><a href="#修改ssh-config" class="headerlink" title="修改ssh config"></a>修改ssh config</h5><p>经过上面的步骤，我们很容易的就知道想要实现上面的需求，只需要通过修改SSH的配置文件 <code>config</code> 中的配置即可实现。</p>
<p>对于公司的项目，针对于上面第3个情况，我们仍然如之前的配置即可：</p>
<p><code>config</code> :</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># company repo account</span><br><span class="line">Host work</span><br><span class="line">    HostName 111.206.223.205:8080</span><br><span class="line">    User git</span><br><span class="line">    IdentityFile ~&#x2F;.ssh&#x2F;id_rsa_work</span><br></pre></td></tr></table></figure>

<p>那么在clone项目时的操作如下：</p>
<ol>
<li><p>更改项目SSH地址中的域名部分；</p>
</li>
<li><p>执行命令：</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜ work-git-clone work:how_to_use_multiple_git_ssh&#x2F;you_can_by_this_way.git</span><br></pre></td></tr></table></figure>

<hr>
<p>对于工作中的私人项目，我们要使用公司的git账户来发布到我的个人仓库站点 <code>gogit.itfanr.cc</code>。配置时我们还需要指定使用密钥 <code>id_rsa_work</code> ：</p>
<p><code>config</code> :</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># wuyazi private repo account</span><br><span class="line">Host wuyazigogit</span><br><span class="line">    HostName gogit.itfanr.cc</span><br><span class="line">    User git</span><br><span class="line">    IdentityFile ~&#x2F;.ssh&#x2F;id_rsa_work</span><br></pre></td></tr></table></figure>

<p>那么在clone项目时的操作如下：</p>
<ol>
<li>更改项目SSH地址中的域名部分；</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 如将: </span><br><span class="line">ssh:&#x2F;&#x2F;git@gogit.itfanr.cc:9527&#x2F;wuyazi&#x2F;repo_for_myself.git</span><br><span class="line"># 更改为:</span><br><span class="line">ssh:&#x2F;&#x2F;git@wuyazigogit:9527&#x2F;wuyazi&#x2F;repo_for_myself.git</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>执行命令：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">work-git-clone ssh:&#x2F;&#x2F;git@wuyazigogit:9527&#x2F;wuyazi&#x2F;repo_for_myself.git</span><br></pre></td></tr></table></figure>

<p><strong>2019-02-11-更新</strong></p>
<p>在上面的 <a href="#配置项说明">配置项说明</a> 中也有指出，如果你的ssh链接中不是默认的端口 <code>22</code> 如 <code>ssh://git@gogit.itfanr.cc:9527/wuyazi/repo_for_myself.git</code> ，那么可以通过参数 <code>Port</code> 来指定：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># wuyazi private repo account</span><br><span class="line">Host wuyazigogit</span><br><span class="line">    HostName gogit.itfanr.cc</span><br><span class="line">    Port 9527</span><br><span class="line">    User git</span><br><span class="line">    IdentityFile ~&#x2F;.ssh&#x2F;id_rsa_work</span><br></pre></td></tr></table></figure>

<p>则，后面执行的命令就是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">work-git-clone ssh:&#x2F;&#x2F;git@wuyazigogit&#x2F;wuyazi&#x2F;repo_for_myself.git</span><br></pre></td></tr></table></figure>

<p>这样，看起来更简洁一些了。</p>
<hr>
<p>因为我的个人账户是作为全局账户来使用的，就是说在 <code>config</code> 文件中如果上面的 <code>Host</code> 部分没有匹配上，那么要保证最后一个 <code>Host</code> 匹配到我的个人git账户。再次回顾 <code>config</code> 配置项中的常用参数，我们发现 <code>HostName</code> 除了可以设置域名或ip地址之外，还可以设置为 <code>%h</code> ，表示<strong>实际使用时会被命令行中的主机名替换</strong>。</p>
<p>所以，为了实现上面的第1种和第2种情况，以及实现对未特殊说明的项目的默认匹配，我用如下的方式来配置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># leafney default account for github.com or gogit.itfanr.cc</span><br><span class="line">Host github.com gogit.itfanr.cc</span><br><span class="line">    HostName %h</span><br><span class="line">    User git</span><br><span class="line">    IdentityFile ~&#x2F;.ssh&#x2F;id_rsa</span><br></pre></td></tr></table></figure>

<p>如上，针对于不同主机地址使用同一私钥进行登录的情况，可以在 <code>Host</code> 中指定多个别名来匹配，而 <code>HostName</code> 中的 <code>%h</code> 会自动匹配用户输入的ssh地址中的域名部分，来匹配到对应的密钥。</p>
<p>那么在clone项目时的操作如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone git@github.com:Leafney&#x2F;ubuntu-gogs.git</span><br></pre></td></tr></table></figure>

<p>综上，我的 <code>config</code> 配置内容如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># company repo account</span><br><span class="line">Host work</span><br><span class="line">    HostName 111.206.223.205:8080</span><br><span class="line">    User git</span><br><span class="line">    IdentityFile ~&#x2F;.ssh&#x2F;id_rsa_work</span><br><span class="line"></span><br><span class="line"># wuyazi private repo account</span><br><span class="line">Host wuyazigogit</span><br><span class="line">    HostName gogit.itfanr.cc</span><br><span class="line">    User git</span><br><span class="line">    IdentityFile ~&#x2F;.ssh&#x2F;id_rsa_work</span><br><span class="line"></span><br><span class="line"># leafney default account for github.com or gogit.itfanr.cc</span><br><span class="line">Host github.com gogit.itfanr.cc</span><br><span class="line">    HostName %h</span><br><span class="line">    User git</span><br><span class="line">    IdentityFile ~&#x2F;.ssh&#x2F;id_rsa</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="新增项目配置"><a href="#新增项目配置" class="headerlink" title="新增项目配置"></a>新增项目配置</h4><p>上面的操作中说到的方法一般适用的场景比如你去到一家新公司，然后会给你分配公司的邮箱及git账号，以及公司项目的私有git站点，直接从站点上面 <code>clone</code> 项目到你的开发电脑上，这些项目一般都是公司已有的项目了。</p>
<p>某些情况下，可能需要你新增一个公司的项目，那对于新增公司的项目时，我们要如何使用指定的SSH账户来操作呢？</p>
<p>一般的步骤如下：</p>
<h5 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h5><p>在你的开发电脑上，新增一个git管理的项目。在项目目录下使用 <code>git init</code> 来初始化。</p>
<h5 id="设置项目git账户"><a href="#设置项目git账户" class="headerlink" title="设置项目git账户"></a>设置项目git账户</h5><p>注意，这里就是最关键的一步了。我们要为该新增的项目创建针对于该项目的git账户。在上面的流程中也提到过，要使用不加 <code>--global</code> 的命令来设置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config user.name &quot;wuyazi&quot;</span><br><span class="line">git config user.email &quot;wuyazi@company.com&quot;</span><br></pre></td></tr></table></figure>

<h5 id="创建远端项目"><a href="#创建远端项目" class="headerlink" title="创建远端项目"></a>创建远端项目</h5><p>然后就是在公司的私有git站点上创建一个空项目。一般在创建完成后都会有类似于下面的一个提示页面：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">从命令行创建一个新的仓库</span><br><span class="line">touch README.md</span><br><span class="line">git init</span><br><span class="line">git add README.md</span><br><span class="line">git commit -m &quot;first commit&quot;</span><br><span class="line">git remote add origin ssh:&#x2F;&#x2F;git@111.206.223.205:8080:how_to_use_multiple_git_ssh&#x2F;new.git</span><br><span class="line">git push -u origin master</span><br><span class="line"></span><br><span class="line">从命令行推送已经创建的仓库</span><br><span class="line">git remote add origin ssh:&#x2F;&#x2F;git@111.206.223.205:8080:how_to_use_multiple_git_ssh&#x2F;new.git</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure>

<h5 id="提交到远端仓库"><a href="#提交到远端仓库" class="headerlink" title="提交到远端仓库"></a>提交到远端仓库</h5><p>对于只有一个SSH密钥的情况下，我们要将本地项目提交到远端，只要执行页面中后面这两句就可以了。而现在我们要将本地新增的公司项目使用我的公司git账户提交到公司的私有git站点上，首先呢还是需要更改一下提交的项目地址：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 将项目SSH地址：</span><br><span class="line">ssh:&#x2F;&#x2F;git@111.206.223.205:8080:how_to_use_multiple_git_ssh&#x2F;new.git</span><br><span class="line"># 更改为:</span><br><span class="line">ssh:&#x2F;&#x2F;work:how_to_use_multiple_git_ssh&#x2F;new.git</span><br></pre></td></tr></table></figure>

<p>然后我们就可以执行上面两条命令了：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git remote add origin ssh:&#x2F;&#x2F;work:how_to_use_multiple_git_ssh&#x2F;new.git</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure>

<h5 id="有没有简洁命令"><a href="#有没有简洁命令" class="headerlink" title="有没有简洁命令"></a>有没有简洁命令</h5><p>可能有的朋友会想了，在之前 <code>clone</code> 已有项目时，我们使用了一条简洁的命令： <code>work-git-clone work:how_to_use_multiple_git_ssh/you_can_by_this_way.git</code> 来直接省略了单独设置git操作账户的步骤，那在新增时，是不是也可以有类似的操作呢？</p>
<p>答案是否定的。</p>
<p>因为 <code>git clone</code> 命令是可以接收 <code>--config</code> 参数的，以便在clone的同时指定配置；而 <code>git push</code> 命令却是没有该项的。具体的可以通过命令 <code>git clone help</code> 和 <code>git push help</code> 来详细了解。</p>
<p>至此，后面的操作就是常用的 <code>pull</code> 和 <code>push</code> 等操作了。</p>
<hr>
<h4 id="相关参考"><a href="#相关参考" class="headerlink" title="相关参考"></a>相关参考</h4><ul>
<li><a href="https://blog.kinpzz.com/2016/02/12/muti-git-ssh-management/" target="_blank" rel="noopener">同一设备多个git账号的ssh管理</a></li>
<li><a href="https://gist.github.com/yeungeek/596984fd9e53d6c36c0d" target="_blank" rel="noopener">Git多帐号配置
</a></li>
<li><a href="https://www.hi-linux.com/posts/14346.html" target="_blank" rel="noopener">利用SSH的用户配置文件Config管理SSH会话</a></li>
<li><a href="https://kuanyui.github.io/2016/08/01/git-multiple-ssh-key/" target="_blank" rel="noopener">多重 SSH Keys 與 Github 帳號</a></li>
</ul>
]]></content>
      <categories>
        <category>Git操作系列</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客功能优化二</title>
    <url>/2018/03/11/hexo-blog-optimization-two/</url>
    <content><![CDATA[<p>介绍Hexo博客功能优化项。</p>
<h4 id="将“打赏”两字更改为“鼓励”"><a href="#将“打赏”两字更改为“鼓励”" class="headerlink" title="将“打赏”两字更改为“鼓励”"></a>将“打赏”两字更改为“鼓励”</h4><p>一直觉得 “打赏” 两个字不太适合博客这种语境，搞得像是杂耍完了向围观群众要赏钱的感觉：“有钱的捧个钱场，没钱的捧个人场…” 。写作，本来就是在学习技术的路上一次次总结，亦或和志同道合的技术人的一次次讨论，无关金钱或其他。<br>而“鼓励”则更适合这种语境。如果我的文章帮到了你，虽然不能改变世界，但也许为你节省了一些时间，亦或在你进入一个技术死角一直出不来的情况下，带来的一点点希望或是灵感。你觉得我的文章对你带来了帮助，送我一杯咖啡，我内心是非常高兴地。如果你还想多聊两句，我也会感到非常荣幸。</p>
<p>相应的修改方法是：</p>
<p>找到项目目录下 <code>/themes/next/languages/zh-Hans.yml</code> 文件，因为我的博客采用的是中文。这里可以按照自己的博客设置选择相应的语言文件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">reward:</span><br><span class="line">  donate: 鼓励 #打赏</span><br><span class="line">  wechatpay: 微信支付</span><br><span class="line">  alipay: 支付宝</span><br><span class="line">  bitcoin: 比特币</span><br></pre></td></tr></table></figure>

<p>找到 <code>reward</code> 部分，将 <code>donate</code> 的值修改为自己想要的内容即可。这里我测试了一下，最长是4个汉字，否则就要修改按钮的样式了。</p>
<p><code>2021-04-18</code> 更新：</p>
<p>对于当前最新的 <code>next</code> 主题： <code>Theme version: 7.8.0+a7a948a</code> ，需要找到文件 <code>themes/next/languages/zh-CN.yml</code> 文件，找到其中的 <code>reward</code> 部分修改即可。这里的字数没有限制。</p>
<hr>
<h4 id="关于评论"><a href="#关于评论" class="headerlink" title="关于评论"></a>关于评论</h4><p>自此评论插件 “多说” 关闭之后，我就把博客中的评论功能去掉了，因为确实没有找到一款心仪的评论插件。</p>
<p>目前的话，也只是在博客的 “关于” 页面加了一个 <code>email</code> 地址能够立即联系到我。</p>
<p>因为我的邮箱手机客户端是24小时在线的，让我感到高兴的是确实还有一些朋友通过邮件向我咨询技术问题，我都一一为他们做了解答。之前还觉得这个邮箱地址放在“关于” 页面会比较隐蔽，今天稍微改版了一下，在每篇文章的末尾都加上了 <code>email</code> 地址，以方便交流。</p>
<p>这段提示文字我是直接加在了 <code>next</code> 主题配置文件 <code>_config.yml</code> 中的 <code>Reward 打赏功能</code> 部分。</p>
<p>原来的打赏功能提示文字 <code>reward_comment</code> 参数，如果添加的字符太多的话，就会导致自动换行。所以这里我修改了一下页面文件。</p>
<p>找到目录下 <code>/themes/next/layout/_macro/reward.swig</code> 文件，找到第二行的 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;&#123;&#123; theme.reward_comment &#125;&#125;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<p>部分再复制一行，如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div style&#x3D;&quot;padding: 10px 0; margin: 20px auto; width: 90%; text-align: center;&quot;&gt;</span><br><span class="line">  &lt;div&gt;&#123;&#123; theme.reward_comment &#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">  &lt;div&gt;&#123;&#123; theme.reward_comment2 &#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">  &lt;button id&#x3D;&quot;rewardButton&quot; disable&#x3D;&quot;enable&quot; onclick&#x3D;&quot;var qr &#x3D; document.getElementById(&#39;QR&#39;); if (qr.style.display &#x3D;&#x3D;&#x3D; &#39;none&#39;) &#123;qr.style.display&#x3D;&#39;block&#39;;&#125; else &#123;qr.style.display&#x3D;&#39;none&#39;&#125;&quot;&gt;</span><br><span class="line">    &lt;span&gt;&#123;&#123; __(&#39;reward.donate&#39;) &#125;&#125;&lt;&#x2F;span&gt;</span><br><span class="line">  &lt;&#x2F;button&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;QR&quot; style&#x3D;&quot;display: none;&quot;&gt;</span><br><span class="line">...</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>我这里就直接改成了 <code>theme.reward_comment2</code> 。然后在主题的配置文件中也添加一个 <code>reward_comment2</code> 部分即可。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Reward 打赏功能</span><br><span class="line">reward_comment: 坚持原创技术分享，您的支持将鼓励我继续创作！</span><br><span class="line">reward_comment2: 如有疑问或需要技术讨论，请发邮件到 service@itfanr.cc</span><br><span class="line">wechatpay: &#x2F;images&#x2F;wechat-reward-image.jpg</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<hr>
<h4 id="页面载入进度"><a href="#页面载入进度" class="headerlink" title="页面载入进度"></a>页面载入进度</h4><p>这个效果也是刚刚查看配置文件的时候偶然看到的。</p>
<p>之前就曾看别人的博客做的特别炫。页面头部可以显示一个加载进度条，非常的羡慕。</p>
<p>在 <code>next</code> 主题的配置文件 <code>_config.yml</code> 中 找到 <code>pace: false</code> 将其改为 <code>pace: true</code> 即可。</p>
<p>在下面可以选择不同的加载主题样式，通过 <code>pace_theme</code> 参数设置。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pace: true</span><br><span class="line"># Themes list:</span><br><span class="line">#pace-theme-big-counter</span><br><span class="line">#pace-theme-bounce</span><br><span class="line">#  ...</span><br><span class="line">pace_theme: pace-theme-flash</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="感谢支持"><a href="#感谢支持" class="headerlink" title="感谢支持"></a>感谢支持</h4><p>截止目前为止，共收到了3位朋友的扫码红包鼓励，在这里对他们表示感谢。也很高兴我的文章帮助到了他们。</p>
<p>不过由于微信扫码支付无法查看到支付者的微信账号信息，所以在这里就没有列出他们的昵称等信息。具体列表可查看 <a href="/about/#Thanks">关于</a> 页面。</p>
<hr>
]]></content>
      <categories>
        <category>Hexo博客搭建</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>百万英雄，看程序员带你如何任性吃瓜</title>
    <url>/2018/01/16/chi-gua-qun-zhong-bu-chi-gua-one/</url>
    <content><![CDATA[<p>今天中午的时候没事，随手打开掘金app打算看看最近有什么好文章。看到热门推荐下有一篇文章名为 <a href="https://juejin.im/entry/5a5c189e518825733d69093d" target="_blank" rel="noopener">qanswer：冲顶大会等游戏答题神器（Golang）</a> 号称《冲顶大会》,《百万英雄》等答题游戏的答题神器，让人顺利吃鸡！</p>
<p>因为我最近也一直在关注西瓜视频里的“百万英雄”这个“全民直播答题吃瓜”的活动，但无奈自己的知识储备量太少，最高的一次答到第9题就被kill了。看到这篇文章顿时来了兴趣，准备好好研究一番。</p>
<p>该项目的github地址为 <a href="https://github.com/silenceper/qanswer" target="_blank" rel="noopener">silenceper/qanswer</a> 。在 <code>README.md</code> 中也记录了如何来部署运行，下面把我的部署流程简单的记录如下。</p>
<h4 id="qanswer部署"><a href="#qanswer部署" class="headerlink" title="qanswer部署"></a>qanswer部署</h4><p>我使用的设备是 MacBook Pro，手机是 红米Note4x 高通版，分辨率为1920x1080。</p>
<p>对于其他平台如 Win或Linux，我也会顺带提一下。</p>
<h5 id="安装go环境"><a href="#安装go环境" class="headerlink" title="安装go环境"></a>安装go环境</h5><p>配置golang运行环境，可以直接参考我之前写的博客文章来安装：<a href="http://www.itfanr.cc/2017/04/02/golang-running-environment-configuration/">Golang运行环境配置</a></p>
<h5 id="安卓设备"><a href="#安卓设备" class="headerlink" title="安卓设备"></a>安卓设备</h5><p>连接安卓设备时需要安装一个驱动类工具adb。adb全称为 <code>Android Debug Bridge</code> ,即Android调试桥。Android 调试桥 (adb) 是一个通用命令行工具，其允许您与模拟器实例或连接的 Android 设备进行通信。它可为各种设备操作提供便利，如安装和调试应用，并提供对 <code>Unix shell</code>（可用来在模拟器或连接的设备上运行各种命令）的访问。</p>
<h6 id="Mac系统安装adb"><a href="#Mac系统安装adb" class="headerlink" title="Mac系统安装adb"></a>Mac系统安装adb</h6><p>通过 <code>homebrew</code> 来安装，执行如下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ brew cask install android-platform-tools</span><br></pre></td></tr></table></figure>

<p>当看到提示 <code>android-platform-tools was successfully installed!</code> 信息，说明安装成功。</p>
<p>命令 <code>adb devices</code> 可以用来查看当前连接的安卓设备：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ adb devices</span><br><span class="line">List of devices attached</span><br><span class="line">* daemon not running; starting now at tcp:5037</span><br><span class="line">* daemon started successfully</span><br></pre></td></tr></table></figure>

<p>可见当前并没有连接的设备。</p>
<h6 id="Ubuntu安装adb"><a href="#Ubuntu安装adb" class="headerlink" title="Ubuntu安装adb"></a>Ubuntu安装adb</h6><p>使用如下的命令来安装：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo add-apt-repository ppa:nilarimogard&#x2F;webupd8</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install android-tools-adb</span><br></pre></td></tr></table></figure>

<h6 id="Win安装adb"><a href="#Win安装adb" class="headerlink" title="Win安装adb"></a>Win安装adb</h6><p>直接下载解压后就可使用 <a href="https://dl.google.com/android/repository/platform-tools-latest-windows.zip" target="_blank" rel="noopener">Download the ADB ZIP file for Windows</a></p>
<h5 id="ios设备"><a href="#ios设备" class="headerlink" title="ios设备"></a>ios设备</h5><p>对于ios设备，需要安装WDA。</p>
<p>具体的安装方法可参考项目中给出的文章 <a href="https://testerhome.com/topics/7220" target="_blank" rel="noopener">iOS 真机如何安装 WebDriverAgent</a></p>
<hr>
<h4 id="开启小米手机-MIUI9-USB调试模式"><a href="#开启小米手机-MIUI9-USB调试模式" class="headerlink" title="开启小米手机 MIUI9 USB调试模式"></a>开启小米手机 MIUI9 USB调试模式</h4><p>为了能够调试手机，需要打开小米手机或其他安卓手机的USB调试模式。</p>
<p>小米手机 MIUI9系统的开启方法：</p>
<ol>
<li>打开 “设置” – “我的设备” – “全部参数” 页面</li>
<li>然后连续三次以上点击“MIUI版本”一栏，会出现 开发者模式已打开的提示信息</li>
<li>返回设置主界面，进入“更多设置”，在无障碍选项下面出现了“开发者选项”，点击进入</li>
<li>在开发者选项中就可以找到“USB调试”，启用即可</li>
</ol>
<p>通过数据线连接手机，再次执行上面命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ adb devices</span><br><span class="line"></span><br><span class="line">List of devices attached</span><br><span class="line">a1529b810604    device</span><br></pre></td></tr></table></figure>

<p>可以看到发现了我的安卓手机，并连接上了。</p>
<hr>
<h4 id="文字识别"><a href="#文字识别" class="headerlink" title="文字识别"></a>文字识别</h4><p>对于文字图像识别，项目中实现了两种方式：<code>百度ocr</code> 和 <code>tesseract</code>。这里我采用百度ocr来实现。</p>
<p>从百度的文字识别接口网站 <a href="https://cloud.baidu.com/product/ocr.html" target="_blank" rel="noopener">百度文字识别</a> 中，登录百度云管理平台后，在左侧选择“产品服务”–“人工智能”–“文字识别” 一项，选择 “创建应用” 就可以获得需要的api key 和secret key。</p>
<p>百度的文字识别接口有 <code>500次/天</code> 的免费使用权限，一般也够用了。</p>
<hr>
<h4 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h4><p>将项目克隆到 <code>gopath</code> 目录下 <code>git clone https://github.com/silenceper/qanswer.git</code>，如我这里是 <code>/Go/xgo_workspace/src</code> 目录下，然后添加项目引用：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ go get github.com&#x2F;silenceper&#x2F;qanswer</span><br></pre></td></tr></table></figure>

<p>执行编译：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cd qanswer&#x2F;cmd</span><br><span class="line"></span><br><span class="line">$ go build -o ..&#x2F;qanswer</span><br></pre></td></tr></table></figure>

<p>然后会在 <code>qanswer</code> 目录下生成一个名为 <code>qanswer</code> 的执行文件。</p>
<p>执行该程序：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ .&#x2F;qanswer</span><br></pre></td></tr></table></figure>

<p>结果输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">配置文件：.&#x2F;config.yml</span><br><span class="line">设备：ios; 图片识别方式：baidu</span><br><span class="line"></span><br><span class="line">请按空格键开始搜索答案...</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="设置配置文件"><a href="#设置配置文件" class="headerlink" title="设置配置文件"></a>设置配置文件</h4><p>程序运行用到的配置文件是在当前目录下的 <code>config.yml</code> 文件。</p>
<p>配置参数说明如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 是否开始调试模式</span><br><span class="line">debug: false</span><br><span class="line"># 对应的设备类型：ios or android</span><br><span class="line">device: ios</span><br><span class="line"># 使用的ocr工具：baidu or tesseract</span><br><span class="line">ocr_type: baidu</span><br><span class="line"># ios 设备连接wda的地址</span><br><span class="line">wda_address: &#39;127.0.0.1:8100&#39;</span><br><span class="line"># 截取题目的位置 ：</span><br><span class="line">question_x: 30</span><br><span class="line">question_y: 310</span><br><span class="line">question_w: 650</span><br><span class="line">question_h: 135</span><br><span class="line"># 截取答案的位置</span><br><span class="line">answer_x: 30</span><br><span class="line">answer_y: 500</span><br><span class="line">answer_w: 680</span><br><span class="line">answer_h: 370</span><br><span class="line">#当选用baidu ocr时，需要执行api_key和secret_key</span><br><span class="line">baidu_api_key: &quot;xxx....&quot;</span><br><span class="line">baidu_secret_key: &quot;xxx....&quot;</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="成功的关键"><a href="#成功的关键" class="headerlink" title="成功的关键"></a>成功的关键</h4><p>在上面的配置文件中，关键的一点就是配置文件中设置的对于不同手机类型及不同分辨率的坐标设定了。</p>
<p>你需要根据自己手机对直播问答页面进行截图后获取的坐标点及像素长度来设定。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 截取题目的位置</span><br><span class="line">question_x: 30</span><br><span class="line">question_y: 310</span><br><span class="line">question_w: 650</span><br><span class="line">question_h: 135</span><br><span class="line"># 截取答案的位置</span><br><span class="line">answer_x: 30</span><br><span class="line">answer_y: 500</span><br><span class="line">answer_w: 680</span><br><span class="line">answer_h: 370</span><br></pre></td></tr></table></figure>

<p>对直播答题界面截屏，然后通过Mac系统自带的图片预览可以得到该界面中题目左上角顶点的x坐标位置和y坐标位置以及题目区域的宽度和高度。<br>同理能够获得答案部分的值。</p>
<p>这里要提一下的是，这里的坐标是向右为x轴正方向，向下为y轴正方向。所以值均为正数。</p>
<p>经过测量，我的手机的配置信息如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 百万英雄 红米Note4x 高通版 1920x1080</span><br><span class="line">debug: true</span><br><span class="line">device: android</span><br><span class="line">ocr_type: baidu</span><br><span class="line">wda_address: &#39;127.0.0.1:8100&#39;</span><br><span class="line">question_x: 80</span><br><span class="line">question_y: 270</span><br><span class="line">question_w: 920</span><br><span class="line">question_h: 400</span><br><span class="line">answer_x: 80</span><br><span class="line">answer_y: 680</span><br><span class="line">answer_w: 920</span><br><span class="line">answer_h: 580</span><br><span class="line">baidu_api_key: xxx...</span><br><span class="line">baidu_secret_key: xxx...</span><br></pre></td></tr></table></figure>

<p>另外，<code>baidu_api_key</code> 和 <code>baidu_secret_key</code> 设置成在百度文本识别中创建应用的对应值。如果使用的是 <code>tesseract</code> 这两项则不用管。</p>
<hr>
<h4 id="执行效果"><a href="#执行效果" class="headerlink" title="执行效果"></a>执行效果</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">配置文件：.&#x2F;config.yml</span><br><span class="line">设备：android; 图片识别方式：baidu</span><br><span class="line"></span><br><span class="line">请按空格键开始搜索答案...</span><br><span class="line">正在开始搜索....</span><br><span class="line">2018&#x2F;01&#x2F;16 13:33:27 image.go:41: [debug] 保存question截图成功</span><br><span class="line">2018&#x2F;01&#x2F;16 13:33:27 image.go:51: [debug] 保存answer截图成功</span><br><span class="line">2018&#x2F;01&#x2F;16 13:33:27 image.go:22: [debug] 保存完整截图成功，.&#x2F;images&#x2F;screenshot.png</span><br><span class="line">2018&#x2F;01&#x2F;16 13:33:28 qanswer.go:144: [debug] 斗杓东指,天下皆冬</span><br><span class="line">北斗一星为天权</span><br><span class="line">玉衡星是七星中最亮的星</span><br><span class="line">2018&#x2F;01&#x2F;16 13:33:28 qanswer.go:133: [debug] 2.关于北七斗七星,下列说法正确的</span><br><span class="line">是?</span><br><span class="line">识别题目：</span><br><span class="line">关于北七斗七星,下列说法正确的是?</span><br><span class="line">识别答案：</span><br><span class="line">[斗杓东指,天下皆冬 北斗一星为天权 玉衡星是七星中最亮的星]</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;百度搜索&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">关于北七斗七星,下列说法正确的是?</span><br><span class="line">答案：</span><br><span class="line">斗杓东指,天下皆冬 : 结果总数 7400 ， 答案出现频率： 0</span><br><span class="line">北斗一星为天权 : 结果总数 189000 ， 答案出现频率： 0</span><br><span class="line">玉衡星是七星中最亮的星 : 结果总数 383000 ， 答案出现频率： 0</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line"></span><br><span class="line">耗时：7.24113s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">请按空格键开始搜索答案...</span><br></pre></td></tr></table></figure>

<p>另外附上一些执行过程截图：</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/180116B2c2Deah5B.png" alt="mark"></p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/180116k9mAhDA6dC.png" alt="mark"></p>
<hr>
<h4 id="出现的问题"><a href="#出现的问题" class="headerlink" title="出现的问题"></a>出现的问题</h4><p>在实际的测试中，我也发现了该项目的一些问题。</p>
<h5 id="判断逻辑的可行性"><a href="#判断逻辑的可行性" class="headerlink" title="判断逻辑的可行性"></a>判断逻辑的可行性</h5><p>目前该项目中使用的搜索引擎是百度。</p>
<p>而程序当前对问题答案获取的后台逻辑是：通过将问题和三个不同的答案拼接输出到搜索引擎中进行搜索查询，如使用百度，在搜索结果页面中会输出：“百度为您找到相关结果约487,000个” 类似这样的一段话。而答案的判断逻辑就是看三种答案对应的搜索结果的数据总条数来预测该答案可能为正确的答案。</p>
<p>但这样的方法并不一定能保证完全的正确，如下面的一个问题：</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/1801162aeEkGG7Bd.png" alt="mark"></p>
<p>如果按照推荐的答案，要选 “探戈” 。而这道题的正确答案应该是 “森巴” 。</p>
<p>后来，我又对其他常用的搜索引擎做了对比。如我对比了 <code>Baidu</code> 、<code>Bing国内版</code> 、 <code>Bing国际版</code> 和 <code>Google（需FQ）</code> ，结果发现这四种搜索结果的正确率为：</p>
<blockquote>
<p>Google &gt; Bing国际版 &gt; Bing国内版 &gt; Baidu</p>
</blockquote>
<p>但是后来我增加了问题的测试数量，发现Google对于答案的判断正确率也比较低。</p>
<p>例如其中的一个问题：</p>
<blockquote>
<p>哪一种反应属于化学反应? </p>
<p>食物腐烂<br>冰化水<br>玻璃碎成块  </p>
</blockquote>
<p>通过百度测试，对于三个答案的搜索结果数量为：</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/180116b1bhafB5i5.png" alt="mark"></p>
<p>可见，按照搜索数量结果来看的话，要选 “玻璃碎成块” ，但正确的答案应该是 “食物腐烂”。</p>
<p>后来我又使用 google 进行了测试:</p>
<blockquote>
<p>食物腐烂  98400<br>冰化水   483000<br>玻璃碎成块  116000   </p>
</blockquote>
<p>可见在Google下这种方式得到的答案也不正确。</p>
<p>所以，我觉得这种判断逻辑只能给出70%的正确率，在答题过程中也仅仅作为参考答案，而不能一味的相信。</p>
<h5 id="否定句"><a href="#否定句" class="headerlink" title="否定句"></a>否定句</h5><p>如果遇到标题是否定句式的情况，通过上面这种搜索的形式就无法找到正确的答案了，一般搜索出来的也是“肯定句式”下的答案。</p>
<p>比如下面这个问题：</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/180116K8cJF6i7Dj.png" alt="mark"></p>
<p>正确的答案应该是 <code>爱如潮水</code>。</p>
<h5 id="文字识别出错"><a href="#文字识别出错" class="headerlink" title="文字识别出错"></a>文字识别出错</h5><p>还有一种情况就是图像文字没有识别出来的情况，最后也就不能给出相应的答案了。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/180116JEbI5EbHEB.png" alt="mark"></p>
<hr>
<h4 id="其他方法实现"><a href="#其他方法实现" class="headerlink" title="其他方法实现"></a>其他方法实现</h4><p>个人认为类似这种问答类的题目，可行的方式比如对问题进行分词处理，然后对关键词去搜索匹配，通过词频来判断；或者弹出浏览器由用户自己去判断最终的答案，一般像搜索引擎的搜索结果页面，都会有标题和简短的内容，内容中的关键字会被标红显示，由用户自己去判断，准确性会更高一些，但这样耗费的时间也会特别长。应该还有其他的方法吧。</p>
<p>目前我也在用python来实现一种可能的方法，我会在后续的文章中详细说明，敬请期待吧！</p>
<p>最后再说一句。如果看到这篇文章后你也对这种“答题吃瓜”的直播问题活动产生了兴趣，可以使用我的邀请码来获得一张复活卡的机会，输入下面的邀请码即可。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/180116GaimbE8mfm.jpeg" alt="mark"></p>
<hr>
<h4 id="相关参考"><a href="#相关参考" class="headerlink" title="相关参考"></a>相关参考</h4><ul>
<li><a href="https://github.com/silenceper/qanswer" target="_blank" rel="noopener">qanswer</a></li>
<li><a href="https://www.xda-developers.com/install-adb-windows-macos-linux/" target="_blank" rel="noopener">How to Install ADB on Windows, macOS, and Linux</a></li>
<li><a href="https://developer.android.com/studio/command-line/adb.html" target="_blank" rel="noopener">Android 调试桥</a></li>
<li><a href="https://www.jianshu.com/p/1b3fb1f27b67" target="_blank" rel="noopener">在 MAC OS X 安装 ADB (Android调试桥)</a></li>
</ul>
]]></content>
      <tags>
        <tag>Niubility</tag>
      </tags>
  </entry>
  <entry>
    <title>Celery分布式任务队列入门(三)-任务</title>
    <url>/2017/12/10/celery-distributed-task-queue-introduction-third/</url>
    <content><![CDATA[<p>在上一篇 <a href="/2017/12/10/celery-distributed-task-queue-introduction-second/">Celery分布式任务队列入门(二)-环境配置</a> 中介绍了一种简单任务的创建方法。</p>
<p>对于任务，在Celery中主要分为 <code>异步任务</code> 和 <code>定时任务</code>，下面详细的来说说。</p>
<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>Celery中的配置可以直接在应用上设置，也可以使用一个独立的配置模块。</p>
<h5 id="直接配置"><a href="#直接配置" class="headerlink" title="直接配置"></a>直接配置</h5><p>例如你可以通过修改 <code>CELERY_TASK_SERIALIZER</code> 选项来配置序列化任务载荷的默认的序列化方式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">app.conf.CELERY_TASK_SERIALIZER &#x3D; &#39;json&#39;</span><br></pre></td></tr></table></figure>

<p>一次性设置多个选项，你可以使用 <code>update()</code> 方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">app.conf.update(</span><br><span class="line">    CELERY_TASK_SERIALIZER&#x3D;&#39;json&#39;,</span><br><span class="line">    CELERY_ACCEPT_CONTENT&#x3D;[&#39;json&#39;],  # Ignore other content</span><br><span class="line">    CELERY_RESULT_SERIALIZER&#x3D;&#39;json&#39;,</span><br><span class="line">    CELERY_TIMEZONE&#x3D;&#39;Europe&#x2F;Oslo&#39;,</span><br><span class="line">    CELERY_ENABLE_UTC&#x3D;True,</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from celery import Celery</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CELERY_CONFIG &#x3D; &#123;</span><br><span class="line">    &#39;CELERY_TIMEZONE&#39;: &#39;Asia&#x2F;Shanghai&#39;,</span><br><span class="line">    &#39;CELERY_ENABLE_UTC&#39;: True,</span><br><span class="line">    # content</span><br><span class="line">    &#39;CELERY_TASK_SERIALIZER&#39;: &#39;json&#39;,</span><br><span class="line">    &#39;CELERY_RESULT_SERIALIZER&#39;: &#39;json&#39;,</span><br><span class="line">    &#39;CELERY_ACCEPT_CONTENT&#39;: [&#39;json&#39;],</span><br><span class="line">    &#39;CELERYD_MAX_TASKS_PER_CHILD&#39;: 1</span><br><span class="line">&#125;</span><br><span class="line">SETTINGS &#x3D; &#123;</span><br><span class="line">    &#39;user&#39;: &#39;www-data&#39;,</span><br><span class="line">    &#39;password&#39;: &#39;www-data&#39;,</span><br><span class="line">    &#39;host&#39;: &#39;127.0.0.1&#39;,</span><br><span class="line">    &#39;port&#39;: &#39;5672&#39;,</span><br><span class="line">    &#39;vhost&#39;: &#39;t_celery&#39;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app &#x3D; Celery(</span><br><span class="line">    &#39;test_celery&#39;,</span><br><span class="line">    broker&#x3D;&#39;amqp:&#x2F;&#x2F;&#123;user&#125;:&#123;password&#125;@&#123;host&#125;:&#123;port&#125;&#x2F;&#123;vhost&#125;&#39;.format(</span><br><span class="line">        **SETTINGS)</span><br><span class="line">)</span><br><span class="line">app.conf.update(**CELERY_CONFIG)</span><br></pre></td></tr></table></figure>

<hr>
<h5 id="独立配置模块"><a href="#独立配置模块" class="headerlink" title="独立配置模块"></a>独立配置模块</h5><p>对于大型项目，采用独立配置模块更为有效。</p>
<p>可以调用 <code>config_from_object()</code> 来让 <code>Celery</code> 实例加载配置模块：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">app.config_from_object(&#39;celeryconfig&#39;)</span><br></pre></td></tr></table></figure>

<p>配置模块通常称为 <code>celeryconfig</code> ，你也可以使用任意的模块名。名为 <code>celeryconfig.py</code> 的模块必须可以从当前目录或 <code>Python</code> 路径加载。</p>
<p><code>celeryconfig.py</code> 格式一般为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">BROKER_URL &#x3D; &#39;amqp:&#x2F;&#x2F;&#39;</span><br><span class="line">CELERY_RESULT_BACKEND &#x3D; &#39;amqp:&#x2F;&#x2F;&#39;</span><br><span class="line"></span><br><span class="line">CELERY_TASK_SERIALIZER &#x3D; &#39;json&#39;</span><br><span class="line">CELERY_RESULT_SERIALIZER &#x3D; &#39;json&#39;</span><br><span class="line">CELERY_ACCEPT_CONTENT&#x3D;[&#39;json&#39;]</span><br><span class="line">CELERY_TIMEZONE &#x3D; &#39;Europe&#x2F;Oslo&#39;</span><br><span class="line">CELERY_ENABLE_UTC &#x3D; True</span><br></pre></td></tr></table></figure>

<p>检查配置文件的语法错误，可以：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ python -m celeryconfig</span><br></pre></td></tr></table></figure>

<p>更多配置参数参考：<a href="http://docs.jinkan.org/docs/celery/configuration.html#configuration" target="_blank" rel="noopener">Configuration and defaults</a></p>
<p>有关配置的使用可以看我另一篇文章中的详细介绍。</p>
<hr>
<h4 id="异步任务"><a href="#异步任务" class="headerlink" title="异步任务"></a>异步任务</h4><p>在初级篇中我们创建的简单任务 <code>tasks.py</code> 就是一个异步任务。<code>tasks.py</code> ：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python3</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"></span><br><span class="line">from celery import Celery</span><br><span class="line"></span><br><span class="line">app &#x3D; Celery(&#39;tasks&#39;,</span><br><span class="line">             broker&#x3D;&#39;amqp:&#x2F;&#x2F;myuser:hello@localhost:5672&#x2F;hellohost&#39;,</span><br><span class="line">             backend&#x3D;&#39;amqp:&#x2F;&#x2F;myuser:hello@localhost:5672&#x2F;hellohost&#39;</span><br><span class="line">             )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@app.task</span><br><span class="line">def add(x, y):</span><br><span class="line">    return x + y</span><br></pre></td></tr></table></figure>

<ul>
<li>创建了一个 <code>Celery</code> 实例 <code>app</code> ，指定名称为 <code>tasks</code></li>
<li>指定消息中间件 <code>broker</code> 使用 <code>RabbitMQ</code> ，指定结果存储 <code>backend</code> 使用 <code>RabbitMQ</code></li>
<li>创建了一个 <code>Celery</code> 任务 <code>add</code>，当函数被 <code>@app.task</code> 装饰后，就成为可被 <code>Celery</code> 调度的任务</li>
</ul>
<h5 id="运行-worker"><a href="#运行-worker" class="headerlink" title="运行 worker"></a>运行 worker</h5><p>在 tasks.py 文件所在目录执行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ celery -A tasks worker --loglevel&#x3D;info</span><br></pre></td></tr></table></figure>

<p>这个命令会开启一个在前台运行的 worker。</p>
<p>参数说明：</p>
<ul>
<li><code>worker</code> : 运行 <code>worker</code> 模块</li>
<li><code>-A: –app=APP</code>  指定使用的 <code>Celery</code> 实例所在的文件模块</li>
<li><code>-l: -–loglevel=INFO</code> 指定日志级别，默认为 <code>WARNING</code>，可选：<code>DEBUG</code>, <code>INFO</code>, <code>WARNING</code>, <code>ERROR</code>, <code>CRITICAL</code>, <code>FATAL</code></li>
</ul>
<p>如果是创建任务模块，可以使用模块名称来启动：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ celery -A proj worker -l info</span><br></pre></td></tr></table></figure>

<p>或者使用完整命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ celery worker --app&#x3D;proj -l info</span><br></pre></td></tr></table></figure>

<p>查看完整的帮助信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ celery worker --help</span><br></pre></td></tr></table></figure>

<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@b792ae940e3e:&#x2F;app# celery worker --help</span><br><span class="line">usage: celery worker [options] </span><br><span class="line"></span><br><span class="line">Start worker instance.</span><br><span class="line"></span><br><span class="line">Examples:</span><br><span class="line"></span><br><span class="line">        $ celery worker --app&#x3D;proj -l info</span><br><span class="line">        $ celery worker -A proj -l info -Q hipri,lopri</span><br><span class="line"></span><br><span class="line">        $ celery worker -A proj --concurrency&#x3D;4</span><br><span class="line">        $ celery worker -A proj --concurrency&#x3D;1000 -P eventlet</span><br><span class="line">        $ celery worker --autoscale&#x3D;10,0</span><br></pre></td></tr></table></figure>

<ul>
<li><a href="http://docs.celeryproject.org/en/latest/userguide/workers.html#starting-the-worker" target="_blank" rel="noopener">Workers Guide</a></li>
<li><a href="http://docs.celeryproject.org/en/latest/reference/celery.bin.worker.html#celery-bin-worker" target="_blank" rel="noopener">celery.bin.worker</a></li>
</ul>
<p><strong>扩展</strong></p>
<p>对于参数 <code>-A: –app=APP</code> 表示指定使用的 <code>Celery</code> 实例。即指py文件的文件名（不包括扩展名.py）或项目的模块名</p>
<p>比如项目结构如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">testcelery&#x2F;</span><br><span class="line">    |- src&#x2F;</span><br><span class="line">        |- __init__.py</span><br><span class="line">        |- app.py</span><br><span class="line">        |- task.py</span><br></pre></td></tr></table></figure>

<p>那么启动worker任务 <code>task.py</code> 的命令即为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ celery worker -A src.task -l info</span><br></pre></td></tr></table></figure>

<h5 id="调用-Task"><a href="#调用-Task" class="headerlink" title="调用 Task"></a>调用 Task</h5><h6 id="delay调用"><a href="#delay调用" class="headerlink" title="delay调用"></a>delay调用</h6><p>在异步调用方式中，可以通过 <code>delay</code> 或者 <code>apply_async</code> 来实现。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from tasks import add</span><br><span class="line"></span><br><span class="line">add.delay(3, 4)</span><br></pre></td></tr></table></figure>

<p>示例，创建文件 <code>client.py</code> :</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python3</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"></span><br><span class="line">from tasks import add</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    add.delay(1, 5)</span><br></pre></td></tr></table></figure>

<p>执行 <code>$ python3 client.py</code> 就能调用执行了。</p>
<h6 id="apply-async"><a href="#apply-async" class="headerlink" title="apply_async"></a>apply_async</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python3</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"></span><br><span class="line">from tasks import add</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    # add.delay(1, 5)</span><br><span class="line">    add.apply_async(args&#x3D;(5, 6))</span><br></pre></td></tr></table></figure>

<p><code>delay</code> 和 <code>apply_async</code> 这两种调用方式等价，<code>delay</code> 是 <code>apply_async</code> 的简写。用于一个任务消息（task message）。之前的示例中我们发现 <code>add</code> 任务并没有返回 “计算结果”，而是返回了一个对象 <code>AsyncResult</code>，它的作用是被用来检查任务状态，等待任务执行完毕或获取任务结果，如果任务失败，它会返回异常信息或者调用栈。</p>
<p><code>apply_async</code> 参数</p>
<p>apply_async 相比 delay的优点就是，apply_async支持更多的参数。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apply_async(args&#x3D;(), kwargs&#x3D;&#123;&#125;, route_name&#x3D;None, **options)</span><br></pre></td></tr></table></figure>

<p>apply_async 常用的参数如下：</p>
<ul>
<li><code>countdown</code> ：任务延迟执行的秒数，默认立即执行；<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">task1.apply_async(args&#x3D;(2, 3), countdown&#x3D;5)    # 5 秒后执行任务</span><br></pre></td></tr></table></figure></li>
<li><code>eta</code> ：任务被执行的绝对时间，参数类型是 <code>datetime</code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from datetime import datetime, timedelta</span><br><span class="line"></span><br><span class="line"># 当前 UTC 时间再加 10 秒后执行任务</span><br><span class="line">task1.multiply.apply_async(args&#x3D;[3, 7], eta&#x3D;datetime.utcnow() + timedelta(seconds&#x3D;10))</span><br></pre></td></tr></table></figure></li>
<li><code>expires</code> : 任务过期时间，参数类型可以是 <code>int</code>，也可以是 <code>datetime</code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">task1.multiply.apply_async(args&#x3D;[3, 7], expires&#x3D;10)    # 10 秒后过期</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>更多的参数列表可以在 <a href="http://docs.celeryproject.org/en/latest/reference/celery.app.task.html#celery.app.task.Task.apply_async" target="_blank" rel="noopener">官方文档</a> 中查看。</p>
<h6 id="send-task调用"><a href="#send-task调用" class="headerlink" title="send_task调用"></a>send_task调用</h6><p>除了使用 <code>delay</code> 的方式，还已通过 <code>send_task()</code> 的方式来调用。同时 <code>send_task()</code> 也支持设置更多的参数。</p>
<p>示例，<code>client.py</code> :</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python3</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"></span><br><span class="line">from tasks import app</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    # add.delay(1, 5)</span><br><span class="line">    # add.apply_async(args&#x3D;(5, 6))</span><br><span class="line">    app.send_task(&#39;tasks.add&#39;, args&#x3D;(12, 23),)</span><br></pre></td></tr></table></figure>

<p>注意，这里引入的是 <code>app</code> 实例。<code>args</code> 参数是一个元组类型。相应的执行结果为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[2017-12-10 07:11:38,057: INFO&#x2F;MainProcess] Received task: tasks.add[83fd530f-d800-43c7-bcfe-920a176812e2]  </span><br><span class="line">[2017-12-10 07:11:43,217: INFO&#x2F;ForkPoolWorker-1] Task tasks.add[83fd530f-d800-43c7-bcfe-920a176812e2] succeeded in 5.1578904589996455s: 35</span><br></pre></td></tr></table></figure>

<h5 id="AsyncResult方法"><a href="#AsyncResult方法" class="headerlink" title="AsyncResult方法"></a>AsyncResult方法</h5><p>上一篇文章中我们提到过返回对象 <code>AsyncResult</code> 的 <code>ready()</code> 方法，继续来看一下其他的方法：</p>
<p><code>ready</code> 为 <code>True</code> 表示已经返回结果了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; result.ready()</span><br><span class="line">True</span><br></pre></td></tr></table></figure>

<p><code>status</code> 表示任务执行状态，失败还是成功</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; result.status</span><br><span class="line">&#39;SUCCESS&#39;</span><br></pre></td></tr></table></figure>

<p><code>result</code> 和 <code>get()</code> 表示返回的结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; result.result</span><br><span class="line">7</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; result.get() </span><br><span class="line">7</span><br></pre></td></tr></table></figure>

<p><code>id</code> 用来查看任务的id属性：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; result.id</span><br><span class="line">&#39;c178619e-3af3-41ed-8d2c-6371de80a601&#39;</span><br></pre></td></tr></table></figure>


<h4 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h4><p><code>Celery Beat</code> 进程通过读取配置文件的内容，周期性地将定时任务发往任务队列。</p>
<p>在Celery的定时任务中，重要的两个方法是 定时器 和 执行器：</p>
<ul>
<li>定时器，也叫作 beater，也就是帮助我们计算什么时候执行什么操作</li>
<li>执行器，也叫作 worker，真正执行任务的地方，我们的任务都是通过这个运行的</li>
</ul>
<p>创建Celery定时任务有多中方法。</p>
<h5 id="通过配置文件方式"><a href="#通过配置文件方式" class="headerlink" title="通过配置文件方式"></a>通过配置文件方式</h5><p>可以在配置文件中通过 <code>CELERYBEAT_SCHEDULE</code> 设置定时。</p>
<h6 id="简单定时任务"><a href="#简单定时任务" class="headerlink" title="简单定时任务"></a>简单定时任务</h6><p>创建一个Celery的任务 <code>tasks.py</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python3</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"></span><br><span class="line">from celery import Celery</span><br><span class="line"></span><br><span class="line">app &#x3D; Celery(&#39;tasks&#39;,</span><br><span class="line">             broker&#x3D;&#39;amqp:&#x2F;&#x2F;myuser:hello@localhost:5672&#x2F;hellohost&#39;,</span><br><span class="line">             backend&#x3D;&#39;amqp:&#x2F;&#x2F;myuser:hello@localhost:5672&#x2F;hellohost&#39;</span><br><span class="line">             )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.conf.update(</span><br><span class="line">    # 配置定时任务</span><br><span class="line">    CELERYBEAT_SCHEDULE&#x3D;&#123;</span><br><span class="line">        &#39;my_task&#39;: &#123;</span><br><span class="line">            &#39;task&#39;: &#39;tasks.add&#39;,</span><br><span class="line">            &#39;schedule&#39;: 60,</span><br><span class="line">            &#39;args&#39;: (22, 34),</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@app.task</span><br><span class="line">def add(x, y):</span><br><span class="line">    return x + y</span><br></pre></td></tr></table></figure>

<p>然后，启动这个 <code>worker</code> 进程：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># celery -A tasks worker -l info</span><br></pre></td></tr></table></figure>

<p>接着，启动 <code>Celery Beat</code> 进程，定时将任务发送到 <code>Broker</code> ，在另一个命令行窗口下执行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># celery beat -A tasks -l info</span><br></pre></td></tr></table></figure>

<p>可以看到提示信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@b792ae940e3e:&#x2F;app# celery beat -A tasks -l info</span><br><span class="line">celery beat v4.1.0 (latentcall) is starting.</span><br><span class="line">__    -    ... __   -        _</span><br><span class="line">LocalTime -&gt; 2017-12-10 08:48:29</span><br><span class="line">Configuration -&gt;</span><br><span class="line">    . broker -&gt; amqp:&#x2F;&#x2F;myuser:**@localhost:5672&#x2F;hellohost</span><br><span class="line">    . loader -&gt; celery.loaders.app.AppLoader</span><br><span class="line">    . scheduler -&gt; celery.beat.PersistentScheduler</span><br><span class="line">    . db -&gt; celerybeat-schedule</span><br><span class="line">    . logfile -&gt; [stderr]@%INFO</span><br><span class="line">    . maxinterval -&gt; 5.00 minutes (300s)</span><br><span class="line">[2017-12-10 08:48:29,141: INFO&#x2F;MainProcess] beat: Starting...</span><br></pre></td></tr></table></figure>

<p>一段时间后，可以看到执行结果：</p>
<p><code>beat</code> 执行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[2017-12-10 08:49:29,277: INFO&#x2F;MainProcess] Scheduler: Sending due task my_task (tasks.add)</span><br><span class="line">[2017-12-10 08:50:29,289: INFO&#x2F;MainProcess] Scheduler: Sending due task my_task (tasks.add)</span><br><span class="line">[2017-12-10 08:51:29,322: INFO&#x2F;MainProcess] Scheduler: Sending due task my_task (tasks.add)</span><br><span class="line">[2017-12-10 08:52:29,334: INFO&#x2F;MainProcess] Scheduler: Sending due task my_task (tasks.add)</span><br><span class="line">[2017-12-10 08:53:29,375: INFO&#x2F;MainProcess] Scheduler: Sending due task my_task (tasks.add)</span><br><span class="line">[2017-12-10 08:54:29,411: INFO&#x2F;MainProcess] Scheduler: Sending due task my_task (tasks.add)</span><br><span class="line">[2017-12-10 08:55:29,426: INFO&#x2F;MainProcess] Scheduler: Sending due task my_task (tasks.add)</span><br></pre></td></tr></table></figure>

<p><code>workder</code> 执行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[2017-12-10 08:41:37,839: INFO&#x2F;MainProcess] celery@b792ae940e3e ready.</span><br><span class="line">[2017-12-10 08:49:29,290: INFO&#x2F;MainProcess] Received task: tasks.add[1667ee3b-58c8-4a1a-be9f-0c20c3086bde]  </span><br><span class="line">[2017-12-10 08:49:29,321: INFO&#x2F;ForkPoolWorker-1] Task tasks.add[1667ee3b-58c8-4a1a-be9f-0c20c3086bde] succeeded in 0.029423292000501533s: 56</span><br><span class="line">[2017-12-10 08:50:29,295: INFO&#x2F;MainProcess] Received task: tasks.add[db2d9ead-c22f-4efe-8d1c-6995f0ce9148]  </span><br><span class="line">[2017-12-10 08:50:29,345: INFO&#x2F;ForkPoolWorker-1] Task tasks.add[db2d9ead-c22f-4efe-8d1c-6995f0ce9148] succeeded in 0.046812374001092394s: 56</span><br><span class="line">[2017-12-10 08:51:29,324: INFO&#x2F;MainProcess] Received task: tasks.add[7b23af5f-a467-4263-9cd0-87486f2df25d]  </span><br><span class="line">[2017-12-10 08:51:29,338: INFO&#x2F;ForkPoolWorker-1] Task tasks.add[7b23af5f-a467-4263-9cd0-87486f2df25d] succeeded in 0.011024585000996012s: 56</span><br><span class="line">[2017-12-10 08:52:29,336: INFO&#x2F;MainProcess] Received task: tasks.add[2f3489e4-625e-460a-bc57-3fdf13456d97]  </span><br><span class="line">[2017-12-10 08:52:29,349: INFO&#x2F;ForkPoolWorker-1] Task tasks.add[2f3489e4-625e-460a-bc57-3fdf13456d97] succeeded in 0.01185457899919129s: 56</span><br><span class="line">[2017-12-10 08:53:29,381: INFO&#x2F;MainProcess] Received task: tasks.add[ec7377fb-1859-4980-861b-2592422aad8c]  </span><br><span class="line">[2017-12-10 08:53:29,408: INFO&#x2F;ForkPoolWorker-1] Task tasks.add[ec7377fb-1859-4980-861b-2592422aad8c] succeeded in 0.021194035000007716s: 56</span><br></pre></td></tr></table></figure>

<hr>
<p>上面定时任务的配置信息表示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 配置定时任务</span><br><span class="line">CELERYBEAT_SCHEDULE&#x3D;&#123;</span><br><span class="line">    &#39;my_task&#39;: &#123;</span><br><span class="line">        &#39;task&#39;: &#39;tasks.add&#39;,</span><br><span class="line">        &#39;schedule&#39;: 60,</span><br><span class="line">        &#39;args&#39;: (22, 34),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中：</p>
<ul>
<li><code>my_task</code> 表示当前任务的名称，可以自定义指定</li>
<li><code>task</code> 表示 <code>tasks.py</code> 模块下的 <code>add</code> 方法</li>
<li><code>schedule</code> 表示 任务执行的间隔，如果使用 <code>int</code> 类型，则单位是秒；还可以使用 <code>timedelta</code> 类型</li>
<li><code>args</code> 表示任务函数参数，注意参数类型为元组</li>
</ul>
<hr>
<p>如果不通过 <code>update</code> 来修改，还可以通过设置 <code>beat_schedule</code> 配置项来设置。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python3</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"></span><br><span class="line">from celery import Celery</span><br><span class="line"></span><br><span class="line">app &#x3D; Celery(&#39;tasks&#39;,</span><br><span class="line">             broker&#x3D;&#39;amqp:&#x2F;&#x2F;myuser:hello@localhost:5672&#x2F;hellohost&#39;,</span><br><span class="line">             backend&#x3D;&#39;amqp:&#x2F;&#x2F;myuser:hello@localhost:5672&#x2F;hellohost&#39;</span><br><span class="line">             )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.conf.beat_schedule &#x3D; &#123;</span><br><span class="line">    &#39;my_task&#39;: &#123;</span><br><span class="line">        &#39;task&#39;: &#39;tasks.add&#39;,</span><br><span class="line">        &#39;schedule&#39;: 60,</span><br><span class="line">        &#39;args&#39;: (1, 2),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">app.conf.timezone &#x3D; &#39;UTC&#39;</span><br><span class="line"></span><br><span class="line">@app.task</span><br><span class="line">def add(x, y):</span><br><span class="line">    return x + y</span><br></pre></td></tr></table></figure>

<h6 id="多项定时任务"><a href="#多项定时任务" class="headerlink" title="多项定时任务"></a>多项定时任务</h6><p>我们还可以在配置文件中同时定义多个定时任务，只需要在 <code>CELERYBEAT_SCHEDULE</code> 项中添加即可:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 配置定时任务</span><br><span class="line">CELERYBEAT_SCHEDULE&#x3D;&#123;</span><br><span class="line">    &#39;my_task&#39;: &#123;</span><br><span class="line">        &#39;task&#39;: &#39;tasks.add&#39;,</span><br><span class="line">        &#39;schedule&#39;: 60,</span><br><span class="line">        &#39;args&#39;: (22, 34),</span><br><span class="line">    &#125;,</span><br><span class="line">    &#39;your_task&#39;:&#123;</span><br><span class="line">      &#39;task&#39;:&#39;tasks,add&#39;,</span><br><span class="line">      &#39;schedule&#39;:30,</span><br><span class="line">      &#39;args&#39;:(1,4),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>相应的执行结果：</p>
<p><code>beat</code> 执行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@b792ae940e3e:&#x2F;app# celery beat -A tasks -l info</span><br><span class="line"></span><br><span class="line">[2017-12-10 09:34:50,113: INFO&#x2F;MainProcess] beat: Starting...</span><br><span class="line">[2017-12-10 09:35:20,151: INFO&#x2F;MainProcess] Scheduler: Sending due task your_task (tasks.add)</span><br><span class="line">[2017-12-10 09:35:50,145: INFO&#x2F;MainProcess] Scheduler: Sending due task your_task (tasks.add)</span><br><span class="line">[2017-12-10 09:35:50,149: INFO&#x2F;MainProcess] Scheduler: Sending due task my_task (tasks.add)</span><br><span class="line">[2017-12-10 09:36:20,166: INFO&#x2F;MainProcess] Scheduler: Sending due task your_task (tasks.add)</span><br><span class="line">[2017-12-10 09:36:50,187: INFO&#x2F;MainProcess] Scheduler: Sending due task your_task (tasks.add)</span><br><span class="line">[2017-12-10 09:36:50,188: INFO&#x2F;MainProcess] Scheduler: Sending due task my_task (tasks.add)</span><br><span class="line">[2017-12-10 09:37:20,208: INFO&#x2F;MainProcess] Scheduler: Sending due task your_task (tasks.add)</span><br></pre></td></tr></table></figure>

<p><code>worker</code> 执行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@b792ae940e3e:&#x2F;app# celery worker -A tasks -l info</span><br><span class="line"></span><br><span class="line">[2017-12-10 09:34:45,833: INFO&#x2F;MainProcess] celery@b792ae940e3e ready.</span><br><span class="line">[2017-12-10 09:35:20,165: INFO&#x2F;MainProcess] Received task: tasks.add[2b236ccf-c4af-430c-8d4e-a5cbaf331123]  </span><br><span class="line">[2017-12-10 09:35:20,213: INFO&#x2F;ForkPoolWorker-1] Task tasks.add[2b236ccf-c4af-430c-8d4e-a5cbaf331123] succeeded in 0.04618659699917771s: 5</span><br><span class="line">[2017-12-10 09:35:50,151: INFO&#x2F;MainProcess] Received task: tasks.add[01f843bc-8506-4d61-97ce-5f989c576509]  </span><br><span class="line">[2017-12-10 09:35:50,159: INFO&#x2F;MainProcess] Received task: tasks.add[f3230694-ce5a-4bc3-9c92-eea71b9c4949]  </span><br><span class="line">[2017-12-10 09:35:50,187: INFO&#x2F;ForkPoolWorker-1] Task tasks.add[01f843bc-8506-4d61-97ce-5f989c576509] succeeded in 0.03170933700130263s: 5</span><br><span class="line">[2017-12-10 09:35:50,214: INFO&#x2F;ForkPoolWorker-2] Task tasks.add[f3230694-ce5a-4bc3-9c92-eea71b9c4949] succeeded in 0.04673135899975023s: 56</span><br><span class="line">[2017-12-10 09:36:20,168: INFO&#x2F;MainProcess] Received task: tasks.add[410e86bf-2e06-4a7d-965d-92d2e6a72c12]  </span><br><span class="line">[2017-12-10 09:36:20,186: INFO&#x2F;ForkPoolWorker-1] Task tasks.add[410e86bf-2e06-4a7d-965d-92d2e6a72c12] succeeded in 0.01682951399925514s: 5</span><br><span class="line">[2017-12-10 09:36:50,191: INFO&#x2F;MainProcess] Received task: tasks.add[d2b32ff2-8e8e-4903-ad8f-7d12da132739]  </span><br><span class="line">[2017-12-10 09:36:50,193: INFO&#x2F;MainProcess] Received task: tasks.add[dc7fc344-374e-438b-8a0f-85f9e9f08aac]  </span><br><span class="line">[2017-12-10 09:36:50,207: INFO&#x2F;ForkPoolWorker-1] Task tasks.add[d2b32ff2-8e8e-4903-ad8f-7d12da132739] succeeded in 0.013693080998564255s: 5</span><br><span class="line">[2017-12-10 09:36:50,211: INFO&#x2F;ForkPoolWorker-2] Task tasks.add[dc7fc344-374e-438b-8a0f-85f9e9f08aac] succeeded in 0.017022554000504897s: 56</span><br><span class="line">[2017-12-10 09:37:20,213: INFO&#x2F;MainProcess] Received task: tasks.add[49113d2d-a36d-44b0-92dc-9ad0382c26a2]  </span><br><span class="line">[2017-12-10 09:37:20,246: INFO&#x2F;ForkPoolWorker-1] Task tasks.add[49113d2d-a36d-44b0-92dc-9ad0382c26a2] succeeded in 0.027591496000241023s: 5</span><br></pre></td></tr></table></figure>


<p>在上面，我们用两个命令启动了 <code>Worker</code> 进程和 <code>Beat</code> 进程，我们也可以将它们放在一个命令中：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ celery -B -A tasks worker --loglevel&#x3D;info</span><br></pre></td></tr></table></figure>

<p>相应的执行结果为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@b792ae940e3e:&#x2F;app# celery -B -A tasks worker -l info</span><br><span class="line"></span><br><span class="line">[2017-12-10 10:07:36,153: INFO&#x2F;MainProcess] celery@b792ae940e3e ready.</span><br><span class="line">[2017-12-10 10:07:36,158: INFO&#x2F;Beat] Scheduler: Sending due task your_task (tasks.add)</span><br><span class="line">[2017-12-10 10:07:36,169: INFO&#x2F;MainProcess] Received task: tasks.add[d92a952e-e3f6-4224-9e8b-dda771740fe2]  </span><br><span class="line">[2017-12-10 10:07:36,221: INFO&#x2F;ForkPoolWorker-2] Task tasks.add[d92a952e-e3f6-4224-9e8b-dda771740fe2] succeeded in 0.049944616001084796s: 5</span><br><span class="line">[2017-12-10 10:08:06,148: INFO&#x2F;Beat] Scheduler: Sending due task your_task (tasks.add)</span><br><span class="line">[2017-12-10 10:08:06,151: INFO&#x2F;MainProcess] Received task: tasks.add[678c33ae-9d2d-40c1-b5ce-25ffbdf763d8]  </span><br><span class="line">[2017-12-10 10:08:06,175: INFO&#x2F;ForkPoolWorker-2] Task tasks.add[678c33ae-9d2d-40c1-b5ce-25ffbdf763d8] succeeded in 0.02311466900027881s: 5</span><br><span class="line">[2017-12-10 10:08:36,148: INFO&#x2F;Beat] Scheduler: Sending due task your_task (tasks.add)</span><br><span class="line">[2017-12-10 10:08:36,149: INFO&#x2F;Beat] Scheduler: Sending due task my_task (tasks.add)</span><br><span class="line">[2017-12-10 10:08:36,150: INFO&#x2F;MainProcess] Received task: tasks.add[b05841b8-a382-4a1a-a583-3695e6d369d2]  </span><br><span class="line">[2017-12-10 10:08:36,152: INFO&#x2F;MainProcess] Received task: tasks.add[baebd820-4a22-496c-8c39-6b9f52d2f22b]  </span><br><span class="line">[2017-12-10 10:08:36,195: INFO&#x2F;ForkPoolWorker-2] Task tasks.add[b05841b8-a382-4a1a-a583-3695e6d369d2] succeeded in 0.04302837300019746s: 5</span><br><span class="line">[2017-12-10 10:08:36,198: INFO&#x2F;ForkPoolWorker-3] Task tasks.add[baebd820-4a22-496c-8c39-6b9f52d2f22b] succeeded in 0.0449830910001765s: 56</span><br></pre></td></tr></table></figure>

<h5 id="时区"><a href="#时区" class="headerlink" title="时区"></a>时区</h5><p>Celery定时任务默认使用UTC时区。我们可以在配置文件中来设置。最终的 <code>tasks.py</code> 文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python3</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"></span><br><span class="line">from celery import Celery</span><br><span class="line"></span><br><span class="line">app &#x3D; Celery(&#39;tasks&#39;,</span><br><span class="line">             broker&#x3D;&#39;amqp:&#x2F;&#x2F;myuser:hello@localhost:5672&#x2F;hellohost&#39;,</span><br><span class="line">             backend&#x3D;&#39;amqp:&#x2F;&#x2F;myuser:hello@localhost:5672&#x2F;hellohost&#39;</span><br><span class="line">             )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.conf.update(</span><br><span class="line">    # 配置所在时区</span><br><span class="line">    CELERY_TIMEZONE&#x3D;&#39;Asia&#x2F;Shanghai&#39;,</span><br><span class="line">    CELERY_ENABLE_UTC&#x3D;True,</span><br><span class="line">    # 官网推荐消息序列化方式为json</span><br><span class="line">    CELERY_ACCEPT_CONTENT&#x3D;[&#39;json&#39;],</span><br><span class="line">    CELERY_TASK_SERIALIZER&#x3D;&#39;json&#39;,</span><br><span class="line">    CELERY_RESULT_SERIALIZER&#x3D;&#39;json&#39;,</span><br><span class="line">    # 配置定时任务</span><br><span class="line">    CELERYBEAT_SCHEDULE&#x3D;&#123;</span><br><span class="line">        &#39;my_task&#39;: &#123;</span><br><span class="line">            &#39;task&#39;: &#39;tasks.add&#39;,</span><br><span class="line">            &#39;schedule&#39;: 60,</span><br><span class="line">            &#39;args&#39;: (22, 34),</span><br><span class="line">        &#125;,</span><br><span class="line">        &#39;your_task&#39;: &#123;</span><br><span class="line">            &#39;task&#39;: &#39;tasks.add&#39;,</span><br><span class="line">            &#39;schedule&#39;: 30,</span><br><span class="line">            &#39;args&#39;: (1, 4),</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@app.task</span><br><span class="line">def add(x, y):</span><br><span class="line">    return x + y</span><br></pre></td></tr></table></figure>

<h5 id="通过on-after-configure定义"><a href="#通过on-after-configure定义" class="headerlink" title="通过on_after_configure定义"></a>通过on_after_configure定义</h5><p>使用 <code>on_after_configure</code> 处理程序来装饰定时任务。如 <code>tasks.py</code> 文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python3</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"></span><br><span class="line">from celery import Celery</span><br><span class="line"></span><br><span class="line">app &#x3D; Celery(&#39;tasks&#39;,</span><br><span class="line">             broker&#x3D;&#39;amqp:&#x2F;&#x2F;myuser:hello@localhost:5672&#x2F;hellohost&#39;,</span><br><span class="line">             backend&#x3D;&#39;amqp:&#x2F;&#x2F;myuser:hello@localhost:5672&#x2F;hellohost&#39;</span><br><span class="line">             )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@app.on_after_configure.connect</span><br><span class="line">def setup_periodic_tasks(sender, **kwargs):</span><br><span class="line">    # Calls test(&#39;hello&#39;) every 10 seconds.</span><br><span class="line">    sender.add_periodic_task(10.0, add.s(&#39;hello&#39;), name&#x3D;&#39;add every 10&#39;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@app.task</span><br><span class="line">def add(arg):</span><br><span class="line">    print(arg)</span><br><span class="line">    return arg</span><br></pre></td></tr></table></figure>

<p>执行示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@b792ae940e3e:&#x2F;app# celery -B -A tasks worker -l info</span><br><span class="line"></span><br><span class="line">[2017-12-10 10:53:30,420: INFO&#x2F;MainProcess] celery@b792ae940e3e ready.</span><br><span class="line">[2017-12-10 10:53:30,596: INFO&#x2F;Beat] beat: Starting...</span><br><span class="line">[2017-12-10 10:53:30,620: INFO&#x2F;Beat] Scheduler: Sending due task add every 10 (tasks.add)</span><br><span class="line">[2017-12-10 10:53:30,628: INFO&#x2F;MainProcess] Received task: tasks.add[315383b8-5bd7-48ab-8dd2-c5d39e71f058]  </span><br><span class="line">[2017-12-10 10:53:30,630: WARNING&#x2F;ForkPoolWorker-3] hello</span><br><span class="line">[2017-12-10 10:53:30,667: INFO&#x2F;ForkPoolWorker-3] Task tasks.add[315383b8-5bd7-48ab-8dd2-c5d39e71f058] succeeded in 0.03778552899893839s: &#39;hello&#39;</span><br><span class="line">[2017-12-10 10:53:40,602: INFO&#x2F;Beat] Scheduler: Sending due task add every 10 (tasks.add)</span><br><span class="line">[2017-12-10 10:53:40,607: INFO&#x2F;MainProcess] Received task: tasks.add[5f8ef21e-fbfd-4c82-8dbd-6fa2aeaf4fa4]  </span><br><span class="line">[2017-12-10 10:53:40,610: WARNING&#x2F;ForkPoolWorker-3] hello</span><br><span class="line">[2017-12-10 10:53:40,631: INFO&#x2F;ForkPoolWorker-3] Task tasks.add[5f8ef21e-fbfd-4c82-8dbd-6fa2aeaf4fa4] succeeded in 0.022007824998581782s: &#39;hello&#39;</span><br></pre></td></tr></table></figure>

<hr>
<p>同时，<code>add_periodic_task()</code> 方法也能设置其他参数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Calls test(&#39;world&#39;) every 30 seconds</span><br><span class="line">sender.add_periodic_task(30.0, add.s(&#39;world&#39;), expires&#x3D;10)</span><br></pre></td></tr></table></figure>

<p>或者也能通过 <code>crontab()</code> 来应用 <code>cron</code> 表达式，实现多种时间的设定。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Executes every Monday morning at 7:30 a.m.</span><br><span class="line">sender.add_periodic_task(</span><br><span class="line">    crontab(hour&#x3D;7, minute&#x3D;30, day_of_week&#x3D;1),</span><br><span class="line">    add.s(&#39;Happy Mondays!&#39;),</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h4 id="相关参考"><a href="#相关参考" class="headerlink" title="相关参考"></a>相关参考</h4><ul>
<li><a href="http://docs.celeryproject.org/en/master/userguide/periodic-tasks.html" target="_blank" rel="noopener">Periodic Tasks</a></li>
<li><a href="http://funhacks.net/2016/12/13/celery/" target="_blank" rel="noopener">异步任务神器 Celery </a></li>
</ul>
]]></content>
      <categories>
        <category>Celery分布式任务队列入门</category>
      </categories>
      <tags>
        <tag>Celery</tag>
      </tags>
  </entry>
  <entry>
    <title>Celery分布式任务队列入门(二)-环境配置</title>
    <url>/2017/12/10/celery-distributed-task-queue-introduction-second/</url>
    <content><![CDATA[<p>实践在Docker容器中配置Celery运行环境。</p>
<h4 id="创建Docker容器"><a href="#创建Docker容器" class="headerlink" title="创建Docker容器"></a>创建Docker容器</h4><p>在容器 <code>Ubuntu:16.04</code> 系统中来搭建，创建容器：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ docker run -it --name celery1 -p 5672:5672 -p 15673:15672 -v &#x2F;home&#x2F;tiger&#x2F;dckerfile&#x2F;celery1:&#x2F;app ubuntu &#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure>

<p>需要注意的是在Docker容器中不需要 <code>sudo</code> 命令，默认即是 <code>root</code> 权限。下面的命令请根据自己所在系统类型自行添加 <code>sudo</code> 操作。</p>
<h5 id="更新软件源"><a href="#更新软件源" class="headerlink" title="更新软件源"></a>更新软件源</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># echo &quot;deb http:&#x2F;&#x2F;cn.archive.ubuntu.com&#x2F;ubuntu&#x2F; xenial main restricted universe multiverse&quot; &gt;&gt; &#x2F;etc&#x2F;apt&#x2F;sources.list</span><br><span class="line"># echo &quot;deb http:&#x2F;&#x2F;cn.archive.ubuntu.com&#x2F;ubuntu&#x2F; xenial-security main restricted universe multiverse&quot; &gt;&gt; &#x2F;etc&#x2F;apt&#x2F;sources.list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># apt-get update</span><br></pre></td></tr></table></figure>

<h5 id="安装Erlang依赖"><a href="#安装Erlang依赖" class="headerlink" title="安装Erlang依赖"></a>安装Erlang依赖</h5><p>Erlang可以通过包管理器来安装，或者直接从官方网站下载安装包来安装。</p>
<p>执行如下命令安装：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;tmp</span><br><span class="line">wget http:&#x2F;&#x2F;packages.erlang-solutions.com&#x2F;ubuntu&#x2F;erlang_solutions.asc</span><br><span class="line"># apt-key add erlang_solutions.asc</span><br><span class="line"># apt-get update</span><br><span class="line"># apt-get install erlang</span><br><span class="line"># apt-get install erlang-nox</span><br></pre></td></tr></table></figure>

<p>或者直接从网站 <a href="https://packages.erlang-solutions.com/erlang/#tabs-debian" target="_blank" rel="noopener">Erlang Downloads</a> 下载 <code>.deb</code> 安装包来安装。</p>
<h5 id="安装RabbitMQ"><a href="#安装RabbitMQ" class="headerlink" title="安装RabbitMQ"></a>安装RabbitMQ</h5><p>执行如下命令通过包管理器来安装：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># echo &quot;deb https:&#x2F;&#x2F;dl.bintray.com&#x2F;rabbitmq&#x2F;debian xenial main&quot; | tee &#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;bintray.rabbitmq.list</span><br><span class="line"></span><br><span class="line"># wget -O- https:&#x2F;&#x2F;www.rabbitmq.com&#x2F;rabbitmq-release-signing-key.asc | apt-key add -</span><br><span class="line"></span><br><span class="line"># apt-get update</span><br><span class="line"># apt-get install rabbitmq-server</span><br></pre></td></tr></table></figure>

<p>发现通过上面方法安装的 <code>Erlang Version</code> 为 <code>Erlang/OTP 18 [erts-7.3] [source] [64-bit] [smp:2:2]</code> ，<br><code>RabbitMQ Version</code> 为 <code>&quot;RabbitMQ&quot;,&quot;3.5.7&quot;</code></p>
<p>都不是官网上的最新版本，但在软件源中来说已是可安装的最新版本。所以如果想要安装官方的最新版本，可以采用直接从官网获取安装包的方式来安装。</p>
<h5 id="安装官方最新版"><a href="#安装官方最新版" class="headerlink" title="安装官方最新版"></a>安装官方最新版</h5><p>在Ubuntu系统下直接下载 <code>rabbitmq</code> 的 <code>*.deb</code> 安装包：</p>
<p>从地址 <a href="https://www.rabbitmq.com/install-debian.html" target="_blank" rel="noopener">Installing on Debian / Ubuntu</a> 看到最新版本是 3.7.0 <a href="https://dl.bintray.com/rabbitmq/all/rabbitmq-server/3.7.0/rabbitmq-server_3.7.0-1_all.deb" target="_blank" rel="noopener">rabbitmq-server_3.7.0-1_all.deb</a></p>
<p>也可以从网址 <a href="https://www.rabbitmq.com/releases/rabbitmq-server/" target="_blank" rel="noopener">Released Artifacts</a> 选择其他指定版本。</p>
<p>下面以 <code>rabbitmq-server_3.7.0-1_all.deb</code> 为例安装：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># wget https:&#x2F;&#x2F;dl.bintray.com&#x2F;rabbitmq&#x2F;all&#x2F;rabbitmq-server&#x2F;3.7.0&#x2F;rabbitmq-server_3.7.0-1_all.deb</span><br><span class="line"># dpkg -i rabbitmq-server_3.7.0-1_all.deb</span><br></pre></td></tr></table></figure>

<p>如果提示依赖其他的包，执行如下命令安装依赖包:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># apt-get -f install</span><br></pre></td></tr></table></figure>

<p>然后再次执行安装：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># dpkg -i rabbitmq-server_3.7.0-1_all.deb</span><br></pre></td></tr></table></figure>

<p>我在执行 <code>apt-get -f install</code> 时遇到问题，输出提示是要移除 <code>rabbitmq-server</code> ，并没有自动安装其他依赖：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@b792ae940e3e:&#x2F;app# dpkg -i rabbitmq-server_3.7.0-1_all.deb </span><br><span class="line">Selecting previously unselected package rabbitmq-server.</span><br><span class="line">(Reading database ... 7744 files and directories currently installed.)</span><br><span class="line">Preparing to unpack rabbitmq-server_3.7.0-1_all.deb ...</span><br><span class="line">Unpacking rabbitmq-server (3.7.0-1) ...</span><br><span class="line">dpkg: dependency problems prevent configuration of rabbitmq-server:</span><br><span class="line"> rabbitmq-server depends on erlang-nox (&gt;&#x3D; 1:19.3) | esl-erlang (&gt;&#x3D; 1:19.3); however:</span><br><span class="line">  Package erlang-nox is not installed.</span><br><span class="line">  Package esl-erlang is not installed.</span><br><span class="line"> rabbitmq-server depends on logrotate; however:</span><br><span class="line">  Package logrotate is not installed.</span><br><span class="line"> rabbitmq-server depends on socat; however:</span><br><span class="line">  Package socat is not installed.</span><br><span class="line"></span><br><span class="line">dpkg: error processing package rabbitmq-server (--install):</span><br><span class="line"> dependency problems - leaving unconfigured</span><br><span class="line">Processing triggers for systemd (229-4ubuntu21) ...</span><br><span class="line">Errors were encountered while processing:</span><br><span class="line"> rabbitmq-server</span><br><span class="line">root@b792ae940e3e:&#x2F;app# apt-get -f install</span><br><span class="line">Reading package lists... Done</span><br><span class="line">Building dependency tree       </span><br><span class="line">Reading state information... Done</span><br><span class="line">Correcting dependencies... Done</span><br><span class="line">The following packages will be REMOVED:</span><br><span class="line">  rabbitmq-server</span><br><span class="line">0 upgraded, 0 newly installed, 1 to remove and 2 not upgraded.</span><br><span class="line">1 not fully installed or removed.</span><br><span class="line">After this operation, 13.3 MB disk space will be freed.</span><br><span class="line">Do you want to continue? [Y&#x2F;n]</span><br></pre></td></tr></table></figure>

<p>所以，我选择手动安装 <code>Erland</code> 的 <code>.deb</code> 包。</p>
<p>从 网站 <a href="https://www.rabbitmq.com/which-erlang.html" target="_blank" rel="noopener">RabbitMQ Erlang Version Requirements</a> 中可以看到RabbitMQ和Erlang版本之间的对应关系。这里上面的我按照的是RabbitMQ的 <code>3.7.0</code> 版本，所以我可以选择Erlang的最新版即 <code>20.1.7</code> 版本安装。下载地址见：<a href="https://packages.erlang-solutions.com/erlang/#tabs-debian" target="_blank" rel="noopener">Erlang Downloads</a> 。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># wget http:&#x2F;&#x2F;packages.erlang-solutions.com&#x2F;site&#x2F;esl&#x2F;esl-erlang&#x2F;FLAVOUR_1_general&#x2F;esl-erlang_20.1.7-1~ubuntu~xenial_amd64.deb</span><br><span class="line"></span><br><span class="line"># dpkg -i esl-erlang_20.1.7-1~ubuntu~xenial_amd64.deb</span><br></pre></td></tr></table></figure>

<p>这次安装时也提示缺少依赖，所以我执行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># apt-get -f install</span><br></pre></td></tr></table></figure>

<p>结果是找到了相关的依赖包，输入 <code>y</code> 进行安装。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@b792ae940e3e:&#x2F;app# ls</span><br><span class="line">esl-erlang_20.1.7-1~ubuntu~xenial_amd64.deb  rabbitmq-server_3.7.0-1_all.deb</span><br><span class="line">root@b792ae940e3e:&#x2F;app# dpkg -i esl-erlang_20.1.7-1~ubuntu~xenial_amd64.deb </span><br><span class="line">Selecting previously unselected package esl-erlang.</span><br><span class="line">(Reading database ... 7744 files and directories currently installed.)</span><br><span class="line">Preparing to unpack esl-erlang_20.1.7-1~ubuntu~xenial_amd64.deb ...</span><br><span class="line">Unpacking esl-erlang (1:20.1.7) ...</span><br><span class="line">dpkg: dependency problems prevent configuration of esl-erlang:</span><br><span class="line"> esl-erlang depends on libwxbase2.8-0 | libwxbase3.0-0 | libwxbase3.0-0v5; however:</span><br><span class="line">  Package libwxbase2.8-0 is not installed.</span><br><span class="line">  Package libwxbase3.0-0 is not installed.</span><br><span class="line">  Package libwxbase3.0-0v5 is not installed.</span><br><span class="line"> esl-erlang depends on libwxgtk2.8-0 | libwxgtk3.0-0 | libwxgtk3.0-0v5; however:</span><br><span class="line">  Package libwxgtk2.8-0 is not installed.</span><br><span class="line">  Package libwxgtk3.0-0 is not installed.</span><br><span class="line">  Package libwxgtk3.0-0v5 is not installed.</span><br><span class="line"> esl-erlang depends on libsctp1; however:</span><br><span class="line">  Package libsctp1 is not installed.</span><br><span class="line"></span><br><span class="line">dpkg: error processing package esl-erlang (--install):</span><br><span class="line"> dependency problems - leaving unconfigured</span><br><span class="line">Errors were encountered while processing:</span><br><span class="line"> esl-erlang</span><br><span class="line">root@b792ae940e3e:&#x2F;app# apt-get -f install</span><br><span class="line">Reading package lists... Done</span><br><span class="line">Building dependency tree       </span><br><span class="line">Reading state information... Done</span><br><span class="line">Correcting dependencies... Done</span><br><span class="line">The following additional packages will be installed:</span><br><span class="line">......</span><br><span class="line">......</span><br></pre></td></tr></table></figure>

<p>然后再次安装 <code>esl-erlang_20.1.7-1~ubuntu~xenial_amd64.deb</code> 包：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># dpkg -i esl-erlang_20.1.7-1~ubuntu~xenial_amd64.deb</span><br></pre></td></tr></table></figure>

<p>最后，安装RabbitMQ的包：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># dpkg -i rabbitmq-server_3.6.14-1_all.deb</span><br></pre></td></tr></table></figure>

<p>如果中途再出现缺少依赖包的问题，通过 <code>apt-get -f install</code> 来解决。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@b792ae940e3e:&#x2F;app# dpkg -i rabbitmq-server_3.7.0-1_all.deb </span><br><span class="line">Selecting previously unselected package rabbitmq-server.</span><br><span class="line">(Reading database ... 29232 files and directories currently installed.)</span><br><span class="line">Preparing to unpack rabbitmq-server_3.7.0-1_all.deb ...</span><br><span class="line">Unpacking rabbitmq-server (3.7.0-1) ...</span><br><span class="line">dpkg: dependency problems prevent configuration of rabbitmq-server:</span><br><span class="line"> rabbitmq-server depends on logrotate; however:</span><br><span class="line">  Package logrotate is not installed.</span><br><span class="line"> rabbitmq-server depends on socat; however:</span><br><span class="line">  Package socat is not installed.</span><br><span class="line"></span><br><span class="line">dpkg: error processing package rabbitmq-server (--install):</span><br><span class="line"> dependency problems - leaving unconfigured</span><br><span class="line">Processing triggers for systemd (229-4ubuntu21) ...</span><br><span class="line">Errors were encountered while processing:</span><br><span class="line"> rabbitmq-server</span><br><span class="line">root@b792ae940e3e:&#x2F;app# apt-get -f install </span><br><span class="line">Reading package lists... Done</span><br><span class="line">Building dependency tree       </span><br><span class="line">Reading state information... Done</span><br><span class="line">Correcting dependencies... Done</span><br><span class="line">The following additional packages will be installed:</span><br><span class="line">  cron libpopt0 libwrap0 logrotate socat tcpd</span><br><span class="line">Suggested packages:</span><br><span class="line">  anacron checksecurity exim4 | postfix | mail-transport-agent mailx</span><br><span class="line">The following NEW packages will be installed:</span><br><span class="line">  cron libpopt0 libwrap0 logrotate socat tcpd</span><br><span class="line">0 upgraded, 6 newly installed, 0 to remove and 2 not upgraded.</span><br><span class="line">1 not fully installed or removed.</span><br><span class="line">Need to get 522 kB of archives.</span><br><span class="line">After this operation, 1674 kB of additional disk space will be used.</span><br><span class="line">Do you want to continue? [Y&#x2F;n]</span><br></pre></td></tr></table></figure>

<ul>
<li><a href="https://www.rabbitmq.com/download.html" target="_blank" rel="noopener">Downloading and Installing RabbitMQ</a></li>
<li><a href="https://www.36nu.com/post/240.html" target="_blank" rel="noopener">RabbitMQ安装方式及常用命令 </a> ☆</li>
<li><a href="https://packages.erlang-solutions.com/erlang/#tabs-debian" target="_blank" rel="noopener">Erlang Downloads</a></li>
</ul>
<hr>
<h5 id="Run-RabbitMQ-Server"><a href="#Run-RabbitMQ-Server" class="headerlink" title="Run RabbitMQ Server"></a>Run RabbitMQ Server</h5><p>启动 RabbitMQ 服务:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># service rabbitmq-server start</span><br></pre></td></tr></table></figure>

<p>安装 RabbitMQWeb 管理插件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># rabbitmq-plugins enable rabbitmq_management  </span><br><span class="line"># service rabbitmq-server restart</span><br></pre></td></tr></table></figure>

<p>打开浏览器登录：<a href="http://127.0.0.1:15672，登录账号密码默认都是">http://127.0.0.1:15672，登录账号密码默认都是</a> <code>guest</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@730778dc65bd:&#x2F;app# rabbitmq-plugins enable rabbitmq_management</span><br><span class="line">The following plugins have been enabled:</span><br><span class="line">  mochiweb</span><br><span class="line">  webmachine</span><br><span class="line">  rabbitmq_web_dispatch</span><br><span class="line">  amqp_client</span><br><span class="line">  rabbitmq_management_agent</span><br><span class="line">  rabbitmq_management</span><br><span class="line"></span><br><span class="line">Applying plugin configuration to rabbit@730778dc65bd... started 6 plugins.</span><br><span class="line">root@730778dc65bd:&#x2F;app# service rabbitmq-server restart</span><br><span class="line"> * Restarting RabbitMQ Messaging Server rabbitmq-server                                                      [ OK ] </span><br><span class="line">root@730778dc65bd:&#x2F;app#</span><br></pre></td></tr></table></figure>

<p>测试代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">## 查看rabbitmq状态</span><br><span class="line">root@730778dc65bd:&#x2F;app# rabbitmqctl status</span><br><span class="line">Status of node rabbit@730778dc65bd ...</span><br><span class="line">Error: unable to connect to node rabbit@730778dc65bd: nodedown</span><br><span class="line"></span><br><span class="line">DIAGNOSTICS</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line"></span><br><span class="line">attempted to contact: [rabbit@730778dc65bd]</span><br><span class="line"></span><br><span class="line">rabbit@730778dc65bd:</span><br><span class="line">  * connected to epmd (port 4369) on 730778dc65bd</span><br><span class="line">  * epmd reports: node &#39;rabbit&#39; not running at all</span><br><span class="line">                  no other nodes on 730778dc65bd</span><br><span class="line">  * suggestion: start the node</span><br><span class="line"></span><br><span class="line">current node details:</span><br><span class="line">- node name: &#39;rabbitmq-cli-9223@730778dc65bd&#39;</span><br><span class="line">- home dir: &#x2F;var&#x2F;lib&#x2F;rabbitmq</span><br><span class="line">- cookie hash: MwPrvM8WUeAkWCiIWYw2fg&#x3D;&#x3D;</span><br><span class="line"></span><br><span class="line">root@730778dc65bd:&#x2F;app# </span><br><span class="line"></span><br><span class="line">root@730778dc65bd:&#x2F;app# service rabbitmq-server start</span><br><span class="line"> * Starting RabbitMQ Messaging Server rabbitmq-server                                                        [ OK ] </span><br><span class="line">root@730778dc65bd:&#x2F;app# rabbitmqctl status</span><br><span class="line">Status of node rabbit@730778dc65bd ...</span><br><span class="line">[&#123;pid,9527&#125;,</span><br><span class="line"> &#123;running_applications,[&#123;rabbit,&quot;RabbitMQ&quot;,&quot;3.5.7&quot;&#125;,</span><br><span class="line">                        &#123;mnesia,&quot;MNESIA  CXC 138 12&quot;,&quot;4.13.3&quot;&#125;,</span><br><span class="line">                        &#123;xmerl,&quot;XML parser&quot;,&quot;1.3.10&quot;&#125;,</span><br><span class="line">                        &#123;os_mon,&quot;CPO  CXC 138 46&quot;,&quot;2.4&quot;&#125;,</span><br><span class="line">                        &#123;sasl,&quot;SASL  CXC 138 11&quot;,&quot;2.7&quot;&#125;,</span><br><span class="line">                        &#123;stdlib,&quot;ERTS  CXC 138 10&quot;,&quot;2.8&quot;&#125;,</span><br><span class="line">                        &#123;kernel,&quot;ERTS  CXC 138 10&quot;,&quot;4.2&quot;&#125;]&#125;,</span><br><span class="line"> &#123;os,&#123;unix,linux&#125;&#125;,</span><br><span class="line"> &#123;erlang_version,&quot;Erlang&#x2F;OTP 18 [erts-7.3] [source] [64-bit] [smp:2:2] [async-threads:64] [kernel-poll:true]\n&quot;&#125;,</span><br><span class="line"> &#123;memory,[&#123;total,83922208&#125;,</span><br><span class="line">          &#123;connection_readers,0&#125;,</span><br><span class="line">          &#123;connection_writers,0&#125;,</span><br></pre></td></tr></table></figure>

<hr>
<h5 id="RabbitMQ中的vitrual-host"><a href="#RabbitMQ中的vitrual-host" class="headerlink" title="RabbitMQ中的vitrual host"></a>RabbitMQ中的vitrual host</h5><p><code>Virtual host</code>，是起到隔离作用的。每一个 <code>vhost</code> 都有自己的 <code>exchanges</code> 和 <code>queues</code>，它们互不影响。不同的应用可以跑在相同的 <code>rabbitmq</code> 上，使用 <code>vhost</code> 把它们隔离开就行。默认情况下，<code>rabbitmq</code> 安装后，默认的 <code>vhost</code> 是 <code>/</code>。</p>
<h5 id="创建用户并设置虚拟主机"><a href="#创建用户并设置虚拟主机" class="headerlink" title="创建用户并设置虚拟主机"></a>创建用户并设置虚拟主机</h5><p>可以发现上面我们通过 <code>guest</code> 用户在其他电脑上或外网段访问时，会提示 <code>User can only log in via localhost</code> ，这是因为 <code>guest</code> 是仅允许在 <code>localhost</code> 下才能登陆的。如果我们想在外部访问，可以创建一个新的账户。</p>
<p>创建用户的同时为该用户指定允许访问的虚拟主机 <code>myvhost</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># rabbitmqctl add_user myuser mypassword</span><br><span class="line"># rabbitmqctl add_vhost myvhost</span><br><span class="line"># rabbitmqctl set_permissions -p myvhost myuser &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;</span><br></pre></td></tr></table></figure>

<p>此时，新创建的账户 <code>myuser</code> 也并没有权限在外网访问，可以用 <code>set_user_tags</code> 为用户设置角色：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># rabbitmqctl set_user_tags myuser administrator</span><br></pre></td></tr></table></figure>

<p>然后我们就能在外网通过地址 <code>http://192.168.5.107:15673/</code> 来访问管理端了。</p>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># User: myuser </span><br><span class="line"># UserPwd: hello</span><br><span class="line"># VHost: hellohost</span><br><span class="line"></span><br><span class="line">root@b792ae940e3e:&#x2F;app# rabbitmqctl add_user myuser hello</span><br><span class="line">Adding user &quot;myuser&quot; ...</span><br><span class="line">root@b792ae940e3e:&#x2F;app# rabbitmqctl add_vhost hellohost</span><br><span class="line">Adding vhost &quot;hellohost&quot; ...</span><br><span class="line">root@b792ae940e3e:&#x2F;app# rabbitmqctl set_permissions -p hellohost myuser &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;</span><br><span class="line">Setting permissions for user &quot;myuser&quot; in vhost &quot;hellohost&quot; ...</span><br><span class="line">root@b792ae940e3e:&#x2F;app#</span><br></pre></td></tr></table></figure>

<p>然后重启服务：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># service rabbitmq-server restart</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="Celery"><a href="#Celery" class="headerlink" title="Celery"></a>Celery</h4><p>Celery官方推荐使用 <code>RabbitMQ</code> 或 <code>Redis</code> 来作为中间件。设置也很简单，通过 <code>broker</code> 和 <code>backend</code> 参数即可绑定。</p>
<h5 id="broker-和-backend"><a href="#broker-和-backend" class="headerlink" title="broker 和 backend"></a>broker 和 backend</h5><p>可以用RabbitMQ和Redis来作为broker或backend：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">app &#x3D; Celery(&#39;tasks&#39;, backend&#x3D;&#39;amqp&#39;, broker&#x3D;&#39;amqp:&#x2F;&#x2F;&#39;)</span><br></pre></td></tr></table></figure>


<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">app &#x3D; Celery(&#39;tasks&#39;, backend&#x3D;&#39;redis:&#x2F;&#x2F;localhost&#39;, broker&#x3D;&#39;amqp:&#x2F;&#x2F;&#39;)</span><br></pre></td></tr></table></figure>

<p>注意，虽然推荐使用RabbitMQ来作为 <code>broker</code>，但不推荐其作为 <code>backend</code> 。具体原因我会在后面的文章中说明。</p>
<h5 id="中间人RabbitMQ"><a href="#中间人RabbitMQ" class="headerlink" title="中间人RabbitMQ"></a>中间人RabbitMQ</h5><p>RabbitMQ 功能完备、稳定，是一个非常可靠的选择。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">BROKER_URL &#x3D;transport:&#x2F;&#x2F;userid:password@hostname:port&#x2F;virtual_host</span><br><span class="line"></span><br><span class="line">BROKER_URL &#x3D; &#39;amqp:&#x2F;&#x2F;guest:guest@localhost:5672&#x2F;&#x2F;&#39;</span><br></pre></td></tr></table></figure>

<p>完整的格式为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CELERY_BROKER_URL &#x3D; &#39;amqp:&#x2F;&#x2F;[YOUR_NAME]:[PASSWORD]@localhost:[PORT]&#x2F;[VHOST_NAME]&#39;</span><br></pre></td></tr></table></figure>

<h5 id="中间人Redis"><a href="#中间人Redis" class="headerlink" title="中间人Redis"></a>中间人Redis</h5><p>与 <code>RabbitMQ</code> 相比，使用 <code>Redis</code> 作为 <code>broker</code> 缺点是可能因为掉电或异常退出导致数据丢失，优点是使用简单。</p>
<p>以下命令可以同时安装 <code>celery</code> 和 <code>redis</code> 相关的依赖，但是 <code>redis server</code> 还是必须单独安装的。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ pip install -U celery[redis] # -U 的意思是把所有指定的包都升级到最新的版本</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">BROKER_URL &#x3D; &#39;redis:&#x2F;&#x2F;localhost:6379&#x2F;&#x2F;&#39;</span><br></pre></td></tr></table></figure>

<h5 id="安装celery"><a href="#安装celery" class="headerlink" title="安装celery"></a>安装celery</h5><p>先安装 <code>python3</code>  <code>pip3</code> 等依赖:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># apt-get install -y python3 python3-pip</span><br></pre></td></tr></table></figure>


<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># pip3 install celery</span><br><span class="line"># 或者：</span><br><span class="line"># pip3 install -U Celery</span><br></pre></td></tr></table></figure>

<p>创建一个 <code>tasks.py</code> 文件:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from celery import Celery</span><br><span class="line"></span><br><span class="line">app &#x3D; Celery(&#39;tasks&#39;, broker&#x3D;&#39;amqp:&#x2F;&#x2F;guest@localhost&#x2F;&#x2F;&#39;)</span><br><span class="line"></span><br><span class="line">@app.task</span><br><span class="line">def add(x, y):</span><br><span class="line">    return x + y</span><br></pre></td></tr></table></figure>
<p>注意，其中的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">app &#x3D; Celery(&#39;tasks&#39;, broker&#x3D;&#39;amqp:&#x2F;&#x2F;guest@localhost&#x2F;&#x2F;&#39;)</span><br></pre></td></tr></table></figure>

<p>中 <code>broker</code> 要改为上面设置的RabbitMQ的信息，所以结果为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">app &#x3D; Celery(&#39;tasks&#39;,broker&#x3D;&#39;amqp:&#x2F;&#x2F;myuser:hello@localhost:5672&#x2F;hellohost&#39;)</span><br></pre></td></tr></table></figure>

<p>Celery 的第一个参数是当前模块的名称，这个参数是必须的，这样的话名称可以自动生成。<br>第二个参数是中间人关键字参数，指定你所使用的消息中间人的 URL。</p>
<h5 id="保存结果"><a href="#保存结果" class="headerlink" title="保存结果"></a>保存结果</h5><p>执行完成后的结果，Celery 需要在某个地方存储或发送任务处理后的状态，可以通过 <code>backend</code> 参数来指定。格式和 <code>broker</code> 一致。</p>
<p>完整的 <code>tasks.py</code>:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python3</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"></span><br><span class="line">from celery import Celery</span><br><span class="line"></span><br><span class="line">app &#x3D; Celery(&#39;tasks&#39;,</span><br><span class="line">             broker&#x3D;&#39;amqp:&#x2F;&#x2F;myuser:hello@localhost:5672&#x2F;hellohost&#39;,</span><br><span class="line">             backend&#x3D;&#39;amqp:&#x2F;&#x2F;myuser:hello@localhost:5672&#x2F;hellohost&#39;</span><br><span class="line">             )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@app.task</span><br><span class="line">def add(x, y):</span><br><span class="line">    return x + y</span><br></pre></td></tr></table></figure>

<h5 id="运行Celery"><a href="#运行Celery" class="headerlink" title="运行Celery"></a>运行Celery</h5><p>用 worker 参数执行程序:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ celery -A tasks worker --loglevel&#x3D;info</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@b792ae940e3e:&#x2F;app# celery -A tasks worker --loglevel&#x3D;info</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.5&#x2F;dist-packages&#x2F;celery&#x2F;platforms.py:795: RuntimeWarning: You&#39;re running the worker with superuser privileges: this is</span><br><span class="line">absolutely not recommended!</span><br><span class="line"></span><br><span class="line">Please specify a different user using the -u option.</span><br><span class="line"></span><br><span class="line">User information: uid&#x3D;0 euid&#x3D;0 gid&#x3D;0 egid&#x3D;0</span><br><span class="line"></span><br><span class="line">  uid&#x3D;uid, euid&#x3D;euid, gid&#x3D;gid, egid&#x3D;egid,</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.5&#x2F;dist-packages&#x2F;celery&#x2F;backends&#x2F;amqp.py:68: CPendingDeprecationWarning: </span><br><span class="line">    The AMQP result backend is scheduled for deprecation in     version 4.0 and removal in version v5.0.     Please use RPC backend or a persistent backend.</span><br><span class="line"></span><br><span class="line">  alternative&#x3D;&#39;Please use RPC backend or a persistent backend.&#39;)</span><br><span class="line"> </span><br><span class="line"> -------------- celery@b792ae940e3e v4.1.0 (latentcall)</span><br><span class="line">---- **** ----- </span><br><span class="line">--- * ***  * -- Linux-4.4.0-42-generic-x86_64-with-Ubuntu-16.04-xenial 2017-12-09 13:50:06</span><br><span class="line">-- * - **** --- </span><br><span class="line">- ** ---------- [config]</span><br><span class="line">- ** ---------- .&gt; app:         tasks:0x7f97a8360dd8</span><br><span class="line">- ** ---------- .&gt; transport:   amqp:&#x2F;&#x2F;myuser:**@localhost:5672&#x2F;hellohost</span><br><span class="line">- ** ---------- .&gt; results:     amqp:&#x2F;&#x2F;</span><br><span class="line">- *** --- * --- .&gt; concurrency: 2 (prefork)</span><br><span class="line">-- ******* ---- .&gt; task events: OFF (enable -E to monitor tasks in this worker)</span><br><span class="line">--- ***** ----- </span><br><span class="line"> -------------- [queues]</span><br><span class="line">                .&gt; celery           exchange&#x3D;celery(direct) key&#x3D;celery</span><br><span class="line">                </span><br><span class="line"></span><br><span class="line">[tasks]</span><br><span class="line">  . tasks.add</span><br><span class="line"></span><br><span class="line">[2017-12-09 13:50:06,121: INFO&#x2F;MainProcess] Connected to amqp:&#x2F;&#x2F;myuser:**@127.0.0.1:5672&#x2F;hellohost</span><br><span class="line">[2017-12-09 13:50:06,137: INFO&#x2F;MainProcess] mingle: searching for neighbors</span><br><span class="line">[2017-12-09 13:50:07,178: INFO&#x2F;MainProcess] mingle: all alone</span><br><span class="line">[2017-12-09 13:50:07,228: INFO&#x2F;MainProcess] celery@b792ae940e3e ready.</span><br></pre></td></tr></table></figure>

<p>可以看到 <code>celery</code> 的 <code>worker</code> 已经准备就绪了。</p>
<p>查看 <code>worker</code> 完整的命令行参数列表:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$  celery worker --help</span><br><span class="line">## 或者：</span><br><span class="line">$ celery help</span><br></pre></td></tr></table></figure>

<h5 id="调用任务"><a href="#调用任务" class="headerlink" title="调用任务"></a>调用任务</h5><p>使用 <code>delay()</code> 方法来调用任务。</p>
<p>新打开一个控制台界面，</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ docker exec -it celery1 &#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure>

<p>执行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># python3</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; from tasks import add</span><br><span class="line">&gt;&gt;&gt; add.delay(4, 4)</span><br></pre></td></tr></table></figure>

<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@b792ae940e3e:&#x2F;app# python3</span><br><span class="line">Python 3.5.2 (default, Nov 23 2017, 16:37:01) </span><br><span class="line">[GCC 5.4.0 20160609] on linux</span><br><span class="line">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</span><br><span class="line">&gt;&gt;&gt; from tasks import add</span><br><span class="line">&gt;&gt;&gt; add.delay(3,4)</span><br><span class="line">&lt;AsyncResult: e1ae8ea3-8a8f-47c5-befb-e6ba975f0580&gt;</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>

<p>执行结果：</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/171211cc9H40dDJ5.jpg" alt="mark"></p>
<p>同时，也可以在 <code>RabbitMQ web</code> 管理页面看到新增了一个任务并存储了处理结果：</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/1712119JEB2m262l.jpg" alt="mark"></p>
<p>为了得到调用任务后返回的 <code>AsyncResult</code> 实例，通过一个参数来接收：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; result&#x3D;add.delay(3,4)</span><br></pre></td></tr></table></figure>

<p><code>ready()</code> 方法查看任务是否完成处理:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; result.ready()</span><br><span class="line">True #结果返回 &#96;True&#96; 表示任务处理完成</span><br></pre></td></tr></table></figure>

<p>这里是异步调用，如果我们需要返回的结果，那么要等 <code>ready</code> 状态为 <code>True</code> 才行。</p>
<p>执行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[2017-12-09 13:50:07,228: INFO&#x2F;MainProcess] celery@b792ae940e3e ready.</span><br><span class="line">[2017-12-09 14:00:33,132: INFO&#x2F;MainProcess] Received task: tasks.add[e1ae8ea3-8a8f-47c5-befb-e6ba975f0580]  </span><br><span class="line">[2017-12-09 14:00:33,163: INFO&#x2F;ForkPoolWorker-1] Task tasks.add[e1ae8ea3-8a8f-47c5-befb-e6ba975f0580] succeeded in 0.02956800399988424s: 7</span><br><span class="line">[2017-12-09 14:17:21,033: INFO&#x2F;MainProcess] Received task: tasks.add[c178619e-3af3-41ed-8d2c-6371de80a601]  </span><br><span class="line">[2017-12-09 14:17:21,058: INFO&#x2F;ForkPoolWorker-1] Task tasks.add[c178619e-3af3-41ed-8d2c-6371de80a601] succeeded in 0.024445844999718247s: 7</span><br></pre></td></tr></table></figure>

<h4 id="相关参考"><a href="#相关参考" class="headerlink" title="相关参考"></a>相关参考</h4><ul>
<li><a href="http://docs.jinkan.org/docs/celery/getting-started/first-steps-with-celery.html" target="_blank" rel="noopener">Celery 初步</a></li>
</ul>
]]></content>
      <categories>
        <category>Celery分布式任务队列入门</category>
      </categories>
      <tags>
        <tag>Celery</tag>
        <tag>Docker</tag>
        <tag>RabbitMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>Celery分布式任务队列入门(一)-理论</title>
    <url>/2017/12/10/celery-distributed-task-queue-introduction-first/</url>
    <content><![CDATA[<p>之前曾在公司的一个分布式爬虫项目中使用 <code>Celery</code> 和 <code>RabbitMQ</code> 实现过分布式爬虫的功能。最近在整理之前的开发笔记时，看到之前写的关于 <code>Celery</code> 的文章，决定趁着有时间再把关于Celery相关的内容好好的整理一番，没想到越写越想把相关的点都理清楚，也就有了这个Celery系列文章。</p>
<p>Celery 是一个简单、灵活且可靠的，处理大量消息的分布式系统，并且提供维护这样一个系统的必需工具。它是一个专注于实时处理的任务队列，同时也支持任务调度。</p>
<a id="more"></a>

<h4 id="主要模块"><a href="#主要模块" class="headerlink" title="主要模块"></a>主要模块</h4><p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/171211IdE7bgjLE1.png" alt="mark"></p>
<h5 id="任务模块-Task"><a href="#任务模块-Task" class="headerlink" title="任务模块 Task"></a>任务模块 Task</h5><p>包含异步任务和定时任务。其中，异步任务通常在业务逻辑中被触发并发往任务队列，而定时任务由 Celery Beat 进程周期性地将任务发往任务队列。</p>
<h5 id="消息中间件-Broker"><a href="#消息中间件-Broker" class="headerlink" title="消息中间件 Broker"></a>消息中间件 Broker</h5><p>一个消息传输的中间件，可以理解为一个邮箱，作为消费者和生产者之间的桥梁。接收任务生产者发来的消息（即任务），将任务存入队列。Celery 本身不提供队列服务，官方推荐使用 RabbitMQ 和 Redis 等。</p>
<h5 id="任务执行单元-Worker"><a href="#任务执行单元-Worker" class="headerlink" title="任务执行单元 Worker"></a>任务执行单元 Worker</h5><p>Worker 是执行任务的处理单元，它实时监控消息队列，获取队列中调度的任务，并执行它。</p>
<h5 id="任务结果存储-Backend"><a href="#任务结果存储-Backend" class="headerlink" title="任务结果存储 Backend"></a>任务结果存储 Backend</h5><p>Backend 用于存储任务的执行结果，以供查询。同消息中间件一样，存储也可使用 <code>RabbitMQ</code>, <code>Redis</code> 和 <code>MongoDB</code> 等。</p>
<hr>
<h4 id="系列文章目录"><a href="#系列文章目录" class="headerlink" title="系列文章目录"></a>系列文章目录</h4><ul>
<li><a href="/2017/12/10/celery-distributed-task-queue-introduction-first/">Celery分布式任务队列入门(一)-理论</a></li>
<li><a href="/2017/12/10/celery-distributed-task-queue-introduction-second/">Celery分布式任务队列入门(二)-环境配置</a></li>
<li><a href="/2017/12/10/celery-distributed-task-queue-introduction-third/">Celery分布式任务队列入门(三)-任务</a></li>
</ul>
<p>未完待续。。。</p>
]]></content>
      <categories>
        <category>Celery分布式任务队列入门</category>
      </categories>
      <tags>
        <tag>Celery</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客功能优化</title>
    <url>/2017/12/06/hexo-blog-optimization/</url>
    <content><![CDATA[<p>介绍Hexo博客功能优化项，如 文章置顶、显示版权、访问统计、字数统计、显示更新时间等</p>
<h4 id="文章置顶"><a href="#文章置顶" class="headerlink" title="文章置顶"></a>文章置顶</h4><p>在Hexo博客中，有时候我们想要将一些特别的文章一直置顶在首页。Hexo博客中，默认的情况是按照时间倒序来排列的，即新发布的文章排在前面。虽然有一种很简单的方法，就是更改文章的发布时间到一个“未来”的时间点，这样虽然能让文章一直置顶，但是给人的体验和感觉是非常不好的。</p>
<p>今天介绍一种非常简单而且体验上也非常好的方法。</p>
<h5 id="安装node插件"><a href="#安装node插件" class="headerlink" title="安装node插件"></a>安装node插件</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm uninstall hexo-generator-index --save</span><br><span class="line">$ npm install hexo-generator-index-pin-top --save</span><br></pre></td></tr></table></figure>

<h5 id="添加标记"><a href="#添加标记" class="headerlink" title="添加标记"></a>添加标记</h5><p>在需要置顶的文章的 <code>Front-matter</code> 中加上 <code>top: true</code> 即可。</p>
<p>比如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 从0到1学Golang之基础--Go 数组</span><br><span class="line">date: 2017-05-24 22:07:58</span><br><span class="line">tags:</span><br><span class="line">    - Golang</span><br><span class="line">categories: </span><br><span class="line">    - 从0到1学Golang</span><br><span class="line">description: Golang下的数组操作</span><br><span class="line">top: true</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p>ok，现在发布文章，就能看到我们设置的文章已经置顶显示了，即使是之前发布的文章，同时日期也不会被更改。</p>
<h5 id="相关参考"><a href="#相关参考" class="headerlink" title="相关参考"></a>相关参考</h5><ul>
<li><a href="http://www.netcan666.com/2015/11/22/%E8%A7%A3%E5%86%B3Hexo%E7%BD%AE%E9%A1%B6%E9%97%AE%E9%A2%98/" target="_blank" rel="noopener">解决Hexo置顶问题</a></li>
<li><a href="https://github.com/netcan/hexo-generator-index-pin-top" target="_blank" rel="noopener">hexo-generator-index-pin-top</a></li>
<li><a href="https://ehlxr.me/2016/08/30/%E4%BD%BF%E7%94%A8Hexo%E5%9F%BA%E4%BA%8EGitHub-Pages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%89%EF%BC%89/" target="_blank" rel="noopener">使用Hexo基于GitHub Pages搭建个人博客（三）</a></li>
<li><a href="https://github.com/iissnan/hexo-theme-next/issues/415" target="_blank" rel="noopener">如何置顶post？</a></li>
</ul>
<hr>
<h4 id="显示版权信息"><a href="#显示版权信息" class="headerlink" title="显示版权信息"></a>显示版权信息</h4><p>一般在网络上发表文章时，都要时刻提防着网络爬虫的抓取。特别是有些网站在抓取到你的文章后进行一些词语、段落的修改，公然改为自己发表的文章。完全无视原作者的辛苦。</p>
<p>为了更好的标明文章的版权，一般我们都会在文章中添加上文章的链接、版权声明等信息，虽然不能完全彻底的抵制文章抄袭的情况，也算是“防君子不防小人”吧。</p>
<h5 id="启用版权"><a href="#启用版权" class="headerlink" title="启用版权"></a>启用版权</h5><p>我使用的是 <code>Hexo</code> 的 <code>Next</code> 主题。找到主题目录下的 <code>_config.yml</code> 文件，更改以下部分：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Declare license on posts</span><br><span class="line">post_copyright:</span><br><span class="line">  enable: false</span><br><span class="line">  license: CC BY-NC-SA 3.0</span><br><span class="line">  license_url: https:&#x2F;&#x2F;creativecommons.org&#x2F;licenses&#x2F;by-nc-sa&#x2F;3.0&#x2F;</span><br></pre></td></tr></table></figure>

<p>将其中的 <code>enable: false</code> 改为 <code>enable: true</code> 即可。</p>
<p>但是改完后，使用 <code>hexo s -g</code> 预览，发现 “本文链接” 部分有问题。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/171206Blk7gcB7CI.png" alt="mark"></p>
<p>这就需要我们修改主站点的配置文件了。打开主站点的 <code>_config.yml</code> 文件，修改：</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/171206LC91BEHEcg.png" alt="mark"></p>
<p>将 <code>url</code> 部分改成自己站点的域名地址即可。</p>
<h5 id="相关参考-1"><a href="#相关参考-1" class="headerlink" title="相关参考"></a>相关参考</h5><ul>
<li><a href="http://www.crocutax.com/2017/05/20/Hexo%E6%8C%81%E7%BB%AD%E4%BC%98%E5%8C%96-%E5%9C%A8%E6%96%87%E7%AB%A0%E5%B0%BE%E9%83%A8%E6%B7%BB%E5%8A%A0%E7%89%88%E6%9D%83%E5%A3%B0%E6%98%8E%E4%BF%A1%E6%81%AF/" target="_blank" rel="noopener">Hexo持续优化-在文章尾部添加版权声明信息</a></li>
</ul>
<hr>
<h4 id="访问统计功能"><a href="#访问统计功能" class="headerlink" title="访问统计功能"></a>访问统计功能</h4><p>在博客中我们一般都比较在意自己博客的访问量，或者哪篇文章比较受欢迎之类的。</p>
<p>在Hexo的 <code>Next</code> 主题下带有多种统计和分析的功能。这里我选择 <code>不蒜子统计</code>来显示文章的访客数、浏览量等信息。</p>
<h5 id="启用统计"><a href="#启用统计" class="headerlink" title="启用统计"></a>启用统计</h5><p>找到 <code>Next</code> 主题下的配置文件 <code>_config.yml</code> ，找到 <code>busuanzi_count</code> 部分：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Show PV&#x2F;UV of the website&#x2F;page with busuanzi.</span><br><span class="line"># Get more information on http:&#x2F;&#x2F;ibruce.info&#x2F;2015&#x2F;04&#x2F;04&#x2F;busuanzi&#x2F;</span><br><span class="line">busuanzi_count:</span><br><span class="line">  # count values only if the other configs are false</span><br><span class="line">  enable: true</span><br><span class="line">  # custom uv span for the whole site</span><br><span class="line">  site_uv: true</span><br><span class="line">  site_uv_header: 访客数 &lt;i class&#x3D;&quot;fa fa-user&quot;&gt;&lt;&#x2F;i&gt;</span><br><span class="line">  site_uv_footer: 人次</span><br><span class="line">  # custom pv span for the whole site</span><br><span class="line">  site_pv: true</span><br><span class="line">  site_pv_header: 访问量 &lt;i class&#x3D;&quot;fa fa-eye&quot;&gt;&lt;&#x2F;i&gt;</span><br><span class="line">  site_pv_footer: 次</span><br><span class="line">  # custom pv span for one page only</span><br><span class="line">  page_pv: true</span><br><span class="line">  page_pv_header: 阅读量 &lt;i class&#x3D;&quot;fa fa-file-o&quot;&gt;&lt;&#x2F;i&gt;</span><br><span class="line">  page_pv_footer: 次</span><br></pre></td></tr></table></figure>

<p>当 <code>enable: true</code> 时，代表开启全局开关。</p>
<p>当 <code>site_uv: true</code> 时，代表在页面底部显示站点的UV值。<br>当 <code>site_pv: true</code> 时，代表在页面底部显示站点的PV值。<br>当 <code>page_pv: true</code> 时，代表在文章页面的标题下显示该页面的PV值（阅读数）。</p>
<h5 id="相关参考-2"><a href="#相关参考-2" class="headerlink" title="相关参考"></a>相关参考</h5><ul>
<li><a href="http://theme-next.iissnan.com/third-party-services.html#analytics-busuanzi" target="_blank" rel="noopener">不蒜子统计</a></li>
</ul>
<hr>
<h4 id="显示文章更新时间"><a href="#显示文章更新时间" class="headerlink" title="显示文章更新时间"></a>显示文章更新时间</h4><p>在文章列表中我们一般都能看的文章的发布时间。对于一些文章来说，比如涉及到文章中的内容过期，或者软件的升级等等，我们都会进行一些修改。这种情况下，我们就像把文章的更新日期也显示处理，也能让读者看的我们写的之前的文章也是有更新的，不会过时的。</p>
<h5 id="显示更新日期"><a href="#显示更新日期" class="headerlink" title="显示更新日期"></a>显示更新日期</h5><p>在 <code>Next</code> 主题下添加显示更新时间非常简单，找到主题下的配置文件 <code>_config.yml</code> 的 <code>post_meta</code> 部分：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Post meta display settings</span><br><span class="line">post_meta:</span><br><span class="line">  item_text: true</span><br><span class="line">  created_at: true</span><br><span class="line">  updated_at: false</span><br><span class="line">  categories: true</span><br></pre></td></tr></table></figure>

<p>将 <code>updated_at: false</code> 修改为 <code>updated_at: true</code> 即可。 </p>
<p>通过 <code>hexo s -g</code> 预览，可以看到已经自动添加上了更新日期。</p>
<h5 id="自定义显示更新日期"><a href="#自定义显示更新日期" class="headerlink" title="自定义显示更新日期"></a>自定义显示更新日期</h5><p>对于某些特殊的文章，我们也想能够自定义这个更新的日期。当然，更改起来也非常的简单，Hexo默认就支持更新日期的配置。</p>
<p>在每一篇文章的 <code>Front-matter</code> 部分，只要添加 <code>updated</code> 参数即可。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 从0到1学Golang之基础--Go 数组</span><br><span class="line">date: 2017-05-24 22:07:58</span><br><span class="line">updated: 2017-12-01 10:35:18</span><br><span class="line">tags:</span><br><span class="line">    - Golang</span><br><span class="line">categories: </span><br><span class="line">    - 从0到1学Golang</span><br><span class="line">description: Golang下的数组操作</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p>这样我们就自定义了这篇文章的更新时间。</p>
<h5 id="相关参考-3"><a href="#相关参考-3" class="headerlink" title="相关参考"></a>相关参考</h5><ul>
<li><a href="https://hexo.io/zh-cn/docs/front-matter.html" target="_blank" rel="noopener">Front-matter</a></li>
</ul>
<hr>
<h4 id="添加文章字数统计"><a href="#添加文章字数统计" class="headerlink" title="添加文章字数统计"></a>添加文章字数统计</h4><p>一般为了让读者大概估计阅读文章的时间，有的文章在头部会显示总的字数统计。</p>
<h5 id="启用字数统计"><a href="#启用字数统计" class="headerlink" title="启用字数统计"></a>启用字数统计</h5><p>首先安装一个依赖插件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm i --save hexo-wordcount</span><br></pre></td></tr></table></figure>

<p>然后修改主题配置文件 <code>_config.yml</code> 中的 <code>post_wordcount</code> 部分：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Post wordcount display settings</span><br><span class="line"># Dependencies: https:&#x2F;&#x2F;github.com&#x2F;willin&#x2F;hexo-wordcount</span><br><span class="line">post_wordcount:</span><br><span class="line">  item_text: true   &#x2F;&#x2F;底部是否显示“总字数”字样</span><br><span class="line">  wordcount: false  &#x2F;&#x2F;文章字数统计</span><br><span class="line">  min2read: false  &#x2F;&#x2F;文章预计阅读时长（分钟）</span><br><span class="line">  totalcount: false  &#x2F;&#x2F;网站总字数，位于底部</span><br><span class="line">  separated_meta: true &#x2F;&#x2F;是否将文章的字数统计信息换行显示</span><br></pre></td></tr></table></figure>

<p>将 <code>wordcount: false</code> 改为 <code>wordcount: true</code> 即可显示单篇文章的总字数了。<br>另外，<code>totalcount</code> 是用来统计整站总的字数的。</p>
<h5 id="相关参考-4"><a href="#相关参考-4" class="headerlink" title="相关参考"></a>相关参考</h5><ul>
<li><a href="https://github.com/willin/hexo-wordcount" target="_blank" rel="noopener">hexo-wordcount</a></li>
<li><a href="https://zcore.coding.me/%E7%95%85%E7%8E%A9Hexo%E2%80%94%E2%80%942%EF%BC%9A%E9%AA%9A%E8%B5%B7%E6%9D%A5%E5%90%A7%EF%BC%8CNexT/" target="_blank" rel="noopener">畅玩Hexo——2：骚起来吧，NexT</a></li>
</ul>
]]></content>
      <categories>
        <category>Hexo博客搭建</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>百度人工智能开放平台DuerOS初体验</title>
    <url>/2017/12/05/the-initial-experience-of-dueros-open-platform/</url>
    <content><![CDATA[<p>今年11月初的时候在百度DuerOS开放平台上申请了DuerOS的“开发套件个人版”的开发板，前几天正式收到了该开发板，经过几天的摸索，发现DuerOS开放平台还是有很多可挖掘的功能的。在此将这几天的研究成果记录一下。</p>
<p>双十一的时候在天猫上买了一个阿里的天猫精灵，通过对比小米的小爱同学，阿里的天猫精灵，和百度的DuerOS开发板比起来，个人感觉DuerOS开发板要更贴近于开发者，可以让开发者自己动手去实现想要的智能化的功能。</p>
<h4 id="DuerOS唤醒"><a href="#DuerOS唤醒" class="headerlink" title="DuerOS唤醒"></a>DuerOS唤醒</h4><p>百度的DuerOS开发套件个人版需要用户自备一个树莓派3B来结合使用。开发板上带有2颗高灵敏度MEMS麦克风，搭载百度DuerOS SDK，可为用户提供百度海量的信息服务能力。</p>
<p>按照官方给的硬件安装文档和提供的镜像系统将设备组合成功，插入刷好系统的内存卡，通电等待系统开机。在初次连接时，可以使用百度提供的 “小度之家app” 将系统接入网络。 小度联网成功后，直接说 “小度小度+内容” 即可实现语音式的对话交互操作。</p>
<p>总体来说，唤醒小度的这一步非常的简单，附上一张设备的合影。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/1712051HHmf7HcHh.jpg" alt="mark"></p>
<hr>
<h4 id="接入Python-SDK"><a href="#接入Python-SDK" class="headerlink" title="接入Python SDK"></a>接入Python SDK</h4><p>DuerOS开发平台中也提供了相应的Python SDK，以便于个人开发者通过该SDK来实现想要的技能。</p>
<h4 id="通过SSH登陆"><a href="#通过SSH登陆" class="headerlink" title="通过SSH登陆"></a>通过SSH登陆</h4><p>官方提供的DuerOS镜像系统是基于Raspbian系统的，所以我们可以按照在树莓派上安装Raspbian系统的方式来配置SSH服务。</p>
<p>为了找到树莓派的IP地址，我们可以使用 <code>Fing</code> 这个app来查看当前局域网上连接的所有设备。</p>
<p>然后通过SSH使用默认的用户名 <code>pi</code> 密码 <code>raspberry</code> 登陆DuerOS系统。我这里使用的是 <code>Xshell</code>，也可以选择 <code>Putty</code> 等其他软件。</p>
<p>在当前的用户目录下创建一个目录，用于后面的操作。比如我这里创建的目录名为 <code>Leafney</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ mkdir Leafney</span><br><span class="line">$ cd Leafney</span><br></pre></td></tr></table></figure>

<h4 id="停止现有小度功能，因为会占用MIC资源"><a href="#停止现有小度功能，因为会占用MIC资源" class="headerlink" title="停止现有小度功能，因为会占用MIC资源"></a>停止现有小度功能，因为会占用MIC资源</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo systemctl disable duer</span><br><span class="line">$ sudo systemctl stop duer</span><br></pre></td></tr></table></figure>

<h4 id="安装需要的依赖"><a href="#安装需要的依赖" class="headerlink" title="安装需要的依赖"></a>安装需要的依赖</h4><h5 id="更换地址源"><a href="#更换地址源" class="headerlink" title="更换地址源"></a>更换地址源</h5><p>在操作之前，建议先更换地址源。因为DuerOS系统是基于 <code>Raspbian jessie</code> 版本的，操作如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo vim &#x2F;etc&#x2F;apt&#x2F;sources.list</span><br></pre></td></tr></table></figure>

<p>把原来的第一行用#注释掉，在末尾添加下面一行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;raspbian&#x2F;raspbian&#x2F; jessie main contrib non-free rpi</span><br></pre></td></tr></table></figure>

<p>还需要更改deb的源地址，这里可选择清华的源:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deb https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;raspberrypi&#x2F; jessie main ui</span><br></pre></td></tr></table></figure>

<p>或中科大的源：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deb http:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;archive.raspberrypi.org&#x2F;debian&#x2F; jessie main ui</span><br></pre></td></tr></table></figure>

<p>编辑以下文件添加:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo vim &#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;raspi.list</span><br></pre></td></tr></table></figure>

<h5 id="update更新"><a href="#update更新" class="headerlink" title="update更新"></a>update更新</h5><p>修改完成后，更新：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get update</span><br></pre></td></tr></table></figure>

<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/171205mhG80D6keF.jpg" alt="mark"></p>
<h5 id="其他依赖包"><a href="#其他依赖包" class="headerlink" title="其他依赖包"></a>其他依赖包</h5><p>安装其他的依赖包：</p>
<p>hyper库用来支持http2.0 client, pyaudio用来支持录音，tornado用来完成oauth认证。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install python-dateutil gir1.2-gstreamer-1.0 python-pyaudio libatlas-base-dev python-dev</span><br><span class="line">$ sudo pip install tornado hyper</span><br></pre></td></tr></table></figure>

<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/171205Ha2dDjLkCl.jpg" alt="mark"></p>
<h4 id="下载编译好的openssl和Python安装包"><a href="#下载编译好的openssl和Python安装包" class="headerlink" title="下载编译好的openssl和Python安装包"></a>下载编译好的openssl和Python安装包</h4><p>由于DuerOS运行所需要的依赖环境跟平台是相关的。比如DuerOS是基于Http2 ALPN的，但树莓派官方镜像的OpenSSL并不支持，而对应的Python库依赖于OpenSSL。为了在树莓派平台上支持Python的DuerOS SDK，专门交叉编译了OpenSSL和Python。</p>
<p><em>从如下地址下载openssl安装包</em>(链接: <a href="https://pan.baidu.com/s/1skAP6WH" target="_blank" rel="noopener">https://pan.baidu.com/s/1skAP6WH</a> 密码: wknz)<br><em>从如下地址下载python2.7.14安装包</em>(链接: <a href="https://pan.baidu.com/s/1o8MHkzK" target="_blank" rel="noopener">https://pan.baidu.com/s/1o8MHkzK</a> 密码: ngx4)</p>
<p>将下载的两个文件用 <code>FileZilla</code> 传输到树莓派的 <code>/home/pi/Leafney</code> 目录下：</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/171205gead092HB7.jpg" alt="mark"></p>
<p>然后分别解压：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo tar -zxvf openssl1.1.tar.gz -C &#x2F;usr</span><br></pre></td></tr></table></figure>

<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/1712059BLDE9GllL.jpg" alt="mark"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo tar -zxvf python2.7.14.tar.gz -C &#x2F;usr&#x2F;local&#x2F;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/171205JkK98AlhB6.jpg" alt="mark"></p>
<p>替换已有的python：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo rm -rf &#x2F;usr&#x2F;bin&#x2F;python</span><br><span class="line">$ sudo ln -s &#x2F;usr&#x2F;local&#x2F;python2.7.14&#x2F;bin&#x2F;python &#x2F;usr&#x2F;bin&#x2F;python</span><br></pre></td></tr></table></figure>

<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/1712058A48988iE7.jpg" alt="mark"></p>
<h5 id="下载Python-SDK和示例代码"><a href="#下载Python-SDK和示例代码" class="headerlink" title="下载Python SDK和示例代码"></a>下载Python SDK和示例代码</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git clone https:&#x2F;&#x2F;github.com&#x2F;MyDuerOS&#x2F;DuerOS-Python-Client.git</span><br><span class="line">$ cd DuerOS-Python-Client</span><br><span class="line">$ git checkout raspberry-dev</span><br></pre></td></tr></table></figure>

<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/1712051H0kJCiD7i.jpg" alt="mark"></p>
<h4 id="初次授权"><a href="#初次授权" class="headerlink" title="初次授权"></a>初次授权</h4><p>如果直接按照官方给出的教程配置 <a href="http://open.duer.baidu.com/forum/topic/show?topicId=244796" target="_blank" rel="noopener">Step by Step带你玩转DuerOS - Python DuerOS SDK[树莓派平台] (3)</a>，下一步就是授权操作了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ .&#x2F;auth.sh</span><br></pre></td></tr></table></figure>

<p>执行后在 <code>Xshell</code> 中有提示 <code>A web page should is opened. If not, go to http://127.0.0.1:3000 to start</code> 。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/171205GBIHDg2A9k.jpg" alt="mark"></p>
<p>因为这里是要求访问 <code>127.0.0.1</code> ，所以必须在树莓派系统中通过浏览器来访问。我在Windows系统下通过 <code>树莓派IP+端口3000</code> 的方式访问，会提示 “授权回调页地址错误” 的错误页面。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/171205AedIAK9chJ.jpg" alt="mark"></p>
<p>我并没有多余的HDMI数据线来直接连接树莓派和显示器，所以这里我用远程桌面的方式来配置。</p>
<h4 id="安装远程桌面"><a href="#安装远程桌面" class="headerlink" title="安装远程桌面"></a>安装远程桌面</h4><p>树莓派下的远程桌面我们选择 <code>xrdp</code> 或者 <code>VNC</code> 来实现。</p>
<h5 id="xrdp"><a href="#xrdp" class="headerlink" title="xrdp"></a>xrdp</h5><p>xrdp 可以使用 windows下的远程桌面直接连接，不过这种方式只适合于Windows系统下连接。</p>
<p>在树莓派下执行安装：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install xrdp</span><br></pre></td></tr></table></figure>

<p>打开windows系统的 “远程桌面连接” 程序，输入树莓派的IP地址进行连接。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/171205mDL3h3G9GE.jpg" alt="mark"></p>
<p>在弹出的 <code>Login to xrdp</code> 窗口中，输入树莓派的用户名和密码，点击 <code>OK</code> 连接。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/171205ee14cebf7G.jpg" alt="mark"></p>
<h5 id="VNC"><a href="#VNC" class="headerlink" title="VNC"></a>VNC</h5><p>如果你是MAC系统或者不喜欢Windows自带的远程桌面，可以使用适合于全平台的 <code>VNC</code> 。</p>
<h6 id="VNC初始化"><a href="#VNC初始化" class="headerlink" title="VNC初始化"></a>VNC初始化</h6><p>在树莓派下执行安装：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install tightvncserver</span><br></pre></td></tr></table></figure>

<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/171205fLbc7ehf6B.jpg" alt="mark"></p>
<p>增加一个桌面，执行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ tightvncserver</span><br></pre></td></tr></table></figure>

<p>会要求设置一个连接的密码并重复输入。</p>
<p>会询问是否设置一个只读方式的密码，一般选择否 <code>n</code> 。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/1712057d91GlFC56.jpg" alt="mark"></p>
<h6 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h6><p>从网站 <a href="http://www.realvnc.com/download/viewer/" target="_blank" rel="noopener">vncViewer</a> 下载vncViewer。打开程序后连接：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">your Pi IP:1</span><br><span class="line"></span><br><span class="line"># 比如我的设置：</span><br><span class="line">192.168.5.130:1</span><br></pre></td></tr></table></figure>

<h6 id="关闭桌面"><a href="#关闭桌面" class="headerlink" title="关闭桌面"></a>关闭桌面</h6><p>关闭VNC桌面只需要在树莓派中将VNC的服务kill掉即可。在 <code>Xshell</code> 中操作：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ vncserver -kill :1</span><br></pre></td></tr></table></figure>

<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/171205JDkd7Idcak.jpg" alt="mark"></p>
<hr>
<h4 id="再次授权"><a href="#再次授权" class="headerlink" title="再次授权"></a>再次授权</h4><p>再次进入树莓派的 <code>/home/pi/Leafney/DuerOS-Python-Client</code> 目录，启动授权：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cd &#x2F;home&#x2F;pi&#x2F;Leafney&#x2F;DuerOS-Python-Client</span><br><span class="line"></span><br><span class="line">$ .&#x2F;auth.sh</span><br></pre></td></tr></table></figure>

<p>通过远程桌面访问，在树莓派的桌面系统下打开浏览器，访问 <code>127.0.0.1:3000</code> 地址，会出现 “百度账号的登陆授权页面” 。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/1712051BBDKhaC6c.jpg" alt="mark"></p>
<p>不过这个是官方的测试账号 <code>GitHub项目测试账号</code>。如果我们想要配置自己的设备，还是需要去申请自己的client_id和client_secret来调用。</p>
<p>这里我不在继续往下操作，先去申请自己的ClientID信息。</p>
<p>在 <code>Xshell</code> 中按 <code>Ctrl+C</code> 停止启动的web服务。</p>
<h4 id="创建设备"><a href="#创建设备" class="headerlink" title="创建设备"></a>创建设备</h4><p>打开 DuerOS开放平台官网 <a href="https://dueros.baidu.com/open" target="_blank" rel="noopener">DuerOS开放平台</a> ，选择右上角 “控制台” – “设备控制台” – 在打开的新页面选择 “配置新设备” 。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/171205BKfi41AImL.jpg" alt="mark"></p>
<p>然后在 <code>请选择终端场景</code> 中选择 “音箱” 点击 “下一步” 。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/171205BfD84IEJJ1.jpg" alt="mark"></p>
<p>在 <code>请选择操作系统</code> 界面选择第一项 “Linux” 或者也可以选择最下面的 “点击这里” ，没有太大区别。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/171205GF9559eF6j.jpg" alt="mark"></p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/171205926bH7lJBl.jpg" alt="mark"></p>
<p>输入 “产品名称”，比如这里我取名叫 <code>贾维斯</code> （电影钢铁侠里的人工智能系统），点击 “申请ClientID” ，下面会显示出相应的 client_id 和 client_secret等信息。这里，我们先将这两项记下来以待后面使用。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/171205ik2hLA9K0C.jpg" alt="mark"></p>
<p>接下来是配置 “端能力”的页面，可以自定义选择，或者直接保持默认下一步即可。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/171205F2jhkif846.jpg" alt="mark"></p>
<p>然后会弹出 <code>BOT配置</code> 页面。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/17120514d0Ik0ddi.jpg" alt="mark"></p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/171205im394L0fA7.jpg" alt="mark"></p>
<p>可以看到上面是一些 <code>音乐</code> <code>有声点播</code> <code>有声直播</code> 等等选项；下面有 <code>聊天定制</code> <code>语音唤醒服务</code> <code>自定义控制指令</code> 这些，如果看不懂呢可以不用管，直接下一步。后面会询问是否下载SDK，也不用管，直接点击下面的 “完成” 会提示 “创建产品成功” 。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/171205ldkA768AdC.jpg" alt="mark"></p>
<p>这样我们就创建好了自己的client_id和client_secret。</p>
<h4 id="设置个人的ClientID信息"><a href="#设置个人的ClientID信息" class="headerlink" title="设置个人的ClientID信息"></a>设置个人的ClientID信息</h4><p>使用 <code>FileZilla</code> 软件，在树莓派的目录 <code>/home/pi/Leafney/DuerOS-Python-Client</code> 下找到 <code>app/auth.py</code> 这个文件，因为在控制台界面下不太方便编辑文件，所以这里我选择将该文件下载到Windows本地来编辑。</p>
<p>将 <code>auth.py</code> 下载到本地后，推荐使用 <code>SublimeText</code> 或 <code>NotePad++</code> 来进行编辑。</p>
<p>找到 <code>开发者注册信息</code> 部分，替换成刚刚申请的信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 开发者注册信息</span><br><span class="line">CLIENT_ID &#x3D; &#39;XXXXX&#39;</span><br><span class="line">CLIENT_SECRET &#x3D; &#39;XXXXXX&#39;</span><br></pre></td></tr></table></figure>

<p>然后将下面的 <code>使用开发者注册信息</code> 一行下面代码段前面的井号 <code>#</code> 去掉，解注释这一行。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 使用开发者注册信息</span><br><span class="line">auth.auth_request(CLIENT_ID, CLIENT_SECRET)</span><br></pre></td></tr></table></figure>

<p>再将下面的 <code>使用默认的CLIENT_ID和CLIENT_SECRET</code> 一行下面代码行前面加一个井号 <code>#</code> 注释掉这一行。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 使用默认的CLIENT_ID和CLIENT_SECRET</span><br><span class="line"># auth.auth_request()</span><br></pre></td></tr></table></figure>

<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/171205jLciAm6A4f.jpg" alt="mark"></p>
<p>然后使用 <code>FileZilla</code> 将我们刚刚改好的 <code>auth.py</code> 上传到树莓派中。</p>
<h4 id="设置授权回调地址"><a href="#设置授权回调地址" class="headerlink" title="设置授权回调地址"></a>设置授权回调地址</h4><p>在浏览器中访问 <code>控制台</code> – <code>设备控制台</code> 页面 <a href="https://dueros.baidu.com/didp/product/listview" target="_blank" rel="noopener">设备控制台</a> , 选择我们刚刚创建的产品点击 “编辑” 选项。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/1712053ebjjK0LkG.jpg" alt="mark"></p>
<p>在 <code>基础信息</code> 页面，可以查看刚刚创建设备的 client_id 等信息。这里我们点击 <code>OAUTH CONFIG URL</code> 这个链接：</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/171205Ba8jgec5kl.jpg" alt="mark"></p>
<p>在新页面的左侧点击 <code>安全设置</code> 选项，在 <code>授权回调页</code> 的输入框中输入如下内容，然后点击 <code>确定</code> 保存修改。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1:3000&#x2F;authresponse</span><br></pre></td></tr></table></figure>

<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/171205fgmEh6ei60.jpg" alt="mark"></p>
<h4 id="使用个人设备授权"><a href="#使用个人设备授权" class="headerlink" title="使用个人设备授权"></a>使用个人设备授权</h4><p>完成上面的配置后，回到 <code>Xshell</code> 中，在树莓派的 <code>/home/pi/Leafney/DuerOS-Python-Client</code> 目录下，再次执行授权命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ .&#x2F;auth.sh</span><br><span class="line">A web page should is opened. If not, go to http:&#x2F;&#x2F;127.0.0.1:3000 to start</span><br></pre></td></tr></table></figure>

<p>然后在树莓派系统浏览器输入 <code>127.0.0.1:3000</code> 访问。</p>
<p>可以看到页面右侧的授权应用变成了我自己创建的设备名称。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/171205744die8bjc.jpg" alt="mark"></p>
<p>如果你的授权页面中这里显示的是空的，那是因为你用的是中文名称。在“基础信息” 的 “名称”那里需要再次添加一下名称。如果是英文的话，这个名称会直接显示。我觉得这里可能是一个bug。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/1712051E5cDdb1jg.jpg" alt="mark"></p>
<p>在授权页面输入我的百度账号和密码进行授权。</p>
<p>看到提示 <code>Succeed to login DuerOS Voice Service</code> 的信息就说明授权成功了。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/171205e6dBAefhid.jpg" alt="mark"></p>
<p>同时在 <code>Xshell</code> 下我们会看到输出相应的授权信息。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/171205KgGHdJGJ89.jpg" alt="mark"></p>
<h4 id="语言唤醒"><a href="#语言唤醒" class="headerlink" title="语言唤醒"></a>语言唤醒</h4><p>执行如下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ .&#x2F;wakeup_trigger_start.sh</span><br></pre></td></tr></table></figure>

<p>使用唤醒词 <code>小度小度</code> 就能唤醒了。</p>
<p>因为我在 <code>Xshell</code> 下操作时发现命令行下的中文会有乱码的情况，所以我改用远程桌面下树莓派上自带的 <code>Terminal</code> 程序来执行。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/171205e6iEB7LKEm.jpg" alt="mark"></p>
<p>也可以使用enter按键唤醒，执行命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ .&#x2F;enter_trigger_start.sh</span><br></pre></td></tr></table></figure>

<p>使用enter键回车唤醒。</p>
<p>这里我尝试了上面的两种唤醒方式，发现不知道是哪里的问题，音箱都没有声音输出。查看输出的日志信息是能看到有音频文件下载成功并播放的。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/171205mFK66gbHId.jpg" alt="mark"></p>
<h4 id="解决没有声音的问题"><a href="#解决没有声音的问题" class="headerlink" title="解决没有声音的问题"></a>解决没有声音的问题</h4><p>我使用 <code>alsamixer</code> 然后按 <code>F6</code> 切换使用的声卡，发现无论如何切换，似乎都没有效果。</p>
<p>后来我考虑<strong>将音箱线换到树莓派本身的音频接口</strong>上，发现居然有声音输出了。不过树莓派自带的音频输出杂音还是很吵的。</p>
<p>这里要注意的是不能在树莓派通电的情况下切换音频口，我发现如果直接将音频线从DuerOS板子的音频口换到树莓派的音频口上时，刚一接触的时候噪音是非常大的，所以最后我是将树莓派关机然后切换的。</p>
<h4 id="感受"><a href="#感受" class="headerlink" title="感受"></a>感受</h4><ol>
<li>使用Python SDK 最后唤醒的时候需要将音频接口插到树莓派的音频接口上，这一点在论坛的文档中没有说明，可能会给一些人操作时带来困惑。</li>
<li>个人认为应该是有方法使用DuerOS开发版的音频接口的，毕竟没有杂音嘛。需要进一步研究一下。</li>
<li>发现在使用 Python SDK 唤醒小度时，语言识别的效果不如镜像系统中语音的识别准确度高。</li>
</ol>
]]></content>
      <categories>
        <category>DuerOS开放平台</category>
      </categories>
      <tags>
        <tag>DuerOS</tag>
        <tag>智能家居</tag>
      </tags>
  </entry>
  <entry>
    <title>解决Hexo博客搜索异常</title>
    <url>/2017/11/24/resolve-hexo-blog-search-exception/</url>
    <content><![CDATA[<p>最近在更新博客文章时发现之前新添加的搜索功能不太好用了。每次点击了搜索按钮之后，搜索弹框一直显示 “加载中” 的状态。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/1711241KiH0C4BaA.png" alt="mark"></p>
<h4 id="尝试"><a href="#尝试" class="headerlink" title="尝试"></a>尝试</h4><p>因为我使用的是 <code>hexo</code> 的 <code>Next</code> 主题中的 <code>Local Search</code> 搜索功能，所以就去 <code>Next</code> 主题的github中查找了类似的 <code>issues</code> ，发现类似问题下作者是建议重新安装该搜索组件来解决的。</p>
<p>于是我就卸载了该组件，然后重新安装：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm uninstall hexo-generator-searchdb --save</span><br><span class="line"></span><br><span class="line">$ npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>

<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/171124eHlhg3am05.png" alt="mark"></p>
<p>结果问题依旧。</p>
<h4 id="探究"><a href="#探究" class="headerlink" title="探究"></a>探究</h4><p>后来我发现 <code>Local Search</code> 的搜索功能是加载的项目目录下的 <code>search.xml</code> 文件：<code>http://localhost:4000/search.xml</code>。于是我在浏览器中打开，居然有报错提示。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/17112468cam2i3k8.png" alt="mark"></p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/171124jmJc73ClH5.png" alt="mark"></p>
<p>按照错误信息的说明，我找到了出错的第 <code>47</code> 行第 <code>35</code> 列，发现和其他内容不同的是这里居然多了一个 “红点”，那么搜索弹窗出不来的问题应该就是这个 “红点” 搞的鬼了。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/171124imFDgH4mmE.png" alt="mark"></p>
<p>我通过 <code>Sublime Text</code> 打开了源博客文件，发现在段落的开头居然多了两个奇葩的字符：<code>BS</code>。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/171124km78g4i39h.png" alt="mark"></p>
<p>我觉得可能是什么时候复制文件时给加上的。删除后，再次生成。问题解决。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/17112406F5a7GEaL.png" alt="mark"></p>
<p>再次访问搜索的xml文件 <code>http://localhost:4000/search.xml</code> ，发现已经不会再报之前的错误了。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/171124B85CK5774h.png" alt="mark"></p>
<p>需要注意的一点：我在查看源博客文件时也使用了 <code>VS Code</code> 编辑器，但是 <code>VS Code</code> 却无法显示出来前面的特殊字符 <code>BS</code>，通过 <code>Sublime Text</code> 才查看到。</p>
<h4 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h4><p>在Hexo博客文件的项目目录下有一个 <code>node_modules</code> 目录。每次在windows系统下删除 (拷贝或者移动) 该目录时都会报 <code>文件名或扩展名太长，目录层次超过限制</code> 等错误而导致操作失败。</p>
<p>解决这个问题只需要使用 <code>unix</code> 或者 <code>linux</code> 下的 <code>rm -rf</code>（强制删除） 命令来删除即可，但要注意操作时一定要慎重，不要误删其他文件。</p>
<p>在 <code>node_modules</code> 文件夹所在目录下右键打开 <code>Git Bash</code> 窗口，执行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ rm -rf .&#x2F;node_modules&#x2F;</span><br></pre></td></tr></table></figure>

<p>等待完成，即可。</p>
<h4 id="相关参考"><a href="#相关参考" class="headerlink" title="相关参考"></a>相关参考</h4><ul>
<li><a href="https://stackoverflow.com/questions/13066532/how-to-uninstall-npm-modules-in-node-js" target="_blank" rel="noopener">how to uninstall npm modules in node js?</a></li>
<li><a href="http://blog.csdn.net/crper/article/details/50458369" target="_blank" rel="noopener">windows删除node_modules[文件名或扩展名太长，目录层次超过无法删除的问题]</a></li>
</ul>
]]></content>
      <categories>
        <category>Hexo博客搭建</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>玩转群晖NAS--下载神器aria2</title>
    <url>/2017/11/17/playing-synology-nas-of-docker-aria2/</url>
    <content><![CDATA[<p>上一篇文章说了如何配置Docker加速器，现在下载Docker镜像文件已经非常的快了。但是对于其他的一些文件比如电影、程序文件等来说，如何在NAS中来快速的下载呢？</p>
<p>虽然群晖中已经自带了下载套件，不过看到那个界面我就有种不想用的感觉。这里推荐一个开源的下载神器 – <code>aria2</code>，号称迅雷的替代者。</p>
<p>这里我还选择在Docker中来配置，选择的镜像为我之前创建的 <code>leafney/debian-aria2-kode</code> 镜像。该镜像自带了 aria2下载程序、ariaNg管理页面以及KodExplorer文件管理页面。</p>
<p>具体可以访问：<a href="https://github.com/Leafney/debian-aria2-kode" target="_blank" rel="noopener">Leafney/debian-aria2-kode</a></p>
<hr>
<h4 id="创建aria2容器"><a href="#创建aria2容器" class="headerlink" title="创建aria2容器"></a>创建aria2容器</h4><p>打开群晖的docker套件，选择 “注册表” 项，搜索并下载镜像 <code>leafney/debian-aria2-kode</code> 。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/171117h0GeCiKJG3.png" alt="mark"></p>
<p>下载完成后，选中该镜像，点击 “启动” 菜单，打开 “创建容器” 界面。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/171117Dc9aFm6f6c.png" alt="mark"></p>
<p>为该容器设置一个自定义的名称，我这里命名为 <code>aria2-kode</code>，然后打开 “高级设置” 窗口。</p>
<p>在 “高级设置” 选项卡，选中 “启用自动重新启动” 及 “创建桌面快捷方式” 。</p>
<p>自动重新启动是在容器不当关机的情况下回尝试自动重启的操作。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/171117EcA9f5A3Bl.png" alt="mark"></p>
<p>在 “卷” 菜单中，为创建的容器添加一个文件夹用来管理和查看我们通过aria2下载的文件。因为要存储新文件，所以这里不要勾选 “只读” 项。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/171117b2aick4cmg.png" alt="mark"></p>
<p>在 “端口设置” 菜单中，已经列出了镜像中预设的端口信息，在 “本地端口” 项下，我们为其指定相应的端口，不选择默认的 “自动” 。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/171117A8JD9Behmg.png" alt="mark"></p>
<p>然后点击 “应用” 按钮。</p>
<p>回到 “创建容器” 界面，点击 “下一步” 。查看我们设置的容器信息，勾选左下角的 “向导完成后运行此容器” 项，然后点击 “应用” 等待容器启动。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/171117kD4GleC0Aa.png" alt="mark"></p>
<hr>
<h4 id="查看容器信息"><a href="#查看容器信息" class="headerlink" title="查看容器信息"></a>查看容器信息</h4><p>选择左侧 “容器” 项，可以看到我们刚刚创建的容器已经启动了。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/171117ih68G0fH77.png" alt="mark"></p>
<p>点击顶部的 “详情” 选项，可以查看容器 <code>aria2-kode</code> 的信息。</p>
<p>在 “日志” 项下，可以查看当前容器运行时输出的日志记录。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/171117lEiH8f74eJ.png" alt="mark"></p>
<hr>
<h4 id="配置KodExplorer"><a href="#配置KodExplorer" class="headerlink" title="配置KodExplorer"></a>配置KodExplorer</h4><p>在浏览器中输入 <code>群晖ip:6860</code> ，打开 <code>KodExplorer</code> 的登录界面。看到 “运行环境检测” 下输出 “Successful!” 说明我们的容器已经正常的跑起来了。</p>
<p>首先要设置 <code>KodExplorer</code> 资源管理器的管理员 <code>admin</code> 的密码。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/171117kaaL1fL1aE.png" alt="mark"></p>
<p>然后使用管理员账号登录。登录后可以看到 <code>KodExplorer</code> 的文件管理页面和我们平时使用的资源管理器页面非常的相似，操作起来也没有什么难度。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/171117AG7Bj3LAaB.png" alt="mark"></p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/171117f4J96e8C8l.png" alt="mark"></p>
<hr>
<h4 id="配置aria2"><a href="#配置aria2" class="headerlink" title="配置aria2"></a>配置aria2</h4><p>在浏览器中输入 <code>群晖ip:6801</code> ,打开 <code>AriaNg</code> 的管理页面。进入后会弹出 “认证失败” 的错误弹窗，不用管它。</p>
<p>选择左侧 “系统设置” 下的 “AriaNg 设置” 项。在右侧选择 “RPC(192.168.x.xx…” 的菜单，然后配置之前创建容器时设置的 “Aria2 RPC 地址” 端口号和 “Aria2 RPC 密钥” 项。</p>
<p>RPC密钥默认是 <code>123456</code> 。设置完成后点击 “重新加载页面” 应用配置。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/171117jAGbI57kfb.png" alt="mark"></p>
<p>然后可以看到 <code>Aria2 状态</code> 已经显示为 “已连接” 的状态了。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/171117EI19DI0LF8.png" alt="mark"></p>
<p>至此，aria2就配置完成了。选择左侧的 “正在下载” 项新建下载任务即可。</p>
<hr>
<h4 id="管理下载文件"><a href="#管理下载文件" class="headerlink" title="管理下载文件"></a>管理下载文件</h4><p>这里我以下载 <code>BaiduExporter</code> 为例来示范如何管理下载的文件。</p>
<p><a href="https://github.com/acgotaku/BaiduExporter" target="_blank" rel="noopener">BaiduExporter</a></p>
<h5 id="下载文件"><a href="#下载文件" class="headerlink" title="下载文件"></a>下载文件</h5><p>打开 <code>BaiduExporter</code> 的github页面，在master分支下，选择右侧的 <code>Clone or download</code> 项下的 <code>Download Zip</code> ，右击选择 “复制链接地址” 。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/171117j7blJKDCib.png" alt="mark"></p>
<p>打开 “AriaNg” 页面，在 “正在下载” 页面 “新建” 下载任务。粘贴下载链接，点击 “立即下载” 开始。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/171117EH82F8J37d.png" alt="mark"></p>
<p>下载完成后，会在 “已完成/已停止” 菜单中显示。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/17111773fCaB1Dmg.png" alt="mark"></p>
<h5 id="KodExplorer文件管理"><a href="#KodExplorer文件管理" class="headerlink" title="KodExplorer文件管理"></a>KodExplorer文件管理</h5><p>要查看我们刚刚下载的文件，在浏览器打开 <code>KodExplorer</code> 页面，选择上面的目录路径，点击根目录项，查看所有的文件及目录。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/171117jBB9DF8b40.png" alt="mark"></p>
<p>找到 <code>app</code> 目录，打开里面的 <code>aria2down</code> 目录即可查看到我们刚刚下载的文件了。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/171117llG1fjCAB8.png" alt="mark"></p>
<h5 id="在群晖DSM中查看下载文件"><a href="#在群晖DSM中查看下载文件" class="headerlink" title="在群晖DSM中查看下载文件"></a>在群晖DSM中查看下载文件</h5><p>在创建容器时我们为容器指定了群晖本地的下载文件目录。打开群晖DSM界面 – “File Station” 文件管理器，找到我们设置的目录，可以看到容器为我们自动创建了三个目录，在 <code>aria2down</code> 下就能找到我们刚刚下载的文件了。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/1711176EB6Kjc45f.png" alt="mark"></p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/171117G4j3hE8KH9.png" alt="mark"></p>
<hr>
<h4 id="百度网盘文件下载"><a href="#百度网盘文件下载" class="headerlink" title="百度网盘文件下载"></a>百度网盘文件下载</h4><p>知道了如何下载和如何管理文件，接下来我们看看具体的应用。因为之前网盘刚兴起的时候，我把大部分的文件都放在到了百度网盘里，但后来网盘逐渐衰落，百度网盘的客户端下载文件还会限速，除非你冲超级会员才行。</p>
<p>今天，我们就用aria2来解决这个问题。</p>
<h5 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h5><p>想要下载百度网盘中的文件，首先需要安装一个插件，也就是上面我们已经下载的 <code>BaiduExporter</code>。</p>
<p>在 <code>KodExplorer</code> 管理界面或群晖的 <code>DSM</code> 界面，选中文件 <code>BaiduExporter-master.zip</code> 右击选择下载均可将该文件下载到当前电脑上，解压后看到一个名为 <code>BaiduExporter.crx</code> 的文件。</p>
<p>打开 <code>Chrome</code> 浏览器 – “更多工具” – “扩展程序” 界面。将 <code>BaiduExporter.crx</code> 拖放到该页面以安装。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/1711174ja3030bB1.png" alt="mark"></p>
<p>打开百度网盘页面，在顶部菜单栏中可以看到多出了一项 “导出下载” 的按钮。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/17111794ELDGH5hG.png" alt="mark"></p>
<h5 id="设置ARIA2-RPC"><a href="#设置ARIA2-RPC" class="headerlink" title="设置ARIA2 RPC"></a>设置ARIA2 RPC</h5><p>仍在百度网盘页面，选择菜单 “导出下载” – “设置” 项，在 <code>ARIA2 RPC</code> 右侧输入RPC地址，格式为 ：<code>http://192.168.5.120:6800/jsonrpc</code> 。</p>
<p>因为我的aria2是添加了密钥的，所以最后的rpc地址格式应为：<code>http://token:RPC密钥@192.168.5.120:6800/jsonrpc</code> ，即</p>
<blockquote>
<p>设置密码以后需要在导出下面的设置里在 JSONRPC 的地址的 <code>http://</code> 后面 <code>localhost</code> 前面加上 <code>token:你的密码@</code>。</p>
</blockquote>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/171117AkL6GebFaB.png" alt="mark"></p>
<h5 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h5><p>点击应用后，勾选百度网盘中要下载的文件或文件夹，选择 “导出下载” 菜单下的 “ARIA2 RPC”，会弹出 “下载成功，赶紧去看看吧！” 的提示信息。切换到 <code>AriaNg</code> 页面，我们可以看到在百度网盘上选择的文件已经在依次下载了。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/171117GlLGJIkd74.png" alt="mark"></p>
<p>另外在 <code>KodExplorer</code> 和群晖DSM的资源管理界面，都可以看到正在下载的文件。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/171117lggD4efImf.png" alt="mark"></p>
<h5 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h5><p>这里发现一个问题：如果在 <code>Mac10.13</code> 系统上使用release下的 <code>v0.8.5</code> 的版本在百度网盘页面选中文件后，“导出下载” 的按钮就消失了。更新成当前的master版本 <code>v0.9.10</code> 后没有问题。所以上面直接推荐安装master版本。</p>
<p>具体可以看 github issues：<a href="https://github.com/acgotaku/BaiduExporter/issues/492" target="_blank" rel="noopener">mac os 10.13 无法使用了</a></p>
<hr>
<h4 id="相关参考"><a href="#相关参考" class="headerlink" title="相关参考"></a>相关参考</h4><ul>
<li><a href="https://github.com/acgotaku/BaiduExporter/issues/299" target="_blank" rel="noopener">Aria2c那边设置rpc-secret后，chrome里的aria按钮点击后就不能无法下载了，报：是不是没有启动aria2</a></li>
</ul>
]]></content>
      <categories>
        <category>玩转群晖NAS</category>
      </categories>
      <tags>
        <tag>SynologyNAS</tag>
      </tags>
  </entry>
  <entry>
    <title>玩转群晖NAS--Docker加速</title>
    <url>/2017/11/17/playing-synology-nas-of-docker-accelerator/</url>
    <content><![CDATA[<p>群晖的DSM系统上安装Docker套件非常的简单，只要点击一个按钮就行了。</p>
<p>但是由于某些 “你懂的” 原因，DockerHub的网站是在国外的，而在国内访问起来就会特别的慢。之前我也写过在其他Linux系统如Ubuntu下配置Docker加速器的方法，但经过一番研究发现群晖NAS下的Docker套件配置加速器的方法还是有一定区别的。</p>
<h4 id="启用Docker套件"><a href="#启用Docker套件" class="headerlink" title="启用Docker套件"></a>启用Docker套件</h4><p>进入群晖的 DSM 系统后，选择桌面的 “套件中心” 图标（或在 “主菜单” 界面中选择 “套件中心”），在左侧找到 “实用工具” 一项，右侧往下拉在 “第三方” 一栏下找到 “Docker” 的图标，点击 “安装套件” ，等待安装完成。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/171117Dg018bm2b9.png" alt="mark"></p>
<p>安装完成后，选择 “主菜单” 找到 “Docker” 图标并打开。</p>
<p>具体的操作可以查看 DSM 的帮助界面，这里主要说明重点的项：</p>
<ul>
<li><code>总览</code> 能看到当前群晖的 “CPU 使用率” 和 “内存使用率” 以及正在运行的 Docker 容器。</li>
<li><code>注册表</code> 对应于 <code>Docker</code> 来说就是“Docker Hub”。我们可以在这里搜索以及下载镜像。</li>
<li><code>映像</code> 对应于 <code>Docker</code> 来说就是“镜像”，用来管理镜像，创建容器等操作。</li>
<li><code>容器</code> 是对创建的容器进行管理。</li>
</ul>
<h4 id="未启用加速器"><a href="#未启用加速器" class="headerlink" title="未启用加速器"></a>未启用加速器</h4><p>要在Docker套件中创建容器，我们可以在左侧菜单 “注册表” 项搜索相应的镜像名称，双击下载。但是我们发现下载中的镜像右侧的下载图标在一段时间之内一直显示 “0 B” 的情况，然后就自动消失了。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/1711176K1C7bKB4a.png" alt="mark"></p>
<p>同时在 “映像” 中也会提示 “您未下载任何映像，请进入注册表选项卡以下载。”：</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/171117aG1A4jmC25.png" alt="mark"></p>
<p>一连试过几次，都是下载中途镜像就自动消失了。</p>
<h4 id="启用SSH"><a href="#启用SSH" class="headerlink" title="启用SSH"></a>启用SSH</h4><p>要配置Docker的配置文件，还得需要在命令行下来操作。群晖NAS默认没有开启SSH功能，得需要我们先开启才行。</p>
<p>打开 “控制面板” 图标，选择 “应用程序” – “终端机和SNMP” – 勾选 “启用 SSH 功能” 。端口可以选择默认或自定义，然后点击应用。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/1711179j5LlAIEHc.png" alt="mark"></p>
<h4 id="启用用户主目录服务"><a href="#启用用户主目录服务" class="headerlink" title="启用用户主目录服务"></a>启用用户主目录服务</h4><p>这时如果你以任何用户身份通过终端使用SSH方式访问NAS的ip地址，登陆后一般会看到一条警告提示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Could not chdir to home directory &#x2F;var&#x2F;services&#x2F;homes&#x2F;tiger: No such file or directory</span><br></pre></td></tr></table></figure>

<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/171117jddEE7660m.png" alt="mark"></p>
<p>发生此警告是因为主目录由DSM的“用户主目录服务”控制，默认情况下该主目录服务是禁用的。要防止错误，请通过选中 “控制面板” – “用户账户”菜单 – “高级设置”选项卡 – “家目录”组 – “启用家目录服务” 复选框来启用用户主目录服务。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/171117KfKI9kDI9j.png" alt="mark"></p>
<p>这样再次尝试登陆，会看到警告信息没有了。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/171117aLk3B8mjAI.png" alt="mark"></p>
<p>即使您不打算使用该家目录，但还是建议您选择启用用户主目录服务，以防影响其他某些程序的运行。</p>
<h4 id="临时性Docker加速"><a href="#临时性Docker加速" class="headerlink" title="临时性Docker加速"></a>临时性Docker加速</h4><p>如果是临时性的想要 “加速” 下载镜像，可以选择通过命令的方式，执行 <code>docker pull</code> 时加入国内源地址，格式为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ docker pull registry.docker-cn.com&#x2F;myname&#x2F;myrepo:mytag</span><br></pre></td></tr></table></figure>

<p>例如:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ docker pull registry.docker-cn.com&#x2F;library&#x2F;ubuntu:16.04</span><br></pre></td></tr></table></figure>

<p>虽然能实现加速效果，但是对于在群晖NAS中操作Docker来说，每次下载镜像都要先去登陆SSH，在命令行中下载好了镜像再回到 DSM 界面来操作，这样的流程未免有些太繁琐了。</p>
<h4 id="配置Docker加速器"><a href="#配置Docker加速器" class="headerlink" title="配置Docker加速器"></a>配置Docker加速器</h4><p>我们可以通过配置 <code>Docker</code> 守护进程默认使用 <code>Docker</code> 官方镜像加速。</p>
<h5 id="查看群晖下Docker版本"><a href="#查看群晖下Docker版本" class="headerlink" title="查看群晖下Docker版本"></a>查看群晖下Docker版本</h5><p>这里我使用 <code>admin</code> 账号通过SSH登陆到群晖的命令模式下来操作。</p>
<p>使用命令 <code>docker info</code> 查看docker详细信息：</p>
<p>如果提示 <code>Cannot connect to the Docker daemon. Is the docker daemon running on this host?</code> 说明当前的账号没有 <code>root</code> 权限，可以使用 <code>sudo</code> 提权来操作，或者可以通过切换到 <code>root</code> 账户下来操作，这里我们选择后者。</p>
<p>通过 <code>admin</code> 账号登录后，执行 <code>sudo su -</code> 切换到 <code>root</code> 账户下(注意这一步输入的是admin账号的密码)：</p>
<p>示例命令如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">admin@HomeNAS:&#x2F;etc$ docker info</span><br><span class="line">Cannot connect to the Docker daemon. Is the docker daemon running on this host?</span><br><span class="line">admin@HomeNAS:~$ sudo su -</span><br><span class="line">Password:    # 注意这一步输入的是admin账号的密码</span><br><span class="line">root@HomeNAS:~# docker info</span><br><span class="line">Containers: 0</span><br><span class="line"> Running: 0</span><br><span class="line"> Paused: 0</span><br><span class="line"> Stopped: 0</span><br><span class="line">Images: 0</span><br><span class="line">Server Version: 1.11.2</span><br><span class="line">Storage Driver: btrfs</span><br><span class="line">Logging Driver: db</span><br><span class="line">Cgroup Driver: cgroupfs</span><br><span class="line">Plugins:</span><br><span class="line"> Volume: local</span><br><span class="line"> Network: host bridge null</span><br><span class="line">Kernel Version: 4.4.15+</span><br><span class="line">Operating System: &lt;unknown&gt;</span><br><span class="line">OSType: linux</span><br><span class="line">Architecture: x86_64</span><br><span class="line">CPUs: 2</span><br><span class="line">Total Memory: 1.801 GiB</span><br><span class="line">Name: HomeNAS</span><br><span class="line">ID: A3DQ:M62X:NLZP:RYMF:NINR:5QBY:7OIJ:L425:3WDR:4V2N:FEFL:OV42</span><br><span class="line">Docker Root Dir: &#x2F;volume1&#x2F;@docker</span><br><span class="line">Debug mode (client): false</span><br><span class="line">Debug mode (server): false</span><br><span class="line">Registry: https:&#x2F;&#x2F;index.docker.io&#x2F;v1&#x2F;</span><br><span class="line">WARNING: No kernel memory limit support</span><br><span class="line">WARNING: No cpu cfs quota support</span><br><span class="line">WARNING: No cpu cfs period support</span><br><span class="line">WARNING: bridge-nf-call-iptables is disabled</span><br><span class="line">WARNING: bridge-nf-call-ip6tables is disabled</span><br></pre></td></tr></table></figure>

<p>我们可以看到 <code>Server Version</code> 目前版本是 <code>1.11.2</code> 的。</p>
<p>要退出 <code>root</code> 账户模式，执行 <code>exit</code> 即可：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@HomeNAS:~# exit</span><br><span class="line">logout</span><br><span class="line">admin@HomeNAS:~$</span><br></pre></td></tr></table></figure>

<h5 id="配置加速器"><a href="#配置加速器" class="headerlink" title="配置加速器"></a>配置加速器</h5><p>这里我选择使用阿里云的镜像加速器。打开阿里云的 <a href="https://dev.aliyun.com/" target="_blank" rel="noopener">开发者平台</a> , 选择 “管理中心” – “镜像加速器” ，可以看到 “您的专属加速器地址” 。</p>
<p>而且下面也给出了具体的操作方法。</p>
<p>通过上一步我们看到群晖下的 Docker 版本是大于 <code>1.10.0</code> 的，按照文档我们可以通过修改daemon配置文件 <code>/etc/docker/daemon.json</code> 来使用加速器。</p>
<p>但是，这里一定要说但是，文档中的方法是对应于在 <code>Ubuntu</code> 等Linux系统下通过 <code>Docker</code> 官方的安装方式安装的Docker而言的，对于群晖下的Docker来说，并不是这样的。</p>
<p>通过查找我发现群晖中Docker的配置文件地址在 <code>/var/packages/Docker/etc/dockerd.json</code> 下，</p>
<p>使用vim编辑：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@HomeNAS:~# vim &#x2F;var&#x2F;packages&#x2F;Docker&#x2F;etc&#x2F;dockerd.json</span><br></pre></td></tr></table></figure>

<p>可以看到内容如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;ipv6&quot;: true,</span><br><span class="line">    &quot;registry-mirrors&quot;: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后将从阿里云获得的加速器地址填入 <code>registry-mirrors</code> 部分即可：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;ipv6&quot;: true,</span><br><span class="line">    &quot;registry-mirrors&quot;: [&quot;https:&#x2F;&#x2F;xxxxxx.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意：网址要用英文的双引号引起来再添加到中括号中。</p>
<p>当然，也可以使用其他的加速器地址。比如使用Docker中国官方镜像的加速地址：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;ipv6&quot;: true,</span><br><span class="line">    &quot;registry-mirrors&quot;: [&quot;https:&#x2F;&#x2F;registry.docker-cn.com&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后需要重启群晖下的Docker服务。</p>
<h4 id="重启群晖下的Docker服务"><a href="#重启群晖下的Docker服务" class="headerlink" title="重启群晖下的Docker服务"></a>重启群晖下的Docker服务</h4><p>上面也说到，群晖的DSM系统并不像其他的linux系统如 <code>Ubuntu</code> 那样，管理服务可以使用 <code>systemctl</code>(Ubuntu16.04后版本) 或 <code>service</code> 来操作: </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@HomeNAS:~# systemctl</span><br><span class="line">-ash: systemctl: command not found</span><br><span class="line">root@HomeNAS:~# service</span><br><span class="line">-ash: service: command not found</span><br><span class="line">root@HomeNAS:~#</span><br></pre></td></tr></table></figure>

<p>可以看到这两个命令在群晖下都是找不到的。</p>
<p>那是因为在群晖下的操作命令都要加上 <code>syno</code> 前缀来操作，执行命令 <code>synoservice</code> 或 <code>synoservice --help</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@HomeNAS:~# synoservice</span><br><span class="line">Copyright (c) 2003-2017 Synology Inc. All rights reserved.</span><br><span class="line"></span><br><span class="line">SynoService Tool Help (Version 15217)</span><br><span class="line">Usage: synoservice</span><br><span class="line">	--help							Show this help</span><br><span class="line">	--help-dev						More specialty functions for deveplopment</span><br><span class="line">	--is-enabled		[ServiceName]			Check if the service is enabled</span><br><span class="line">	--status		[ServiceName]			Get the status of specified services</span><br><span class="line">	--enable		[ServiceName]			Set runkey to yes and start the service (alias to --start)</span><br><span class="line">	--disable		[ServiceName]			Set runkey to no and stop the service (alias to --stop)</span><br><span class="line">	--hard-enable		[ServiceName]			Set runkey to yes and start the service and its dependency (alias to --hard-start)</span><br><span class="line">	--hard-disable		[ServiceName]			Set runkey to no and stop the service and its dependency (alias to --hard-stop)</span><br><span class="line">	--restart		[ServiceName]			Restart the given service</span><br><span class="line">	--reload		[ServiceName]			Reload the given service</span><br><span class="line">	--pause			[ServiceName]			Pause the given service</span><br><span class="line">	--resume		[ServiceName]			Resume the given service</span><br><span class="line">	--pause-by-reason	[ServiceName]	[Reason]	Pause the service by given reason</span><br><span class="line">	--resume-by-reason	[ServiceName]	[Reason]	Resume the service by given reason</span><br><span class="line">	--pause-all		(-p)	[Reason]	(Event)	Pause all service by given reason with optional event(use -p to include packages)</span><br><span class="line">	--pause-all-no-action	(-p)	[Reason]	(Event)	Set all service runkey to no but leave the current service status(use -p to include packages)</span><br><span class="line">	--resume-all		(-p)	[Reason]		Resume all service by given reason(use -p to include packages)</span><br><span class="line">	--reload-by-type	[type]		(buffer)	Reload services with specified type</span><br><span class="line">	--restart-by-type	[type]		(buffer)	Restart services with specified type</span><br><span class="line">								Type may be &#123;file_protocol|application&#125;</span><br><span class="line">								Sleep $buffer seconds before exec the command (default is 0)</span><br><span class="line">root@HomeNAS:~#</span><br></pre></td></tr></table></figure>

<p>好的，现在已经知道了如何在群晖下管理服务，那么按照步骤，下一步只需要重启Docker服务使其应用上加速器地址即可。</p>
<p>按照上面的规律可想而知，在群晖下Docker的守护进程服务名称肯定会和在 <code>Ubuntu</code> 下的名称不一样，那我们如何来找到呢？</p>
<p>可以通过 <code>synoservicecfg --list</code> 命令来查看当前群晖系统下所有运行的服务：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@HomeNAS:~# synoservicecfg --list</span><br><span class="line">DSM</span><br><span class="line">apparmor</span><br><span class="line">atalk</span><br><span class="line">avahi</span><br><span class="line">bluetoothd</span><br><span class="line">bonjour</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">pkgctl-Docker</span><br><span class="line">pkgctl-FileStation</span><br><span class="line">pkgctl-LogCenter</span><br><span class="line">pkgctl-PDFViewer</span><br><span class="line">pkgctl-PHP7.0</span><br><span class="line">pkgctl-PhotoStation</span><br><span class="line">...</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>可以看到通过群晖的 “套件中心” 添加的套件程序的服务名称均以 <code>pkgctl-</code> 为前缀来命名。</p>
<p>然后重启群晖的docker服务：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@HomeNAS:~# synoservice --restart pkgctl-Docker</span><br><span class="line">root@HomeNAS:~#</span><br></pre></td></tr></table></figure>

<p>如果没有错误提示，说明docker服务重启正常。</p>
<p>现在我们再次回到 <code>DSM</code> 操作界面中，重新下载我们需要的Docker镜像即可。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/171117Bkae1Hj4E4.png" alt="mark"></p>
<p>可以看到现在后面的容量大小一直在增加，很快我们就看到 “消息通知” 里提示我们镜像下载完成了。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/171117f2dHLjjm9d.png" alt="mark"></p>
<p>后面就是通过镜像来创建容器了，后文继续。</p>
<hr>
<h4 id="相关参考"><a href="#相关参考" class="headerlink" title="相关参考"></a>相关参考</h4><ul>
<li><a href="https://diktiosolutions.eu/en/synology/synology-dsm-6-terminal-service-control-en/" target="_blank" rel="noopener">Synology DSM 6 (terminal) service control</a></li>
<li><a href="https://forum.synology.com/enu/viewtopic.php?t=119012" target="_blank" rel="noopener">restart WebServer bash command</a></li>
<li><a href="https://forum.synology.com/enu/viewtopic.php?t=126938" target="_blank" rel="noopener">Documentation for /var/packages/Docker/etc config files?</a></li>
<li><a href="https://www.docker-cn.com/registry-mirror" target="_blank" rel="noopener">Docker 中国官方镜像加速</a></li>
</ul>
]]></content>
      <categories>
        <category>玩转群晖NAS</category>
      </categories>
      <tags>
        <tag>SynologyNAS</tag>
      </tags>
  </entry>
  <entry>
    <title>玩转群晖NAS--开篇</title>
    <url>/2017/11/17/playing-synology-nas-of-start/</url>
    <content><![CDATA[<p>双十一的时候在天猫上入手了一台群晖的 <code>DS218+</code> NAS主机，也算是很早就打算入手的一台设备。再加上去年双十一的时候在京东购置的两个4T的硬盘，就开始了我的玩转群晖NAS之旅。</p>
<p>对于开篇文章呢，也不想说太多吧，主要就是作为一个 “玩转群晖NAS” 系列的目录来展示，同时也算是时刻的提醒自己还是要多写写笔记的。</p>
<p>对于群晖的“+”系列NAS，最值得把玩的一个功能就是支持的Docker套件了。Docker简直就是一个 “神器”。至于有多么神，尽管看我后面的文章吧！</p>
<h4 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h4><ul>
<li>玩转群晖NAS–开篇</li>
<li>玩转群晖NAS–Docker加速</li>
<li>玩转群晖NAS–下载神器aria2</li>
</ul>
]]></content>
      <categories>
        <category>玩转群晖NAS</category>
      </categories>
      <tags>
        <tag>SynologyNAS</tag>
      </tags>
  </entry>
  <entry>
    <title>通过路由器找回忘记的宽带密码</title>
    <url>/2017/11/13/retrieve-forgotten-broadband-passwords-through-routers/</url>
    <content><![CDATA[<p>可能是因为赶上了双十一的缘故,最近我的宽带网络总是时好时坏的,给宽带客服打了电话,说会找师傅过来给我看看.突然间想起来好像我的宽带自从安装上以后,我就没再改动过,怎么也想不起来宽带的密码了.账号的话可以在路由器中直接看到,而密码却是显示成星号,还不能复制出来.</p>
<p>所以特意上网找了找方法,记录于此.</p>
<h4 id="备份路由器配置"><a href="#备份路由器配置" class="headerlink" title="备份路由器配置"></a>备份路由器配置</h4><p>我的路由器是 <code>TP-Link WR847N</code> 型号的，其他路由器的方法类似。</p>
<p>第一步：在浏览器输入路由器网关地址（一般是192.168.1.1）进入路由器登录界面</p>
<p>第二步：输入路由器账号和密码登录（如果未更改过一般都是admin）到路由器管理界面</p>
<p>第三步：在左菜单栏点击 “系统工具” – “备份和载入配置” </p>
<p>第四步：在右侧对话框中点击 “备份配置文件” 按钮</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/171112bEf4IBJgeA.jpg" alt="mark"></p>
<p>第五步：保存配置文件，名称为 <code>config.bin</code> 。</p>
<h4 id="通过配置文件找回"><a href="#通过配置文件找回" class="headerlink" title="通过配置文件找回"></a>通过配置文件找回</h4><p>第六步：从网站 <a href="http://www.nirsoft.net/utils/router_password_recovery.html#DownloadLinks" target="_blank" rel="noopener">RouterPassView</a> 下载软件RouterPassView。</p>
<p>RouterPassView 是 NirSoft 出品的一款路由密码恢复软件，可以查看绝大多数家用路由的配置文件中保存的密码。</p>
<p>第七步：用 RouterPassView打开备份的配置文件 <code>config.bin</code>, 就能看到当前路由器上已配置的所有账号和密码了。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/1711126jeAcDFc4K.jpg" alt="mark"></p>
<h4 id="附件"><a href="#附件" class="headerlink" title="附件"></a>附件</h4><p>百度网盘链接: <a href="https://pan.baidu.com/s/1qYkKaVq" target="_blank" rel="noopener">Download</a> 密码: hwpx</p>
]]></content>
      <tags>
        <tag>Skill</tag>
      </tags>
  </entry>
  <entry>
    <title>红米Note4X高通版升级MIUI9</title>
    <url>/2017/11/12/RedmiNote4X-HP-version-upgrade-miui9/</url>
    <content><![CDATA[<p>双十一当天在京东上买了一个红米Note4X高通版的手机,收到货后发现系统仍然是MIUI8的稳定版.之前看过MIUI9的介绍视频,官方给出的标语是”快如闪电”,所以就想体验一把.我的方法是采用 <code>卡刷</code> 的方式，不需要BL解锁。</p>
<h4 id="当前系统版本"><a href="#当前系统版本" class="headerlink" title="当前系统版本"></a>当前系统版本</h4><p>在手机的”设置”–”我的设备” 下查看当前的MIUI版本:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MIUI 8.5 稳定版   8.5.6.0(MCFCNED)</span><br></pre></td></tr></table></figure>

<h4 id="先从稳定版升级开发版"><a href="#先从稳定版升级开发版" class="headerlink" title="先从稳定版升级开发版"></a>先从稳定版升级开发版</h4><h5 id="不能直接刷最新版"><a href="#不能直接刷最新版" class="headerlink" title="不能直接刷最新版"></a>不能直接刷最新版</h5><p>因为小米Note4x稳定版8.5的系统是基于Android6.0开发的，而最新的MIUI9是基于Android7.0开发的，Android版本不一致也就导致无法直接卡刷到最新版，会报错。</p>
<p>可行的方法是可以先卡刷MIUI8 <code>7.4.6</code> 的开发版（基于Android6.0），然后再刷MIUI9最新的开发版。</p>
<h5 id="卡刷Android6-0开发版"><a href="#卡刷Android6-0开发版" class="headerlink" title="卡刷Android6.0开发版"></a>卡刷Android6.0开发版</h5><p>下载 <code>7.4.6</code> 开发版卡刷包,然后拷贝到手机的内置存储中。</p>
<p>在手机端选择 <code>设置</code> – <code>我的设备</code> – <code>MIUI版本</code> – 进入 “系统升级” 界面</p>
<p>点击 <code>右上角三点</code> ，选择 <code>手动选择安装包</code></p>
<p>选择刚刚下载的卡刷包，确定。等待其解密并自动升级。</p>
<p>升级完成后，在 <code>设置</code> – <code>我的设备</code> – <code>MIUI版本</code> – 进入 “系统升级” 界面</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/171113IKDBk7kbEa.png" alt="mark"></p>
<p>这时如果点击 “检查更新” 的话，收到的应该是MIUI8的最新开发版的更新包,所以这里不点击“立即更新”。(MIUI论坛中官方给出的说法是现在MIUI8开发版可以直接自动检查升级到MIUI9的最新开发版了,不知道我这里为什么不行?如果你的可以,那就直接升级即可,否则继续下面的操作)</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/171113lL6DH0cfdC.png" alt="mark"></p>
<h5 id="卡刷MIUI9最新开发版"><a href="#卡刷MIUI9最新开发版" class="headerlink" title="卡刷MIUI9最新开发版"></a>卡刷MIUI9最新开发版</h5><p>从网址 <a href="http://www.miui.com/download-326.html" target="_blank" rel="noopener">http://www.miui.com/download-326.html</a> 下载 <code>红米Note4X(高通平台)</code> 的最新开发版的完整卡刷包，然后拷贝到手机中，依照上一步的操作方法通过 <code>手动更新</code> 的方式来升级。</p>
<p>我这里下载到的是当前的最新版本 <code>MIUI9开发版 7.11.9</code> 的版本 : <code>miui_HMNote4X_7.11.9_71db0b04ec_7.0.zip</code> 。</p>
<p>等待其解密安装包并自动更新完成即可。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/171113Ck2ElHG14d.png" alt="mark"></p>
<hr>
<p>上面的整个升级过程要保证手机电量充足,按照步骤操作即可,非常适合小白升级.</p>
<hr>
<h4 id="附件"><a href="#附件" class="headerlink" title="附件"></a>附件</h4><p>百度网盘 <a href="https://pan.baidu.com/s/1c2GqHVy" target="_blank" rel="noopener">Download</a>  密码: d2v7</p>
<ol>
<li>MIUI8(Android6.0)_7.4.6.zip</li>
<li>MIUI9(Android7.0)_7.11.9.zip</li>
</ol>
]]></content>
      <tags>
        <tag>XiaoMI</tag>
        <tag>Skill</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客添加搜索功能</title>
    <url>/2017/10/27/add-search-function-to-hexo-blog/</url>
    <content><![CDATA[<p>渐渐的随着hexo博客中文章越来越多了之后,平时想要查找一篇文章时,一般都是记得部分标题内容或者某些关键词,而在”归档”下通过标题一页一页的找又非常的麻烦.所以考虑为博客增加搜索功能.</p>
<p>从Next主题网站上我们可以搜索多款搜索插件 <a href="http://theme-next.iissnan.com/third-party-services.html#search-system" target="_blank" rel="noopener">第三方服务集成 – Next文档</a>,个人感觉 “Local Search” 和 “Algolia” 这两款搜索插件比较和我的心意.</p>
<p>下面简要的介绍为hexo博客添加搜索插件的过程.</p>
<h4 id="升级Next主题版本"><a href="#升级Next主题版本" class="headerlink" title="升级Next主题版本"></a>升级Next主题版本</h4><p>我的hexo主题安装的是 <code>Next</code> 主题,当前版本为 <code>v5.0.1</code> .最新版本为 <code>5.1.3</code>.</p>
<p>因为我的hexo主题版本差距太大,而且我在 <code>next</code> 主题目录下的 <code>.git</code> 目录我已经删除了,所以我采用完全更新的方式.</p>
<p>先备份本地的 <code>hexo</code> 主题目录 <code>your-hexo-site/themes/next</code> ,其实只需要备份 <code>_config.yml</code> 一个文件即可,为了保险这里我将整个目录都备份一下.</p>
<p>另外还要注意如果你之前添加了自定义头像及打赏功能等所需图片,添加的图片是在 <code>/themes/next/source/images/</code> 目录下的,也要记得做好备份.</p>
<hr>
<p>如果你本地的主题 <code>next</code> 目录下的 <code>.git</code> 目录没有删除,你可以直接通过 <code>git pull</code> 命令来更新:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cd themes&#x2F;next</span><br><span class="line">$ git pull</span><br></pre></td></tr></table></figure>

<h5 id="完全更新"><a href="#完全更新" class="headerlink" title="完全更新"></a>完全更新</h5><p>先删除本地现在的 <code>next</code> 主题目录:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cd &lt;your-hexo-site&gt;</span><br><span class="line">$ rm -rf .&#x2F;themes&#x2F;next</span><br></pre></td></tr></table></figure>

<p>从github下载 hexo 主题文件最新版本:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cd &lt;your-hexo-site&gt;</span><br><span class="line">$ git clone https:&#x2F;&#x2F;github.com&#x2F;iissnan&#x2F;hexo-theme-next themes&#x2F;next</span><br></pre></td></tr></table></figure>

<p>比照新的主题配置文件 <code>_config.yml</code> ,将旧的主题文件中的内容添加到新文件中.</p>
<p>我这里更改的地方有:</p>
<ul>
<li><code>menu</code></li>
<li><code>scheme</code></li>
<li><code>social</code></li>
<li><code>sidebar</code></li>
<li><code>highlight_theme</code></li>
<li><code>tencent_analytics</code></li>
<li><code>打赏功能 reward_comment wechatpay alipay</code></li>
<li><code>站点建立时间 since</code></li>
</ul>
<p>更改后,清除缓存,然后再查看:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line"></span><br><span class="line">$ hexo s -g</span><br><span class="line">INFO  Start processing</span><br><span class="line">INFO  Hexo is running at http:&#x2F;&#x2F;localhost:4000&#x2F;. Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure>

<p>打开浏览器,查看页面中是否有错误并修改.</p>
<hr>
<h4 id="LocalSearch搜索"><a href="#LocalSearch搜索" class="headerlink" title="LocalSearch搜索"></a>LocalSearch搜索</h4><p>安装 <code>hexo-generator-searchdb</code>，在站点的根目录下执行以下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>

<p>编辑 <code>站点配置文件</code>，新增以下内容到任意位置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br></pre></td></tr></table></figure>

<p>编辑 <code>主题配置文件</code>，启用本地搜索功能：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Local search</span><br><span class="line">local_search:</span><br><span class="line">  enable: true</span><br></pre></td></tr></table></figure>

<p>然后 重新生成 查看:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line"></span><br><span class="line">$ hexo s -g</span><br><span class="line">INFO  Start processing</span><br><span class="line">INFO  Hexo is running at http:&#x2F;&#x2F;localhost:4000&#x2F;. Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure>

<p>这样,搜索功能就添加上了.</p>
<hr>
<h4 id="Algolia搜索"><a href="#Algolia搜索" class="headerlink" title="Algolia搜索"></a>Algolia搜索</h4><p>详情可参考官方教程,这里不再详述. </p>
<ul>
<li><a href="http://theme-next.iissnan.com/third-party-services.html#algolia-search" target="_blank" rel="noopener">Algolia – Next文档</a></li>
</ul>
<hr>
<h4 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h4><ul>
<li><a href="http://theme-next.iissnan.com/third-party-services.html#search-system" target="_blank" rel="noopener">搜索服务 – Next文档</a></li>
<li><a href="https://github.com/PaicHyperionDev/hexo-generator-search" target="_blank" rel="noopener">hexo-generator-search</a></li>
<li><a href="https://github.com/LouisBarranqueiro/hexo-algoliasearch" target="_blank" rel="noopener">hexo-algoliasearch</a></li>
<li><a href="https://jobbym.github.io/2017/01/16/Hexo%E9%9B%86%E6%88%90Algolia%E6%90%9C%E7%B4%A2%E6%8F%92%E4%BB%B6/" target="_blank" rel="noopener">Hexo集成Algolia搜索插件</a></li>
</ul>
]]></content>
      <categories>
        <category>Hexo博客搭建</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Search</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac系统下配置Hexo博客运行环境遇到的问题</title>
    <url>/2017/10/27/problems-for-configuring-hexo-blog-in-mac/</url>
    <content><![CDATA[<p>今天在Mac下更新hexo博客时,遇到了一些安装 Node.js 和安装 hexo 相关的小问题,特此记录下来.</p>
<h4 id="Mac下配置Node-js环境"><a href="#Mac下配置Node-js环境" class="headerlink" title="Mac下配置Node.js环境"></a>Mac下配置Node.js环境</h4><p>安装 node.js 有多种方法：使用 <code>homebrew</code> 安装或者直接下载 <code>安装包</code>。 </p>
<h5 id="官网下载安装包"><a href="#官网下载安装包" class="headerlink" title="官网下载安装包"></a>官网下载安装包</h5><p>从node.js官网 <a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js</a> 下载对应系统的安装包,打开会提示安装位置:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">This package will install:</span><br><span class="line">  • Node.js v8.8.1 to &#x2F;usr&#x2F;local&#x2F;bin&#x2F;node</span><br><span class="line">  • npm v5.4.2 to &#x2F;usr&#x2F;local&#x2F;bin&#x2F;npm</span><br></pre></td></tr></table></figure>

<p>按照步骤安装即可.</p>
<h5 id="homebrew安装"><a href="#homebrew安装" class="headerlink" title="homebrew安装"></a>homebrew安装</h5><p>通过 <code>homebrew</code> 安装,直接执行如下命令:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ brew install node</span><br></pre></td></tr></table></figure>

<h5 id="检测安装是否成功"><a href="#检测安装是否成功" class="headerlink" title="检测安装是否成功"></a>检测安装是否成功</h5><p>终端输入 <code>-v</code> , 成功则显示版本号:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ node -v</span><br><span class="line">v8.8.1</span><br><span class="line">$ npm -v</span><br><span class="line">5.4.2</span><br><span class="line">$</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="Mac系统下Finder显示隐藏文件"><a href="#Mac系统下Finder显示隐藏文件" class="headerlink" title="Mac系统下Finder显示隐藏文件"></a>Mac系统下Finder显示隐藏文件</h4><p>涉及到一些以 <code>.</code> 开头的文件或目录(如.git目录)或者隐藏文件,默认在Finder下是看不到的.</p>
<p>我们可以通过命令 <code>Command+Shift+.</code> 来在Finder中快速的切换显示出隐藏的文件或文件夹,再按一次,恢复隐藏.</p>
<hr>
<h4 id="更换Node-js镜像源"><a href="#更换Node-js镜像源" class="headerlink" title="更换Node.js镜像源"></a>更换Node.js镜像源</h4><p>由于npm的官方镜像源在国外,而由于国内”众所周知的”的网络原因,访问默认的官方镜像源常常会出问题.我们可以更改为国内的镜像源来加速软件的安装.</p>
<h5 id="淘宝npm镜像"><a href="#淘宝npm镜像" class="headerlink" title="淘宝npm镜像"></a>淘宝npm镜像</h5><p>目前国内推荐的是淘宝的npm镜像:</p>
<ul>
<li>搜索地址：<a href="ttp://npm.taobao.org/">http://npm.taobao.org/</a></li>
<li>registry地址：<a href="http://registry.npm.taobao.org/" target="_blank" rel="noopener">http://registry.npm.taobao.org/</a></li>
</ul>
<h5 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h5><h6 id="临时使用"><a href="#临时使用" class="headerlink" title="临时使用"></a>临时使用</h6><p>以下载 <code>express</code> 软件为例:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm --registry https:&#x2F;&#x2F;registry.npm.taobao.org install express</span><br></pre></td></tr></table></figure>

<h6 id="持久使用"><a href="#持久使用" class="headerlink" title="持久使用"></a>持久使用</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm config set registry https:&#x2F;&#x2F;registry.npm.taobao.org</span><br></pre></td></tr></table></figure>

<p>配置后可通过下面方式来查看是否设置成功:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm config get registry</span><br></pre></td></tr></table></figure>

<p>我的操作记录:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm config get registry</span><br><span class="line">https:&#x2F;&#x2F;registry.npmjs.org&#x2F;</span><br><span class="line">$ npm config set registry https:&#x2F;&#x2F;registry.npm.taobao.org</span><br><span class="line">$ npm config get registry</span><br><span class="line">https:&#x2F;&#x2F;registry.npm.taobao.org&#x2F;</span><br><span class="line">$</span><br></pre></td></tr></table></figure>

<p><strong>提醒</strong> : 我在实际操作时发现淘宝的npm镜像源有时候也会请求失败,然后又切换回了官方源(<code>npm config set registry https://registry.npmjs.org/</code>)发现能够操作成功了.所以是否更换镜像源还要根据实际情况来定.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm config get registry</span><br><span class="line">https:&#x2F;&#x2F;registry.npm.taobao.org&#x2F;</span><br><span class="line">$ npm install</span><br><span class="line">npm ERR! code ENOTFOUND</span><br><span class="line">npm ERR! errno ENOTFOUND</span><br><span class="line">npm ERR! network request to https:&#x2F;&#x2F;registry.npm.taobao.org&#x2F;hexo-generator-category failed, reason: getaddrinfo ENOTFOUND registry.npm.taobao.org registry.npm.taobao.org:443</span><br><span class="line">npm ERR! network This is a problem related to network connectivity.</span><br><span class="line">npm ERR! network In most cases you are behind a proxy or have bad network settings.</span><br><span class="line">npm ERR! network</span><br><span class="line">npm ERR! network If you are behind a proxy, please make sure that the</span><br><span class="line">npm ERR! network &#39;proxy&#39; config is set properly.  See: &#39;npm help config&#39;</span><br><span class="line"></span><br><span class="line">npm ERR! A complete log of this run can be found in:</span><br><span class="line">npm ERR!     &#x2F;Users&#x2F;xxx&#x2F;.npm&#x2F;_logs&#x2F;2017-10-26T14_59_23_770Z-debug.log</span><br><span class="line">$ </span><br><span class="line">$ </span><br><span class="line">$ npm config set registry https:&#x2F;&#x2F;registry.npmjs.org&#x2F;</span><br><span class="line">$ npm install</span><br><span class="line">npm WARN deprecated swig@1.4.2: This package is no longer maintained</span><br><span class="line"></span><br><span class="line">&gt; dtrace-provider@0.8.5 install &#x2F;Users&#x2F;xxx&#x2F;Project17&#x2F;Leafney.github.io&#x2F;node_modules&#x2F;dtrace-provider</span><br><span class="line">&gt; node scripts&#x2F;install.js</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt; fsevents@1.1.2 install &#x2F;Users&#x2F;xxx&#x2F;Project17&#x2F;Leafney.github.io&#x2F;node_modules&#x2F;fsevents</span><br><span class="line">&gt; node install</span><br><span class="line"></span><br><span class="line">[fsevents] Success: &quot;&#x2F;Users&#x2F;xxx&#x2F;Project17&#x2F;Leafney.github.io&#x2F;node_modules&#x2F;fsevents&#x2F;lib&#x2F;binding&#x2F;Release&#x2F;node-v57-darwin-x64&#x2F;fse.node&quot; already installed</span><br><span class="line">Pass --update-binary to reinstall or --build-from-source to recompile</span><br><span class="line"></span><br><span class="line">&gt; hexo-util@0.6.1 postinstall &#x2F;Users&#x2F;xxx&#x2F;Project17&#x2F;Leafney.github.io&#x2F;node_modules&#x2F;hexo-util</span><br><span class="line">&gt; npm run build:highlight</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt; hexo-util@0.6.1 build:highlight &#x2F;Users&#x2F;xxx&#x2F;Project17&#x2F;Leafney.github.io&#x2F;node_modules&#x2F;hexo-util</span><br><span class="line">&gt; node scripts&#x2F;build_highlight_alias.js &gt; highlight_alias.json</span><br><span class="line"></span><br><span class="line">npm notice created a lockfile as package-lock.json. You should commit this file.</span><br><span class="line">added 430 packages in 119.035s</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="Mac-install-hexo-use-sudo-but-sitll-permission-denied"><a href="#Mac-install-hexo-use-sudo-but-sitll-permission-denied" class="headerlink" title="Mac install hexo use sudo but sitll permission denied"></a>Mac install hexo use sudo but sitll permission denied</h4><h5 id="安装报错"><a href="#安装报错" class="headerlink" title="安装报错"></a>安装报错</h5><p>参照hexo官网 <a href="https://hexo.io/zh-cn/index.html" target="_blank" rel="noopener">Hexo</a> 安装hexo时,使用命令 <code>npm install hexo-cli -g</code> 却报没有权限:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-cli -g</span><br><span class="line">npm WARN checkPermissions Missing write access to &#x2F;usr&#x2F;local&#x2F;lib&#x2F;node_modules</span><br><span class="line">npm ERR! path &#x2F;usr&#x2F;local&#x2F;lib&#x2F;node_modules</span><br><span class="line">npm ERR! code EACCES</span><br><span class="line">npm ERR! errno -13</span><br><span class="line">npm ERR! syscall access</span><br><span class="line">npm ERR! Error: EACCES: permission denied, access &#39;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;node_modules&#39;</span><br><span class="line">npm ERR!  &#123; Error: EACCES: permission denied, access &#39;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;node_modules&#39;</span><br><span class="line">npm ERR!   stack: &#39;Error: EACCES: permission denied, access \&#39;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;node_modules\&#39;&#39;,</span><br><span class="line">npm ERR!   errno: -13,</span><br><span class="line">npm ERR!   code: &#39;EACCES&#39;,</span><br><span class="line">npm ERR!   syscall: &#39;access&#39;,</span><br><span class="line">npm ERR!   path: &#39;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;node_modules&#39; &#125;</span><br><span class="line">npm ERR!</span><br><span class="line">npm ERR! Please try running this command again as root&#x2F;Administrator.</span><br><span class="line"></span><br><span class="line">npm ERR! A complete log of this run can be found in:</span><br><span class="line">npm ERR!     &#x2F;Users&#x2F;xxx&#x2F;.npm&#x2F;_logs&#x2F;2017-10-27T01_21_01_871Z-debug.log</span><br></pre></td></tr></table></figure>

<p>然后我换用管理员权限,加上 <code>sudo</code> ,执行如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo npm install hexo-cli -g</span><br><span class="line">Password:</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;bin&#x2F;hexo -&gt; &#x2F;usr&#x2F;local&#x2F;lib&#x2F;node_modules&#x2F;hexo-cli&#x2F;bin&#x2F;hexo</span><br><span class="line"></span><br><span class="line">&gt; dtrace-provider@0.8.5 install &#x2F;usr&#x2F;local&#x2F;lib&#x2F;node_modules&#x2F;hexo-cli&#x2F;node_modules&#x2F;dtrace-provider</span><br><span class="line">&gt; node scripts&#x2F;install.js</span><br><span class="line"></span><br><span class="line">fs.js:768</span><br><span class="line">  return binding.rename(pathModule._makeLong(oldPath),</span><br><span class="line">                 ^</span><br><span class="line"></span><br><span class="line">Error: EACCES: permission denied, rename &#39;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;node_modules&#x2F;hexo-cli&#x2F;node_modules&#x2F;dtrace-provider&#x2F;compile.py&#39; -&gt; &#39;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;node_modules&#x2F;hexo-cli&#x2F;node_modules&#x2F;dtrace-provider&#x2F;binding.gyp&#39;</span><br><span class="line">    at Object.fs.renameSync (fs.js:768:18)</span><br><span class="line">    at Object.&lt;anonymous&gt; (&#x2F;usr&#x2F;local&#x2F;lib&#x2F;node_modules&#x2F;hexo-cli&#x2F;node_modules&#x2F;dtrace-provider&#x2F;scripts&#x2F;install.js:14:4)</span><br><span class="line">    at Module._compile (module.js:612:30)</span><br><span class="line">    at Object.Module._extensions..js (module.js:623:10)</span><br><span class="line">    at Module.load (module.js:531:32)</span><br><span class="line">    at tryModuleLoad (module.js:494:12)</span><br><span class="line">    at Function.Module._load (module.js:486:3)</span><br><span class="line">    at Function.Module.runMain (module.js:653:10)</span><br><span class="line">    at startup (bootstrap_node.js:187:16)</span><br><span class="line">    at bootstrap_node.js:608:3</span><br><span class="line"></span><br><span class="line">&gt; fsevents@1.1.2 install &#x2F;usr&#x2F;local&#x2F;lib&#x2F;node_modules&#x2F;hexo-cli&#x2F;node_modules&#x2F;fsevents</span><br><span class="line">&gt; node install</span><br><span class="line"></span><br><span class="line">[fsevents] Success: &quot;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;node_modules&#x2F;hexo-cli&#x2F;node_modules&#x2F;fsevents&#x2F;lib&#x2F;binding&#x2F;Release&#x2F;node-v57-darwin-x64&#x2F;fse.node&quot; already installed</span><br><span class="line">Pass --update-binary to reinstall or --build-from-source to recompile</span><br><span class="line"></span><br><span class="line">&gt; hexo-util@0.6.1 postinstall &#x2F;usr&#x2F;local&#x2F;lib&#x2F;node_modules&#x2F;hexo-cli&#x2F;node_modules&#x2F;hexo-util</span><br><span class="line">&gt; npm run build:highlight</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt; hexo-util@0.6.1 build:highlight &#x2F;usr&#x2F;local&#x2F;lib&#x2F;node_modules&#x2F;hexo-cli&#x2F;node_modules&#x2F;hexo-util</span><br><span class="line">&gt; node scripts&#x2F;build_highlight_alias.js &gt; highlight_alias.json</span><br><span class="line"></span><br><span class="line">sh: highlight_alias.json: Permission denied</span><br><span class="line">npm ERR! code ELIFECYCLE</span><br><span class="line">npm ERR! errno 1</span><br><span class="line">npm ERR! hexo-util@0.6.1 build:highlight: &#96;node scripts&#x2F;build_highlight_alias.js &gt; highlight_alias.json&#96;</span><br><span class="line">npm ERR! Exit status 1</span><br><span class="line">npm ERR!</span><br><span class="line">npm ERR! Failed at the hexo-util@0.6.1 build:highlight script.</span><br><span class="line">npm ERR! This is probably not a problem with npm. There is likely additional logging output above.</span><br><span class="line"></span><br><span class="line">┌────────────────────────────────────────────────────────┐</span><br><span class="line">│                npm update check failed                 │</span><br><span class="line">│          Try running with sudo or get access           │</span><br><span class="line">│          to the local update config store via          │</span><br><span class="line">│ sudo chown -R $USER:$(id -gn $USER) &#x2F;Users&#x2F;xxx&#x2F;.config │</span><br><span class="line">└────────────────────────────────────────────────────────┘</span><br><span class="line">npm WARN optional SKIPPING OPTIONAL DEPENDENCY: dtrace-provider@0.8.5 (node_modules&#x2F;hexo-cli&#x2F;node_modules&#x2F;dtrace-provider):</span><br><span class="line">npm WARN optional SKIPPING OPTIONAL DEPENDENCY: dtrace-provider@0.8.5 install: &#96;node scripts&#x2F;install.js&#96;</span><br><span class="line">npm WARN optional SKIPPING OPTIONAL DEPENDENCY: Exit status 1</span><br><span class="line"></span><br><span class="line">npm ERR! code ELIFECYCLE</span><br><span class="line">npm ERR! errno 1</span><br><span class="line">npm ERR! hexo-util@0.6.1 postinstall: &#96;npm run build:highlight&#96;</span><br><span class="line">npm ERR! Exit status 1</span><br><span class="line">npm ERR!</span><br><span class="line">npm ERR! Failed at the hexo-util@0.6.1 postinstall script.</span><br><span class="line">npm ERR! This is probably not a problem with npm. There is likely additional logging output above.</span><br><span class="line"></span><br><span class="line">npm ERR! A complete log of this run can be found in:</span><br><span class="line">npm ERR!     &#x2F;Users&#x2F;xxx&#x2F;.npm&#x2F;_logs&#x2F;2017-10-27T02_56_29_887Z-debug.log</span><br></pre></td></tr></table></figure>

<h5 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h5><p>第一步,赋予目录权限:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo chown -R &#96;whoami&#96; &#x2F;usr&#x2F;local&#x2F;lib&#x2F;node_modules</span><br></pre></td></tr></table></figure>

<p>第二步,安装hexo:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-cli -g</span><br></pre></td></tr></table></figure>

<p><strong>需要注意的点</strong>: 在安装hexo时,不要用 <code>sudo</code> 命令.</p>
<hr>
<h4 id="相关参考"><a href="#相关参考" class="headerlink" title="相关参考"></a>相关参考</h4><ul>
<li><a href="http://riny.net/2014/cnpm/" target="_blank" rel="noopener">国内优秀npm镜像推荐及使用</a></li>
<li><a href="https://github.com/hexojs/hexo/issues/2785" target="_blank" rel="noopener">Mac install hexo use sudo but sitll permission denied</a></li>
<li><a href="https://github.com/npm/npm/issues/8165" target="_blank" rel="noopener"><code>npm update -g</code> fails and causes <code>/usr/local/lib/node_modules</code> to be deleted</a></li>
</ul>
]]></content>
      <categories>
        <category>Hexo博客搭建</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker-Ubuntu-Gogs数据库及初始化配置</title>
    <url>/2017/09/07/docker-ubuntu-gogs-initialization/</url>
    <content><![CDATA[<p>Ubuntu-Gogs 首次运行安装程序配置及多数据库配置方法整理。</p>
<h4 id="app-ini中数据库配置说明"><a href="#app-ini中数据库配置说明" class="headerlink" title="app.ini中数据库配置说明"></a>app.ini中数据库配置说明</h4><table>
<thead>
<tr>
<th>名称</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>DB_TYPE</td>
<td>数据库类型，可以是 mysql、postgres、mssql 或 sqlite3</td>
</tr>
<tr>
<td>HOST</td>
<td>数据库主机地址与端口</td>
</tr>
<tr>
<td>NAME</td>
<td>数据库名称</td>
</tr>
<tr>
<td>USER</td>
<td>数据库用户名</td>
</tr>
<tr>
<td>PASSWD</td>
<td>数据库用户密码</td>
</tr>
<tr>
<td>SSL_MODE</td>
<td>仅限 PostgreSQL 使用</td>
</tr>
<tr>
<td>PATH</td>
<td>仅限 SQLite3 使用，数据库文件路径</td>
</tr>
</tbody></table>
<hr>
<h4 id="初次启动时数据库设置"><a href="#初次启动时数据库设置" class="headerlink" title="初次启动时数据库设置"></a>初次启动时数据库设置</h4><p>Gogs 要求安装 MySQL、PostgreSQL、SQLite3、MSSQL 或 TiDB。</p>
<h5 id="SQLite3"><a href="#SQLite3" class="headerlink" title="SQLite3"></a>SQLite3</h5><h6 id="数据库设置"><a href="#数据库设置" class="headerlink" title="数据库设置"></a>数据库设置</h6><ul>
<li>数据库类型 ：<code>SQLite3</code></li>
<li>数据库文件路径 ：可使用绝对路径：<code>/app/gogs/data/gogs.db</code> 或者 相对路径：<code>data/gogs.db</code> （推荐使用绝对路径）</li>
</ul>
<h6 id="app-ini中配置结果"><a href="#app-ini中配置结果" class="headerlink" title="app.ini中配置结果"></a>app.ini中配置结果</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[database]</span><br><span class="line">DB_TYPE  &#x3D; sqlite3</span><br><span class="line">HOST     &#x3D; 127.0.0.1:3306</span><br><span class="line">NAME     &#x3D; gogs</span><br><span class="line">USER     &#x3D; root</span><br><span class="line">PASSWD   &#x3D; </span><br><span class="line">SSL_MODE &#x3D; disable</span><br><span class="line">PATH     &#x3D; &#x2F;app&#x2F;gogs&#x2F;data&#x2F;gogs.db</span><br></pre></td></tr></table></figure>

<h6 id="示例容器"><a href="#示例容器" class="headerlink" title="示例容器"></a>示例容器</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ docker run --name gogs1 -d -p 10080:3000 -p 10022:22 -v &#x2F;home&#x2F;tiger&#x2F;gogsfile:&#x2F;app leafney&#x2F;ubuntu-gogs</span><br></pre></td></tr></table></figure>

<hr>
<h5 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h5><h6 id="数据库设置-1"><a href="#数据库设置-1" class="headerlink" title="数据库设置"></a>数据库设置</h6><ul>
<li>数据库类型 ：<code>MySQL</code></li>
<li>数据库主机 ：<code>127.0.0.1:3306</code></li>
<li>数据库用户 ：<code>root</code></li>
<li>数据库用户密码 : <code>*******</code></li>
<li>数据库名称 ：<code>gogs</code></li>
</ul>
<h6 id="app-ini中配置结果-1"><a href="#app-ini中配置结果-1" class="headerlink" title="app.ini中配置结果"></a>app.ini中配置结果</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[database]</span><br><span class="line">DB_TYPE  &#x3D; mysql</span><br><span class="line">HOST     &#x3D; 127.0.0.1:3306</span><br><span class="line">NAME     &#x3D; gogs</span><br><span class="line">USER     &#x3D; root</span><br><span class="line">PASSWD   &#x3D; &#96;123456&#96;</span><br><span class="line">SSL_MODE &#x3D; disable</span><br><span class="line">PATH     &#x3D; data&#x2F;gogs.db</span><br></pre></td></tr></table></figure>

<h6 id="示例容器-1"><a href="#示例容器-1" class="headerlink" title="示例容器"></a>示例容器</h6><p><strong>第一种方法：创建mysql容器和gogs容器，让gogs容器通过 <code>--link</code> 直接链接mysql容器。</strong></p>
<p>创建mysql容器，并设置root账户密码：<code>123456</code>；新用户：<code>gogs123</code>；密码：<code>gogs123</code>；新用户数据库：<code>gogs</code> ：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ docker run --name mysqlgogs -v &#x2F;home&#x2F;tiger&#x2F;mysqldb&#x2F;:&#x2F;var&#x2F;lib&#x2F;mysql -v &#x2F;home&#x2F;tiger&#x2F;mysqldbase&#x2F;:&#x2F;home&#x2F;mysqldbase&#x2F; -d -e MYSQL_ROOT_PWD&#x3D;&quot;123456&quot; -e MYSQL_USER&#x3D;gogs123 -e MYSQL_USER_PWD&#x3D;&quot;gogs123&quot; -e MYSQL_USER_DB&#x3D;&quot;gogs&quot; leafney&#x2F;docker-alpine-mysql</span><br></pre></td></tr></table></figure>

<p>创建gogs容器并链接：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ docker run --name gogs2 -d -p 10080:3000 -p 10022:22 --link mysqlgogs:mydb -v &#x2F;home&#x2F;tiger&#x2F;gogsfile:&#x2F;app leafney&#x2F;ubuntu-gogs</span><br></pre></td></tr></table></figure>

<p>相对应的配置信息如下：</p>
<ul>
<li>数据库类型 ：<code>MySQL</code></li>
<li>数据库主机 ：<code>mydb:3306</code></li>
<li>数据库用户 ：<code>gogs123</code></li>
<li>数据库用户密码 : <code>*******</code></li>
<li>数据库名称 ：<code>gogs</code></li>
</ul>
<p><strong>第二种方法：让gogs容器链接已有mysql地址。</strong></p>
<p>在创建gogs容器之前，先创建mysql数据库：</p>
<p>在下载的 <code>gogs</code> 压缩包中，我们可以找到一个名为 <code>mysql.sql</code> 的文件，是用来初始化mysql数据库的，内容如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DROP DATABASE IF EXISTS gogs;</span><br><span class="line">CREATE DATABASE IF NOT EXISTS gogs CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;</span><br></pre></td></tr></table></figure>

<p>使用 <code>root</code> 账户登录，然后执行 <code>mysql -u root -p &lt; mysql.sql</code> （需要输入密码）即可初始化好数据库。</p>
<p>还要注意：使用 <code>MySQL</code> 数据库时，必须要保证mysql的存储引擎为 <code>INNODB</code> 且 编码格式为 <code>utf8_general_ci</code> 。可以使用如下语句来设置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">use gogs;</span><br><span class="line">set global storage_engine&#x3D;INNODB;</span><br></pre></td></tr></table></figure>

<hr>
<p>或者使用如下命令创建数据库 <code>gogs</code> 及新用户 <code>gogsUser</code>, 并将数据库 <code>gogs</code> 的所有权限都赋予该用户,密码 <code>123456</code>:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql -u root -p</span><br><span class="line">mysql&gt; SET GLOBAL storage_engine &#x3D; &#39;InnoDB&#39;;</span><br><span class="line">mysql&gt; CREATE DATABASE gogs CHARACTER SET utf8 COLLATE utf8_bin;</span><br><span class="line">mysql&gt; GRANT ALL PRIVILEGES ON gogs.* TO &#39;gogsUser&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;123456&#39;;</span><br><span class="line">mysql&gt; FLUSH PRIVILEGES;</span><br><span class="line">mysql&gt; QUIT；</span><br></pre></td></tr></table></figure>


<ul>
<li><a href="https://blog.mynook.info/post/host-your-own-git-server-using-gogs/" target="_blank" rel="noopener">使用 Gogs 搭建自己的 Git 服务器 - My Nook</a></li>
</ul>
<hr>
<h5 id="PostgreSQL"><a href="#PostgreSQL" class="headerlink" title="PostgreSQL"></a>PostgreSQL</h5><h6 id="数据库设置-2"><a href="#数据库设置-2" class="headerlink" title="数据库设置"></a>数据库设置</h6><ul>
<li>数据库类型 ：<code>PostgreSQL</code></li>
<li>数据库主机 ：<code>127.0.0.1:5432</code></li>
<li>数据库用户 ：<code>gogs</code></li>
<li>数据库用户密码 : <code>*******</code></li>
<li>数据库名称 ：<code>gogs</code></li>
<li>SSL 模式 : <code>Disable</code>  (可选：Disable  Require  Verify Full)</li>
</ul>
<h6 id="app-ini中配置结果-2"><a href="#app-ini中配置结果-2" class="headerlink" title="app.ini中配置结果"></a>app.ini中配置结果</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[database]</span><br><span class="line">DB_TYPE  &#x3D; postgres</span><br><span class="line">HOST     &#x3D; 127.0.0.1:5432</span><br><span class="line">NAME     &#x3D; gogs</span><br><span class="line">USER     &#x3D; gogs</span><br><span class="line">PASSWD   &#x3D; gogs</span><br><span class="line">SSL_MODE &#x3D; disable</span><br><span class="line">PATH     &#x3D; data&#x2F;gogs.db</span><br></pre></td></tr></table></figure>

<h6 id="示例容器-2"><a href="#示例容器-2" class="headerlink" title="示例容器"></a>示例容器</h6><p><strong>第一种方法：创建postgersql容器和gogs容器</strong></p>
<p>创建postgresql容器，这里使用容器 <code>docker pull ananthhh/postgress</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run --name postgress -p 5432:5432 -e POSTGRES_PASSWORD&#x3D;gogs -e POSTGRES_USER&#x3D;gogs -d ananthhh&#x2F;postgress</span><br></pre></td></tr></table></figure>

<p>该postgresql容器创建的用户为：<code>gogs</code>；用户密码：<code>gogs</code>; 数据库：<code>gogs</code> 。</p>
<p>创建gogs容器并通过 <code>--link</code> 参数链接：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ docker run --name gogs3 -d -p 10080:3000 -p 10022:22 -v &#x2F;home&#x2F;tiger&#x2F;gogsfile:&#x2F;app --link postgress:psqldb leafney&#x2F;ubuntu-gogs</span><br></pre></td></tr></table></figure>

<p>相对应的配置信息如下：</p>
<ul>
<li>数据库类型 ：<code>PostgreSQL</code></li>
<li>数据库主机 ：<code>psqldb:5432</code></li>
<li>数据库用户 ：<code>gogs</code></li>
<li>数据库用户密码 : <code>*******</code></li>
<li>数据库名称 ：<code>gogs</code></li>
<li>SSL 模式 : <code>Disable</code> </li>
</ul>
<p><strong>第二种方法：让gogs容器链接已有PostgreSQL地址。</strong></p>
<p>使用指定数据库账户登录PostgreSQL，先创建 <code>gogs</code> 数据库，链接成功后会自动创建所需表：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; CREATE DATABASE gogs</span><br></pre></td></tr></table></figure>


<hr>
<h5 id="MSSql"><a href="#MSSql" class="headerlink" title="MSSql"></a>MSSql</h5><h6 id="数据库设置-3"><a href="#数据库设置-3" class="headerlink" title="数据库设置"></a>数据库设置</h6><ul>
<li>数据库类型 ：<code>MSSQL</code></li>
<li>数据库主机 ：<code>127.0.0.1, 1433</code></li>
<li>数据库用户 ：<code>sa</code></li>
<li>数据库用户密码 : <code>*******</code></li>
<li>数据库名称 ：<code>gogs</code></li>
</ul>
<h6 id="app-ini中配置结果-3"><a href="#app-ini中配置结果-3" class="headerlink" title="app.ini中配置结果"></a>app.ini中配置结果</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[database]</span><br><span class="line">DB_TYPE  &#x3D; mssql</span><br><span class="line">HOST     &#x3D; 127.0.0.1, 1433</span><br><span class="line">NAME     &#x3D; gogs</span><br><span class="line">USER     &#x3D; sa</span><br><span class="line">PASSWD   &#x3D; 123456</span><br><span class="line">SSL_MODE &#x3D; disable</span><br><span class="line">PATH     &#x3D; data&#x2F;gogs.db</span><br></pre></td></tr></table></figure>

<h6 id="示例容器-3"><a href="#示例容器-3" class="headerlink" title="示例容器"></a>示例容器</h6><p>创建gogs容器链接已有MSSql地址：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run --name gogs4 -d -p 10080:3000 -p 10022:22 -v &#x2F;home&#x2F;tiger&#x2F;gogsfile:&#x2F;app leafney&#x2F;ubuntu-gogs</span><br></pre></td></tr></table></figure>

<p>使用指定数据库账户登录MSSql，先创建gogs数据库，链接成功后会自动创建所需表：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; CREATE DATABASE gogs</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="应用基本设置"><a href="#应用基本设置" class="headerlink" title="应用基本设置"></a>应用基本设置</h4><p>以如下命令创建容器为例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ docker run --name mygogs -d -p 10080:3000 -p 10022:22 -v &#x2F;home&#x2F;tiger&#x2F;gogsfile:&#x2F;app leafney&#x2F;ubuntu-gogs</span><br></pre></td></tr></table></figure>

<ul>
<li><code>仓库根目录</code>： 更改为绝对路径  <code>/app/gogs-repositories</code></li>
<li><code>运行系统用户</code>：  使用默认用户  <code>git</code></li>
<li><code>域名</code>： 填写Docker宿主机的主机名或物理地址或要使用的域名(不带http/https) 如  <code>192.168.137.140</code></li>
<li><code>SSH 端口号</code>： 如果你映射Docker外部端口如 <code>10022:22</code> 那么这里就填写 <code>10022</code> ；不要勾选“使用内置SSH服务器”（Don’t tick Use Builtin SSH Server）</li>
<li><code>HTTP 端口号</code>： 如果映射Docker外部端口如 <code>10080:3000</code> 这里要使用：<code>3000</code></li>
<li><code>应用 URL</code>： 使用域名和公开的HTTP端口值的组合(带http/https) 如 <code>http://192.168.137.140:10080</code></li>
<li><code>日志路径</code>： 可使用路径 <code>/app/gogs/log</code>(推荐) 或默认值 <code>/home/git/gogs/log</code></li>
</ul>
<hr>
<h4 id="可选设置"><a href="#可选设置" class="headerlink" title="可选设置"></a>可选设置</h4><p>app.ini中邮件(mailer)配置说明</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>ENABLED</td>
<td>启用该选项以激活邮件服务</td>
</tr>
<tr>
<td>DISABLE_HELO</td>
<td>禁用 HELO 操作</td>
</tr>
<tr>
<td>HELO_HOSTNAME</td>
<td>HELO 操作的自定义主机名</td>
</tr>
<tr>
<td>HOST</td>
<td>SMTP 主机地址与端口</td>
</tr>
<tr>
<td>FROM</td>
<td>邮箱的来自地址，遵循 RFC 5322规范，可以是一个单纯的邮箱地址或者 “名字” <a href="mailto:&#x65;&#x6d;&#x61;&#x69;&#108;&#64;&#101;&#x78;&#x61;&#109;&#x70;&#108;&#101;&#x2e;&#x63;&#111;&#x6d;">&#x65;&#x6d;&#x61;&#x69;&#108;&#64;&#101;&#x78;&#x61;&#109;&#x70;&#108;&#101;&#x2e;&#x63;&#111;&#x6d;</a> 的形式</td>
</tr>
<tr>
<td>USER</td>
<td>邮箱用户名</td>
</tr>
<tr>
<td>PASSWD</td>
<td>邮箱密码</td>
</tr>
<tr>
<td>SKIP_VERIFY</td>
<td>不验证自签发证书的有效性</td>
</tr>
<tr>
<td>USE_PLAIN_TEXT</td>
<td>使用 <code>text/plain</code> 作为邮件内容格式</td>
</tr>
</tbody></table>
<h5 id="邮件服务设置"><a href="#邮件服务设置" class="headerlink" title="邮件服务设置"></a>邮件服务设置</h5><ul>
<li><code>SMTP 主机</code>： 以163为例 如 <code>smtp.163.com:25</code></li>
<li><code>邮件来自</code>： 格式为 <code>&quot;Name&quot; &lt;email@example.com&gt;</code> 如 <code>GitAdmin &lt;xxxxx@163.com&gt;</code></li>
<li><code>发送邮箱</code>： 邮箱地址 如 <code>xxxxx@163.com</code></li>
<li><code>发送邮箱密码</code> : 邮箱密码</li>
</ul>
<p>app.ini中配置结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[mailer]</span><br><span class="line">ENABLED &#x3D; true</span><br><span class="line">HOST &#x3D; smtp.163.com:25</span><br><span class="line">FROM &#x3D; GitAdmin &lt;xxxxx@163.com&gt;</span><br><span class="line">USER &#x3D; xxxxx@163.com</span><br><span class="line">PASSWD &#x3D; 123456</span><br></pre></td></tr></table></figure>

<hr>
<h5 id="服务器和其它服务设置"><a href="#服务器和其它服务设置" class="headerlink" title="服务器和其它服务设置"></a>服务器和其它服务设置</h5><ul>
<li><code>禁止用户自主注册</code>  激活该选项来禁止用户注册功能，只能由管理员创建帐号</li>
<li><code>启用验证码服务</code>  要求在用户注册时输入预验证码</li>
<li><code>启用登录访问限制</code>  只有已登录的用户才能够访问页面，否则将只能看到登录或注册页面</li>
</ul>
<hr>
<h5 id="管理员账号设置"><a href="#管理员账号设置" class="headerlink" title="管理员账号设置"></a>管理员账号设置</h5><p>创建管理员帐号并不是必须的，因为 <code>ID=1</code> 的用户将自动获得管理员权限。</p>
<p>建议在此处直接创建管理员账户。</p>
<hr>
<h4 id="相关参考"><a href="#相关参考" class="headerlink" title="相关参考"></a>相关参考</h4><ul>
<li><a href="https://www.digitalocean.com/community/tutorials/how-to-set-up-gogs-on-ubuntu-14-04" target="_blank" rel="noopener">How To Set Up Gogs on Ubuntu 14.04 | DigitalOcean</a></li>
<li><a href="https://gogs.io/docs/advanced/configuration_cheat_sheet" target="_blank" rel="noopener">配置文件手册 - Gogs</a></li>
</ul>
]]></content>
      <categories>
        <category>Ubuntu-Gogs</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Gogs</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu16.04下安装Docker-CE社区版</title>
    <url>/2017/08/25/ubuntu-install-docker-ce-and-configure-mirror-accelerator/</url>
    <content><![CDATA[<p>在2017年3月份，Docker公司宣布Docker企业版（Enterprise Edition, EE），并将开源版本重命名为Docker社区版（Community Edition, CE）；同时公布了产品迭代计划，这会为企业客户提供透明的生命周期支持计划、并对Docker技术的稳定性和可维护性提升带来了帮助。</p>
<p>注：文章写于 <code>2017年8月</code> ,文中所讲方法可能会过时，请查看Docker官方最新安装文档 <a href="https://docs.docker.com/engine/installation/linux/docker-ce/ubuntu/" target="_blank" rel="noopener">Get Docker CE for Ubuntu | Docker Documentation</a>，本文仅供参考。</p>
<h4 id="Docker-CE-还是-Docker-EE"><a href="#Docker-CE-还是-Docker-EE" class="headerlink" title="Docker CE 还是 Docker EE"></a>Docker CE 还是 Docker EE</h4><h5 id="Docker-CE"><a href="#Docker-CE" class="headerlink" title="Docker CE"></a>Docker CE</h5><p>Docker CE表示社区版，是免费的Docker产品的新名称，Docker CE包含了完整的Docker平台，非常适合开发人员和运维团队构建容器APP。</p>
<h5 id="Docker-EE"><a href="#Docker-EE" class="headerlink" title="Docker EE"></a>Docker EE</h5><p>Docker EE表示企业版，由公司支持，可在经过认证的操作系统和云提供商中使用，并可运行来自Docker Store的、经过认证的容器和插件。</p>
<p>Docker EE提供三个服务层次：</p>
<table>
<thead>
<tr>
<th>服务层级</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>Basic</td>
<td>1. 包含用于认证基础设施的Docker平台<br> 2. Docker公司的支持<br> 3. 经过认证的、来自Docker Store的容器与插件</td>
</tr>
<tr>
<td>Standard</td>
<td>1. 添加高级镜像与容器管理<br> 2. LDAP/AD用户集成<br> 3. 基于角色的访问控制(Docker Datacenter)</td>
</tr>
<tr>
<td>Advanced</td>
<td>1. 添加Docker安全扫描<br> 2. 连续漏洞监控</td>
</tr>
</tbody></table>
<h5 id="版本迭代"><a href="#版本迭代" class="headerlink" title="版本迭代"></a>版本迭代</h5><p>Docker从17.03开始，转向基于时间的 <code>YY.MM</code> 形式的版本控制方案，类似于Canonical为Ubuntu所使用的版本控制方案。</p>
<p>Docker CE有两种版本：</p>
<ul>
<li>edge版本每月发布一次，主要面向那些喜欢尝试新功能的用户。</li>
<li>stable版本每季度发布一次，适用于希望更加容易维护的用户（稳定版）。</li>
</ul>
<p>edge版本只能在当前月份获得安全和错误修复。而stable版本在初始发布后四个月内接收关键错误修复和安全问题的修补程序。这样，Docker CE用户就有一个月的窗口期来切换版本到更新的版本。</p>
<p>Docker EE和stable版本的版本号保持一致，每个Docker EE版本都享受为期一年的支持与维护期，在此期间接受安全与关键修正。</p>
<hr>
<h4 id="官方安装方法"><a href="#官方安装方法" class="headerlink" title="官方安装方法"></a>官方安装方法</h4><h5 id="系统要求"><a href="#系统要求" class="headerlink" title="系统要求"></a>系统要求</h5><p>安装Docker CE,需要64位的Ubuntu系统：</p>
<ul>
<li>Zesty 17.04</li>
<li>Xenial 16.04 (LTS)</li>
<li>Trusty 14.04 (LTS)</li>
</ul>
<p>我的系统是 <code>Ubuntu 16.04.2 LTS</code> 版本，通过命令 <code>lsb_release -a</code> 我们可以查看到:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo lsb_release -a</span><br><span class="line">[sudo] password for tiger: </span><br><span class="line">LSB Version:	core-9.20160110ubuntu0.2-amd64</span><br><span class="line">Distributor ID:	Ubuntu</span><br><span class="line">Description:	Ubuntu 16.04.2 LTS</span><br><span class="line">Release:	16.04</span><br><span class="line">Codename:	xenial</span><br></pre></td></tr></table></figure>

<p>通过 <code>uname -r</code> 来查看内核信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ uname -r</span><br><span class="line">4.4.0-85-generic</span><br></pre></td></tr></table></figure>

<hr>
<h5 id="卸载旧版本Docker"><a href="#卸载旧版本Docker" class="headerlink" title="卸载旧版本Docker"></a>卸载旧版本Docker</h5><p>旧版本的docker被称为 <code>docker</code> 或者 <code>docker-engine</code>，而现在最新的Docker CE包被称为 <code>docker-ce</code>。在安装之前，需要先卸载旧版本(如果之前有安装)：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get remove docker docker-engine docker.io</span><br></pre></td></tr></table></figure>

<p>另外原来 <code>/var/lib/docker/</code> 目录下的镜像，容器，数据卷，网络等都会保留，新安装的docker任然可以使用这些内容。</p>
<h5 id="14-04-Trusty-需要安装额外包"><a href="#14-04-Trusty-需要安装额外包" class="headerlink" title="14.04 Trusty 需要安装额外包"></a>14.04 Trusty 需要安装额外包</h5><p>在 14.04 系统版本下，需要安装 <code>linux-image-extra-*</code> 包以允许Docker使用 <code>aufs</code> 存储驱动程序：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get update</span><br><span class="line"></span><br><span class="line">$ sudo apt-get install \</span><br><span class="line">    linux-image-extra-$(uname -r) \</span><br><span class="line">    linux-image-extra-virtual</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="安装-Docker-CE"><a href="#安装-Docker-CE" class="headerlink" title="安装 Docker CE"></a>安装 Docker CE</h4><h5 id="更新源"><a href="#更新源" class="headerlink" title="更新源"></a>更新源</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get update</span><br></pre></td></tr></table></figure>

<h5 id="允许通过HTTPS使用存储库"><a href="#允许通过HTTPS使用存储库" class="headerlink" title="允许通过HTTPS使用存储库"></a>允许通过HTTPS使用存储库</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install \</span><br><span class="line">    apt-transport-https \</span><br><span class="line">    ca-certificates \</span><br><span class="line">    curl \</span><br><span class="line">    software-properties-common</span><br></pre></td></tr></table></figure>

<h5 id="导入官方-GPG-密钥"><a href="#导入官方-GPG-密钥" class="headerlink" title="导入官方 GPG 密钥"></a>导入官方 GPG 密钥</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ curl -fsSL https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;ubuntu&#x2F;gpg | sudo apt-key add -</span><br></pre></td></tr></table></figure>

<p>验证密钥指纹是否正确 <code>9DC8 5822 9FC7 DD38 854A E2D8 8D81 803C 0EBF CD88</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo apt-key fingerprint 0EBFCD88</span><br></pre></td></tr></table></figure>

<p>操作记录如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ curl -fsSL https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;ubuntu&#x2F;gpg | sudo apt-key add -</span><br><span class="line">OK</span><br><span class="line">$ sudo apt-key fingerprint 0EBFCD88</span><br><span class="line">pub   4096R&#x2F;0EBFCD88 2017-02-22</span><br><span class="line">      Key fingerprint &#x3D; 9DC8 5822 9FC7 DD38 854A  E2D8 8D81 803C 0EBF CD88</span><br><span class="line">uid                  Docker Release (CE deb) &lt;docker@docker.com&gt;</span><br><span class="line">sub   4096R&#x2F;F273FCD8 2017-02-22</span><br></pre></td></tr></table></figure>

<hr>
<h5 id="选择稳定版本"><a href="#选择稳定版本" class="headerlink" title="选择稳定版本"></a>选择稳定版本</h5><p>使用如下命令安装稳定版本的docker-ce,64位系统： <code>amd64</code> or <code>x86_64</code>:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo add-apt-repository \</span><br><span class="line">   &quot;deb [arch&#x3D;amd64] https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;ubuntu \</span><br><span class="line">   $(lsb_release -cs) \</span><br><span class="line">   stable&quot;</span><br></pre></td></tr></table></figure>

<h5 id="更新源列表"><a href="#更新源列表" class="headerlink" title="更新源列表"></a>更新源列表</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get update</span><br></pre></td></tr></table></figure>

<h5 id="安装最新版本的Docker-CE"><a href="#安装最新版本的Docker-CE" class="headerlink" title="安装最新版本的Docker CE"></a>安装最新版本的Docker CE</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install docker-ce</span><br></pre></td></tr></table></figure>

<h5 id="安装特定版本的Docker-CE"><a href="#安装特定版本的Docker-CE" class="headerlink" title="安装特定版本的Docker CE"></a>安装特定版本的Docker CE</h5><p>使用命令 <code>$ apt-cache madison docker-ce</code> 查看可安装的版本列表：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ apt-cache madison docker-ce</span><br><span class="line"> docker-ce | 17.06.1~ce-0~ubuntu | https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;ubuntu xenial&#x2F;stable amd64 Packages</span><br><span class="line"> docker-ce | 17.06.0~ce-0~ubuntu | https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;ubuntu xenial&#x2F;stable amd64 Packages</span><br><span class="line"> docker-ce | 17.03.2~ce-0~ubuntu-xenial | https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;ubuntu xenial&#x2F;stable amd64 Packages</span><br><span class="line"> docker-ce | 17.03.1~ce-0~ubuntu-xenial | https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;ubuntu xenial&#x2F;stable amd64 Packages</span><br><span class="line"> docker-ce | 17.03.0~ce-0~ubuntu-xenial | https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;ubuntu xenial&#x2F;stable amd64 Packages</span><br></pre></td></tr></table></figure>

<p>中间一项为版本名称，执行命令选择安装指定版本 <code>$ sudo apt-get install docker-ce=&lt;VERSION&gt;</code> ,比如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install docker-ce&#x3D;17.06.1~ce-0~ubuntu</span><br><span class="line">[sudo] password for tiger: </span><br><span class="line">Reading package lists... Done</span><br><span class="line">Building dependency tree       </span><br><span class="line">Reading state information... Done</span><br><span class="line">docker-ce is already the newest version (17.06.1~ce-0~ubuntu).</span><br><span class="line">0 upgraded, 0 newly installed, 0 to remove and 34 not upgraded.</span><br></pre></td></tr></table></figure>

<hr>
<p>安装完成后docker守护进程会自动启动。</p>
<hr>
<h5 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h5><p>执行命令 <code>docker</code> 查看安装是否成功：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ docker </span><br><span class="line"></span><br><span class="line">Usage:	docker COMMAND</span><br><span class="line"></span><br><span class="line">A self-sufficient runtime for containers</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">      --config string      Location of client config files (default &quot;&#x2F;home&#x2F;tiger&#x2F;.docker&quot;)</span><br><span class="line">  -D, --debug              Enable debug mode</span><br><span class="line">      --help               Print usage</span><br><span class="line">  -H, --host list          Daemon socket(s) to connect to</span><br><span class="line">  -l, --log-level string   Set the logging level (&quot;debug&quot;|&quot;info&quot;|&quot;warn&quot;|&quot;error&quot;|&quot;fatal&quot;) (default &quot;info&quot;)</span><br><span class="line">      --tls                Use TLS; implied by --tlsverify</span><br><span class="line">      --tlscacert string   Trust certs signed only by this CA (default &quot;&#x2F;home&#x2F;tiger&#x2F;.docker&#x2F;ca.pem&quot;)</span><br><span class="line">      --tlscert string     Path to TLS certificate file (default &quot;&#x2F;home&#x2F;tiger&#x2F;.docker&#x2F;cert.pem&quot;)</span><br><span class="line">      --tlskey string      Path to TLS key file (default &quot;&#x2F;home&#x2F;tiger&#x2F;.docker&#x2F;key.pem&quot;)</span><br><span class="line">      --tlsverify          Use TLS and verify the remote</span><br><span class="line">  -v, --version            Print version information and quit</span><br><span class="line"></span><br><span class="line">Management Commands:</span><br><span class="line">  config      Manage Docker configs</span><br><span class="line">  container   Manage containers</span><br><span class="line">  image       Manage images</span><br><span class="line">  network     Manage networks</span><br><span class="line">  node        Manage Swarm nodes</span><br><span class="line">  plugin      Manage plugins</span><br><span class="line">  secret      Manage Docker secrets</span><br><span class="line">  service     Manage services</span><br><span class="line">  stack       Manage Docker stacks</span><br><span class="line">  swarm       Manage Swarm</span><br><span class="line">  system      Manage Docker</span><br><span class="line">  volume      Manage volumes</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line">  attach      Attach local standard input, output, and error streams to a running container</span><br><span class="line">  build       Build an image from a Dockerfile</span><br><span class="line">  commit      Create a new image from a container&#39;s changes</span><br><span class="line">  cp          Copy files&#x2F;folders between a container and the local filesystem</span><br><span class="line">  create      Create a new container</span><br><span class="line">  diff        Inspect changes to files or directories on a container&#39;s filesystem</span><br><span class="line">  events      Get real time events from the server</span><br><span class="line">  exec        Run a command in a running container</span><br><span class="line">  export      Export a container&#39;s filesystem as a tar archive</span><br><span class="line">  history     Show the history of an image</span><br><span class="line">  images      List images</span><br><span class="line">  import      Import the contents from a tarball to create a filesystem image</span><br><span class="line">  info        Display system-wide information</span><br><span class="line">  inspect     Return low-level information on Docker objects</span><br><span class="line">  kill        Kill one or more running containers</span><br><span class="line">  load        Load an image from a tar archive or STDIN</span><br><span class="line">  login       Log in to a Docker registry</span><br><span class="line">  logout      Log out from a Docker registry</span><br><span class="line">  logs        Fetch the logs of a container</span><br><span class="line">  pause       Pause all processes within one or more containers</span><br><span class="line">  port        List port mappings or a specific mapping for the container</span><br><span class="line">  ps          List containers</span><br><span class="line">  pull        Pull an image or a repository from a registry</span><br><span class="line">  push        Push an image or a repository to a registry</span><br><span class="line">  rename      Rename a container</span><br><span class="line">  restart     Restart one or more containers</span><br><span class="line">  rm          Remove one or more containers</span><br><span class="line">  rmi         Remove one or more images</span><br><span class="line">  run         Run a command in a new container</span><br><span class="line">  save        Save one or more images to a tar archive (streamed to STDOUT by default)</span><br><span class="line">  search      Search the Docker Hub for images</span><br><span class="line">  start       Start one or more stopped containers</span><br><span class="line">  stats       Display a live stream of container(s) resource usage statistics</span><br><span class="line">  stop        Stop one or more running containers</span><br><span class="line">  tag         Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE</span><br><span class="line">  top         Display the running processes of a container</span><br><span class="line">  unpause     Unpause all processes within one or more containers</span><br><span class="line">  update      Update configuration of one or more containers</span><br><span class="line">  version     Show the Docker version information</span><br><span class="line">  wait        Block until one or more containers stop, then print their exit codes</span><br><span class="line"></span><br><span class="line">Run &#39;docker COMMAND --help&#39; for more information on a command.</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="为当前用户添加管理员权限"><a href="#为当前用户添加管理员权限" class="headerlink" title="为当前用户添加管理员权限"></a>为当前用户添加管理员权限</h4><p>Docker进程启动后，执行docker命令都必须带上 <code>sudo</code> 才行，否则会报 <code>permission denied</code> 的错误：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ docker info</span><br><span class="line">Got permission denied while trying to connect to the Docker daemon socket at unix:&#x2F;&#x2F;&#x2F;var&#x2F;run&#x2F;docker.sock: Get http:&#x2F;&#x2F;%2Fvar%2Frun%2Fdocker.sock&#x2F;v1.30&#x2F;info: dial unix &#x2F;var&#x2F;run&#x2F;docker.sock: connect: permission denied</span><br></pre></td></tr></table></figure>

<p>解决方法是将当前用户加入到 <code>docker</code> 用户分组下。</p>
<hr>
<h5 id="将当前用户添加到-docker-分组下"><a href="#将当前用户添加到-docker-分组下" class="headerlink" title="将当前用户添加到 docker 分组下"></a>将当前用户添加到 <code>docker</code> 分组下</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo usermod -aG docker &lt;your-user&gt;</span><br></pre></td></tr></table></figure>

<p>或者直接用 <code>$USER</code> 表示当前用户：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo usermod -aG docker $USER</span><br></pre></td></tr></table></figure>

<p>然后重启系统：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo reboot</span><br></pre></td></tr></table></figure>

<p>再执行时就不会报错了：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ docker info</span><br><span class="line">Containers: 0</span><br><span class="line"> Running: 0</span><br><span class="line"> Paused: 0</span><br><span class="line"> Stopped: 0</span><br><span class="line">Images: 0</span><br><span class="line">Server Version: 17.06.1-ce</span><br><span class="line">Storage Driver: aufs</span><br><span class="line"> Root Dir: &#x2F;var&#x2F;lib&#x2F;docker&#x2F;aufs</span><br><span class="line"> Backing Filesystem: extfs</span><br><span class="line"> Dirs: 0</span><br><span class="line"> Dirperm1 Supported: true</span><br><span class="line">Logging Driver: json-file</span><br><span class="line">Cgroup Driver: cgroupfs</span><br><span class="line">Plugins: </span><br><span class="line"> Volume: local</span><br><span class="line"> Network: bridge host macvlan null overlay</span><br><span class="line"> Log: awslogs fluentd gcplogs gelf journald json-file logentries splunk syslog</span><br><span class="line">Swarm: inactive</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="使用阿里云Docker-CE镜像源安装"><a href="#使用阿里云Docker-CE镜像源安装" class="headerlink" title="使用阿里云Docker CE镜像源安装"></a>使用阿里云Docker CE镜像源安装</h4><h5 id="Ubuntu-14-04-16-04-使用apt-get进行安装"><a href="#Ubuntu-14-04-16-04-使用apt-get进行安装" class="headerlink" title="Ubuntu 14.04 16.04 (使用apt-get进行安装)"></a>Ubuntu 14.04 16.04 (使用apt-get进行安装)</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># step 1: 安装必要的一些系统工具</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get -y install apt-transport-https ca-certificates curl software-properties-common</span><br><span class="line"># step 2: 安装GPG证书</span><br><span class="line">curl -fsSL http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;ubuntu&#x2F;gpg | sudo apt-key add -</span><br><span class="line"># Step 3: 写入软件源信息</span><br><span class="line">sudo add-apt-repository &quot;deb [arch&#x3D;amd64] http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;ubuntu $(lsb_release -cs) stable&quot;</span><br><span class="line"># Step 4: 更新并安装 Docker-CE</span><br><span class="line">sudo apt-get -y update</span><br><span class="line">sudo apt-get -y install docker-ce</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 安装指定版本的Docker-CE:</span><br><span class="line"># Step 1: 查找Docker-CE的版本:</span><br><span class="line"># apt-cache madison docker-ce</span><br><span class="line">#   docker-ce | 17.03.1~ce-0~ubuntu-xenial | http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;ubuntu xenial&#x2F;stable amd64 Packages</span><br><span class="line">#   docker-ce | 17.03.0~ce-0~ubuntu-xenial | http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;ubuntu xenial&#x2F;stable amd64 Packages</span><br><span class="line"># Step 2: 安装指定版本的Docker-CE: (VERSION 例如上面的 17.03.1~ce-0~ubuntu-xenial)</span><br><span class="line"># sudo apt-get -y install docker-ce&#x3D;[VERSION]</span><br></pre></td></tr></table></figure>

<h5 id="CentOS-7-使用yum进行安装"><a href="#CentOS-7-使用yum进行安装" class="headerlink" title="CentOS 7 (使用yum进行安装)"></a>CentOS 7 (使用yum进行安装)</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># step 1: 安装必要的一些系统工具</span><br><span class="line">sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line"># Step 2: 添加软件源信息</span><br><span class="line">sudo yum-config-manager --add-repo http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo</span><br><span class="line"># Step 3: 更新并安装 Docker-CE</span><br><span class="line">sudo yum makecache fast</span><br><span class="line">sudo yum -y install docker-ce</span><br><span class="line"># Step 4: 开启Docker服务</span><br><span class="line">sudo service docker start</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 安装指定版本的Docker-CE:</span><br><span class="line"># Step 1: 查找Docker-CE的版本:</span><br><span class="line"># yum list docker-ce.x86_64 --showduplicates | sort -r</span><br><span class="line">#   Loading mirror speeds from cached hostfile</span><br><span class="line">#   Loaded plugins: branch, fastestmirror, langpacks</span><br><span class="line">#   docker-ce.x86_64            17.03.1.ce-1.el7.centos            docker-ce-stable</span><br><span class="line">#   docker-ce.x86_64            17.03.1.ce-1.el7.centos            @docker-ce-stable</span><br><span class="line">#   docker-ce.x86_64            17.03.0.ce-1.el7.centos            docker-ce-stable</span><br><span class="line">#   Available Packages</span><br><span class="line"># Step2 : 安装指定版本的Docker-CE: (VERSION 例如上面的 17.03.0.ce.1-1.el7.centos)</span><br><span class="line"># sudo yum -y install docker-ce-[VERSION]</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="配置阿里云Docker镜像加速器"><a href="#配置阿里云Docker镜像加速器" class="headerlink" title="配置阿里云Docker镜像加速器"></a>配置阿里云Docker镜像加速器</h4><p>打开阿里云 <a href="https://dev.aliyun.com/" target="_blank" rel="noopener">开发者平台</a> - <code>管理中心</code> - <code>Docker Hub 镜像站点</code>。可以看到 <code>您的专属加速器地址 https://xxxxx.mirror.aliyuncs.com</code></p>
<h5 id="配置Docker加速器"><a href="#配置Docker加速器" class="headerlink" title="配置Docker加速器"></a>配置Docker加速器</h5><p>通过修改daemon配置文件 <code>/etc/docker/daemon.json</code> (没有时新建该文件) 来使用加速器：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mkdir -p &#x2F;etc&#x2F;docker</span><br><span class="line">sudo tee &#x2F;etc&#x2F;docker&#x2F;daemon.json &lt;&lt;-&#39;EOF&#39;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https:&#x2F;&#x2F;xxxxx.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>

<p>注意：<strong>上文代码段中给出的镜像加速器地址中的 <code>xxxxx</code> 为阿里云在你注册账户后分配的指定地址名称，切记要修改为自己账户的给定地址。</strong></p>
<hr>
<h4 id="相关参考"><a href="#相关参考" class="headerlink" title="相关参考"></a>相关参考</h4><ul>
<li><a href="https://docs.docker.com/engine/installation/linux/docker-ce/ubuntu/" target="_blank" rel="noopener">Get Docker CE for Ubuntu | Docker Documentation</a></li>
<li><a href="http://www.itmuch.com/docker/docker-1/" target="_blank" rel="noopener">Docker 17.03系列教程（一）Docker EE/Docker CE简介与版本规划 | 周立|Spring Cloud</a></li>
<li><a href="https://yq.aliyun.com/articles/110806" target="_blank" rel="noopener">Docker CE 镜像源站-博客-云栖社区-阿里云</a></li>
</ul>
]]></content>
      <tags>
        <tag>Docker</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>MongoDB备份与恢复</title>
    <url>/2017/08/22/mongodb-mongodump-and-mongorestore/</url>
    <content><![CDATA[<p>mongodb中有工具mongodump和mongorestore提供了非常方便的对数据库备份与恢复功能。可以在命令后面加 <code>--help</code> 选项查看两个工具的帮助文档。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F; # mongodump --help</span><br><span class="line">Usage:</span><br><span class="line">  mongodump &lt;options&gt;</span><br><span class="line"></span><br><span class="line">Export the content of a running server into .bson files.</span><br><span class="line"></span><br><span class="line">Specify a database with -d and a collection with -c to only dump that database or collection.</span><br><span class="line"></span><br><span class="line">See http:&#x2F;&#x2F;docs.mongodb.org&#x2F;manual&#x2F;reference&#x2F;program&#x2F;mongodump&#x2F; for more information.</span><br><span class="line"></span><br><span class="line">general options:</span><br><span class="line">      --help                                                print usage</span><br><span class="line">      --version                                             print the tool version and exit</span><br><span class="line"></span><br><span class="line">verbosity options:</span><br><span class="line">  -v, --verbose&#x3D;&lt;level&gt;                                     more detailed log output (include multiple times for more verbosity, e.g. -vvvvv, or specify a numeric value, e.g. --verbose&#x3D;N)</span><br><span class="line">      --quiet                                               hide all log output  </span><br><span class="line">  ...</span><br><span class="line">  ...</span><br></pre></td></tr></table></figure>


<h4 id="MongoDB备份"><a href="#MongoDB备份" class="headerlink" title="MongoDB备份"></a>MongoDB备份</h4><p>mongodump备份命令语法: </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; mongodump -h dbhost -d dbname -o dbdirectory</span><br></pre></td></tr></table></figure>

<ul>
<li><code>-h</code> : MongDB所在服务器地址，例如：127.0.0.1，当然也可以指定端口号：127.0.0.1:27017</li>
<li><code>-d</code> : 需要备份的数据库实例，例如：test</li>
<li><code>-o</code> ：备份的数据存放位置，例如：c:\data\dump，当然该目录需要提前建立</li>
</ul>
<p>备份指定数据库：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; mongodump -h 127.0.0.1:27017 -d local -o D:\Test\aatt</span><br></pre></td></tr></table></figure>

<p>备份所有数据库：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; mongodump --host 127.0.0.1 --port 27017</span><br></pre></td></tr></table></figure>

<p>如果mongodb设置了密码，则命令格式为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; mongodump --host localhost --port 27017 -u dbUser -p dbPassword -d mydb --out &#x2F;home&#x2F;dbbackup</span><br></pre></td></tr></table></figure>

<p>或者如下的格式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; mongodump -h 127.0.0.1:27017 -u admin -p 123456 -d test -o &#x2F;data&#x2F;backup</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="MongoDB恢复"><a href="#MongoDB恢复" class="headerlink" title="MongoDB恢复"></a>MongoDB恢复</h4><p>mongorestore 恢复备份命令语法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; mongorestore -h &lt;hostname&gt;&lt;:port&gt; -d dbname &lt;path&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>--host &lt;:port&gt;, -h &lt;:port&gt;</code> : MongoDB所在服务器地址，默认为： localhost:27017</li>
<li><code>--db , -d</code> ：需要恢复的数据库实例，该名称与备份时的名称可以不一致</li>
<li><code>--drop</code> : 恢复的时候，先删除当前数据，然后恢复备份的数据。</li>
<li><code>&lt;path&gt;</code> ：mongorestore 最后的一个参数，设置备份数据所在位置，例如：c:\data\dump\test。<br>你不能同时指定 <path> 和 –dir 选项，–dir也可以设置备份目录。</li>
<li><code>--dir</code> : 指定备份的目录</li>
</ul>
<p>恢复备份数据到指定的服务器数据库中：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; mongorestore -h 127.0.0.1:27017 -d test2 D:\Test\aatt\local</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="Alpine系统下的MongoDB备份与恢复"><a href="#Alpine系统下的MongoDB备份与恢复" class="headerlink" title="Alpine系统下的MongoDB备份与恢复"></a>Alpine系统下的MongoDB备份与恢复</h4><p>Alpine系统下使用MongoDB，需要安装MongoDB包: <code>apk add mongodb</code> 。如果要使用备份与恢复功能，需要安装 <code>mongodb-tools</code> 包：<code>apk add mongodb-tools</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alpine:edge</span><br><span class="line"></span><br><span class="line">$ echo http:&#x2F;&#x2F;dl-4.alpinelinux.org&#x2F;alpine&#x2F;edge&#x2F;testing &gt;&gt; &#x2F;etc&#x2F;apk&#x2F;repositories</span><br><span class="line"></span><br><span class="line">$ apk add --no-cache mongodb mongodb-tools</span><br><span class="line"></span><br><span class="line">$ ls &#x2F;usr&#x2F;bin&#x2F;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang下通过Gin体验WebSocket框架Melody</title>
    <url>/2017/08/14/websocket-framework-for-go-melody/</url>
    <content><![CDATA[<p>Melody 是一个 Go 语言的微型 WebSocket 框架，基于 github.com/gorilla/websocket 开发.</p>
<h4 id="Gin-Gonic"><a href="#Gin-Gonic" class="headerlink" title="Gin-Gonic"></a>Gin-Gonic</h4><p>获取包：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; go get github.com&#x2F;gin-gonic&#x2F;gin</span><br></pre></td></tr></table></figure>

<p>添加引用：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">inport &quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;</span><br></pre></td></tr></table></figure>

<p>创建Gin测试站点：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">    &quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line"></span><br><span class="line">    r :&#x3D; gin.Default()</span><br><span class="line"></span><br><span class="line">    r.GET(&quot;&#x2F;&quot;, func(c *gin.Context) &#123;</span><br><span class="line">        c.String(200, &quot;Hello Gin&quot;)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    r.Run(&quot;:8080&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; go run main.go</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="Melody"><a href="#Melody" class="headerlink" title="Melody"></a>Melody</h4><p>获取包：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; go get gopkg.in&#x2F;olahol&#x2F;melody.v1</span><br></pre></td></tr></table></figure>

<p>添加引用：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &quot;gopkg.in&#x2F;olahol&#x2F;melody.v1&quot;</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="Simple-Chat-Demo"><a href="#Simple-Chat-Demo" class="headerlink" title="Simple Chat Demo"></a>Simple Chat Demo</h4><p>main.go：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">	&quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;</span><br><span class="line">	&quot;gopkg.in&#x2F;olahol&#x2F;melody.v1&quot;</span><br><span class="line">	&quot;net&#x2F;http&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">	r :&#x3D; gin.Default()</span><br><span class="line">	m :&#x3D; melody.New()</span><br><span class="line"></span><br><span class="line">	r.GET(&quot;&#x2F;&quot;, func(c *gin.Context) &#123;</span><br><span class="line">		http.ServeFile(c.Writer, c.Request, &quot;templates&#x2F;index.html&quot;)</span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;websocket</span><br><span class="line">	r.GET(&quot;&#x2F;ws&quot;, func(c *gin.Context) &#123;</span><br><span class="line">		m.HandleRequest(c.Writer, c.Request)</span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line">	m.HandleMessage(func(s *melody.Session, msg []byte) &#123;</span><br><span class="line">		m.Broadcast(msg)</span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line">	r.Run(&quot;:8080&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>index.html：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">	&lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">	&lt;title&gt;WebSocket&lt;&#x2F;title&gt;</span><br><span class="line">	 &lt;style&gt;</span><br><span class="line">    #chat &#123;</span><br><span class="line">      text-align: left;</span><br><span class="line">      background: #f1f1f1;</span><br><span class="line">      width: 500px;</span><br><span class="line">      min-height: 300px;</span><br><span class="line">      padding: 20px;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;&#x2F;style&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">	&lt;center&gt;</span><br><span class="line">      &lt;h3&gt;Chat&lt;&#x2F;h3&gt;</span><br><span class="line">      &lt;pre id&#x3D;&quot;chat&quot;&gt;&lt;&#x2F;pre&gt;</span><br><span class="line">      &lt;input placeholder&#x3D;&quot;say something&quot; id&#x3D;&quot;text&quot; type&#x3D;&quot;text&quot;&gt;</span><br><span class="line">    &lt;&#x2F;center&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script&gt;</span><br><span class="line">      var url &#x3D; &quot;ws:&#x2F;&#x2F;&quot; + window.location.host + &quot;&#x2F;ws&quot;;</span><br><span class="line">      var ws &#x3D; new WebSocket(url);</span><br><span class="line"></span><br><span class="line">      var name &#x3D; &quot;Guest&quot; + Math.floor(Math.random() * 1000);</span><br><span class="line"></span><br><span class="line">      var chat &#x3D; document.getElementById(&quot;chat&quot;);</span><br><span class="line">      var text &#x3D; document.getElementById(&quot;text&quot;);</span><br><span class="line"></span><br><span class="line">      var now &#x3D; function () &#123;</span><br><span class="line">        var iso &#x3D; new Date().toISOString();</span><br><span class="line">        return iso.split(&quot;T&quot;)[1].split(&quot;.&quot;)[0];</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      ws.onmessage &#x3D; function (msg) &#123;</span><br><span class="line">        var line &#x3D;  now() + &quot; &quot; + msg.data + &quot;\n&quot;;</span><br><span class="line">        chat.innerText +&#x3D; line;</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      text.onkeydown &#x3D; function (e) &#123;</span><br><span class="line">        if (e.keyCode &#x3D;&#x3D;&#x3D; 13 &amp;&amp; text.value !&#x3D;&#x3D; &quot;&quot;) &#123;</span><br><span class="line">          ws.send(&quot;&lt;&quot; + name + &quot;&gt; &quot; + text.value);</span><br><span class="line">          text.value &#x3D; &quot;&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<p>运行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; go run main.go</span><br></pre></td></tr></table></figure>

<hr>
<ul>
<li><a href="https://github.com/olahol/melody" target="_blank" rel="noopener">GitHub - olahol/melody: Minimalist websocket framework for Go</a></li>
</ul>
]]></content>
      <tags>
        <tag>Golang</tag>
        <tag>Gin</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Travis CI自动部署Hexo博客</title>
    <url>/2017/08/09/using-travis-ci-automatic-deploy-hexo-blogs/</url>
    <content><![CDATA[<p>自从使用GitHub Pages和Hexo来发布博客之后，不得不说方便了许多，只需要几个简单的命令博客就发布了。但在不断的使用中发现每次的发布操作也挺耗时的。</p>
<p>我一般的操作是将平时整理好的md文件放到私有的git仓库中（感兴趣可了解 <a href="https://github.com/Leafney/ubuntu-gogs" target="_blank" rel="noopener">Ubuntu-Gogs 用更简单的方式部署、升级或迁移Gogs服务</a>），每次发布的时候都要先将文件 <code>clone</code> 到本地，然后配置一下hexo的运行环境，接着再执行 <code>hexo s -g</code> 来预览和调整，最后执行 <code>hexo d</code> 命令将博客发布上去，在这之前如果你没有配置过GitHub的 <code>SSH Key</code>,还要花一些时间来弄权限的问题。久而久之就发现这样操作起来实在是太繁琐了。</p>
<p>后来看到一篇文章介绍可以使用Travis CI来自动部署hexo的博客，只需要将md文件 <code>push</code> 到仓库中博客就自动发布好了。趁着这几天工作任务不太着急，研究了一下，特纪录在此，希望能帮到有需要的朋友。</p>
<p>Travis CI 是目前新兴的开源持续集成构建项目，用来构建托管在GitHub上的代码。它提供了多种编程语言的支持，包括Ruby，JavaScript，Java，Scala，PHP，Haskell和Erlang在内的多种语言。</p>
<h4 id="配置GitHub-Pages"><a href="#配置GitHub-Pages" class="headerlink" title="配置GitHub Pages"></a>配置GitHub Pages</h4><p>如果你是新手或者还没有自己的 <code>GitHub Pages</code> 博客站点，可以先看我之前的文章 <a href="http://www.itfanr.cc/2016/09/24/use-github-to-build-hexo-static-blog/">使用GitHub搭建Hexo静态博客 | IT范儿</a> 了解如何配置，具体过程这里不再详述。</p>
<h5 id="创建-hexo-分支"><a href="#创建-hexo-分支" class="headerlink" title="创建 hexo 分支"></a>创建 hexo 分支</h5><p>因为我之前的博客源文件是存放在私有的git管理工具下，如果我们要使用Travis CI自动部署，必须将这些博客的源码文件放到GitHub上才能被Travis访问到。因为 <code>GitHub Pages</code> 默认要求必须使用 <code>master</code> 分支存放静态文件，我们可以在该仓库下使用其他分支来存放博客源码文件，或者新创建一个仓库来单独保存。这里我们把hexo博客的源码放在 <code>hexo</code> 分支下，博客的静态文件部署在 <code>master</code> 分支下。</p>
<p>对于如何在GitHub上创建分支，相关操作命令如下，仅供参考：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 克隆项目到本地</span><br><span class="line">&gt; git clone https:&#x2F;&#x2F;github.com&#x2F;Leafney&#x2F;Leafney.github.io.git</span><br><span class="line"></span><br><span class="line"># 创建并切换到 hexo 分支</span><br><span class="line">&gt; git checkout -b hexo</span><br></pre></td></tr></table></figure>

<p>当切换到 <code>hexo</code> 分支后，因为我们是需要用 <code>hexo</code> 分支来存放博客源码文件的，所以，将 <code>hexo</code> 分支下的文件除 <code>.git</code> 目录外全部删除，然后将博客源码文件拷贝到该目录下，并 <code>commit</code> 到 <code>hexo</code> 分支.</p>
<p>然后我们需要将本地的 <code>hexo</code> 分支提交到远程仓库中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 提交本地hexo分支到远程仓库的hexo分支</span><br><span class="line">&gt; git push origin hexo:hexo</span><br></pre></td></tr></table></figure>

<p>这样我们在GitHub的仓库下就能看到 <code>hexo</code> 分支为博客源文件，<code>master</code> 分支为静态文件。</p>
<p>这里需要注意一点，当我们新增博客md文件时，获取远程分支时要指定分支的名称，否则会默认获取 <code>master</code> 分支：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; git pull origin hexo</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="设置-Travis-CI"><a href="#设置-Travis-CI" class="headerlink" title="设置 Travis CI"></a>设置 Travis CI</h4><p>使用 GitHub账户登录 <a href="https://travis-ci.org/" target="_blank" rel="noopener">Travis CI官网</a> ，进去后能看到已经自动关联了 GitHub 上的仓库。这里我们选择需要启用的项目，即 <code>yourname/yourname.github.io</code> 。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/170809gmgDm96jGa.jpg" alt="mark"></p>
<p>然后点击后面的齿轮图标进入设置界面。</p>
<p>如果你之前已经勾选过项目，可以进到项目主页中，在右上角找到 <code>More options</code> 选项下的 <code>Settings</code> 进入设置界面。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/17080926B1D9j4eI.jpg" alt="mark"></p>
<hr>
<h5 id="通用设置"><a href="#通用设置" class="headerlink" title="通用设置"></a>通用设置</h5><p>在 <code>General</code> 区域开启：<code>Build only if .travis.yml is present</code> 表示“只有当 <code>.travis.yml</code> 存在时才构建” ；开启：<code>Build branch updates</code> 表示 “当分支更新时构建” 两个选项，如下：</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/17080934fAK0D1cH.jpg" alt="mark"></p>
<p>Travis CI在自动构建完成后需要push静态文件到仓库的 <code>master</code> 分支下，而访问GitHub的仓库是需要权限的，下面来看看如何配置权限。</p>
<h5 id="配置-Access-Token"><a href="#配置-Access-Token" class="headerlink" title="配置 Access Token"></a>配置 Access Token</h5><p>如下图，<code>Environment Variables</code> 区域就是用来添加权限信息的。我们需要填写一个Token的名称和值，该名称可以在配置文件中以 <code>${变量名}</code> 来引用，该Token我们需要从Github中获取。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/17080937cGl0m6me.jpg" alt="mark"></p>
<hr>
<h5 id="从GitHub获取Access-Token"><a href="#从GitHub获取Access-Token" class="headerlink" title="从GitHub获取Access Token"></a>从GitHub获取Access Token</h5><p>之前我们在使用命令 <code>hexo d</code> 部署hexo博客到GitHub上时，是因为本地有 <code>SSH key</code>，当交给 Travis 去自动部署时我们也需要设置可操作权限，这里我们使用GitHub提供的token变量来实现。</p>
<p>登陆 <code>GitHub</code> –<code>Settings</code> 选项，找到 <code>Personal access tokens</code> 页面。</p>
<p>点击右上角的 <code>Generate new token</code> 按钮会生成新的token，点击后提示输入密码后继续，然后来到如下界面，取个名字（我这里取 <code>Travis_Token</code> 下面的配置文件中会用到)，勾选相应权限，这里只需要 <code>repo</code> 下全部和 <code>user</code> 下的 <code>user:email</code> 即可。</p>
<p> <img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/170809L8IgF7ijH5.jpg" alt="mark"></p>
<p>生成完成后，将该token拷贝下来。这里需要注意的是该token只有这个时候才能看到，当再次进入这个页面时就只会显示之前设置的名称了。如果忘记了只能重新生成一个。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/170809dHK41IbL4h.jpg" alt="mark"></p>
<hr>
<h5 id="在Travis-CI中配置"><a href="#在Travis-CI中配置" class="headerlink" title="在Travis CI中配置"></a>在Travis CI中配置</h5><p>将上面获取到的token添加到 <code>Environment Variables</code> 部分，值为该 <code>token</code> ,而名称即为上面设置的 <code>Travis_Token</code> (请更改为个人所设置名称)。<strong>不勾选</strong>后面的 <code>Display value in build log</code> . 否则会在日志文件中暴露你的 <code>token</code> 信息，而日志文件是公开可见的。</p>
<p>至此我们已经配置好了要构建的仓库和访问的token，接下来就是如何构建的问题了。</p>
<hr>
<h5 id="创建-travis-yml-文件"><a href="#创建-travis-yml-文件" class="headerlink" title="创建 .travis.yml 文件"></a>创建 .travis.yml 文件</h5><p>之前的步骤中我们勾选了一项 <code>Build only if .travis.yml is present</code>,所以我们要在博客源码文件的 <code>hexo</code> 分支下新增一个 <code>.travis.yml</code> 配置文件，其内容如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">language: node_js # 设置语言</span><br><span class="line"></span><br><span class="line">node_js: stable # 设置相应版本</span><br><span class="line"></span><br><span class="line">install:</span><br><span class="line">    - npm install # 安装hexo及插件</span><br><span class="line"></span><br><span class="line">script:</span><br><span class="line">    - hexo clean # 清除</span><br><span class="line">    - hexo g # 生成</span><br><span class="line"></span><br><span class="line">after_script:</span><br><span class="line">    - cd .&#x2F;public</span><br><span class="line">    - git init</span><br><span class="line">    - git config user.name &quot;yourname&quot; # 修改name</span><br><span class="line">    - git config user.email &quot;your email&quot; # 修改email</span><br><span class="line">    - git add .</span><br><span class="line">    - git commit -m &quot;Travis CI Auto Builder&quot;</span><br><span class="line">    - git push --force --quiet &quot;https:&#x2F;&#x2F;$&#123;GH_TOKEN&#125;@$&#123;GH_REF&#125;&quot; master:master # GH_TOKEN是在Travis中配置token的名称</span><br><span class="line"></span><br><span class="line">branches:</span><br><span class="line">    only:</span><br><span class="line">        - hexo #只监测hexo分支，hexo是我的分支的名称，可根据自己情况设置</span><br><span class="line"></span><br><span class="line">env:</span><br><span class="line">    global:</span><br><span class="line">        - GH_REF: github.com&#x2F;yourname&#x2F;yourname.github.io.git #设置GH_REF，注意更改yourname</span><br></pre></td></tr></table></figure>

<p>注意：需要将配置文件中的 <code>GH_TOKEN</code> 换成我们自己设定的名称，这里我的配置应该是 <code>Travis_Token</code> 即 <code>- git push --force --quiet &quot;https://${Travis_Token}@${GH_REF}&quot; master:master # GH_TOKEN是在Travis中配置token的名称</code>。 还要更改 <code>GH_REF</code> 中我们的博客仓库的地址。</p>
<p>配置文件中的操作也很简单，这也是网上找到的比较常见的一种配置格式了。然而，这份配置文件中却隐藏着一个大坑。至于如何跳过去，后面再详说。</p>
<hr>
<h5 id="实现自动部署"><a href="#实现自动部署" class="headerlink" title="实现自动部署"></a>实现自动部署</h5><p>当 <code>.travis.yml</code> 配置文件修改完成后，将其提交到远程仓库的 <code>hexo</code> 分支下，此时如果之前的配置一切ok，我们应该能在 <code>Travis CI</code> 的博客项目主页页面中看到自动构建已经在开始执行了。上面会显示出构建过程中的日志信息及状态等。</p>
<p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/170809ii4E0ca8G4.jpg" alt="mark"></p>
<hr>
<h4 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h4><h5 id="问题一：提示-travis-yml-文件格式错误"><a href="#问题一：提示-travis-yml-文件格式错误" class="headerlink" title="问题一：提示 .travis.yml 文件格式错误"></a>问题一：提示 <code>.travis.yml</code> 文件格式错误</h5><p>在 <code>Travis CI</code> 的日志文件中，如果遇到下面的错误提示，那可能就是 <code>.travis.yml</code> 文件的格式有问题。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ERROR: An error occured while trying to parse your .travis.yml file.</span><br><span class="line">Please make sure that the file is valid YAML.</span><br><span class="line">http:&#x2F;&#x2F;lint.travis-ci.org can check your .travis.yml.</span><br><span class="line">The log message was: Build config file had a parse error: found character that cannot start any token while scanning for the next token at line 6 column 1.</span><br></pre></td></tr></table></figure>

<p>通过在github上查询，我发现这个问题是我在配置文件中的缩进使用了 <code>tab</code> 键导致的。因为在不同的编辑器下，<code>tab</code> 键表示的宽度可能不同。</p>
<p>这里建议是：<strong>不要用 <code>tab</code> 键，而是用适当的空格实现缩进</strong></p>
<ul>
<li><a href="https://github.com/ruby/psych/issues/136" target="_blank" rel="noopener">found character     &#39;\t&#39; that cannot start any token while scanning for the next token at line · Issue #136 · ruby/psych · GitHub</a></li>
</ul>
<hr>
<h5 id="问题二：Travis-CI的自动构建成功，但是构建完成后的项目没有推送到github中"><a href="#问题二：Travis-CI的自动构建成功，但是构建完成后的项目没有推送到github中" class="headerlink" title="问题二：Travis CI的自动构建成功，但是构建完成后的项目没有推送到github中"></a>问题二：Travis CI的自动构建成功，但是构建完成后的项目没有推送到github中</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">...</span><br><span class="line">git commit -m &quot;Travis CI Auto Builder&quot;</span><br><span class="line">git push --force --quiet &quot;https:&#x2F;&#x2F;$&#123;GH_TOKEN&#125;@$&#123;GH_REF&#125;&quot; master:master</span><br><span class="line">remote: Anonymous access to Leafney&#x2F;Leafney.github.io.git denied.</span><br><span class="line">fatal: Authentication failed for &#39;https:&#x2F;&#x2F;@github.com&#x2F;Leafney&#x2F;Leafney.github.io.git&#x2F;&#39;</span><br></pre></td></tr></table></figure>

<p>查看日志提示是权限问题。</p>
<p>这里的问题是我在 <code>.travis.yml</code> 配置文件中没有把 <code>${GH_TOKEN}</code> 部分换成自己在 <code>Travis CI</code> 中填写的token名称而导致的。执行时找不到token，也就没法设置权限了。</p>
<hr>
<h5 id="问题三：master-commit-树被清空-☆"><a href="#问题三：master-commit-树被清空-☆" class="headerlink" title="问题三：master commit 树被清空 ☆"></a>问题三：<code>master commit</code> 树被清空 ☆</h5><p>如果你按照上面的 <code>travis.yml</code> 配置文件的设置去自动构建你的博客，你会发现 <code>master</code> 分支的提交记录只有当前提交的这一条，而且无论操作多少次，也仅仅只有一条。这还真的是一个大坑呀！</p>
<p>比如下面这位网友的站点： <a href="https://github.com/hhstore/hhstore.github.io" target="_blank" rel="noopener">GitHub - hhstore/hhstore.github.io: 个人技术博客</a> 在 <code>master</code> 分支下就只有一条提交记录。</p>
<hr>
<p><code>.travis.yml</code> 部分配置内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">after_script:</span><br><span class="line">  - cd .&#x2F;public</span><br><span class="line">  - git init</span><br><span class="line">  - git config user.name &quot;yourname&quot;</span><br><span class="line">  - git config user.email &quot;your email&quot;</span><br><span class="line">  - git add .</span><br><span class="line">  - git commit -m &quot;update&quot;</span><br><span class="line">  - git push --force --quiet &quot;https:&#x2F;&#x2F;$&#123;GH_TOKEN&#125;@$&#123;GH_REF&#125;&quot; master:master</span><br></pre></td></tr></table></figure>

<p>仔细查看上面的配置文件，我们发现每次都是将 <code>public</code> 目录下的文件重新生成了一个git项目，然后强制覆盖提交到了 <code>master</code> 分支下，这就是问题的所在。</p>
<p>为了解决这个问题，我将配置文件改为了如下的内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">after_script:</span><br><span class="line">    - git clone https:&#x2F;&#x2F;$&#123;GH_REF&#125; .deploy_git</span><br><span class="line">    - cd .deploy_git</span><br><span class="line">    - git checkout master</span><br><span class="line">    - cd ..&#x2F;</span><br><span class="line">    - mv .deploy_git&#x2F;.git&#x2F; .&#x2F;public&#x2F;</span><br><span class="line">    - cd .&#x2F;public</span><br><span class="line">    - git config user.name &quot;yourname&quot;</span><br><span class="line">    - git config user.email &quot;your email&quot;</span><br><span class="line">    - git add .</span><br><span class="line">    - git commit -m &quot;Travis CI Auto Builder&quot;</span><br><span class="line">    - git push --force --quiet &quot;https:&#x2F;&#x2F;$&#123;GH_TOKEN&#125;@$&#123;GH_REF&#125;&quot; master:master</span><br></pre></td></tr></table></figure>

<p>在 <code>after_script</code> 部分，我先将博客项目 <code>clone</code> 到本地的 <code>.deploy_git</code> 目录下（目录名可自定义）,然后切换到 <code>master</code> 分支，将 <code>master</code> 分支下的 <code>.git</code> 目录拷贝到了 <code>public</code> 目录下，接着继续后面的 <code>commit</code> 操作。</p>
<p>这里算是采用了一种 <code>换位</code> 的方式。之前我们通过git管理文件时并不会改动 <code>.git</code> 目录，而只是更改文件。但在这种情况下，我们需要提交的是 <code>public</code> 目录下的新文件。这样，就会保留之前的提交记录了。</p>
<hr>
<p>附上我在使用的配置文件内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">language: node_js # 设置语言</span><br><span class="line"></span><br><span class="line">node_js: stable # 设置相应版本</span><br><span class="line"></span><br><span class="line">cache:</span><br><span class="line">    apt: true</span><br><span class="line">    directories:</span><br><span class="line">        - node_modules # 缓存不经常更改的内容</span><br><span class="line"></span><br><span class="line">before_install:</span><br><span class="line">    - npm install hexo-cli -g</span><br><span class="line"></span><br><span class="line">install:</span><br><span class="line">    - npm install # 安装hexo及插件</span><br><span class="line"></span><br><span class="line">script:</span><br><span class="line">    - hexo clean # 清除</span><br><span class="line">    - hexo g # 生成</span><br><span class="line"></span><br><span class="line">after_script:</span><br><span class="line">    - git clone https:&#x2F;&#x2F;$&#123;GH_REF&#125; .deploy_git</span><br><span class="line">    - cd .deploy_git</span><br><span class="line">    - git checkout master</span><br><span class="line">    - cd ..&#x2F;</span><br><span class="line">    - mv .deploy_git&#x2F;.git&#x2F; .&#x2F;public&#x2F;</span><br><span class="line">    - cd .&#x2F;public</span><br><span class="line">    - git config user.name &quot;your name&quot;</span><br><span class="line">    - git config user.email &quot;your email&quot;</span><br><span class="line">    - git add .</span><br><span class="line">    - git commit -m &quot;Travis CI Auto Builder&quot;</span><br><span class="line">    - git push --force --quiet &quot;https:&#x2F;&#x2F;$&#123;GH_TOKEN&#125;@$&#123;GH_REF&#125;&quot; master:master</span><br><span class="line"></span><br><span class="line">branches:</span><br><span class="line">    only:</span><br><span class="line">        - hexo # 只监测hexo分支</span><br><span class="line"></span><br><span class="line">env:</span><br><span class="line">    global:</span><br><span class="line">        - GH_REF: github.com&#x2F;yourname&#x2F;yourname.github.io.git #设置GH_REF，注意更改成自己的仓库地址</span><br></pre></td></tr></table></figure>

<p><strong>注意上面配置文件中的某些参数改为自己的。</strong></p>
<hr>
<h5 id="问题四：添加-commit-时间戳"><a href="#问题四：添加-commit-时间戳" class="headerlink" title="问题四：添加 commit 时间戳"></a>问题四：添加 commit 时间戳</h5><blockquote>
<p>2017-8-23 11:25:34 Update:</p>
</blockquote>
<p>按照上面的方法配置 <code>travis.yml</code> 的内容，我在一段时间后发现在 <code>master</code> 分支下的提交记录是这样的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Travis CI Auto Builder</span><br><span class="line"></span><br><span class="line">Travis CI Auto Builder</span><br><span class="line"></span><br><span class="line">Travis CI Auto Builder</span><br><span class="line"></span><br><span class="line">....</span><br></pre></td></tr></table></figure>

<p>而之前在使用 <code>hexo d</code> 直接部署的时候的提交记录是这样的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Site updated: 2017-06-22 22:29:10</span><br><span class="line"></span><br><span class="line">Site updated: 2017-04-19 08:13:36</span><br><span class="line"></span><br><span class="line">Site updated: 2017-03-27 20:54:40</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>看到每次的提交记录中没有提交的时间戳，感觉似乎缺少了些什么，所以考虑着要把 <code>commit</code> 的时间戳给加上。</p>
<p>通过查看 <code>travis.yml</code> 的文档，并没有找到如何直接获取当前时间或者和 <code>date</code> 有关的方法，但是 <code>script</code> 命令下是可以执行 <code>shell</code> 命令的，所以对 <code>travis.yml</code> 文件进行了修改。</p>
<p>在 <code>shell</code> 中获取当前的时间戳，可以这样：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#&#x2F;bin&#x2F;bash</span><br><span class="line"></span><br><span class="line">&gt; date +&quot;%Y-%m-%d %H:%M&quot;</span><br><span class="line">2017-08-23 11:07</span><br></pre></td></tr></table></figure>

<hr>
<p>需要注意的是：命令中要为 <code>publish-to-gh-pages.sh</code> 文件赋予<strong>可执行</strong>权限，否则会报无权限错误：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># travis-ci log</span><br><span class="line"></span><br><span class="line">$ .&#x2F;publish-to-gh-pages.sh</span><br><span class="line">&#x2F;home&#x2F;travis&#x2F;.travis&#x2F;job_stages: line 57: .&#x2F;publish-to-gh-pages.sh: Permission denied</span><br></pre></td></tr></table></figure>

<hr>
<p>另外，通过在测试中发现，Travis CI 中使用的linux系统在编译生成时使用的是UTC时间，这样我们在github中的提交列表中看到的提交时间就会晚8小时。我们需要在执行时将时区改为东八区。</p>
<p>这里通过在 <code>.travis.yml</code> 文件中添加如下代码解决：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">before_install:</span><br><span class="line">    - export TZ&#x3D;&#39;Asia&#x2F;Shanghai&#39;</span><br></pre></td></tr></table></figure>

<hr>
<p>修改后的 <code>.travis.yml</code> 内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">language: node_js # 设置语言</span><br><span class="line"></span><br><span class="line">node_js: stable # 设置相应版本</span><br><span class="line"></span><br><span class="line">cache:</span><br><span class="line">    apt: true</span><br><span class="line">    directories:</span><br><span class="line">        - node_modules # 缓存不经常更改的内容</span><br><span class="line"></span><br><span class="line">before_install:</span><br><span class="line">    - export TZ&#x3D;&#39;Asia&#x2F;Shanghai&#39; # 更改时区</span><br><span class="line">    - npm install hexo-cli -g</span><br><span class="line">    - chmod +x .&#x2F;publish-to-gh-pages.sh  # 为shell文件添加可执行权限</span><br><span class="line"></span><br><span class="line">install:</span><br><span class="line">    - npm install # 安装hexo及插件</span><br><span class="line"></span><br><span class="line">script:</span><br><span class="line">    - hexo clean # 清除</span><br><span class="line">    - hexo g # 生成</span><br><span class="line"></span><br><span class="line">after_script:</span><br><span class="line">    - .&#x2F;publish-to-gh-pages.sh</span><br><span class="line"></span><br><span class="line">branches:</span><br><span class="line">    only:</span><br><span class="line">        - hexo # 只监测hexo分支</span><br><span class="line"></span><br><span class="line">env:</span><br><span class="line">    global:</span><br><span class="line">        - GH_REF: github.com&#x2F;yourname&#x2F;yourname.github.io.git #设置GH_REF，注意更改成自己的仓库地址</span><br></pre></td></tr></table></figure>

<p>将 <code>after_script</code> 段中的命令移到了单独的shell文件中：</p>
<p>文件 <code>publish-to-gh-pages.sh</code> 内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">set -ev</span><br><span class="line"></span><br><span class="line">git clone https:&#x2F;&#x2F;$&#123;GH_REF&#125; .deploy_git</span><br><span class="line">cd .deploy_git</span><br><span class="line">git checkout master</span><br><span class="line"></span><br><span class="line">cd ..&#x2F;</span><br><span class="line">mv .deploy_git&#x2F;.git&#x2F; .&#x2F;public&#x2F;</span><br><span class="line"></span><br><span class="line">cd .&#x2F;public</span><br><span class="line"></span><br><span class="line">git config user.name  &quot;your name&quot;</span><br><span class="line">git config user.email &quot;your email&quot;</span><br><span class="line"></span><br><span class="line"># add commit timestamp</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;Travis CI Auto Builder at &#96;date +&quot;%Y-%m-%d %H:%M&quot;&#96;&quot;</span><br><span class="line"></span><br><span class="line">git push --force --quiet &quot;https:&#x2F;&#x2F;$&#123;TravisCIToken&#125;@$&#123;GH_REF&#125;&quot; master:master</span><br></pre></td></tr></table></figure>

<p><strong>注意上面配置文件中的某些参数改为自己的。</strong></p>
<ul>
<li><a href="https://docs.travis-ci.com/user/customizing-the-build/" target="_blank" rel="noopener">Customizing the Build - Travis CI</a></li>
<li><a href="https://stackoverflow.com/questions/42154912/permission-denied-for-build-sh-file" target="_blank" rel="noopener">travis ci - Permission denied for build.sh file - Stack Overflow</a></li>
<li><a href="http://gohom.win/2015/06/07/bash-date-usage/" target="_blank" rel="noopener">Shell中date命令用法 | Hom</a></li>
</ul>
<hr>
<h5 id="问题五：使用-x-oauth-basic"><a href="#问题五：使用-x-oauth-basic" class="headerlink" title="问题五：使用 x-oauth-basic"></a>问题五：使用 x-oauth-basic</h5><p>在网上看到一位网友解决 “<code>master commit</code> 树被清空” 的问题时采用了另外一种方法，即在 <code>after_script</code> 部分调用执行 <code>hexo d</code> 命令来发布。这样的方式遇到的问题是需要设置 <code>SSH Key</code> 或者必须获得权限才能进行 <code>push</code> 操作。</p>
<p>有一种授权的方式是通过https使用OAuth验证的方式将token添加到url中来提交。即需要更改 <code>_config.yml</code> 中的如下部分：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">## Docs: https:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@github.com:Leafney&#x2F;Leafney.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<p>为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">## Docs: https:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: https:&#x2F;&#x2F;&lt;token&gt;:x-oauth-basic@github.com&#x2F;owner&#x2F;repo.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<p>而这样一来 token 就暴露在配置文件中了。所以还需要在操作命令中使用替换的方式只在自动部署时更改该token。</p>
<p>这里仅做介绍，更详细可访问：</p>
<ul>
<li><a href="https://blog.xingoxu.com/2016/12/use-travis-ci-your-blog/" target="_blank" rel="noopener">使用Travis Ci使hexo自动生成并部署 | xingo&#39;s private plot</a></li>
<li><a href="https://github.com/blog/1270-easier-builds-and-deployments-using-git-over-https-and-oauth" target="_blank" rel="noopener">Easier builds and deployments using Git over HTTPS and OAuth · GitHub</a></li>
</ul>
<hr>
<h5 id="问题六：git-branch-分支操作相关命令"><a href="#问题六：git-branch-分支操作相关命令" class="headerlink" title="问题六：git branch 分支操作相关命令"></a>问题六：<code>git branch</code> 分支操作相关命令</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 查看本地所有分支(分之名称前面带*表示当前分支)</span><br><span class="line">&gt; git branch</span><br><span class="line"></span><br><span class="line"># 查看远程所有分支</span><br><span class="line">&gt; git branch -r</span><br><span class="line"></span><br><span class="line"># 创建分支 blog</span><br><span class="line">&gt; git branch blog</span><br><span class="line"></span><br><span class="line"># 切换到 blog 分支</span><br><span class="line">&gt; git checkout blog</span><br><span class="line"></span><br><span class="line"># 创建并切换到新分支</span><br><span class="line">&gt; git checkout -b blog</span><br><span class="line"></span><br><span class="line"># 删除分支</span><br><span class="line">&gt; git branch -d blog</span><br><span class="line"></span><br><span class="line"># 提交本地test分支作为远程的test分支</span><br><span class="line">&gt; git push origin test:test</span><br><span class="line"></span><br><span class="line"># 合并分支(将名称为[blog]的分支与当前分支合并)</span><br><span class="line">&gt; git merge blog</span><br><span class="line"></span><br><span class="line"># 获取远程指定分支</span><br><span class="line">&gt; git pull origin blog</span><br></pre></td></tr></table></figure>

<hr>
<h5 id="问题七：博客仓库源码"><a href="#问题七：博客仓库源码" class="headerlink" title="问题七：博客仓库源码"></a>问题七：博客仓库源码</h5><p>如果没有耐心按照上面的步骤一步步操作的话，可以直接查看我的博客仓库源码：</p>
<ul>
<li><a href="https://github.com/Leafney/Leafney.github.io" target="_blank" rel="noopener">GitHub - Leafney/Leafney.github.io: blog</a></li>
</ul>
<hr>
<h4 id="相关参考"><a href="#相关参考" class="headerlink" title="相关参考"></a>相关参考</h4><ul>
<li><a href="http://www.jianshu.com/p/e22c13d85659" target="_blank" rel="noopener">手把手教你使用Travis CI自动部署你的Hexo博客到Github上 - 简书</a></li>
<li><a href="http://www.jianshu.com/p/5e74046e7a0f" target="_blank" rel="noopener">使用 Travis CI 自动部署 Hexo - 简书</a></li>
<li><a href="http://zhzhou.me/2017/02/20/auto-deploy-hexo-on-travis-ci/" target="_blank" rel="noopener">使用 Travis-CI 来自动化部署 Hexo · ZHOU</a></li>
<li><a href="http://pinkyjie.com/2016/02/27/continuous-integration-with-travis-ci/" target="_blank" rel="noopener">用TravisCI来做持续集成 | 进击的马斯特</a></li>
<li><a href="https://docs.travis-ci.com/user/customizing-the-build/" target="_blank" rel="noopener">Customizing the Build - Travis CI</a></li>
</ul>
<hr>
<p>该文章同步发表在：</p>
<ul>
<li><a href="http://www.cnblogs.com/babycool/p/7326722.html" target="_blank" rel="noopener">使用Travis CI自动部署Hexo博客 - 酷小孩 - 博客园</a></li>
<li><a href="http://www.itfanr.cc/2017/08/09/using-travis-ci-automatic-deploy-hexo-blogs/">使用Travis CI自动部署Hexo博客 | IT范儿</a></li>
</ul>
]]></content>
      <categories>
        <category>Hexo博客搭建</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Travis-CI</tag>
      </tags>
  </entry>
  <entry>
    <title>reload-changed-without-restart-for-golang-web-gin</title>
    <url>/2017/08/01/reload-changed-without-restart-for-golang-web-gin/</url>
    <content><![CDATA[<p>Gin is a HTTP web framework written in Go (Golang)。但是在调试Gin项目时，每次更改了文件内容后都需要重新运行 <code>go run main.go</code> 命令才能看到更改。项目 <code>codegangsta/gin</code> 和 <code>pilu/fresh</code> 是通过采用热更新的方式来调试Gin项目推荐度较高的两个，且看哪个在操作上更加的方便。</p>
<h4 id="gin"><a href="#gin" class="headerlink" title="gin"></a>gin</h4><h5 id="github-地址"><a href="#github-地址" class="headerlink" title="github 地址"></a>github 地址</h5><p><a href="https://github.com/codegangsta/gin" target="_blank" rel="noopener">GitHub - codegangsta/gin: Live reload utility for Go web servers</a></p>
<h5 id="下载并安装"><a href="#下载并安装" class="headerlink" title="下载并安装"></a>下载并安装</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">go get github.com&#x2F;codegangsta&#x2F;gin</span><br></pre></td></tr></table></figure>

<p>将 <code>GOPATH/bin</code> 目录添加到系统的 <code>PATH</code> 中。</p>
<h5 id="项目测试"><a href="#项目测试" class="headerlink" title="项目测试"></a>项目测试</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package main</span><br><span class="line">import &quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;</span><br><span class="line">func main() &#123;</span><br><span class="line">        r :&#x3D; gin.Default()</span><br><span class="line">        r.GET(&quot;&#x2F;&quot;, func(c *gin.Context) &#123;</span><br><span class="line">                c.String(200, &quot;hello world\n&quot;)</span><br><span class="line">        &#125;)</span><br><span class="line">        r.Run(&quot;:3001&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 运行</span><br><span class="line">&gt; gin run main.go</span><br><span class="line"></span><br><span class="line"># 浏览器访问</span><br><span class="line">http:&#x2F;&#x2F;localhost:3000</span><br></pre></td></tr></table></figure>

<h5 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h5><blockquote>
<p>因为项目 <code>codegangsta/gin</code> 和 <code>gin-gonic/gin</code> 重名，所以这里我用 <code>Reload gin</code> 代指 <code>codegangsta/gin</code>;用 <code>Web gin</code> 代指 <code>gin-gonic/gin</code>。</p>
</blockquote>
<p>默认情况下，<code>Reload gin</code>的默认监听端口为 <code>3000</code>,内部导向的go web项目端口为 <code>3001</code>。如果采用 <code>Reload gin</code> 的默认端口，则需要将 <code>Web gin</code> 的监听端口改为 <code>3001</code>,即：<code>r.Run(&quot;:3001&quot;)</code> 。</p>
<p>如果需要自定义端口，通过 <code>gin -h</code> 可以看到 <code>Reload gin</code> 的常用配置项。其中:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--port value, -p value        port for the proxy server (default: 3000)</span><br><span class="line">--appPort value, -a value     port for the Go web server (default: 3001)</span><br></pre></td></tr></table></figure>

<p>可以分别指定监听端口和映射端口。</p>
<p>不过，经过测试，自定义端口时报如下错误：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">λ gin run -p 8082 -a 8080 main.go</span><br><span class="line">Incorrect Usage: flag provided but not defined: -p</span><br><span class="line"></span><br><span class="line">NAME:</span><br><span class="line">   gin run - Run the gin proxy in the current working directory</span><br><span class="line"></span><br><span class="line">USAGE:</span><br><span class="line">   gin run [arguments...]</span><br></pre></td></tr></table></figure>

<p>好像目前只能使用默认的 <code>3000</code> 和 <code>3001</code> 端口。</p>
<hr>
<h4 id="fresh"><a href="#fresh" class="headerlink" title="fresh"></a>fresh</h4><h5 id="github地址"><a href="#github地址" class="headerlink" title="github地址"></a>github地址</h5><p><a href="https://github.com/pilu/fresh" target="_blank" rel="noopener">GitHub - pilu/fresh: Build and (re)start go web apps after saving/creating/deleting source files.</a></p>
<h5 id="下载及安装"><a href="#下载及安装" class="headerlink" title="下载及安装"></a>下载及安装</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">go get github.com&#x2F;pilu&#x2F;fresh</span><br></pre></td></tr></table></figure>

<p>将 <code>GOPATH/bin</code> 目录添加到系统的 <code>PATH</code> 中。</p>
<h5 id="项目测试-1"><a href="#项目测试-1" class="headerlink" title="项目测试"></a>项目测试</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package main</span><br><span class="line">import &quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;</span><br><span class="line">func main() &#123;</span><br><span class="line">        r :&#x3D; gin.Default()</span><br><span class="line">        r.GET(&quot;&#x2F;&quot;, func(c *gin.Context) &#123;</span><br><span class="line">                c.String(200, &quot;hello world\n&quot;)</span><br><span class="line">        &#125;)</span><br><span class="line">        r.Run(&quot;:8080&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 进入项目所在目录</span><br><span class="line">&gt; cd &#x2F;path&#x2F;to&#x2F;myapp</span><br><span class="line"></span><br><span class="line"># 运行</span><br><span class="line">&gt; fresh</span><br><span class="line"></span><br><span class="line"># 浏览器访问</span><br><span class="line">http:&#x2F;&#x2F;localhost:8080</span><br></pre></td></tr></table></figure>

<h5 id="扩展-1"><a href="#扩展-1" class="headerlink" title="扩展"></a>扩展</h5><p>原项目不需要做任何改动，只需要在原项目的目录下执行命令 <code>fresh</code> 即可。</p>
<hr>
<p>经以上测试，推荐使用 <code>fresh</code> 来运行 <code>Gin</code> 项目。</p>
<hr>
<h4 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h4><ul>
<li><a href="https://github.com/codegangsta/gin" target="_blank" rel="noopener">GitHub - codegangsta/gin: Live reload utility for Go web servers</a></li>
<li><a href="https://github.com/pilu/fresh" target="_blank" rel="noopener">GitHub - pilu/fresh: Build and (re)start go web apps after saving/creating/deleting source files.</a></li>
<li><a href="https://github.com/gin-gonic/gin" target="_blank" rel="noopener">GitHub - gin-gonic/gin: Gin is a HTTP web framework written in Go (Golang). It features a Martini-like API with much better performance – up to 40 times faster. If you need smashing performance, get yourself some Gin.</a></li>
</ul>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
        <tag>Gin</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang网站微框架Gin</title>
    <url>/2017/07/30/golang-web-framework-gin/</url>
    <content><![CDATA[<p>Gin is a web framework written in Golang.</p>
<h4 id="安装-Gin"><a href="#安装-Gin" class="headerlink" title="安装 Gin"></a>安装 Gin</h4><p>获取包：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; go get github.com&#x2F;gin-gonic&#x2F;gin</span><br></pre></td></tr></table></figure>

<p>添加引用：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="Gin-web-入门"><a href="#Gin-web-入门" class="headerlink" title="Gin web 入门"></a>Gin web 入门</h4><h5 id="一个简单的示例"><a href="#一个简单的示例" class="headerlink" title="一个简单的示例"></a>一个简单的示例</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">	&quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">	router :&#x3D; gin.Default()</span><br><span class="line"></span><br><span class="line">	router.GET(&quot;&#x2F;&quot;, func(c *gin.Context) &#123;</span><br><span class="line">		c.String(200, &quot;hello world!&quot;)</span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;http:&#x2F;&#x2F;localhost:8081  postdata: name&#x3D;tom</span><br><span class="line">	router.POST(&quot;&#x2F;&quot;, postHome)</span><br><span class="line"></span><br><span class="line">	router.Run(&quot;:8081&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func postHome(c *gin.Context) &#123;</span><br><span class="line">	uName :&#x3D; c.PostForm(&quot;name&quot;)</span><br><span class="line">	c.JSON(200, gin.H&#123;</span><br><span class="line">		&quot;say&quot;: &quot;Hello &quot; + uName,</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="请求方法名必须全部是大写字母"><a href="#请求方法名必须全部是大写字母" class="headerlink" title="请求方法名必须全部是大写字母"></a>请求方法名必须全部是大写字母</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">router.GET(&quot;&#x2F;someGet&quot;, getting)</span><br><span class="line">router.POST(&quot;&#x2F;somePost&quot;, posting)</span><br><span class="line">router.PUT(&quot;&#x2F;somePut&quot;, putting)</span><br><span class="line">router.DELETE(&quot;&#x2F;someDelete&quot;, deleting)</span><br><span class="line">router.PATCH(&quot;&#x2F;somePatch&quot;, patching)</span><br><span class="line">router.HEAD(&quot;&#x2F;someHead&quot;, head)</span><br><span class="line">router.OPTIONS(&quot;&#x2F;someOptions&quot;, options)</span><br></pre></td></tr></table></figure>

<h5 id="获取路由参数"><a href="#获取路由参数" class="headerlink" title="获取路由参数"></a>获取路由参数</h5><p>通过 <code>Context</code> 的 <code>Param</code> 方法来获取：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">&#x2F;&#x2F; http:&#x2F;&#x2F;localhost:8081&#x2F;user&#x2F;article&#x2F;tommy</span><br><span class="line">router.GET(&quot;&#x2F;user&#x2F;:type&#x2F;:name&quot;, getRouteStr)</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">func getRouteStr(c *gin.Context) &#123;</span><br><span class="line">	ctype :&#x3D; c.Param(&quot;type&quot;)</span><br><span class="line">	cname :&#x3D; c.Param(&quot;name&quot;)</span><br><span class="line">	c.JSON(200, gin.H&#123;</span><br><span class="line">		&quot;typeName&quot;: ctype,</span><br><span class="line">		&quot;username&quot;: cname,</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;result:</span><br><span class="line">&#123;</span><br><span class="line">    &quot;typeName&quot;: &quot;article&quot;,</span><br><span class="line">    &quot;username&quot;: &quot;tommy&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="获取url参数"><a href="#获取url参数" class="headerlink" title="获取url参数"></a>获取url参数</h5><p>通过 <code>DefaultQuery</code> 或 <code>Query</code> 方法获取：</p>
<ul>
<li><code>Query(&#39;xxx&#39;)</code> 如果没有相应值，默认为空字符串</li>
<li><code>DefaultQuery(&quot;xxx&quot;,&quot;defaultValue&quot;)</code> 可设置默认值,string类型</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">	router.GET(&quot;&#x2F;user&quot;, getQueryStrs)</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">func getQueryStrs(c *gin.Context) &#123;</span><br><span class="line">	name :&#x3D; c.Query(&quot;name&quot;)           &#x2F;&#x2F;如果没有相应值，默认为空字符串</span><br><span class="line">	age :&#x3D; c.DefaultQuery(&quot;age&quot;, &quot;0&quot;) &#x2F;&#x2F;可设置默认值,string类型</span><br><span class="line">	c.JSON(200, gin.H&#123;</span><br><span class="line">		&quot;name&quot;: name,</span><br><span class="line">		&quot;age&quot;:  age,</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;result:</span><br><span class="line">&#x2F;&#x2F;http:&#x2F;&#x2F;localhost:8081&#x2F;user?name&#x3D;tom&amp;age&#x3D;23</span><br><span class="line">&#123;</span><br><span class="line">    &quot;age&quot;: &quot;23&quot;,</span><br><span class="line">    &quot;name&quot;: &quot;tom&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;result2:</span><br><span class="line">&#x2F;&#x2F;http:&#x2F;&#x2F;localhost:8081&#x2F;user?name&#x3D;tom</span><br><span class="line">&#123;</span><br><span class="line">    &quot;age&quot;: &quot;0&quot;,</span><br><span class="line">    &quot;name&quot;: &quot;tom&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<p><code>c.Request.URL.Query()</code> 可获取所有url请求参数 <code>map[]</code> 集合：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">		&#x2F;&#x2F;获取所有url请求参数</span><br><span class="line">		reqData :&#x3D; c.Request.URL.Query()</span><br><span class="line">		fmt.Printf(&quot;[info] req url data is %s\n&quot;, reqData)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;result:</span><br><span class="line">&#x2F;&#x2F;http:&#x2F;&#x2F;localhost:8080?id&#x3D;3&amp;name&#x3D;zhangsan&amp;address&#x3D;beijing</span><br><span class="line">[info] req url data is map[name:[zhangsan] address:[beijing] id:[3]]</span><br></pre></td></tr></table></figure>

<h5 id="获取表单参数"><a href="#获取表单参数" class="headerlink" title="获取表单参数"></a>获取表单参数</h5><p>表单参数通过 <code>PostForm</code> 或 <code>DefaultPostForm</code> 方法获取：</p>
<ul>
<li><code>PostForm()</code></li>
<li><code>DefaultPostForm(&quot;xxx&quot;,&quot;defaultValue&quot;)</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">	...</span><br><span class="line">	router.POST(&quot;&#x2F;&quot;, getFormStr)</span><br><span class="line">	...</span><br><span class="line"></span><br><span class="line">func getFormStr(c *gin.Context) &#123;</span><br><span class="line">	title :&#x3D; c.PostForm(&quot;title&quot;)</span><br><span class="line">	cont :&#x3D; c.DefaultPostForm(&quot;cont&quot;, &quot;没有内容&quot;)</span><br><span class="line">	c.JSON(200, gin.H&#123;</span><br><span class="line">		&quot;title&quot;: title,</span><br><span class="line">		&quot;cont&quot;:  cont,</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;result:</span><br><span class="line">&#x2F;&#x2F;http:&#x2F;&#x2F;localhost:8081  postData: title:这是一个标题</span><br><span class="line">&#123;</span><br><span class="line">    &quot;cont&quot;: &quot;没有内容&quot;,</span><br><span class="line">    &quot;title&quot;: &quot;这是一个标题&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<p><code>c.Request.Body</code> 获取所有 <code>post body</code> 数据：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">		&#x2F;&#x2F;获取post body</span><br><span class="line">		x, _ :&#x3D; ioutil.ReadAll(c.Request.Body)</span><br><span class="line">		fmt.Printf(&quot;[info] %s&quot;, string(x))</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;result:</span><br><span class="line">&#x2F;&#x2F; post body type :x-www-form-urlencoded (user&#x3D;tom pwd&#x3D;123)</span><br><span class="line">[info] user&#x3D;tom&amp;pwd&#x3D;123</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;result:</span><br><span class="line">&#x2F;&#x2F; post body type: raw application&#x2F;json</span><br><span class="line">[info] &#123;&quot;name&quot;:&quot;zhangfei&quot;,&quot;id&quot;:32&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><a href="https://stackoverflow.com/questions/31911579/gin-golang-empty-req-body" target="_blank" rel="noopener">go - gin/golang - Empty Req Body - Stack Overflow</a></li>
<li><a href="https://github.com/gin-gonic/gin/issues/401" target="_blank" rel="noopener">Print Request Body empty · Issue #401 · gin-gonic/gin · GitHub</a></li>
</ul>
<hr>
<p>获取所有 <code>post data</code> 数据 （<code>map[]</code> 类型）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">		c.Request.ParseForm()</span><br><span class="line">		reqBodyData :&#x3D; c.Request.PostForm</span><br><span class="line">		fmt.Printf(&quot;[info] req body data is %s \n&quot;, reqBodyData)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;result:</span><br><span class="line">&#x2F;&#x2F; post body type :x-www-form-urlencoded (user&#x3D;tom pwd&#x3D;123)</span><br><span class="line">[info] req body data is map[user:[tom] pwd:[123]]</span><br></pre></td></tr></table></figure>

<ul>
<li><a href="https://stackoverflow.com/questions/39984575/gin-gonic-array-of-values-from-postform" target="_blank" rel="noopener">go - Gin Gonic array of values from PostForm - Stack Overflow</a></li>
</ul>
<h5 id="路由群组"><a href="#路由群组" class="headerlink" title="路由群组"></a>路由群组</h5><p>支持 <code>一级</code> 或 <code>多级</code> 分组的路由规则：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">	...</span><br><span class="line">	&#x2F;&#x2F;路由分组</span><br><span class="line">	articleGroup :&#x3D; router.Group(&quot;&#x2F;article&quot;)</span><br><span class="line">	&#123;</span><br><span class="line">		articleGroup.GET(&quot;&#x2F;one&#x2F;:id&quot;, getArticleByid)</span><br><span class="line">		articleGroup.GET(&quot;&#x2F;list&quot;, getArticleList)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;多级路由分组</span><br><span class="line">	apiGroup :&#x3D; router.Group(&quot;&#x2F;api&quot;)</span><br><span class="line">	apiv1Group :&#x3D; apiGroup.Group(&quot;&#x2F;v1&quot;)</span><br><span class="line">	&#123;</span><br><span class="line">		apiv1Group.GET(&quot;&#x2F;user&quot;, getApiV1User)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	apiv2Group :&#x3D; apiGroup.Group(&quot;&#x2F;v2&quot;)</span><br><span class="line">	&#123;</span><br><span class="line">		apiv2Group.GET(&quot;&#x2F;order&quot;, getApiV2Order)</span><br><span class="line">	&#125;</span><br><span class="line">	...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func getArticleByid(c *gin.Context) &#123;</span><br><span class="line">	a_id :&#x3D; c.Param(&quot;id&quot;)</span><br><span class="line">	c.String(200, a_id)</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;result:</span><br><span class="line">&#x2F;&#x2F;http:&#x2F;&#x2F;localhost:8081&#x2F;article&#x2F;one&#x2F;3</span><br><span class="line">3</span><br><span class="line"></span><br><span class="line">func getArticleList(c *gin.Context) &#123;</span><br><span class="line">	c.JSON(200, gin.H&#123;</span><br><span class="line">		&quot;a&quot;: &quot;1&quot;,</span><br><span class="line">		&quot;b&quot;: &quot;2&quot;,</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;result:</span><br><span class="line">&#x2F;&#x2F;http:&#x2F;&#x2F;localhost:8081&#x2F;article&#x2F;list</span><br><span class="line">&#123;</span><br><span class="line">    &quot;a&quot;: &quot;1&quot;,</span><br><span class="line">    &quot;b&quot;: &quot;2&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func getApiV1User(c *gin.Context) &#123;</span><br><span class="line">	c.String(200, &quot;api&#x2F;v1&#x2F;user&quot;)</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;result:</span><br><span class="line">&#x2F;&#x2F;http:&#x2F;&#x2F;localhost:8081&#x2F;api&#x2F;v1&#x2F;user</span><br><span class="line">api&#x2F;v1&#x2F;user</span><br><span class="line"></span><br><span class="line">func getApiV2Order(c *gin.Context) &#123;</span><br><span class="line">	c.String(200, &quot;api&#x2F;v2&#x2F;order&quot;)</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;result:</span><br><span class="line">&#x2F;&#x2F;http:&#x2F;&#x2F;localhost:8081&#x2F;api&#x2F;v2&#x2F;order</span><br><span class="line">api&#x2F;v2&#x2F;order</span><br></pre></td></tr></table></figure>

<h5 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h5><ul>
<li><code>Bind()</code> </li>
<li><code>BindJSON()</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">	...</span><br><span class="line">	&#x2F;&#x2F;绑定普通表单 (user&#x3D;tom&amp;&amp;pwd&#x3D;123)</span><br><span class="line">	router.POST(&quot;&#x2F;loginform&quot;, func(c *gin.Context) &#123;</span><br><span class="line">		var form Login</span><br><span class="line">		if c.Bind(&amp;form) &#x3D;&#x3D; nil &#123;</span><br><span class="line">			if form.User &#x3D;&#x3D; &quot;tom&quot; &amp;&amp; form.Password &#x3D;&#x3D; &quot;123&quot; &#123;</span><br><span class="line">				c.JSON(200, gin.H&#123;&quot;status&quot;: &quot;form logined in&quot;&#125;)</span><br><span class="line">			&#125; else &#123;</span><br><span class="line">				c.JSON(201, gin.H&#123;&quot;status&quot;: &quot;form no login&quot;&#125;)</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;绑定JSON (&#123;&quot;user&quot;:&quot;tom&quot;,&quot;pwd&quot;:&quot;123&quot;&#125;) Content-Type:application&#x2F;json</span><br><span class="line">	router.POST(&quot;&#x2F;loginjson&quot;, func(c *gin.Context) &#123;</span><br><span class="line">		var json Login</span><br><span class="line">		if c.BindJSON(&amp;json) &#x3D;&#x3D; nil &#123;</span><br><span class="line">			if json.User &#x3D;&#x3D; &quot;tom&quot; &amp;&amp; json.Password &#x3D;&#x3D; &quot;123&quot; &#123;</span><br><span class="line">				c.JSON(200, gin.H&#123;&quot;status&quot;: &quot;json logined in&quot;&#125;)</span><br><span class="line">			&#125; else &#123;</span><br><span class="line">				c.JSON(201, gin.H&#123;&quot;status&quot;: &quot;json no login&quot;&#125;)</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;)</span><br><span class="line">	...</span><br><span class="line"></span><br><span class="line">type Login struct &#123;</span><br><span class="line">	User     string &#96;form:&quot;user&quot; json:&quot;user&quot;&#96;</span><br><span class="line">	Password string &#96;form:&quot;pwd&quot; json:&quot;pwd&quot;&#96;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="POST上传文件"><a href="#POST上传文件" class="headerlink" title="POST上传文件"></a>POST上传文件</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">&#x2F;&#x2F;表单上传文件  http:&#x2F;&#x2F;localhost:8081&#x2F;upload </span><br><span class="line">&#x2F;&#x2F; key:upload value: file....</span><br><span class="line">&#x2F;&#x2F;result:</span><br><span class="line">&#x2F;&#x2F;&#123;</span><br><span class="line">   &#x2F;&#x2F;&quot;filename&quot;: &quot;1009e3ee4bc0919e11d32e00ccf55cdf.jpg&quot;</span><br><span class="line">&#x2F;&#x2F;&#125;</span><br><span class="line"></span><br><span class="line">router.POST(&quot;&#x2F;upload&quot;, func(c *gin.Context) &#123;</span><br><span class="line">	_, header, _ :&#x3D; c.Request.FormFile(&quot;upload&quot;)</span><br><span class="line">	filename :&#x3D; header.Filename</span><br><span class="line">	c.JSON(200, gin.H&#123;</span><br><span class="line">		&quot;filename&quot;: filename,</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h5 id="根据客户端的请求类型，返回对应的响应格式"><a href="#根据客户端的请求类型，返回对应的响应格式" class="headerlink" title="根据客户端的请求类型，返回对应的响应格式"></a>根据客户端的请求类型，返回对应的响应格式</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">router.GET(&quot;&#x2F;getdata&quot;, func(c *gin.Context) &#123;</span><br><span class="line">	contentType :&#x3D; c.Request.Header.Get(&quot;Content-Type&quot;)</span><br><span class="line"></span><br><span class="line">	switch contentType &#123;</span><br><span class="line">	case &quot;application&#x2F;json&quot;:</span><br><span class="line">		c.JSON(200, gin.H&#123;&quot;user&quot;: &quot;张飞&quot;, &quot;address&quot;: &quot;长坂坡&quot;&#125;)</span><br><span class="line">	case &quot;application&#x2F;xml&quot;:</span><br><span class="line">		c.XML(200, gin.H&#123;&quot;user&quot;: &quot;张飞&quot;, &quot;address&quot;: &quot;长坂坡&quot;&#125;)</span><br><span class="line">	case &quot;application&#x2F;x-www-form-urlencoded&quot;:</span><br><span class="line">		c.String(200, &quot;张飞 长坂坡&quot;)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;)</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h5 id="字符串响应"><a href="#字符串响应" class="headerlink" title="字符串响应"></a>字符串响应</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &quot;net&#x2F;http&quot;</span><br><span class="line"></span><br><span class="line">c.String(200, &quot;some string&quot;)</span><br><span class="line">c.String(http.StatusOK, &quot;some string&quot;)</span><br></pre></td></tr></table></figure>

<h5 id="JSON-XML-YAML等格式响应"><a href="#JSON-XML-YAML等格式响应" class="headerlink" title="JSON/XML/YAML等格式响应"></a>JSON/XML/YAML等格式响应</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">c.JSON(http.StatusOK, msg)</span><br><span class="line">c.XML(http.StatusOK, msg)</span><br><span class="line">c.YAML(http.StatusOK, msg)</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h5 id="视图响应"><a href="#视图响应" class="headerlink" title="视图响应"></a>视图响应</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">	...</span><br><span class="line">	&#x2F;&#x2F;加载模板</span><br><span class="line">	router.LoadHTMLGlob(&quot;templates&#x2F;*&quot;)</span><br><span class="line">	&#x2F;&#x2F; router.LoadHTMLFiles(&quot;templates&#x2F;index.html&quot;,&quot;templates&#x2F;article.html&quot;)</span><br><span class="line">	router.GET(&quot;&#x2F;&quot;, func(c *gin.Context) &#123;</span><br><span class="line">		&#x2F;&#x2F;根据完整文件名渲染模板，并传递参数</span><br><span class="line">		c.HTML(200, &quot;index.html&quot;, gin.H&#123;</span><br><span class="line">			&quot;say&quot;: &quot;Hello World!&quot;,</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;)</span><br><span class="line">	...</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;index.html:</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">	&lt;title&gt;&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">	&lt;h3&gt;&#123;&#123; .say &#125;&#125;&lt;&#x2F;h3&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;result:</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;title&gt;&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;&#x2F;head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;h3&gt;Hello World!&lt;&#x2F;h3&gt;</span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<h5 id="加载多层模板路径"><a href="#加载多层模板路径" class="headerlink" title="加载多层模板路径"></a>加载多层模板路径</h5><p>经测试：如果是多层级的模板文件，要在模板文件中使用  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123;define xxx&#125;&#125; &#123;&#123;end&#125;&#125;</span><br></pre></td></tr></table></figure>
<p>将该模板作为嵌套模板：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;加载模板</span><br><span class="line">router.LoadHTMLGlob(&quot;templates&#x2F;**&#x2F;*&quot;)</span><br><span class="line">&#x2F;&#x2F; router.LoadHTMLFiles(&quot;templates&#x2F;index.html&quot;,&quot;templates&#x2F;article.html&quot;)</span><br><span class="line"></span><br><span class="line">router.GET(&quot;&#x2F;articles&#x2F;index&quot;, func(c *gin.Context) &#123;</span><br><span class="line">	&#x2F;&#x2F;根据完整文件名渲染模板，并传递参数</span><br><span class="line">	c.HTML(200, &quot;articles&#x2F;index.html&quot;, gin.H&#123;</span><br><span class="line">		&quot;say&quot;: &quot;Article index!&quot;,</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router.GET(&quot;&#x2F;users&#x2F;index&quot;, func(c *gin.Context) &#123;</span><br><span class="line">	c.HTML(200, &quot;&#x2F;users&#x2F;index.html&quot;, gin.H&#123;</span><br><span class="line">		&quot;say&quot;: &quot;User index!&quot;,</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>templates/articles/index.html:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123;define &quot;articles&#x2F;index.html&quot;&#125;&#125;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">	&lt;title&gt;&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">	&lt;h3&gt;&#123;&#123; .say &#125;&#125;&lt;&#x2F;h3&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br><span class="line">&#123;&#123;end&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>templates/users/index.html:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123;define &quot;users&#x2F;index.html&quot;&#125;&#125;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">	&lt;title&gt;&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">	&lt;h3&gt;&#123;&#123; .say &#125;&#125;&lt;&#x2F;h3&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br><span class="line">&#123;&#123;end&#125;&#125;</span><br></pre></td></tr></table></figure>

<h5 id="提供静态文件"><a href="#提供静态文件" class="headerlink" title="提供静态文件"></a>提供静态文件</h5><ul>
<li><code>Static()</code></li>
<li><code>StaticFS()</code></li>
<li><code>StatucFile()</code></li>
</ul>
<p>示例:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">func main() &#123;</span><br><span class="line">	router :&#x3D; gin.Default()</span><br><span class="line">	router.Static(&quot;&#x2F;assets&quot;, &quot;.&#x2F;assets&quot;)</span><br><span class="line">	router.StaticFS(&quot;&#x2F;more_static&quot;, http.Dir(&quot;my_file_system&quot;))</span><br><span class="line">	router.StaticFile(&quot;&#x2F;favicon.ico&quot;, &quot;.&#x2F;resources&#x2F;favicon.ico&quot;)</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F; Listen and serve on 0.0.0.0:8080</span><br><span class="line">	router.Run(&quot;:8080&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>待详细研究。</p>
<h5 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h5><p>支持 <code>内部</code> 和 <code>外部</code> 地址的重定向</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">&#x2F;&#x2F;跳转到外部地址</span><br><span class="line">router.GET(&quot;&#x2F;abc&quot;, func(c *gin.Context) &#123;</span><br><span class="line">	c.Redirect(302, &quot;http:&#x2F;&#x2F;www.baidu.com&quot;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;跳转到内部地址</span><br><span class="line">router.GET(&quot;def&quot;, func(c *gin.Context) &#123;</span><br><span class="line">	c.Redirect(302, &quot;&#x2F;home&quot;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router.GET(&quot;&#x2F;home&quot;, func(c *gin.Context) &#123;</span><br><span class="line">	c.String(200, &quot;home page&quot;)</span><br><span class="line">&#125;)</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h5 id="自定义中间件及中间件的使用方式"><a href="#自定义中间件及中间件的使用方式" class="headerlink" title="自定义中间件及中间件的使用方式"></a>自定义中间件及中间件的使用方式</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">	...</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">	&#x2F;&#x2F; router :&#x3D; gin.Default()</span><br><span class="line"></span><br><span class="line">	router :&#x3D; gin.New()</span><br><span class="line">	&#x2F;&#x2F;全局中间件</span><br><span class="line">	router.Use(MyLogger())</span><br><span class="line"></span><br><span class="line">	router.GET(&quot;&#x2F;test&quot;, func(c *gin.Context) &#123;</span><br><span class="line">		example :&#x3D; c.MustGet(&quot;example&quot;).(string)</span><br><span class="line">		c.String(200, example)</span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;单路由中间件</span><br><span class="line">	router.GET(&quot;&#x2F;abc&quot;,MyMiddelware(),getAbc)</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;群组路由中间件</span><br><span class="line">	aGroup:&#x3D;router.Group(&quot;&#x2F;&quot;,MyMiddelware())</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;中间件可以同时添加多个</span><br><span class="line">	aGroup:&#x3D;router.Group(&quot;&#x2F;&quot;,MyMiddelware(),My2Middelware(),My3Middelware())</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;或者：群组路由中间件</span><br><span class="line">	bGroup:&#x3D;router.Group(&quot;&#x2F;&quot;)</span><br><span class="line">	bGroup.Use(MyMiddelware())</span><br><span class="line">	&#123;</span><br><span class="line">		bGroup.GET(&quot;&#x2F;v1&quot;,getV1)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	router.Run(&quot;:8081&quot;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func MyLogger() gin.HandlerFunc &#123;</span><br><span class="line">	return func(c *gin.Context) &#123;</span><br><span class="line">		c.Set(&quot;example&quot;, &quot;123465&quot;)</span><br><span class="line"></span><br><span class="line">		c.Next()</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="异步处理"><a href="#异步处理" class="headerlink" title="异步处理"></a>异步处理</h5><p><code>goroutine</code> 中只能使用只读的上下文 <code>c.Copy()</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">&#x2F;&#x2F;异步</span><br><span class="line">router.GET(&quot;&#x2F;async&quot;, func(c *gin.Context) &#123;</span><br><span class="line">	&#x2F;&#x2F; goroutine 中只能使用只读的上下文 c.Copy()</span><br><span class="line">	cCp :&#x3D; c.Copy()</span><br><span class="line">	go func() &#123;</span><br><span class="line">		time.Sleep(5 * time.Second)</span><br><span class="line">		&#x2F;&#x2F;需要使用只读上下文</span><br><span class="line">		log.Println(&quot;Done! in path &quot; + cCp.Request.URL.Path)</span><br><span class="line">	&#125;()</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;同步</span><br><span class="line">router.GET(&quot;&#x2F;sync&quot;, func(c *gin.Context) &#123;</span><br><span class="line">	time.Sleep(5 * time.Second)</span><br><span class="line">	&#x2F;&#x2F;可以使用原始上下文</span><br><span class="line">	log.Println(&quot;Done! in path &quot; + c.Request.URL.Path)</span><br><span class="line">&#125;)</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h5 id="初始化不带中间件和带有默认中间件的路由"><a href="#初始化不带中间件和带有默认中间件的路由" class="headerlink" title="初始化不带中间件和带有默认中间件的路由"></a>初始化不带中间件和带有默认中间件的路由</h5><ul>
<li><code>r := gin.New()</code> 创建不带中间件的路由</li>
<li><code>r := gin.Default()</code> 创建带有默认中间件的路由:日志与恢复中间件</li>
</ul>
<h5 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h5><ul>
<li><a href="http://www.grdtechs.com/2016/03/29/gin-setcookie/" target="_blank" rel="noopener">http://www.grdtechs.com/2016/03/29/gin-setcookie/</a></li>
</ul>
<hr>
<h4 id="其他示例"><a href="#其他示例" class="headerlink" title="其他示例"></a>其他示例</h4><h5 id="获取所有请求参数"><a href="#获取所有请求参数" class="headerlink" title="获取所有请求参数"></a>获取所有请求参数</h5><ul>
<li>获取所有URL请求参数</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">reqData :&#x3D; c.Request.URL.Query()</span><br><span class="line">fmt.Printf(&quot;[info] req url data is %s\n&quot;, reqData)</span><br></pre></td></tr></table></figure>

<ul>
<li>获取所有Body请求参数</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">c.Request.ParseForm()</span><br><span class="line">reqBodyData :&#x3D; c.Request.PostForm</span><br><span class="line">fmt.Printf(&quot;[info] req body data is %s \n&quot;, reqBodyData)</span><br></pre></td></tr></table></figure>

<h5 id="获取请求头信息"><a href="#获取请求头信息" class="headerlink" title="获取请求头信息"></a>获取请求头信息</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 获取请求头Header中的 key sign timestamp</span><br><span class="line">token :&#x3D; c.Request.Header.Get(&quot;X-Auth-Token&quot;)</span><br><span class="line">key :&#x3D; c.Request.Header.Get(&quot;X-Auth-Key&quot;)</span><br><span class="line">timestamp :&#x3D; c.Request.Header.Get(&quot;X-Auth-TimeStamp&quot;)</span><br><span class="line">fmt.Printf(&quot;[info] key is %s ,timestamp is %s\n&quot;, key, timestamp)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;获取Post put请求模式下的Content-length</span><br><span class="line">conlength :&#x3D; c.Request.Header.Get(&quot;Content-Length&quot;)</span><br><span class="line">fmt.Printf(&quot;[info] Content-Length is %s\n&quot;, conlength)</span><br></pre></td></tr></table></figure>

<h5 id="获取请求-Method-Host-URL-ContentLength"><a href="#获取请求-Method-Host-URL-ContentLength" class="headerlink" title="获取请求 Method Host URL ContentLength"></a>获取请求 Method Host URL ContentLength</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;判断请求Method</span><br><span class="line">&#x2F;&#x2F; GET POST PUT DELETE  OPTIONS</span><br><span class="line">fmt.Println(&quot;[info]&quot;, c.Request.Method)</span><br><span class="line">fmt.Println(&quot;[info]&quot;, c.Request.Host) &#x2F;&#x2F; localhost:8080</span><br><span class="line">fmt.Println(&quot;[info]&quot;, c.Request.URL) &#x2F;&#x2F;&#x2F;?id&#x3D;3&amp;name&#x3D;zhangsan&amp;address&#x3D;beijing</span><br><span class="line">&#x2F;&#x2F;获取请求头中数据长度 ContentLength</span><br><span class="line">fmt.Println(&quot;[info]&quot;, c.Request.ContentLength) &#x2F;&#x2F; POST for 16  or  GET for 0</span><br></pre></td></tr></table></figure>

<h5 id="CORS-跨域请求-未测试"><a href="#CORS-跨域请求-未测试" class="headerlink" title="CORS 跨域请求   (未测试)"></a>CORS 跨域请求   (未测试)</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  &#x2F;&#x2F; CORS middleware</span><br><span class="line">    g.Use(CORSMiddleware())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func CORSMiddleware() gin.HandlerFunc &#123;</span><br><span class="line">    return func(c *gin.Context) &#123;</span><br><span class="line">        c.Writer.Header().Set(&quot;Access-Control-Allow-Origin&quot;, &quot;*&quot;)</span><br><span class="line">        c.Writer.Header().Set(&quot;Access-Control-Allow-Headers&quot;, &quot;Content-Type, Content-Length, Accept-Encoding, X-CSRF-Token, Authorization&quot;)</span><br><span class="line">        if c.Request.Method &#x3D;&#x3D; &quot;OPTIONS&quot; &#123;</span><br><span class="line">            c.Abort(200)</span><br><span class="line">            return</span><br><span class="line">        &#125;</span><br><span class="line">        c.Next()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><a href="https://github.com/gin-gonic/gin/issues/149" target="_blank" rel="noopener">Json not work · Issue #149 · gin-gonic/gin · GitHub</a></li>
</ul>
<h5 id="定义-struct-时，参数的首字母要大写才能被访问到"><a href="#定义-struct-时，参数的首字母要大写才能被访问到" class="headerlink" title="定义 struct 时，参数的首字母要大写才能被访问到"></a>定义 struct 时，参数的首字母要大写才能被访问到</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">type ReturnMsg struct &#123;</span><br><span class="line">	Code int         &#96;json:&quot;code&quot;&#96;</span><br><span class="line">	Msg  string      &#96;json:&quot;msg&quot;&#96;</span><br><span class="line">	Data interface&#123;&#125; &#96;json:&quot;data&quot;&#96;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><a href="https://stackoverflow.com/questions/26327391/go-json-marshalstruct-returns" target="_blank" rel="noopener">Go json.Marshal(struct) returns &quot;{}&quot; - Stack Overflow</a></li>
</ul>
<h5 id="输出一个struct对象"><a href="#输出一个struct对象" class="headerlink" title="输出一个struct对象"></a>输出一个struct对象</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">	...</span><br><span class="line">	c.JSON(403, ReturnMsg&#123;Code: 1, Msg: &quot;req error&quot;&#125;)</span><br><span class="line">	...</span><br><span class="line"></span><br><span class="line">type ReturnMsg struct &#123;</span><br><span class="line">	Code int         &#96;json:&quot;code&quot;&#96;</span><br><span class="line">	Msg  string      &#96;json:&quot;msg&quot;&#96;</span><br><span class="line">	Data interface&#123;&#125; &#96;json:&quot;data&quot;&#96;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h5 id="gin中间件阻止请求继续访问"><a href="#gin中间件阻止请求继续访问" class="headerlink" title="gin中间件阻止请求继续访问"></a>gin中间件阻止请求继续访问</h5><p><code>c.Abort()</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">token :&#x3D; c.Request.Header.Get(&quot;X-Auth-Token&quot;)</span><br><span class="line">key :&#x3D; c.Request.Header.Get(&quot;X-Auth-Key&quot;)</span><br><span class="line">timestamp :&#x3D; c.Request.Header.Get(&quot;X-Auth-TimeStamp&quot;)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;判断请求头中是否含有必须的三个参数</span><br><span class="line">if token &#x3D;&#x3D; &quot;&quot; || key &#x3D;&#x3D; &quot;&quot; || timestamp &#x3D;&#x3D; &quot;&quot; &#123;</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;经测试，c.Abort() 在前在后均可</span><br><span class="line">	&#x2F;&#x2F; c.Abort()</span><br><span class="line">	&#x2F;&#x2F; c.JSON(403, ReturnMsg&#123;Code: 1, Msg: &quot;req error&quot;&#125;)</span><br><span class="line"></span><br><span class="line">	c.JSON(403, ReturnMsg&#123;Code: 1, Msg: &quot;req error&quot;&#125;)</span><br><span class="line">	c.Abort()</span><br><span class="line">	return &#x2F;&#x2F;一定要加return</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">c.Next()</span><br></pre></td></tr></table></figure>

<ul>
<li><a href="https://stackoverflow.com/questions/32467002/failed-to-abort-context-gin" target="_blank" rel="noopener">go - Failed to Abort() context - gin - Stack Overflow</a></li>
</ul>
<h5 id="gin安装报错"><a href="#gin安装报错" class="headerlink" title="gin安装报错"></a>gin安装报错</h5><p>安装 <code>gin</code> 包时可能会报 <code>x/net</code> 相关错误，可以先下载该必须包：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ mkdir -p $GOPATH&#x2F;src&#x2F;golang.org&#x2F;x&#x2F;</span><br><span class="line"></span><br><span class="line">$ cd $GOPATH&#x2F;src&#x2F;golang.org&#x2F;x&#x2F;</span><br><span class="line"></span><br><span class="line">$ git clone https:&#x2F;&#x2F;github.com&#x2F;golang&#x2F;net.git net</span><br><span class="line"></span><br><span class="line">$ go install net</span><br></pre></td></tr></table></figure>

<ul>
<li><a href="http://www.jianshu.com/p/371f627f4dda" target="_blank" rel="noopener">Gin 安装报错 - 简书</a></li>
</ul>
<hr>
<h4 id="golang中相关易错点"><a href="#golang中相关易错点" class="headerlink" title="golang中相关易错点"></a>golang中相关易错点</h4><h5 id="时间戳转换"><a href="#时间戳转换" class="headerlink" title="时间戳转换"></a>时间戳转换</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">    &quot;fmt&quot;</span><br><span class="line">    &quot;time&quot;</span><br><span class="line">    &quot;strconv&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">    i, err :&#x3D; strconv.ParseInt(&quot;1405544146&quot;, 10, 64)</span><br><span class="line">    if err !&#x3D; nil &#123;</span><br><span class="line">        panic(err)</span><br><span class="line">    &#125;</span><br><span class="line">    tm :&#x3D; time.Unix(i, 0)</span><br><span class="line">    fmt.Println(tm)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><a href="https://stackoverflow.com/questions/24987131/how-to-parse-unix-timestamp-in-golang" target="_blank" rel="noopener">date - How to parse unix timestamp in golang - Stack Overflow</a></li>
</ul>
<hr>
<h5 id="什么类型可以声明为常量及在func外部声明变量时不能使用"><a href="#什么类型可以声明为常量及在func外部声明变量时不能使用" class="headerlink" title="什么类型可以声明为常量及在func外部声明变量时不能使用:="></a>什么类型可以声明为常量及在func外部声明变量时不能使用<code>:=</code></h5><p>数字类型，字符串或布尔类型可以声明为 <code>const</code> 常量；<code>array</code> ,<code>slice</code> 或 <code>map</code> 不能声明为常量。</p>
<p>map类型不能声明为常量:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const myString &#x3D; &quot;hello&quot;</span><br><span class="line">const pi &#x3D; 3.14 &#x2F;&#x2F; untyped constant</span><br><span class="line">const life int &#x3D; 42 &#x2F;&#x2F; typed constant (can use only with ints)</span><br><span class="line">const ( </span><br><span class="line">   First &#x3D; 1</span><br><span class="line">   Second &#x3D; 2</span><br><span class="line">   Third &#x3D; 4</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<hr>
<p>在函数func外部声明变量，要用完整模式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var romanNumeralDict &#x3D; map[int]string&#123;</span><br><span class="line">	1:&quot;a&quot;,</span><br><span class="line">	2:&quot;b&quot;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在函数func内部声明变量，可以使用缩写模式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">romanNumeralDict :&#x3D; map[int]string&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><a href="https://stackoverflow.com/questions/18342195/how-to-declare-constant-map-in-golang" target="_blank" rel="noopener">go - How to declare constant map in golang - Stack Overflow</a></li>
</ul>
<h5 id="判断map中是否存在某值，可以写在一行"><a href="#判断map中是否存在某值，可以写在一行" class="headerlink" title="判断map中是否存在某值，可以写在一行"></a>判断map中是否存在某值，可以写在一行</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 查找键值是否存在</span><br><span class="line">if v, ok :&#x3D; m1[&quot;a&quot;]; ok &#123;</span><br><span class="line">	fmt.Println(v)</span><br><span class="line">&#125; else &#123;</span><br><span class="line">	fmt.Println(&quot;Key Not Found&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="map排序"><a href="#map排序" class="headerlink" title="map排序"></a>map排序</h5><p><code>map</code> 是无序的:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">import (</span><br><span class="line">	&quot;fmt&quot;</span><br><span class="line">	&quot;sort&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">	&#x2F;&#x2F; fmt.Printf(&quot;Hello,是按揭&quot;)</span><br><span class="line">	&#x2F;&#x2F; fmt.Printf(&quot;ni好呀&quot;)</span><br><span class="line"></span><br><span class="line">	m :&#x3D; map[string]string&#123;</span><br><span class="line">		&quot;sign&quot;:      &quot;1399dke&quot;,</span><br><span class="line">		&quot;user&quot;:      &quot;zhangsan&quot;,</span><br><span class="line">		&quot;timestamp&quot;: &quot;36644747373&quot;,</span><br><span class="line">		&quot;id&quot;:        &quot;3&quot;,</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(m)</span><br><span class="line">	var keys []string</span><br><span class="line">	for k :&#x3D; range m &#123;</span><br><span class="line">		&#x2F;&#x2F; fmt.Println(k)</span><br><span class="line">		keys &#x3D; append(keys, k)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	sort.Strings(keys)</span><br><span class="line">	&#x2F;&#x2F; fmt.Println(keys)</span><br><span class="line">	for _, k :&#x3D; range keys &#123;</span><br><span class="line">		fmt.Println(&quot;key:&quot;, k, &quot;Value :&quot;, m[k])</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><a href="https://stackoverflow.com/questions/23330781/sort-golang-map-values-by-keys" target="_blank" rel="noopener">go - sort golang map values by keys - Stack Overflow</a></li>
</ul>
<hr>
<h5 id="for-range"><a href="#for-range" class="headerlink" title="for range"></a>for range</h5><p><code>for range</code> 可以遍历 <code>slice</code> 或 <code>map</code>。并通过两个参数(index和value)，分别获取到slice或者map中某个元素所在的index以及其值。</p>
<p>在Go的 <code>for…range</code> 循环中，Go始终使用<strong>值拷贝</strong>的方式代替被遍历的元素本身。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for index, value :&#x3D; range mySlice &#123;</span><br><span class="line">    fmt.Println(&quot;index: &quot; + index)</span><br><span class="line">    fmt.Println(&quot;value: &quot; + value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="go语言string、int、int64互相转换"><a href="#go语言string、int、int64互相转换" class="headerlink" title="go语言string、int、int64互相转换"></a>go语言string、int、int64互相转换</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#string到int</span><br><span class="line">int,err:&#x3D;strconv.Atoi(string)</span><br><span class="line">#string到int64</span><br><span class="line">int64, err :&#x3D; strconv.ParseInt(string, 10, 64)</span><br><span class="line">#int到string</span><br><span class="line">string:&#x3D;strconv.Itoa(int)</span><br><span class="line">#int64到string</span><br><span class="line">string:&#x3D;strconv.FormatInt(int64,10)</span><br></pre></td></tr></table></figure>

<h5 id="http-Request"><a href="#http-Request" class="headerlink" title="http.Request"></a>http.Request</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">func getURL(w http.ResponseWriter, r *http.Request) &#123;</span><br><span class="line">    url :&#x3D; r.URL.String()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><a href="https://stackoverflow.com/questions/13896592/how-to-convert-url-url-to-string-in-go-google-app-engine" target="_blank" rel="noopener">How to convert *url.URL to string in GO, Google App Engine - Stack Overflow</a></li>
</ul>
<h5 id="中文-url-编码问题"><a href="#中文-url-编码问题" class="headerlink" title="中文 url 编码问题"></a>中文 url 编码问题</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &quot;net&#x2F;url&quot;</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;url编码</span><br><span class="line">    str :&#x3D; &quot;中文-_.&quot;</span><br><span class="line">    unstr :&#x3D; &quot;%2f&quot;</span><br><span class="line">    fmt.Printf(&quot;url.QueryEscape:%s&quot;, url.QueryEscape(str))</span><br><span class="line">    fmt.Println()</span><br><span class="line">    s, _ :&#x3D; url.QueryUnescape(unstr)</span><br><span class="line">    fmt.Printf(&quot;url.QueryUnescape:%s&quot;, s)</span><br><span class="line">    fmt.Println()</span><br></pre></td></tr></table></figure>

<p>go 中url编码和字符转码(类似php中的urlencode 和htmlspecialchars):</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">    &quot;fmt&quot;</span><br><span class="line">    &quot;html&quot;</span><br><span class="line">    &quot;net&#x2F;url&quot;</span><br><span class="line">    &quot;testing&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func Test_Escape(t *testing.T) &#123;</span><br><span class="line">&#x2F;&#x2F;url编码</span><br><span class="line">    str :&#x3D; &quot;中文-_.&quot;</span><br><span class="line">    unstr :&#x3D; &quot;%2f&quot;</span><br><span class="line">    fmt.Printf(&quot;url.QueryEscape:%s&quot;, url.QueryEscape(str))</span><br><span class="line">    fmt.Println()</span><br><span class="line">    s, _ :&#x3D; url.QueryUnescape(unstr)</span><br><span class="line">    fmt.Printf(&quot;url.QueryUnescape:%s&quot;, s)</span><br><span class="line">    fmt.Println()</span><br><span class="line">&#x2F;&#x2F;字符转码</span><br><span class="line">    hstr :&#x3D; &quot;&lt;&quot;</span><br><span class="line">    hunstr :&#x3D; &quot;&amp;lt&quot;</span><br><span class="line">    fmt.Printf(&quot;html.EscapeString:%s&quot;, html.EscapeString(hstr))</span><br><span class="line">    fmt.Println()</span><br><span class="line">    fmt.Printf(&quot;html.UnescapeString:%s&quot;, html.UnescapeString(hunstr))</span><br><span class="line">    fmt.Println()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><a href="http://ouapi.com/article/55.html" target="_blank" rel="noopener">go 中url编码和字符转码(类似php中的urlencode 和htmlspecialchars) - coolaf</a></li>
</ul>
<hr>
<h5 id="golang中字符串拼接"><a href="#golang中字符串拼接" class="headerlink" title="golang中字符串拼接"></a>golang中字符串拼接</h5><p>一种说法：</p>
<blockquote>
<p>如果是少量小文本拼接，用 “+” 就好<br>如果是大量小文本拼接，用 strings.Join<br>如果是大量大文本拼接，用 bytes.Buffer  </p>
</blockquote>
<ul>
<li><a href="https://gocn.io/question/265" target="_blank" rel="noopener">字符串连接哪一种方式最高效 - Go 技术社区 - golang</a></li>
<li><a href="http://studygolang.com/articles/3427" target="_blank" rel="noopener">golang 高效字符串拼接  - Go语言中文网 - Golang中文社区</a></li>
<li><a href="https://www.birdcat.cn/golang%E5%AD%A6%E4%B9%A0/go%E8%AF%AD%E8%A8%80%E4%B8%AD%E9%AB%98%E6%95%88%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8B%BC%E6%8E%A5.html" target="_blank" rel="noopener">go语言中高效字符串拼接</a></li>
</ul>
<hr>
<h5 id="strings-包"><a href="#strings-包" class="headerlink" title="strings 包"></a>strings 包</h5><ul>
<li><a href="https://plumwine.me/programming-in-go-fmt-strings-package/" target="_blank" rel="noopener">Go语言开发-字符串-strings包 | Plum Wine Blog - 青梅酒博客</a></li>
</ul>
<h5 id="获取字符串的MD5值"><a href="#获取字符串的MD5值" class="headerlink" title="获取字符串的MD5值"></a>获取字符串的MD5值</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import (</span><br><span class="line">    &quot;crypto&#x2F;md5&quot;</span><br><span class="line">    &quot;encoding&#x2F;hex&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func GetMD5Hash(text string) string &#123;</span><br><span class="line">    hasher :&#x3D; md5.New()</span><br><span class="line">    hasher.Write([]byte(text))</span><br><span class="line">    return hex.EncodeToString(hasher.Sum(nil))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><a href="https://gist.github.com/sergiotapia/8263278" target="_blank" rel="noopener">md5 example</a></li>
</ul>
<hr>
<h4 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h4><ul>
<li><a href="https://github.com/gin-gonic/gin" target="_blank" rel="noopener">GitHub - gin-gonic/gin: Gin is a HTTP web framework written in Go (Golang). It features a Martini-like API with much better performance – up to 40 times faster. If you need smashing performance, get yourself some Gin.</a></li>
<li><a href="https://gin-gonic.github.io/gin/" target="_blank" rel="noopener">Gin Web Framework</a></li>
<li><a href="https://github.com/ningskyer/gin-doc-cn/blob/master/README.md" target="_blank" rel="noopener">gin-doc-cn/README.md at master · ningskyer/gin-doc-cn · GitHub</a></li>
<li><a href="http://shanshanpt.github.io/2016/05/03/go-gin.html" target="_blank" rel="noopener">Go语言web框架 gin | shanshanpt</a></li>
<li><a href="http://www.jianshu.com/p/371f627f4dda" target="_blank" rel="noopener">Gin 安装报错 - 简书</a></li>
<li><a href="https://semaphoreci.com/community/tutorials/building-go-web-applications-and-microservices-using-gin" target="_blank" rel="noopener">Building Go Web Applications and Microservices Using Gin - Semaphore</a></li>
<li><a href="http://blog.narenarya.in/build-rest-api-go-mysql.html" target="_blank" rel="noopener">Build a RESTful API Server with Golang and MySQL - Jinchuriki</a></li>
<li><a href="http://www.jianshu.com/p/a31e4ee25305" target="_blank" rel="noopener">Golang 微框架 Gin 简介 - 简书</a></li>
<li><a href="https://medium.com/@etiennerouzeaud/how-to-create-a-basic-restful-api-in-go-c8e032ba3181" target="_blank" rel="noopener">How to create a basic Restful API in Go – Etienne Rouzeaud – Medium</a></li>
<li><a href="https://sosedoff.com/2014/12/21/gin-middleware.html" target="_blank" rel="noopener">Gin middleware examples - Dan Sosedoff</a></li>
<li><a href="http://txt.fliglio.com/2014/07/restful-microservices-in-go-with-gin/" target="_blank" rel="noopener">REST Microservices in Go with Gin</a></li>
<li><a href="http://www.markhneedham.com/blog/2016/12/23/go-templating-with-the-gin-web-framework/" target="_blank" rel="noopener">Go: Templating with the Gin Web Framework</a></li>
</ul>
<hr>
<h4 id="相关问题"><a href="#相关问题" class="headerlink" title="相关问题"></a>相关问题</h4><ul>
<li>关于数据绑定 <a href="https://github.com/gin-gonic/gin/issues/742" target="_blank" rel="noopener">how to bind query string? · Issue #742 · gin-gonic/gin · GitHub</a></li>
<li>关于模板文件 <a href="https://stackoverflow.com/questions/38042181/how-to-make-templates-work-with-gin-framework" target="_blank" rel="noopener">go - How to make templates work with gin framework? - Stack Overflow</a></li>
</ul>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
        <tag>Gin</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker-Ubuntu-Gogs关于使用SSH</title>
    <url>/2017/07/21/docker-ubuntu-gogs-ssh/</url>
    <content><![CDATA[<p>记录在Docker容器中运行Gogs时，使用SSH操作遇到的git密码问题。</p>
<h4 id="SSH-key-passphrases"><a href="#SSH-key-passphrases" class="headerlink" title="SSH key passphrases"></a>SSH key passphrases</h4><p>在本地电脑上(我这里是Windows系统)创建 <code>SSH key</code> 时，会要求你为key设置一个密码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">λ ssh-keygen -t rsa -C &quot;xxxxx@qq.com&quot;</span><br><span class="line">Generating public&#x2F;private rsa key pair.</span><br><span class="line">Enter file in which to save the key (&#x2F;c&#x2F;Users&#x2F;You&#x2F;.ssh&#x2F;id_rsa):</span><br><span class="line">Enter passphrase (empty for no passphrase):</span><br><span class="line">Enter same passphrase again:</span><br><span class="line">Your identification has been saved in &#x2F;c&#x2F;Users&#x2F;You&#x2F;.ssh&#x2F;id_rsa.</span><br><span class="line">Your public key has been saved in &#x2F;c&#x2F;Users&#x2F;You&#x2F;.ssh&#x2F;id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>即其中的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Enter passphrase (empty for no passphrase):</span><br><span class="line">Enter same passphrase again:</span><br></pre></td></tr></table></figure>

<p>一般情况下我们可以选择直接回车即不设置密码。</p>
<p>如果没有设置key的密码，我们在通过SSH提交代码时，可以直接操作。如果设置了key的密码，那我们在每次 <code>pull</code> 或 <code>push</code> 时都会要求你输入key的密码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git pull</span><br><span class="line">Enter passphrase for key &#39;&#x2F;c&#x2F;Users&#x2F;You&#x2F;.ssh&#x2F;id_rsa&#39;:</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="Docker-Ubuntu-Gogs容器使用SSH提交时要求输入git密码"><a href="#Docker-Ubuntu-Gogs容器使用SSH提交时要求输入git密码" class="headerlink" title="Docker-Ubuntu-Gogs容器使用SSH提交时要求输入git密码"></a>Docker-Ubuntu-Gogs容器使用SSH提交时要求输入git密码</h4><p>在使用SSH获取或提交代码时，偶尔会遇到要求输入 <code>git</code> 密码的情况：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git clone ssh:&#x2F;&#x2F;git@gogit.itfanr.cc&#x2F;haha&#x2F;wohaha.git</span><br><span class="line">Cloning into &#39;wohaha&#39;...</span><br><span class="line">git@gogit.itfanr.cc&#39;s password:</span><br><span class="line">Permission denied, please try again.</span><br><span class="line">git@gogit.itfanr.cc&#39;s password:</span><br><span class="line">Permission denied, please try again.</span><br><span class="line">git@gogit.itfanr.cc&#39;s password:</span><br><span class="line">Permission denied (publickey,password).</span><br><span class="line">fatal: Could not read from remote repository.</span><br><span class="line"></span><br><span class="line">Please make sure you have the correct access rights</span><br><span class="line">and the repository exists.</span><br></pre></td></tr></table></figure>

<p>或者：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git pull</span><br><span class="line">git@gogit.itfanr.cc&#39;s password:</span><br><span class="line">Permission denied, please try again.</span><br><span class="line">git@gogit.itfanr.cc&#39;s password:</span><br><span class="line">Permission denied, please try again.</span><br><span class="line">git@gogit.itfanr.cc&#39;s password:</span><br><span class="line">fatal: Could not read from remote repository.</span><br><span class="line"></span><br><span class="line">Please make sure you have the correct access rights</span><br><span class="line">and the repository exists.</span><br></pre></td></tr></table></figure>

<p>但是我们通过Docker创建的gogs容器中，并没有为git账户设置密码，所以这里无论输入什么都是错误的。</p>
<p>通过查看 <a href="https://github.com/gogits/gogs/issues" target="_blank" rel="noopener">Issues · gogits/gogs · GitHub</a> 中相关的 <code>issues</code> 可以了解到，但凡是要求输入git密码的问题，十有八九是 <strong>关于 <code>.ssh/authorize_keys</code> 文件的权限</strong> 问题。</p>
<p>gogs的文档中要求：</p>
<ul>
<li><code>.ssh/</code> 目录权限为 <code>0700</code></li>
<li><code>.ssh/authorize_keys</code> 文件的权限为 <code>0600</code></li>
</ul>
<p>相关的操作命令为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ chmod 0700 &#x2F;home&#x2F;git&#x2F;.ssh</span><br><span class="line">$ chmod 0600 &#x2F;home&#x2F;git&#x2F;.ssh&#x2F;*</span><br></pre></td></tr></table></figure>

<hr>
<h5 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h5><p>登陆gogs站点的管理员账户，选择 <code>管理面板</code> 访问 <code>/admin</code> 页面。在 <code>管理员操作</code> 区域选择 <code>重新生成 &#39;.ssh/authorized_keys&#39; 文件（警告：不是 Gogs 的密钥也会被删除）</code> 点击 <code>执行</code> 按钮。</p>
<p>然后再次尝试看是否能够成功操作。</p>
<h5 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h5><p>如果 <code>方法一</code> 的操作无效，那么我们需要登陆该gogs容器所在的服务器来进入如下操作：</p>
<ol>
<li>进入该gogs容器，然后删除 <code>.ssh/authorized_keys</code> 文件 。</li>
<li>重复方法一的操作：登陆管理员账户，选择 <code>管理面板</code> – <code>管理员操作</code> – 点击 <code>重新生成 &#39;.ssh/authorized_keys&#39; 文件（警告：不是 Gogs 的密钥也会被删除）</code> 后的 <code>执行</code> 按钮。</li>
</ol>
<p>然后再次尝试看是否能够成功操作。</p>
<p>我的操作记录：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ docker exec -it gogs &#x2F;bin&#x2F;bash</span><br><span class="line">root@564c5628c7e9:&#x2F;home&#x2F;git&#x2F;gogs# cd ..</span><br><span class="line">root@564c5628c7e9:&#x2F;home&#x2F;git# cd .ssh&#x2F;</span><br><span class="line">root@564c5628c7e9:&#x2F;home&#x2F;git&#x2F;.ssh# ls</span><br><span class="line">authorized_keys</span><br><span class="line">root@564c5628c7e9:&#x2F;home&#x2F;git&#x2F;.ssh# rm authorized_keys </span><br><span class="line">root@564c5628c7e9:&#x2F;home&#x2F;git&#x2F;.ssh# ls</span><br><span class="line"></span><br><span class="line"># 此时在管理后台重新生成 authorized_keys</span><br><span class="line">root@564c5628c7e9:&#x2F;home&#x2F;git&#x2F;.ssh# ls</span><br><span class="line">authorized_keys</span><br><span class="line">root@564c5628c7e9:&#x2F;home&#x2F;git&#x2F;.ssh# ls -al</span><br><span class="line">total 12</span><br><span class="line">drwx------ 2 git git 4096 Jul 21 14:20 .</span><br><span class="line">drwxr-xr-x 6 git git 4096 Jul 21 11:32 ..</span><br><span class="line">-rw------- 1 git git  549 Jul 21 14:20 authorized_keys</span><br></pre></td></tr></table></figure>

<hr>
<p>我在 <code>git push</code> 时遇到要求输入git密码的问题时，先将 <code>authorized_keys</code> 文件删除，然后重新生成，这样操作后就能正常获取和提交了。</p>
<h4 id="相关参考"><a href="#相关参考" class="headerlink" title="相关参考"></a>相关参考</h4><ul>
<li><a href="https://github.com/gogits/gogs/issues/545" target="_blank" rel="noopener">ssh 的链接地址不可以使用 · Issue #545 · gogits/gogs · GitHub</a></li>
</ul>
]]></content>
      <categories>
        <category>Ubuntu-Gogs</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Gogs</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang连接MongoDB数据库</title>
    <url>/2017/06/28/golang-connect-to-mongodb/</url>
    <content><![CDATA[<p>目前go支持MongoDB最好的驱动就是mgo。</p>
<h4 id="下载与引用"><a href="#下载与引用" class="headerlink" title="下载与引用"></a>下载与引用</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">go get gopkg.in&#x2F;mgo.v2</span><br><span class="line"></span><br><span class="line">import &quot;gopkg.in&#x2F;mgo.v2&quot;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">go get labix.org&#x2F;v2&#x2F;mgo</span><br><span class="line"></span><br><span class="line">import &quot;labix.org&#x2F;v2&#x2F;mgo&quot;</span><br></pre></td></tr></table></figure>

<p>安装时发现，地址 <code>labix.org/v2/mgo</code> 中的mgo版本中有些方法不全，而地址 <code>gopkg.in/mgo.v2</code>中的方法是全的，但是该地址下载超时而失败，必须翻墙才可以访问。<br>如 <code>labix.org/v2/mgo</code> 中就没有 <code>mongo, err := mgo.ParseURL(MongoDBUrl)</code> 的 <code>ParseURL()</code> 方法。</p>
<p>如果无法翻墙，还可以从 github 下载：</p>
<p>因为我们要使用 mgo 的 <code>v2</code> 版本，所以需要迁出 <code>branch:v2</code> 分支，不能直接使用 <code>master</code> 分支。</p>
<p>在 <code>go get</code> 命令后添加 <code>-d</code> 参数可以只下载而不会执行安装命令。</p>
<p>操作步骤为：</p>
<ol>
<li>执行命令 <code>go get -d github.com/go-mgo/mgo</code></li>
<li>找到上面 <code>clone</code> 的目录，迁出分支 <code>v2</code></li>
<li>再次运行 <code>go get</code> 命令，这时会在迁出的分支上执行命令</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">go get -d github.com&#x2F;go-mgo&#x2F;mgo</span><br><span class="line"></span><br><span class="line">git checkout v2</span><br><span class="line"></span><br><span class="line">go get github.com&#x2F;go-mgo&#x2F;mgo</span><br></pre></td></tr></table></figure>

<ul>
<li><a href="http://labix.org/mgo" target="_blank" rel="noopener">mgo - Rich MongoDB driver for Go</a></li>
<li><a href="http://gopkg.in/mgo.v2" target="_blank" rel="noopener">mgo.v2 - gopkg.in/mgo.v2</a></li>
<li><a href="https://stackoverflow.com/questions/30188499/how-to-do-go-get-on-a-specific-tag-of-a-github-repository" target="_blank" rel="noopener">git - How to do &quot;go get&quot; on a specific tag of a github repository - Stack Overflow</a></li>
</ul>
<hr>
<h4 id="安装bzr工具"><a href="#安装bzr工具" class="headerlink" title="安装bzr工具"></a>安装bzr工具</h4><p>Bazaar是一款开源的分布式版本控制工具。</p>
<p>安装mgo之前，需要先安装 bzr 工具，否则直接执行或报错：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; go get labix.org&#x2F;v2&#x2F;mgo</span><br><span class="line">go: missing Bazaar command. See https:&#x2F;&#x2F;golang.org&#x2F;s&#x2F;gogetcmd</span><br><span class="line">package labix.org&#x2F;v2&#x2F;mgo: exec: &quot;bzr&quot;: executable file not found in %PATH%</span><br></pre></td></tr></table></figure>

<h5 id="Win"><a href="#Win" class="headerlink" title="Win"></a>Win</h5><p>从网址 <code>http://bazaar.canonical.com/en/</code> 下载安装包，选择 <code>Standalone</code>版本或其他版本。</p>
<h5 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a>Ubuntu</h5><blockquote>
<p>sudo apt-get install bzr</p>
</blockquote>
<ul>
<li><a href="http://fpliu-blog.chinacloudsites.cn/it/software/Bazaar" target="_blank" rel="noopener">多平台系统下如何安装Bazzar工具</a></li>
</ul>
<hr>
<h4 id="连接字符串"><a href="#连接字符串" class="headerlink" title="连接字符串"></a>连接字符串</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MONGODB_URL&#x3D;&quot;mongodb:&#x2F;&#x2F;user:pass@server.compose.io&#x2F;db_name&quot;</span><br><span class="line"></span><br><span class="line">mongodb:&#x2F;&#x2F;localhost:27017&#x2F;articles_demo_dev</span><br><span class="line">mongodb:&#x2F;&#x2F;myuser:mypass@localhost:40001,otherhost:40001&#x2F;mydb</span><br></pre></td></tr></table></figure>

<p>或者：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">session, err :&#x3D; mgo.Dial(&quot;&quot;) </span><br><span class="line">session, err :&#x3D; mgo.Dial(&quot;localhost&quot;) </span><br><span class="line">session, err :&#x3D; mgo.Dial(&quot;127.0.0.1&quot;) </span><br><span class="line">session, err :&#x3D; mgo.Dial(&quot;localhost:27017&quot;)</span><br><span class="line">session, err :&#x3D; mgo.Dial(&quot;127.0.0.1:27017&quot;)</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="创建连接"><a href="#创建连接" class="headerlink" title="创建连接"></a>创建连接</h4><p>通过Session.DB()来切换相应的数据库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db :&#x3D; session.DB(&quot;xtest&quot;)   &#x2F;&#x2F;数据库名称</span><br></pre></td></tr></table></figure>

<p>通过Database.C()方法切换集合（Collection）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">collection :&#x3D; db.C(&quot;xtest&quot;) &#x2F;&#x2F; 集合名称</span><br></pre></td></tr></table></figure>

<p>或直接一步：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">c :&#x3D; session.DB(&quot;xtest&quot;).C(&quot;xtest&quot;)</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h4><p>通过func (c *Collection) Find(query interface{}) *Query来进行查询<br>通过Query.All()可以获得所有结果<br>通过Query.One()可以获得一个结果<br>条件用 <code>bson.M{key: value}</code> ，注意key必须用MongoDB中的字段名，而不是struct的字段名。</p>
<hr>
<h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">	&quot;fmt&quot;</span><br><span class="line">	&quot;labix.org&#x2F;v2&#x2F;mgo&quot;</span><br><span class="line">	&quot;labix.org&#x2F;v2&#x2F;mgo&#x2F;bson&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">const (</span><br><span class="line">	MONGODB_URL &#x3D; &quot;127.0.0.1:27017&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">	&#x2F;&#x2F;创建连接</span><br><span class="line">	session, err :&#x3D; mgo.Dial(MONGODB_URL)</span><br><span class="line">	if err !&#x3D; nil &#123;</span><br><span class="line">		panic(err)</span><br><span class="line">	&#125;</span><br><span class="line">	defer session.Close()</span><br><span class="line"></span><br><span class="line">	session.SetMode(mgo.Monotonic, true)</span><br><span class="line">	&#x2F;&#x2F; db :&#x3D; session.DB(&quot;xtest&quot;)   &#x2F;&#x2F;数据库名称</span><br><span class="line">	&#x2F;&#x2F; collection :&#x3D; db.C(&quot;xtest&quot;) &#x2F;&#x2F; 集合名称</span><br><span class="line">	c :&#x3D; session.DB(&quot;xtest&quot;).C(&quot;xtest&quot;)</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F; &#x2F;&#x2F;插入数据</span><br><span class="line">	&#x2F;&#x2F; err &#x3D; c.Insert(&amp;Person&#123;&quot;Tommy&quot;, &quot;123456&quot;&#125;, &amp;Person&#123;&quot;Hanleilei&quot;, &quot;98765&quot;&#125;,</span><br><span class="line">	&#x2F;&#x2F; 	&amp;Person&#123;&quot;喜洋洋&quot;, &quot;98765&quot;&#125;, &amp;Person&#123;&quot;灰太狼&quot;, &quot;46577&quot;&#125;,</span><br><span class="line">	&#x2F;&#x2F; )</span><br><span class="line">	&#x2F;&#x2F; if err !&#x3D; nil &#123;</span><br><span class="line">	&#x2F;&#x2F; 	panic(err)</span><br><span class="line">	&#x2F;&#x2F; &#125;</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F; &#x2F;&#x2F;查询并赋值 Find().One()</span><br><span class="line">	&#x2F;&#x2F; result :&#x3D; Person&#123;&#125;</span><br><span class="line">	&#x2F;&#x2F; err &#x3D; c.Find(bson.M&#123;&quot;name&quot;: &quot;Tommy&quot;&#125;).One(&amp;result)</span><br><span class="line">	&#x2F;&#x2F; if err !&#x3D; nil &#123;</span><br><span class="line">	&#x2F;&#x2F; 	panic(err)</span><br><span class="line">	&#x2F;&#x2F; &#125;</span><br><span class="line">	&#x2F;&#x2F; &#x2F;&#x2F;输出</span><br><span class="line">	&#x2F;&#x2F; fmt.Println(&quot;Phone &quot;, result.Phone)</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F; &#x2F;&#x2F;集合中元素数量 Count()</span><br><span class="line">	&#x2F;&#x2F; countNum, err :&#x3D; c.Count()</span><br><span class="line">	&#x2F;&#x2F; fmt.Println(&quot;obj numbers &quot;, countNum)</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F; &#x2F;&#x2F;查询多条数据 Find().Iter()</span><br><span class="line">	&#x2F;&#x2F; var onep &#x3D; Person&#123;&#125;</span><br><span class="line">	&#x2F;&#x2F; iter :&#x3D; c.Find(nil).Iter()</span><br><span class="line">	&#x2F;&#x2F; for iter.Next(&amp;onep) &#123;</span><br><span class="line">	&#x2F;&#x2F; 	fmt.Println(&quot;姓名 &quot;, onep.Name)</span><br><span class="line">	&#x2F;&#x2F; &#125;</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F; &#x2F;&#x2F;查询多条数据 Find().All()</span><br><span class="line">	&#x2F;&#x2F; var personAll []Person</span><br><span class="line">	&#x2F;&#x2F; err &#x3D; c.Find(nil).All(&amp;personAll)</span><br><span class="line">	&#x2F;&#x2F; for i :&#x3D; 0; i &lt; len(personAll); i++ &#123;</span><br><span class="line">	&#x2F;&#x2F; 	fmt.Println(&quot;Person &quot;, personAll[i].Name, personAll[i].Phone)</span><br><span class="line">	&#x2F;&#x2F; &#125;</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F; &#x2F;&#x2F;更新数据 Update()</span><br><span class="line">	&#x2F;&#x2F; abc :&#x3D; Person&#123;&#125;</span><br><span class="line">	&#x2F;&#x2F; err &#x3D; c.Find(bson.M&#123;&quot;name&quot;: &quot;Tommy&quot;&#125;).One(&amp;abc)</span><br><span class="line">	&#x2F;&#x2F; fmt.Println(&quot;Tommy phone is &quot;, abc.Phone)</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F; err &#x3D; c.Update(bson.M&#123;&quot;name&quot;: &quot;Tommy&quot;&#125;, bson.M&#123;&quot;$set&quot;: bson.M&#123;&quot;phone&quot;: &quot;10086&quot;&#125;&#125;)</span><br><span class="line">	&#x2F;&#x2F; err &#x3D; c.Find(bson.M&#123;&quot;name&quot;: &quot;Tommy&quot;&#125;).One(&amp;abc)</span><br><span class="line">	&#x2F;&#x2F; fmt.Println(&quot;Tommy phone is &quot;, abc.Phone)</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F; &#x2F;&#x2F;删除数据 Remove()</span><br><span class="line">	&#x2F;&#x2F; fmt.Println(c.Count())</span><br><span class="line">	&#x2F;&#x2F; err &#x3D; c.Remove(bson.M&#123;&quot;phone&quot;: &quot;46577&quot;&#125;)</span><br><span class="line">	&#x2F;&#x2F; fmt.Println(c.Count())</span><br><span class="line"></span><br><span class="line">	fmt.Println(&quot;end&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type Person struct &#123;</span><br><span class="line">	Name  string &#96;bson:&quot;name&quot;&#96;</span><br><span class="line">	Phone string &#96;bson:&quot;phone&quot;&#96;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="相关"><a href="#相关" class="headerlink" title="相关"></a>相关</h4><ul>
<li><a href="https://github.com/go-mgo/mgo" target="_blank" rel="noopener">GitHub - go-mgo/mgo: The MongoDB driver for Go. See http://labix.org/mgo for details.</a></li>
<li><a href="http://www.it165.net/database/html/201403/5661.html" target="_blank" rel="noopener">golang使用mgo连接MongoDB</a></li>
</ul>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
        <tag>MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>进京证办理</title>
    <url>/2017/06/22/foreign-car-to-beijing/</url>
    <content><![CDATA[<h4 id="北京市公安局相关规定"><a href="#北京市公安局相关规定" class="headerlink" title="北京市公安局相关规定"></a>北京市公安局相关规定</h4><ul>
<li><strong>适用范围</strong>：进入北京市六环路（不含）以内行驶的外埠车辆，以及前往昌平、怀柔、延庆城关镇行驶的外埠车辆，需办理进京通行证。</li>
<li><strong>办理地点</strong>：本市任意进京检查站或办证处 <a href="http://dz.bjjtgl.gov.cn/dzfw/trafficHeadBZ/Map/trafficHead10.jsp" target="_blank" rel="noopener">北京市公安局公安交通管理局</a></li>
<li><strong>办理时间</strong>：7*24小时 周末及法定节假日不休</li>
<li><strong>携带资料</strong>：<ul>
<li>驾驶人身份证 </li>
<li>驾驶人驾驶证 </li>
<li>车辆行驶证 </li>
<li>交通事故责任强制保险凭证 </li>
<li>安全技术检验合格标志 </li>
<li>经北京市环保部门确认的车辆符合环保要求的凭证</li>
</ul>
</li>
<li><strong>有效期</strong>：进京通行证有效期为7天，可延期一次。</li>
</ul>
<h4 id="我是如何办理实体进京证的"><a href="#我是如何办理实体进京证的" class="headerlink" title="我是如何办理实体进京证的"></a>我是如何办理实体进京证的</h4><ul>
<li>驾驶人身份证</li>
<li>驾驶人驾驶证</li>
<li>车辆行驶证</li>
</ul>
<p>我第一次办理实体进京证是在京港澳高速的兴礼检查站办理的 (2017-6-11)：</p>
<ul>
<li>携带以上<code>三个证件</code>先用<code>车辆行驶证</code>去办理<code>环保证明</code>，然后拿着<code>环保证明</code>和<code>三个证件</code>去另一个窗口办理进京证。那里有指示牌可参考。</li>
<li>注意要仔细核对环保证明或进京证上的信息是否正确。</li>
<li>不需要保险单或其他材料。</li>
<li>实体进京证免费办理。</li>
</ul>
<h4 id="电子进京证–北京交警app"><a href="#电子进京证–北京交警app" class="headerlink" title="电子进京证–北京交警app"></a>电子进京证–北京交警app</h4><h5 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h5><ul>
<li>可提前1-4天在线申请办理进京通行证</li>
<li>电子进京证的效力与实体进京证相同，其有效期为2至7天</li>
</ul>
<h5 id="电子进京证所需证件、材料"><a href="#电子进京证所需证件、材料" class="headerlink" title="电子进京证所需证件、材料"></a>电子进京证所需证件、材料</h5><ul>
<li>车辆型号（见行驶证）</li>
<li>车辆发动机号（见行驶证）</li>
<li>进京车辆行驶证正面照片</li>
<li>车辆正面照片（需露出车辆号牌）</li>
<li>车主驾驶证正面照片</li>
<li>车主手持身份证的照片（必须是车主本人）</li>
<li>号牌类型</li>
<li>机动车类型</li>
<li>机动车号牌</li>
<li>车主姓名</li>
<li>车主驾驶证号（同身份证号）</li>
<li>进京日期（只能从后一天开始的7天内）</li>
<li>进京时长(可选2-7天)</li>
<li>进京路口（例如京津高速）</li>
<li>驾驶员信息</li>
</ul>
<h5 id="电子进京证注意事项"><a href="#电子进京证注意事项" class="headerlink" title="电子进京证注意事项"></a>电子进京证注意事项</h5><ol>
<li>目前只允许外地小客车网上办理电子进京证，其它车辆仍需到检查站办证窗口办理。</li>
<li>电子进京证与实体进京证在同一时段内无法重复办理。</li>
<li>电子进京证无法在城区安监窗口续办。</li>
<li>目前，电子进京证一旦申请成功，无法更改日期。</li>
</ol>
<h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ul>
<li>再次办理进京证的流程和所需的材料与初次办理相同。</li>
<li>在办理进京证之前，您需要将外地号牌车辆之前在北京产生的所有交通违法都处理完毕。</li>
</ul>
<h4 id="相关参考"><a href="#相关参考" class="headerlink" title="相关参考"></a>相关参考</h4><ul>
<li><a href="http://www.bjjtgl.gov.cn/zhuanti/201601waibuche/index.html" target="_blank" rel="noopener">外地车进京注意事项</a></li>
</ul>
<hr>
<h4 id="关于驾驶证换新后"><a href="#关于驾驶证换新后" class="headerlink" title="关于驾驶证换新后"></a>关于驾驶证换新后</h4><p>因为我的驾照考的比较早，初次申请的驾照在6年后要换新。在换领到新的驾照之后申请进京证时要注意：</p>
<blockquote>
<p>在旧驾照到期截止日期之前，申请进京证仍需要使用旧驾照的照片来申请。</p>
</blockquote>
<p>举个例子来说：</p>
<p>比如你的驾照在 <code>2018年6月1日</code> 到期，规定是在驾照到期前的90天内都可申请换领新驾照。在90天之内，比如你在 <code>2018年的5月1日</code> 就已经更换了新驾照。那么在 <code>5月1日到6月1日</code> 这段时间内，你是不能使用新驾照的照片来申请进京证的。</p>
<p>当你用新驾照的照片去申请时，<code>北京交警App</code> 给出的错误提示信息为 “系统审核失败，请重新提交信息申请办理。   审核失败” 。</p>
<p>只有当你的旧版驾照过了到期日期之后，才能使用换新后的驾照来申请。</p>
<p>以上是我在换领新驾照之后在申请进京证时遇到的一个很迷惑的地方，特记录在此。</p>
<h4 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h4><ol>
<li>2017-06-22 Created</li>
<li>2018-07-18 添加更换新驾驶证后申请进京证时的注意事项</li>
</ol>
]]></content>
      <tags>
        <tag>人在帝都</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang实现http请求及代理设置</title>
    <url>/2017/06/15/Golang-implements-HTTP-request-and-proxy-settings/</url>
    <content><![CDATA[<p>主要探究 1. 使用代理请求 2. 跳过https不安全验证 3. 自定义请求头User-Agent的实现</p>
<h4 id="主要研究的技术点"><a href="#主要研究的技术点" class="headerlink" title="主要研究的技术点"></a>主要研究的技术点</h4><ul>
<li>使用代理请求</li>
<li>跳过https不安全验证</li>
<li>自定义请求头 User-Agent</li>
</ul>
<hr>
<h4 id="静态数据请求并设置代理"><a href="#静态数据请求并设置代理" class="headerlink" title="静态数据请求并设置代理"></a>静态数据请求并设置代理</h4><h5 id="实例代码"><a href="#实例代码" class="headerlink" title="实例代码"></a>实例代码</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">	&quot;crypto&#x2F;tls&quot;</span><br><span class="line">	&quot;fmt&quot;</span><br><span class="line">	&quot;io&#x2F;ioutil&quot;</span><br><span class="line">	&quot;net&#x2F;http&quot;</span><br><span class="line">	&quot;net&#x2F;url&quot;</span><br><span class="line">	&quot;time&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func First() &#123;</span><br><span class="line">	&#x2F;*</span><br><span class="line">		1. 普通请求</span><br><span class="line">	*&#x2F;</span><br><span class="line"></span><br><span class="line">	webUrl :&#x3D; &quot;http:&#x2F;&#x2F;ip.gs&#x2F;&quot;</span><br><span class="line">	resp, err :&#x3D; http.Get(webUrl)</span><br><span class="line">	if err !&#x3D; nil &#123;</span><br><span class="line">		fmt.Println(err)</span><br><span class="line">		return</span><br><span class="line">	&#125;</span><br><span class="line">	&#x2F;&#x2F; if resp.StatusCode &#x3D;&#x3D; http.StatusOK &#123;</span><br><span class="line">	&#x2F;&#x2F; 	fmt.Println(resp.StatusCode)</span><br><span class="line">	&#x2F;&#x2F; &#125;</span><br><span class="line"></span><br><span class="line">	time.Sleep(time.Second * 3)</span><br><span class="line"></span><br><span class="line">	defer resp.Body.Close()</span><br><span class="line">	body, _ :&#x3D; ioutil.ReadAll(resp.Body)</span><br><span class="line">	fmt.Println(string(body))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func Second(webUrl, proxyUrl string) &#123;</span><br><span class="line">	&#x2F;*</span><br><span class="line">		1. 代理请求</span><br><span class="line">		2. 跳过https不安全验证</span><br><span class="line">	*&#x2F;</span><br><span class="line">	&#x2F;&#x2F; webUrl :&#x3D; &quot;http:&#x2F;&#x2F;ip.gs&#x2F;&quot;</span><br><span class="line">	&#x2F;&#x2F; proxyUrl :&#x3D; &quot;http:&#x2F;&#x2F;115.215.71.12:808&quot;</span><br><span class="line"></span><br><span class="line">	proxy, _ :&#x3D; url.Parse(proxyUrl)</span><br><span class="line">	tr :&#x3D; &amp;http.Transport&#123;</span><br><span class="line">		Proxy:           http.ProxyURL(proxy),</span><br><span class="line">		TLSClientConfig: &amp;tls.Config&#123;InsecureSkipVerify: true&#125;,</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	client :&#x3D; &amp;http.Client&#123;</span><br><span class="line">		Transport: tr,</span><br><span class="line">		Timeout:   time.Second * 5, &#x2F;&#x2F;超时时间</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	resp, err :&#x3D; client.Get(webUrl)</span><br><span class="line">	if err !&#x3D; nil &#123;</span><br><span class="line">		fmt.Println(&quot;出错了&quot;, err)</span><br><span class="line">		return</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	defer resp.Body.Close()</span><br><span class="line">	body, _ :&#x3D; ioutil.ReadAll(resp.Body)</span><br><span class="line">	fmt.Println(string(body))</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func Third(webUrl, proxyUrl string) &#123;</span><br><span class="line">	&#x2F;*</span><br><span class="line">		1. 代理请求</span><br><span class="line">		2. 跳过https不安全验证</span><br><span class="line">		3. 自定义请求头 User-Agent</span><br><span class="line"></span><br><span class="line">	*&#x2F;</span><br><span class="line">	&#x2F;&#x2F; webUrl :&#x3D; &quot;http:&#x2F;&#x2F;ip.gs&#x2F;&quot;</span><br><span class="line">	&#x2F;&#x2F; proxyUrl :&#x3D; &quot;http:&#x2F;&#x2F;171.215.227.125:9000&quot;</span><br><span class="line"></span><br><span class="line">	request, _ :&#x3D; http.NewRequest(&quot;GET&quot;, webUrl, nil)</span><br><span class="line">	request.Header.Set(&quot;Connection&quot;, &quot;keep-alive&quot;)</span><br><span class="line">	request.Header.Set(&quot;User-Agent&quot;, &quot;Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;56.0.2924.87 Safari&#x2F;537.36&quot;)</span><br><span class="line"></span><br><span class="line">	proxy, _ :&#x3D; url.Parse(proxyUrl)</span><br><span class="line">	tr :&#x3D; &amp;http.Transport&#123;</span><br><span class="line">		Proxy:           http.ProxyURL(proxy),</span><br><span class="line">		TLSClientConfig: &amp;tls.Config&#123;InsecureSkipVerify: true&#125;,</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	client :&#x3D; &amp;http.Client&#123;</span><br><span class="line">		Transport: tr,</span><br><span class="line">		Timeout:   time.Second * 5, &#x2F;&#x2F;超时时间</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	resp, err :&#x3D; client.Do(request)</span><br><span class="line">	if err !&#x3D; nil &#123;</span><br><span class="line">		fmt.Println(&quot;出错了&quot;, err)</span><br><span class="line">		return</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	defer resp.Body.Close()</span><br><span class="line">	body, _ :&#x3D; ioutil.ReadAll(resp.Body)</span><br><span class="line">	fmt.Println(string(body))</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">	webUrl :&#x3D; &quot;http:&#x2F;&#x2F;httpbin.org&#x2F;user-agent&quot; &#x2F;&#x2F;&quot;http:&#x2F;&#x2F;ip.gs&#x2F;&quot;</span><br><span class="line">	proxyUrl :&#x3D; &quot;http:&#x2F;&#x2F;119.5.0.75:808&quot;</span><br><span class="line"></span><br><span class="line">	Second(webUrl, proxyUrl)</span><br><span class="line">	&#x2F;&#x2F; Third(webUrl, proxyUrl)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="相关参考"><a href="#相关参考" class="headerlink" title="相关参考"></a>相关参考</h5><ul>
<li><a href="http://oinume.hatenablog.com/entry/mocking-http-access-in-golang" target="_blank" rel="noopener">Mocking a HTTP access with http.Transport in Golang - oinume journal</a></li>
<li><a href="http://www.cnblogs.com/damir/archive/2012/05/06/2486663.html" target="_blank" rel="noopener">Go http访问使用代理</a></li>
<li><a href="https://www.haiyun.me/archives/1051.html" target="_blank" rel="noopener">GO HTTP client客户端使用 - 海运的博客</a></li>
<li><a href="http://www.devdungeon.com/content/making-tor-http-requests-go" target="_blank" rel="noopener">Making Tor HTTP Requests with Go | DevDungeon</a></li>
<li><a href="https://stackoverflow.com/questions/42662369/golang-how-to-do-a-https-request-with-proxy" target="_blank" rel="noopener">go - golang: How to do a https request with proxy - Stack Overflow</a></li>
<li><a href="https://stackoverflow.com/questions/13263492/set-useragent-in-http-request" target="_blank" rel="noopener">go - Set UserAgent in http request - Stack Overflow</a></li>
</ul>
<hr>
<h4 id="动态数据请求并设置代理"><a href="#动态数据请求并设置代理" class="headerlink" title="动态数据请求并设置代理"></a>动态数据请求并设置代理</h4><p>动态数据请求使用golang调用phantomjs来请求网页数据内容实现。</p>
<p>通过命令参数方式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">phantomjs [options] somescript.js [arg1 [arg2 [...]]]</span><br></pre></td></tr></table></figure>

<p>代理相关的配置参数：</p>
<ul>
<li><code>--load-images=[true|false]</code>  (default is <code>true</code>)</li>
<li><code>--proxy=address:port</code>  (eg <code>--proxy=192.168.1.42:8080</code>)</li>
<li><code>--proxy-type=[http|socks5|none]</code>  (default is <code>http</code>)</li>
<li><code>--proxy-auth</code> (eg <code>--proxy-auth=username:password</code>)</li>
</ul>
<p>其他常用配置参数：</p>
<ul>
<li><code>--load-images=[yes|no]</code>             Load all inlined images (default is ‘yes’).</li>
<li><code>--load-plugins=[yes|no]</code>            Load all plugins (i.e. ‘Flash’, ‘Silverlight’, …) (default is ‘no’).</li>
<li><code>--proxy=address:port</code>               Set the network proxy.</li>
<li><code>--disk-cache=[yes|no]</code>              Enable disk cache (at desktop services cache storage location, default is ‘no’).</li>
<li><code>--ignore-ssl-errors=[yes|no]</code>       Ignore SSL errors (i.e. expired or self-signed certificate errors).</li>
</ul>
<p>也可以通过配置文件方式来设置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">phantomjs --config&#x3D;&#x2F;path&#x2F;to&#x2F;config.json somescript.js [arg1 [...]]</span><br></pre></td></tr></table></figure>

<h5 id="常用配置相关参考"><a href="#常用配置相关参考" class="headerlink" title="常用配置相关参考"></a>常用配置相关参考</h5><ul>
<li><a href="http://phantomjs.org/api/command-line.html" target="_blank" rel="noopener">Command Line Interface | PhantomJS</a></li>
<li><a href="http://www.dblooman.com/network/2014/05/27/Proxy-Auth-in-phantomjs/" target="_blank" rel="noopener">Proxy Auth In Phantomjs &middot; David Blooman</a></li>
</ul>
<hr>
<h5 id="实例代码-1"><a href="#实例代码-1" class="headerlink" title="实例代码"></a>实例代码</h5><ul>
<li>经过测试，发现： <code>phantomjs --proxy=address:port somescript.js [args]</code> 这种方式无法执行成功。</li>
<li>经过测试，发现：在 <code>somescript.js</code> 中设置 <code>page.setProxy(&quot;http://119.5.0.75:808/&quot;);</code> 这种方式也无效。</li>
<li>经过测试，发现：在 <code>somescript.js</code> 中设置 <code>phantom.setProxy(&quot;139.224.237.33&quot;, &quot;8888&quot;, &#39;manual&#39;, &#39;&#39;, &#39;&#39;);</code> 这种方式可行。</li>
</ul>
<h6 id="不使用代理的动态数据请求"><a href="#不使用代理的动态数据请求" class="headerlink" title="不使用代理的动态数据请求"></a>不使用代理的动态数据请求</h6><p><code>dynamicproxy.go</code>:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">	&quot;fmt&quot;</span><br><span class="line">	&quot;io&#x2F;ioutil&quot;</span><br><span class="line">	&quot;os&#x2F;exec&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func First(webUrl, jsFileName string) &#123;</span><br><span class="line">	cmd :&#x3D; exec.Command(&quot;phantomjs.exe&quot;, jsFileName, webUrl)</span><br><span class="line">	out, err :&#x3D; cmd.Output()</span><br><span class="line">	if err !&#x3D; nil &#123;</span><br><span class="line">		fmt.Println(err)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	fmt.Println(string(out))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func Second(webUrl, jsFileName string) &#123;</span><br><span class="line">	&#x2F;&#x2F; cmd :&#x3D; exec.Command(&quot;phantomjs.exe&quot;, &quot;test.js&quot;, &quot;https:&#x2F;&#x2F;www.cnblogs.com&#x2F;&quot;)</span><br><span class="line">	cmd :&#x3D; exec.Command(&quot;phantomjs.exe&quot;, jsFileName, webUrl)</span><br><span class="line">	stdout, err :&#x3D; cmd.StdoutPipe()</span><br><span class="line">	if err !&#x3D; nil &#123;</span><br><span class="line">		fmt.Println(err)</span><br><span class="line">	&#125;</span><br><span class="line">	cmd.Start()</span><br><span class="line">	content, err :&#x3D; ioutil.ReadAll(stdout)</span><br><span class="line">	if err !&#x3D; nil &#123;</span><br><span class="line">		fmt.Println(err)</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(string(content))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">	webUrl :&#x3D; &quot;http:&#x2F;&#x2F;httpbin.org&#x2F;ip&quot; &#x2F;&#x2F;&quot;http:&#x2F;&#x2F;httpbin.org&#x2F;ip&quot; &#x2F;&#x2F; &quot;http:&#x2F;&#x2F;ip.gs&#x2F;&quot; &#x2F;&#x2F; &quot;http:&#x2F;&#x2F;httpbin.org&#x2F;user-agent&quot;</span><br><span class="line">	jsfileName :&#x3D; &quot;somescript.js&quot;</span><br><span class="line">	First(webUrl, jsfileName)</span><br><span class="line">	&#x2F;&#x2F; Second(webUrl, jsfileName)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>somescript.js</code>:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var page &#x3D;require(&#39;webpage&#39;).create();</span><br><span class="line">system&#x3D;require(&#39;system&#39;);</span><br><span class="line">url&#x3D;system.args[1];</span><br><span class="line"></span><br><span class="line">page.settings.userAgent &#x3D; &#39;Mozilla&#x2F;5.0 (Windows NT 6.1; WOW64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;37.0.2062.120 Safari&#x2F;537.36&#39;;</span><br><span class="line">page.open(url,function(status)&#123;</span><br><span class="line">	console.log(&#39;Loading &#39;+system.args[1]);</span><br><span class="line">	if (status&#x3D;&#x3D;&quot;success&quot;) &#123;</span><br><span class="line">		&#x2F;&#x2F; page.render(&#39;a.png&#39;); &#x2F;&#x2F;网页截屏</span><br><span class="line">		system.stdout.writeLine(page.content); &#x2F;&#x2F; 获取网页内容</span><br><span class="line">		&#x2F;&#x2F; system.stdout.writeLine(page.title);</span><br><span class="line">		&#x2F;&#x2F; console.log(page.plainText); &#x2F;&#x2F; 文本内容</span><br><span class="line">		&#x2F;&#x2F; console.log(page.title); &#x2F;&#x2F; 网页标题</span><br><span class="line">	&#125;else&#123;</span><br><span class="line">		system.stdout.writeLine(&quot;request error&quot;);</span><br><span class="line">	&#125;;</span><br><span class="line">	phantom.exit();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<hr>
<h6 id="使用http代理的动态数据请求"><a href="#使用http代理的动态数据请求" class="headerlink" title="使用http代理的动态数据请求"></a>使用http代理的动态数据请求</h6><p><code>dynamicproxy.go</code>:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">	&quot;fmt&quot;</span><br><span class="line">	&quot;io&#x2F;ioutil&quot;</span><br><span class="line">	&quot;os&#x2F;exec&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func Third(webUrl, jsFileName,proxyHost,proxyPort string) &#123;</span><br><span class="line">	&#x2F;&#x2F; cmd :&#x3D; exec.Command(&quot;phantomjs.exe&quot;, jsFileName, webUrl)</span><br><span class="line">	cmd :&#x3D; exec.Command(&quot;phantomjs.exe&quot;, jsFileName,proxyHost,proxyPort, webUrl)</span><br><span class="line">	out, err :&#x3D; cmd.Output()</span><br><span class="line">	if err !&#x3D; nil &#123;</span><br><span class="line">		fmt.Println(err)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	fmt.Println(string(out))</span><br><span class="line">&#125;</span><br><span class="line">func main() &#123;</span><br><span class="line">	webUrl :&#x3D; &quot;http:&#x2F;&#x2F;httpbin.org&#x2F;ip&quot; &#x2F;&#x2F;&quot;http:&#x2F;&#x2F;httpbin.org&#x2F;ip&quot; &#x2F;&#x2F; &quot;http:&#x2F;&#x2F;ip.gs&#x2F;&quot; &#x2F;&#x2F; &quot;http:&#x2F;&#x2F;httpbin.org&#x2F;user-agent&quot;</span><br><span class="line">	jsfileName :&#x3D; &quot;somescript.js&quot;</span><br><span class="line">	Third(webUrl, jsfileName,&quot;139.224.237.33&quot;, &quot;8888&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>somescript.js</code>:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var page &#x3D;require(&#39;webpage&#39;).create();</span><br><span class="line">system&#x3D;require(&#39;system&#39;);</span><br><span class="line"></span><br><span class="line">if (system.args.length&lt;4) &#123;</span><br><span class="line">	system.stdout.writeLine(&quot;somescript.js &lt;proxyHost&gt; &lt;proxyPort&gt; &lt;URL&gt;&quot;);</span><br><span class="line">	phantom.exit(1);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">	host&#x3D;system.args[1];</span><br><span class="line">	port&#x3D;system.args[2];</span><br><span class="line">	url &#x3D; system.args[3];</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; page.setProxy(&quot;http:&#x2F;&#x2F;119.5.0.75:808&#x2F;&quot;);&#x2F;&#x2F;这样设置请求失败</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; phantom.setProxy(&quot;139.224.237.33&quot;, &quot;8888&quot;, &#39;manual&#39;, &#39;&#39;, &#39;&#39;);&#x2F;&#x2F;这样设置可以</span><br><span class="line">phantom.setProxy(host, port, &#39;manual&#39;, &#39;&#39;, &#39;&#39;);</span><br><span class="line">page.settings.userAgent &#x3D; &#39;Mozilla&#x2F;5.0 (Windows NT 6.1; WOW64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;37.0.2062.120 Safari&#x2F;537.36&#39;;</span><br><span class="line"></span><br><span class="line">page.open(url,function(status)&#123;</span><br><span class="line">	if (status&#x3D;&#x3D;&quot;success&quot;) &#123;</span><br><span class="line">		system.stdout.writeLine(page.content); &#x2F;&#x2F; 获取网页内容</span><br><span class="line">	&#125;else&#123;</span><br><span class="line">		console.log(status);</span><br><span class="line">		system.stdout.writeLine(&quot;error&quot;);</span><br><span class="line">	&#125;;</span><br><span class="line">	phantom.exit();</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>说明：<code>phantom.setProxy(&quot;139.224.237.33&quot;, &quot;8888&quot;, &#39;manual&#39;, &#39;&#39;, &#39;&#39;);</code>  参数1为代理host;参数2为代理port;参数3可以保持默认定值<code>manual</code>,参数4为代理类型http socket5等可为空;参数5不知道为空。</p>
<hr>
<h6 id="忽略https安全验证的动态数据请求"><a href="#忽略https安全验证的动态数据请求" class="headerlink" title="忽略https安全验证的动态数据请求"></a>忽略https安全验证的动态数据请求</h6><ul>
<li>暂时只找到一种方法，直接请求https网址不使用代理能够请求成功。</li>
<li>即忽略https安全验证，又使用代理经测试请求失败。</li>
<li>直接在命令窗口中执行可以，通过golang调用请求失败。</li>
</ul>
<p>使用参数：<code>--ignore-ssl-errors=true --ssl-protocol=any</code> 设置。</p>
<p>如下方式执行成功，示例代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">phantomjs.exe --ignore-ssl-errors&#x3D;true --ssl-protocol&#x3D;any test.js https:&#x2F;&#x2F;kyfw.12306.cn&#x2F;otn&#x2F;</span><br></pre></td></tr></table></figure>

<p><code>test.js</code>:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var page &#x3D;require(&#39;webpage&#39;).create();</span><br><span class="line">system&#x3D;require(&#39;system&#39;);</span><br><span class="line">url&#x3D;system.args[1];</span><br><span class="line"></span><br><span class="line">page.settings.userAgent &#x3D; &#39;Mozilla&#x2F;5.0 (Windows NT 6.1; WOW64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;37.0.2062.120 Safari&#x2F;537.36&#39;;</span><br><span class="line">page.open(url,function(status)&#123;</span><br><span class="line">	console.log(&#39;Loading &#39;+system.args[1]);</span><br><span class="line">	if (status&#x3D;&#x3D;&quot;success&quot;) &#123;</span><br><span class="line">		system.stdout.writeLine(page.content); &#x2F;&#x2F; 获取网页内容</span><br><span class="line">	&#125;else&#123;</span><br><span class="line">		console.log(&quot;request error&quot;);</span><br><span class="line">	&#125;;</span><br><span class="line">	phantom.exit();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<hr>
<h5 id="相关参考-1"><a href="#相关参考-1" class="headerlink" title="相关参考"></a>相关参考</h5><ul>
<li><a href="https://github.com/ariya/phantomjs/issues/12181" target="_blank" rel="noopener">–ignore-ssl-errors not working · Issue #12181 · ariya/phantomjs · GitHub</a></li>
<li><a href="https://github.com/ariya/phantomjs/blob/master/examples/openurlwithproxy.js" target="_blank" rel="noopener">phantomjs · GitHub</a></li>
<li><a href="https://github.com/ariya/phantomjs/tree/master/examples" target="_blank" rel="noopener">phantomjs/examples at master · ariya/phantomjs · GitHub</a></li>
</ul>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
        <tag>数据抓取</tag>
      </tags>
  </entry>
  <entry>
    <title>从0到1学Golang之基础--Go 数组</title>
    <url>/2017/05/24/learn-golang-from-0-to-1-of-go-array/</url>
    <content><![CDATA[<p>《Go In Action》 中文版 《Go语言实战》 读书笔记</p>
<h4 id="内部实现"><a href="#内部实现" class="headerlink" title="内部实现"></a>内部实现</h4><p>数组是切片和映射的基础数据结构。</p>
<p>在Go语言中，数组是长度固定的数据类型，用于存储一段具有相同类型的元素的连续块。</p>
<p>数组存储的类型可以是内置类型，如整型或字符串，也可以是某种结构类型。</p>
<p>数组占用的内存是连续分配的。由于内存连续，CPU能把正在使用的数据缓存更久的时间。而且内存连续很容易计算索引，可以快速迭代数组里的所有元素。</p>
<p>特点：</p>
<ul>
<li>长度固定</li>
<li>类型相同</li>
<li>内存连续</li>
</ul>
<h4 id="声明和初始化"><a href="#声明和初始化" class="headerlink" title="声明和初始化"></a>声明和初始化</h4><h5 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h5><p>数组声明的原则：</p>
<ol>
<li>指明存储数据的类型</li>
<li>指明存储元素数量（指明数组长度）</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#声明一个包含5个元素的整型数组</span><br><span class="line">var array [5]int</span><br></pre></td></tr></table></figure>

<p>数组一旦声明后，数组里存储的数据类型和数组长度就不能改变了。</p>
<p>当数组初始化时，数组内每个元素都初始化为对应类型的零值。</p>
<h5 id="声明并初始化"><a href="#声明并初始化" class="headerlink" title="声明并初始化"></a>声明并初始化</h5><p>使用<strong>数组字面量</strong>声明并初始化数组。数组字面量允许声明数组里元素的数量同时指定每个元素的值。</p>
<p>Go为我们提供了 <code>:=</code> 操作符，可以让我们在创建数组的时候直接初始化。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 声明并初始化</span><br><span class="line">array:&#x3D;[5]int&#123;1,2,3,4,5&#125;</span><br></pre></td></tr></table></figure>

<h5 id="自动推导数组长度"><a href="#自动推导数组长度" class="headerlink" title="自动推导数组长度"></a>自动推导数组长度</h5><p>使用 <code>...</code> 替代数组的长度，Go语言会根据初始化时数组元素的数量来确定该数组的长度。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 容量由初始化值的数量决定</span><br><span class="line">array:&#x3D;[...]int&#123;1,2,3,4,5&#125;</span><br></pre></td></tr></table></figure>

<h5 id="用具体值初始化特定索引"><a href="#用具体值初始化特定索引" class="headerlink" title="用具体值初始化特定索引"></a>用具体值初始化特定索引</h5><p>使用指定索引的方式初始化特定索引值。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 用具体值初始化索引为1和3的元素，其余元素保持零值</span><br><span class="line">array:&#x3D;[5]int&#123;1:10,3:30&#125;</span><br></pre></td></tr></table></figure>

<h4 id="使用数组"><a href="#使用数组" class="headerlink" title="使用数组"></a>使用数组</h4><p>要访问数组里某个单独元素，使用索引操作符 <code>[]</code> 即可。因为内存是连续的，所以索引访问的效率非常高。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 声明一个包含5个元素的整形数组</span><br><span class="line">array:&#x3D;[5]int&#123;1,2,3,4,5&#125;</span><br><span class="line"># 修改索引为2的元素值</span><br><span class="line">array[2]&#x3D;80</span><br></pre></td></tr></table></figure>

<h5 id="遍历访问数组"><a href="#遍历访问数组" class="headerlink" title="遍历访问数组"></a>遍历访问数组</h5><p>使用 <code>for</code> 遍历访问数组</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">func main() &#123;</span><br><span class="line">    array :&#x3D; [5]int&#123;1, 2, 3, 4, 5&#125;</span><br><span class="line">    for i :&#x3D; 0; i &lt; 5; i++ &#123;</span><br><span class="line">        fmt.Printf(&quot;索引：%d,值：%d\n&quot;, i, array[i])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用 <code>for range</code> 遍历访问数组每个元素</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">func main() &#123;</span><br><span class="line">    array :&#x3D; [5]int&#123;1, 2, 3, 4, 5&#125;</span><br><span class="line">    for k, v :&#x3D; range array &#123;</span><br><span class="line">        fmt.Printf(&quot;索引：%d,值：%d\n&quot;, k, v)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="数组相互赋值"><a href="#数组相互赋值" class="headerlink" title="数组相互赋值"></a>数组相互赋值</h5><p>同样类型的数组是可以相互赋值的，不同类型的不行，会编译错误。</p>
<p>数组变量的类型包括数组长度和每个元素的类型。只有这两部分都相同的数组，才是类型相同的数组，才能相互赋值。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">func main() &#123;</span><br><span class="line">    array :&#x3D; [5]int&#123;1, 2, 3, 4, 5&#125;</span><br><span class="line">    &#x2F;&#x2F;# 相同数组类型，能够互相赋值</span><br><span class="line">    &#x2F;&#x2F; var array1 [5]int &#x3D; array</span><br><span class="line">    &#x2F;&#x2F; fmt.Println(array1) &#x2F;&#x2F;[1 2 3 4 5]</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;不同数组类型，不能互相赋值</span><br><span class="line">    var array2 [4]int &#x3D; array &#x2F;&#x2F;cannot use array (type [5]int) as type [4]int in assignment</span><br><span class="line">    fmt.Println(array2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="指针数组"><a href="#指针数组" class="headerlink" title="指针数组"></a>指针数组</h5><p>在数组的类型前面加 <code>*</code> 声明为指针数组组。</p>
<p>使用 <code>*</code> 运算符可以访问指针数组元素指针所指向的值。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">func main() &#123;</span><br><span class="line">    &#x2F;&#x2F; # 声明指向整数的数组，用整形指针初始化索引为0和3的数组元素</span><br><span class="line">    array :&#x3D; [5]*int&#123;0: new(int), 3: new(int)&#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; # 为索引为0和3的元素赋值</span><br><span class="line">    *array[0] &#x3D; 10</span><br><span class="line">    *array[3] &#x3D; 40</span><br><span class="line"></span><br><span class="line">    fmt.Println(array)</span><br><span class="line">     &#x2F;&#x2F; [0xc420070188 &lt;nil&gt; &lt;nil&gt; 0xc4200701b0 &lt;nil&gt;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面的示例要注意，我们只可以给索引0 和 3 赋值，因为只有它们分配了内存，才可以赋值。如果给其他索引赋值，运行时会提示无效内存或nil指针引用。要解决这个问题，需要先给这些索引分配内存，然后再进行赋值修改操作。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">...</span><br><span class="line">&#x2F;&#x2F; # 为未分配内存的索引赋值，报错</span><br><span class="line"> *array[2] &#x3D; 30</span><br><span class="line">&#x2F;&#x2F; panic: runtime error: invalid memory address or nil pointer dereference</span><br><span class="line">&#x2F;&#x2F; [signal SIGSEGV: segmentation violation code&#x3D;0x1 addr&#x3D;0x0 pc&#x3D;0x2199]</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; # 先分配内存再赋值</span><br><span class="line">array[2] &#x3D; new(int)</span><br><span class="line">*array[2] &#x3D; 35</span><br><span class="line">fmt.Println(array)</span><br><span class="line">&#x2F;&#x2F; [0xc420074188 &lt;nil&gt; 0xc4200741d0 0xc4200741b0 &lt;nil&gt;]</span><br></pre></td></tr></table></figure>

<h5 id="指针数组相互赋值"><a href="#指针数组相互赋值" class="headerlink" title="指针数组相互赋值"></a>指针数组相互赋值</h5><p>复制数组指针，只会复制指针的值，而不会复制指针所指向的值。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">func main() &#123;</span><br><span class="line">    &#x2F;&#x2F; # 声明第一个包含3个元素的指向字符串的指针数组</span><br><span class="line">    var array1 [3]*string</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; # 声明第一个包含3个元素的指向字符串的指针数组</span><br><span class="line">    var array2 [3]*string</span><br><span class="line">    &#x2F;&#x2F; # 使用字符串指针初始化这个数组</span><br><span class="line">    array2 &#x3D; [3]*string&#123;new(string), new(string), new(string)&#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; # 使用颜色为每个元素赋值</span><br><span class="line">    *array2[0] &#x3D; &quot;red&quot;</span><br><span class="line">    *array2[1] &#x3D; &quot;blue&quot;</span><br><span class="line">    *array2[2] &#x3D; &quot;green&quot;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; # 将array2 复制给 array1</span><br><span class="line">    array1 &#x3D; array2</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; # 复制之后，两个数组指向同一组字符串</span><br><span class="line">    fmt.Println(array1)</span><br><span class="line">    fmt.Println(array2)</span><br><span class="line">    &#x2F;&#x2F; [0xc420074030 0xc420074040 0xc420074050]</span><br><span class="line">    &#x2F;&#x2F; [0xc420074030 0xc420074040 0xc420074050]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h4><p>数组本身只有一个维度，可以组合多个数组创建多维数组。</p>
<h5 id="声明多维数组"><a href="#声明多维数组" class="headerlink" title="声明多维数组"></a>声明多维数组</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">func main() &#123;</span><br><span class="line">    &#x2F;&#x2F; # 声明一个二维数组</span><br><span class="line">    var array1 [4][2]int</span><br><span class="line">    fmt.Println(array1) &#x2F;&#x2F; [[0 0] [0 0] [0 0] [0 0]]</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; # 使用数组字面量来声明并初始化一个二维数组</span><br><span class="line">    array2 :&#x3D; [4][2]int&#123;&#123;10, 11&#125;, &#123;20, 21&#125;, &#123;30, 31&#125;, &#123;40, 41&#125;&#125;</span><br><span class="line">    fmt.Println(array2) &#x2F;&#x2F;  [[10 11] [20 21] [30 31] [40 41]]</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; # 声明并初始化外层数组中索引为1 和 3 的元素</span><br><span class="line">    array3 :&#x3D; [4][2]int&#123;1: &#123;20, 21&#125;, 3: &#123;40, 41&#125;&#125;</span><br><span class="line">    fmt.Println(array3) &#x2F;&#x2F;  [[0 0] [20 21] [0 0] [40 41]]</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; # 声明并初始化外层数组和内层数组的当个元素</span><br><span class="line">    array4 :&#x3D; [4][2]int&#123;1: &#123;0: 20&#125;, 3: &#123;1: 41&#125;&#125;</span><br><span class="line">    fmt.Println(array4) &#x2F;&#x2F; [[0 0] [20 0] [0 0] [0 41]]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>声明多维数组时，第一维度的数组长度也可以使用 <code>...</code> 来根据数组值的个数来确定，但后面维度不能使用 <code>...</code>来自动推测。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">func main() &#123;</span><br><span class="line">    b :&#x3D; [...][2]int&#123;&#123;1, 1&#125;, &#123;2, 2&#125;, &#123;3, 3&#125;&#125;</span><br><span class="line">    fmt.Println(b) &#x2F;&#x2F;  [[1 1] [2 2] [3 3]]</span><br><span class="line">    fmt.Println(len(b)) &#x2F;&#x2F; 3</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="访问二维数组元素"><a href="#访问二维数组元素" class="headerlink" title="访问二维数组元素"></a>访问二维数组元素</h5><p>为了访问单个元素，需要反复组合使用 <code>[]</code> 运算符。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">func main() &#123;</span><br><span class="line">    &#x2F;&#x2F; # 声明一个二维数组</span><br><span class="line">    var array1 [4][2]int</span><br><span class="line">    fmt.Println(array1) &#x2F;&#x2F; [[0 0] [0 0] [0 0] [0 0]]</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; # 设置指定元素的值</span><br><span class="line">    array1[1][0] &#x3D; 5</span><br><span class="line">    fmt.Println(array1) &#x2F;&#x2F; [[0 0] [5 0] [0 0] [0 0]]</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; # 获取指定位置的元素</span><br><span class="line">    fmt.Println(array1[1][0]) &#x2F;&#x2F;5</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="多维数组相互赋值"><a href="#多维数组相互赋值" class="headerlink" title="多维数组相互赋值"></a>多维数组相互赋值</h5><p>多维数组的类型包括每一维度的藏毒以及最终存储在元素中的数据的类型。只要类型一致，就可以将多维数组互相赋值。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">func main() &#123;</span><br><span class="line">    array1 :&#x3D; [2][2]int&#123;&#123;1, 2&#125;, &#123;3, 4&#125;&#125;</span><br><span class="line">    var array2 [2][2]int</span><br><span class="line"></span><br><span class="line">    array2 &#x3D; array1</span><br><span class="line">    fmt.Println(array2) &#x2F;&#x2F; [[1 2] [3 4]]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="在函数间传递数组"><a href="#在函数间传递数组" class="headerlink" title="在函数间传递数组"></a>在函数间传递数组</h5><p>在函数间传递变量时，总是以<strong>值</strong>的形式传递。如果变量是个数组，那么就会整个复制，并传递给函数，如果数组非常大，对于内存是一个很大的开销。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">func main() &#123;</span><br><span class="line">    array :&#x3D; [5]int&#123;1: 2, 3: 4&#125;</span><br><span class="line">    modify(array)</span><br><span class="line">    fmt.Println(array) &#x2F;&#x2F;[0 2 0 4 0]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func modify(a [5]int) &#123;</span><br><span class="line">    a[1] &#x3D; 3</span><br><span class="line">    fmt.Println(a) &#x2F;&#x2F; [0 3 0 4 0]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如示例，数组是复制的，原来的数组没有修改。如果复制的数组非常大，对内存是一个非常大的浪费。</p>
<p>可以通过传递数组的指针的方式来在函数间传递大数组。</p>
<h5 id="使用指针在函数间传递大数组"><a href="#使用指针在函数间传递大数组" class="headerlink" title="使用指针在函数间传递大数组"></a>使用指针在函数间传递大数组</h5><p>传递数组的指针，复制的大小只是一个数组类型的指针大小。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">func main() &#123;</span><br><span class="line">    array :&#x3D; [5]int&#123;1: 2, 3: 4&#125;</span><br><span class="line">    modify(&amp;array)</span><br><span class="line">    fmt.Println(array) &#x2F;&#x2F;[0 3 0 4 0]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func modify(a *[5]int) &#123;</span><br><span class="line">    a[1] &#x3D; 3</span><br><span class="line">    fmt.Println(*a) &#x2F;&#x2F; [0 3 0 4 0]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如示例，通过传递数组的指针，会发现原来的数组也被修改了。要意识到的是，因为传递的是指针，所以如果改变指针指向的值，会改变共享的内存。</p>
<p>使用切片能更好的处理内存共享问题。</p>
<blockquote>
<p>这里注意，数组的指针和指针数组是两个概念，数组的指针是 <code>*[5]int</code>,指针数组是 <code>[5]*int</code>，注意 <code>*</code> 的位置。</p>
</blockquote>
<hr>
<h4 id="总结概括"><a href="#总结概括" class="headerlink" title="总结概括"></a>总结概括</h4><h5 id="数组知识点"><a href="#数组知识点" class="headerlink" title="数组知识点"></a>数组知识点</h5><ul>
<li>数组是值类型，赋值和传参会复制整个数组，而不是指针。</li>
<li>数组长度必须是常量，且是类型的组成部分。<code>[2]int</code> 和 <code>[3]int</code> 是不同类型。</li>
<li>支持 <code>&quot;==&quot;</code>、<code>&quot;!=&quot;</code> 操作符，因为内存总是被初始化过的。</li>
<li>指针数组 <code>[n]*T</code>，数组指针 <code>*[n]T</code>。</li>
<li>值拷贝行为会造成性能问题，通常会建议使用 slice，或数组指针。</li>
</ul>
<h5 id="声明并初始化-1"><a href="#声明并初始化-1" class="headerlink" title="声明并初始化"></a>声明并初始化</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">func main() &#123;</span><br><span class="line">    &#x2F;&#x2F; a :&#x3D; [3]int&#123;1, 2&#125;         &#x2F;&#x2F;未初始化元素值未数组类型零值</span><br><span class="line">    &#x2F;&#x2F; b :&#x3D; [...]int&#123;1, 2, 3, 4&#125; &#x2F;&#x2F;通过初始化值确定数组长度</span><br><span class="line">    &#x2F;&#x2F; c :&#x3D; [5]int&#123;2: 10, 4: 20&#125; &#x2F;&#x2F; 使用索引号初始化元素</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="多维数组-1"><a href="#多维数组-1" class="headerlink" title="多维数组"></a>多维数组</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">func main() &#123;</span><br><span class="line">    d :&#x3D; [2][3]int&#123;&#123;1, 2, 3&#125;, &#123;4, 5, 6&#125;&#125;             &#x2F;&#x2F;多维数组</span><br><span class="line">    e :&#x3D; [...][2]int&#123;&#123;1, 1&#125;, &#123;2, 2&#125;, &#123;3, 3&#125;, &#123;4, 4&#125;&#125; &#x2F;&#x2F;第 2 维度不能用 &quot;...&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="内置函数-len-和-cap-都返回数组长度-元素数量"><a href="#内置函数-len-和-cap-都返回数组长度-元素数量" class="headerlink" title="内置函数 len 和 cap 都返回数组长度 (元素数量)"></a>内置函数 len 和 cap 都返回数组长度 (元素数量)</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">func main() &#123;</span><br><span class="line">    f :&#x3D; [2]int&#123;&#125;</span><br><span class="line">    fmt.Println(len(f), cap(f)) &#x2F;&#x2F; 2 2 </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>从0到1学Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>从0到1学Golang之基础--Go 包</title>
    <url>/2017/05/12/learn-golang-from-0-to-1-of-go-package/</url>
    <content><![CDATA[<p>《Go In Action》 中文版 《Go语言实战》 读书笔记</p>
<h4 id="什么是包"><a href="#什么是包" class="headerlink" title="什么是包"></a>什么是包</h4><p>go语言的包其实就是我们计算机里的目录</p>
<h4 id="包的命名"><a href="#包的命名" class="headerlink" title="包的命名"></a>包的命名</h4><p>所有的 <code>.go</code> 文件，除了空行和注释，都应该在第一行声明自己所属的包。</p>
<p>使用 <code>package</code> 关键字声明包。如： <code>package main</code> 。</p>
<p>每个包都在一个单独的目录里。也就是说，同一个目录下的所有 <code>.go</code> 文件必须声明同一个包名。</p>
<p>以 <code>net/http</code> 包为例，在 <code>http</code> 目录下的所有文件都属于 <code>http</code> 包。</p>
<p>go语言中给包及其目录命名，遵循 <code>简洁</code> 、<code>清晰</code> 、<code>全小写</code> 及 <code>和所在目录同名</code> 的原则。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import &quot;net&#x2F;http&quot;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">    http.ListenAndServe(&quot;127.0.0.1:80&quot;,handler);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如上 <code>net/http</code>，在导入包时采用 <code>全路径</code> 的方式，所以可以区分同名的不同包，只要保证全路径不同就可以。<br>使用全路径的导入，也增加了包名命名的灵活性。</p>
<h4 id="main-包"><a href="#main-包" class="headerlink" title="main 包"></a>main 包</h4><p>在go语言中，命名为 <code>main</code> 的包会被尝试编译为一个二进制可执行文件。</p>
<p>所有用go语言编译的可执行程序都必须有一个名为 <code>main</code> 的包。</p>
<p>一个 <code>main</code> 的包，一定会包含一个 <code>main()</code> 函数。</p>
<p>在Go语言里同时要满足 <code>main</code> 包和包含 <code>main()</code> 函数，才会被编译成一个可执行文件。</p>
<p>Go程序编译时，会使用声明 <code>main</code> 包的代码所在的目录的目录名作为二进制可执行文件的文件名。</p>
<h4 id="包的导入"><a href="#包的导入" class="headerlink" title="包的导入"></a>包的导入</h4><p>使用 <code>import</code> 关键字来导入包。导入的包必须是一个全路径的包，也就是包所在的位置。</p>
<p>导入单个包：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &quot;fmt&quot;</span><br></pre></td></tr></table></figure>

<p>导入多个包时，使用一对括号包含的导入块，每个包独占一行。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import (</span><br><span class="line">    &quot;fmt&quot;</span><br><span class="line">    &quot;net&#x2F;http&quot;</span><br><span class="line">    &quot;strings&quot;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>对于多于一个路径的包名，在代码中引用的时候，使用全路径最后一个包名作为引用的包名，比如 <code>net/http</code> ,我们在代码使用的是 <code>http</code> ，而不是 <code>net</code> 。</p>
<p>Go有两个很重要的环境变量 <code>GOROOT</code> 和 <code>GOPATH</code> ,这是两个定义路径的环境变量，GOROOT是安装Go的路径，比如/usr/local/go；GOPATH是我们自己定义的开发者个人的工作空间，比如 <code>/home/myproject/go</code> 。</p>
<p>标准库中的包会在 <code>GOROOT</code> 去查找，Go开发者创建的包会在 <code>GOPATH</code> 指定的目录中查找。</p>
<p>对于包的查找，是有优先级的，编译器会优先在 <code>GOROOT</code> 里搜索，其次是 <code>GOPATH</code> ,一旦找到，就会马上停止搜索。如果最终都没找到，就报编译异常了。</p>
<h4 id="远程导入"><a href="#远程导入" class="headerlink" title="远程导入"></a>远程导入</h4><p>Go语言的工具链支持从Github、Bitbucket等类似网站获取源代码。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &quot;github.com&#x2F;spf13&#x2F;viper&quot;</span><br></pre></td></tr></table></figure>

<p>用导入路径编译程序时，gobuild 命令会先在 <code>GOPATH</code> 下搜索这个包，如果没有找到，就会使用 <code>go get</code> 工具通过URL从网络获取，并把包的源代码保存在 <code>GOPATH</code> 目录下对应URL的目录里。</p>
<p><code>go get</code> 工具可以递归获取依赖包。</p>
<h4 id="命名导入"><a href="#命名导入" class="headerlink" title="命名导入"></a>命名导入</h4><p>如果要导入的多个包具有相同的名字，可以通过 <code>命名导入</code> 的方式来导入。</p>
<p><strong>命名导入</strong>是指在 <code>import</code> 语句给出的包路径的左侧定义一个名字，将导入的包命名为新名字。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import (</span><br><span class="line">    &quot;fmt&quot;</span><br><span class="line">    myfmt &quot;mylib&#x2F;fmt&quot;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>Go语言规定，导入的包必须要使用，否则会报编译错误。Go语言的这个特性可以防止导入了未被使用的包，避免代码变得臃肿。</p>
<p>但是有时候我们需要导入一个包，但是不需要引用这个包的标识符。这种情况下，可以使用空白标识符 <code>_</code> 来重命名导入的包即可。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">    &quot;fmt&quot;</span><br><span class="line">    _ &quot;mylib&#x2F;fmt&quot;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>空白标识符(_) 用来抛弃不想继续使用的值，如给导入的包赋予一个空名字，或忽略函数返回的不感兴趣的值。</p>
</blockquote>
<h4 id="init函数"><a href="#init函数" class="headerlink" title="init函数"></a>init函数</h4><p>每个包都可以有任意多个init函数，这些init函数都会在main函数之前执行。init函数通常用来做初始化变量、设置包或者其他需要在程序执行前的引导工作。init函数用在设置包、初始化变量或者其他要在程序运行前优先完成的引导工作。</p>
<p>以数据库驱动为例， database 下的驱动在启动时执行 init 函数会将自身注册到 sql 包里，因为 sql 包在编译时并不知道这些驱动的存在，等启动之后 sql 才能调用这些驱动。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package postgres</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">    &quot;database&#x2F;sql&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func init() &#123;</span><br><span class="line">    sql.Register(&quot;postgres&quot;, new(PostgresDriver))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>因为我们只是想执行这个 postgres 包的 <code>init</code> 方法，并不想使用这个包，所以我们在导入的时候，需要使用空白标识符 <code>_</code> 来重命名包名，避免编译错误。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">    &quot;database&#x2F;sql&quot;</span><br><span class="line">    _ &quot;github.com&#x2F;goinaction&#x2F;code&#x2F;chapter3&#x2F;dbdriver&#x2F;postgres&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">    sql.Open(&quot;postgres&quot;, &quot;mydb&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如上非常简洁，剩下很对数据库的操作，都是使用 <code>database/sql</code> 标准接口。如果我们想换其他数据库驱动，只需要换个导入即可，灵活方便。</p>
]]></content>
      <categories>
        <category>从0到1学Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang运行环境配置</title>
    <url>/2017/04/02/golang-running-environment-configuration/</url>
    <content><![CDATA[<h4 id="Win系统下配置Go语言环境"><a href="#Win系统下配置Go语言环境" class="headerlink" title="Win系统下配置Go语言环境"></a>Win系统下配置Go语言环境</h4><ol>
<li>从网站 <a href="https://golang.org/dl/" target="_blank" rel="noopener">Downloads - The Go Programming Language</a> 下载 <code>go1.6.3.windows-amd64.msi</code> 安装包。</li>
<li>运行并安装到默认目录 <code>C:\Go</code> 目录下。</li>
<li>配置 <code>GOROOT</code> 和 <code>GOPATH</code> :<ul>
<li>在 系统的环境变量中的 <code>PATH</code> 变量中添加Go的目录 <code>C:\Go\bin;</code> (通过安装包安装后已默认设置该项)</li>
<li>在 系统的环境变量中添加 <code>GOROOT</code> 变量，设置值为 <code>C:\Go\</code> (通过安装包安装后已默认设置该项)</li>
<li>要验证 <code>GOROOT</code> 是否设置成功，我们可以在命令行窗口中输入 <code>go version</code>，如果输出了Go的版本信息则说明配置正确。</li>
<li><code>GOPATH</code> 就需要我们手动配置一下，<code>GOPATH</code> 就是你的工作目录，用于存放项目和go依赖包等。假设目录 <code>E:\GOProject</code> 为我的Go项目工作目录，该工作目录下默认包含三个子目录：<code>bin/</code> <code>pkg/</code> <code>src</code> 。然后我们在 系统的环境变量中 新建 <code>GOPATH</code> 变量，设置值为 <code>E:\GOProject;</code>。默认情况下 <code>GOPATH</code> 目录可以设置多个，之间用分号 <code>;</code> 分隔。</li>
<li>然后在命令行窗口中输入 <code>echo %GOPATH%</code> 如果打印出了上面设置的 <code>GOPATH</code> 的目录，则说明配置成功。</li>
</ul>
</li>
<li>为了验证Go开发环境是否设置成功，我们可以在命令行下输入如下命令：(保证已经安装Git)</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">go get github.com&#x2F;golang&#x2F;example&#x2F;hello</span><br></pre></td></tr></table></figure>
<ol start="5">
<li>然后执行命令：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">%GOPATH%&#x2F;bin&#x2F;hello</span><br></pre></td></tr></table></figure>

<p>如果输出了 <code>Hello,Go examples!</code> 则说明Go语言的开发环境搭建成功。</p>
<p>参考自：<a href="http://www.wadewegner.com/2014/12/easy-go-programming-setup-for-windows/" target="_blank" rel="noopener">Easy Go Programming Setup for Windows Wade Wegner</a></p>
<hr>
<h4 id="Win下配置Golang开发环境添加多个工作目录"><a href="#Win下配置Golang开发环境添加多个工作目录" class="headerlink" title="Win下配置Golang开发环境添加多个工作目录"></a>Win下配置Golang开发环境添加多个工作目录</h4><p>我一般会设置两个目录用作我的工作项目。一般我会命名为 <code>xgo</code> 和 <code>xgo_workspace</code> ，一个用来存储网络上其他的Golang依赖项目，一个作为我自己的开发项目存放位置。</p>
<p>在Windows系统下安装上Go的msi安装包后，默认的 <code>GOPATH</code> 目录为当前管理员账户目录下的go文件夹：<code>C:\Users\xxxx\go</code> 中，在 <code>Cmder</code> 控制台中通过 <code>go env</code> 查看：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">λ go env                                             </span><br><span class="line">set GOARCH&#x3D;amd64                                     </span><br><span class="line">set GOBIN&#x3D;                                           </span><br><span class="line">set GOEXE&#x3D;.exe                                       </span><br><span class="line">set GOHOSTARCH&#x3D;amd64                                 </span><br><span class="line">set GOHOSTOS&#x3D;windows                                 </span><br><span class="line">set GOOS&#x3D;windows                                     </span><br><span class="line">set GOPATH&#x3D;C:\Users\xxxx\go                           </span><br><span class="line">set GORACE&#x3D;                                          </span><br><span class="line">set GOROOT&#x3D;C:\Go                                     </span><br><span class="line">set GOTOOLDIR&#x3D;C:\Go\pkg\tool\windows_amd64           </span><br><span class="line">set GCCGO&#x3D;gccgo                                      </span><br><span class="line">set CC&#x3D;gcc                                           </span><br><span class="line">set GOGCCFLAGS&#x3D;-m64 -mthreads -fmessage-length&#x3D;0     </span><br><span class="line">set CXX&#x3D;g++                                          </span><br><span class="line">set CGO_ENABLED&#x3D;1                                    </span><br><span class="line">set CGO_CFLAGS&#x3D;-g -O2                                </span><br><span class="line">set CGO_CPPFLAGS&#x3D;                                    </span><br><span class="line">set CGO_CXXFLAGS&#x3D;-g -O2                              </span><br><span class="line">set CGO_FFLAGS&#x3D;-g -O2                                </span><br><span class="line">set CGO_LDFLAGS&#x3D;-g -O2                               </span><br><span class="line">set PKG_CONFIG&#x3D;pkg-config</span><br></pre></td></tr></table></figure>

<p>在 <code>环境变量</code> 下新增 <code>GOPATH</code> 项，添加值为 <code>E:\GOProject\xgo;E:\GOProject\xgo_workspace</code> ，注意多个目录在windows下使用分号 <code>;</code> 分隔，重启 <code>Cmder</code> 再次通过 <code>go env</code> 查看：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">λ go env</span><br><span class="line">set GOARCH&#x3D;amd64</span><br><span class="line">set GOBIN&#x3D;</span><br><span class="line">set GOEXE&#x3D;.exe</span><br><span class="line">set GOHOSTARCH&#x3D;amd64</span><br><span class="line">set GOHOSTOS&#x3D;windows</span><br><span class="line">set GOOS&#x3D;windows</span><br><span class="line">set GOPATH&#x3D;E:\GOProject\xgo;E:\GOProject\xgo_workspace</span><br><span class="line">set GORACE&#x3D;</span><br><span class="line">set GOROOT&#x3D;C:\Go</span><br><span class="line">set GOTOOLDIR&#x3D;C:\Go\pkg\tool\windows_amd64</span><br><span class="line">set GCCGO&#x3D;gccgo</span><br><span class="line">set CC&#x3D;gcc</span><br><span class="line">set GOGCCFLAGS&#x3D;-m64 -mthreads -fmessage-length&#x3D;0</span><br><span class="line">set CXX&#x3D;g++</span><br><span class="line">set CGO_ENABLED&#x3D;1</span><br><span class="line">set CGO_CFLAGS&#x3D;-g -O2</span><br><span class="line">set CGO_CPPFLAGS&#x3D;</span><br><span class="line">set CGO_CXXFLAGS&#x3D;-g -O2</span><br><span class="line">set CGO_FFLAGS&#x3D;-g -O2</span><br><span class="line">set CGO_LDFLAGS&#x3D;-g -O2</span><br><span class="line">set PKG_CONFIG&#x3D;pkg-config</span><br></pre></td></tr></table></figure>


<hr>
<h4 id="Mac下配置Golang开发环境"><a href="#Mac下配置Golang开发环境" class="headerlink" title="Mac下配置Golang开发环境"></a>Mac下配置Golang开发环境</h4><h5 id="通过brew安装"><a href="#通过brew安装" class="headerlink" title="通过brew安装"></a>通过brew安装</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ brew install go</span><br></pre></td></tr></table></figure>

<h5 id="通过pkg包安装"><a href="#通过pkg包安装" class="headerlink" title="通过pkg包安装"></a>通过pkg包安装</h5><p>从 <a href="https://golang.org/" target="_blank" rel="noopener">golang官网</a> 下载Mac下的pkg安装包直接安装.</p>
<h5 id="环境变量配置"><a href="#环境变量配置" class="headerlink" title="环境变量配置"></a>环境变量配置</h5><p>GOPATH允许多个目录，当有多个目录时，请注意分隔符，多个目录的时候Windows是分号 <code>;</code>，Linux系统及Mac下是冒号 <code>:</code>，当有多个GOPATH时，默认会将 <code>go get</code> 的内容放在第一个目录下。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ go env</span><br><span class="line">GOARCH&#x3D;&quot;amd64&quot;</span><br><span class="line">GOBIN&#x3D;&quot;&quot;</span><br><span class="line">GOEXE&#x3D;&quot;&quot;</span><br><span class="line">GOHOSTARCH&#x3D;&quot;amd64&quot;</span><br><span class="line">GOHOSTOS&#x3D;&quot;darwin&quot;</span><br><span class="line">GOOS&#x3D;&quot;darwin&quot;</span><br><span class="line">GOPATH&#x3D;&quot;&quot;</span><br><span class="line">GORACE&#x3D;&quot;&quot;</span><br><span class="line">GOROOT&#x3D;&quot;&#x2F;usr&#x2F;local&#x2F;go&quot;</span><br><span class="line">GOTOOLDIR&#x3D;&quot;&#x2F;usr&#x2F;local&#x2F;go&#x2F;pkg&#x2F;tool&#x2F;darwin_amd64&quot;</span><br><span class="line">CC&#x3D;&quot;clang&quot;</span><br><span class="line">GOGCCFLAGS&#x3D;&quot;-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length&#x3D;0 -fdebug-prefix-map&#x3D;&#x2F;var&#x2F;folders&#x2F;mk&#x2F;7c0w24ts0ps1g06q78gzd7dc0000gn&#x2F;T&#x2F;go-build098119519&#x3D;&#x2F;tmp&#x2F;go-build -gno-record-gcc-switches -fno-common&quot;</span><br><span class="line">CXX&#x3D;&quot;clang++&quot;</span><br><span class="line">CGO_ENABLED&#x3D;&quot;1&quot;</span><br></pre></td></tr></table></figure>


<p>假如我的go项目开发主目录为:<br><code>/Users/xxx/Learn/Go</code><br>在该目录下,第一个目录为 <code>xgo</code>  第二个目录为 <code>xgo_workspace</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># GOPATH</span><br><span class="line">export GOPATH&#x3D;$HOME&#x2F;Learn&#x2F;Go&#x2F;xgo:$HOME&#x2F;Learn&#x2F;Go&#x2F;xgo_workspace</span><br><span class="line"></span><br><span class="line"># GOPATH bin</span><br><span class="line">export PATH&#x3D;$PATH:$GOPATH&#x2F;bin</span><br></pre></td></tr></table></figure>

<p>添加完成后,重启终端即可生效.如果想立即生效,则可执行如下命令:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ source ~&#x2F;.bash_profile</span><br></pre></td></tr></table></figure>

<p>再次查看go环境变量:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ go env</span><br><span class="line">GOARCH&#x3D;&quot;amd64&quot;</span><br><span class="line">GOBIN&#x3D;&quot;&quot;</span><br><span class="line">GOEXE&#x3D;&quot;&quot;</span><br><span class="line">GOHOSTARCH&#x3D;&quot;amd64&quot;</span><br><span class="line">GOHOSTOS&#x3D;&quot;darwin&quot;</span><br><span class="line">GOOS&#x3D;&quot;darwin&quot;</span><br><span class="line">GOPATH&#x3D;&quot;&#x2F;Users&#x2F;xxx&#x2F;Learn&#x2F;Go&#x2F;xgo:&#x2F;Users&#x2F;xxx&#x2F;Learn&#x2F;Go&#x2F;xgo_workspace&quot;</span><br><span class="line">GORACE&#x3D;&quot;&quot;</span><br><span class="line">GOROOT&#x3D;&quot;&#x2F;usr&#x2F;local&#x2F;go&quot;</span><br><span class="line">GOTOOLDIR&#x3D;&quot;&#x2F;usr&#x2F;local&#x2F;go&#x2F;pkg&#x2F;tool&#x2F;darwin_amd64&quot;</span><br><span class="line">CC&#x3D;&quot;clang&quot;</span><br><span class="line">GOGCCFLAGS&#x3D;&quot;-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length&#x3D;0 -fdebug-prefix-map&#x3D;&#x2F;var&#x2F;folders&#x2F;mk&#x2F;7c0w24ts0ps1g06q78gzd7dc0000gn&#x2F;T&#x2F;go-build346222074&#x3D;&#x2F;tmp&#x2F;go-build -gno-record-gcc-switches -fno-common&quot;</span><br><span class="line">CXX&#x3D;&quot;clang++&quot;</span><br><span class="line">CGO_ENABLED&#x3D;&quot;1&quot;</span><br></pre></td></tr></table></figure>

<hr>
<ul>
<li><a href="http://blog.helloarron.com/2015/08/29/go/mac-install-go/" target="_blank" rel="noopener">http://blog.helloarron.com/2015/08/29/go/mac-install-go/</a></li>
<li><a href="https://github.com/astaxie/build-web-application-with-golang/blob/master/zh/01.2.md" target="_blank" rel="noopener">https://github.com/astaxie/build-web-application-with-golang/blob/master/zh/01.2.md</a></li>
<li><a href="http://blog.studygolang.com/2013/01/%E5%86%8D%E7%9C%8Bgopath/" target="_blank" rel="noopener">http://blog.studygolang.com/2013/01/%E5%86%8D%E7%9C%8Bgopath/</a>  (设置多个目录时只会将最后一个目录添加上bin 这里要说明)</li>
</ul>
<hr>
<h4 id="Update"><a href="#Update" class="headerlink" title="Update"></a>Update</h4><ul>
<li>2017-11-28 更新windows下设置多个工作目录的说明</li>
</ul>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Go语言学习资料整理</title>
    <url>/2017/03/31/learning-golang/</url>
    <content><![CDATA[<p>整理网上找到的Golang语言学习资料</p>
<h4 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h4><h5 id="基础教程-书籍在线版"><a href="#基础教程-书籍在线版" class="headerlink" title="基础教程 书籍在线版"></a>基础教程 书籍在线版</h5><ul>
<li><a href="https://tour.go-zh.org/" target="_blank" rel="noopener">Go 指南-A Tour of Go</a></li>
<li><a href="https://docs.ruanjiadeng.com/gopl-zh/" target="_blank" rel="noopener">Go语言圣经（中文版）</a></li>
<li><a href="http://www.kancloud.cn/kancloud/effective" target="_blank" rel="noopener">Effective Go中文版</a></li>
<li><a href="https://github.com/astaxie/build-web-application-with-golang/blob/master/zh/preface.md" target="_blank" rel="noopener">Go Web编程 build-web-application-with-golang</a></li>
<li><a href="http://wiki.jikexueyuan.com/project/the-way-to-go/" target="_blank" rel="noopener">Go入门指南 The Way to Go</a></li>
<li><a href="https://github.com/Unknwon/the-way-to-go_ZH_CN" target="_blank" rel="noopener">《The Way to Go》中文译本，中文正式名《Go入门指南》</a></li>
<li><a href="http://www.kancloud.cn/digest/batu-go" target="_blank" rel="noopener">Golang学习室</a></li>
<li><a href="https://github.com/jemygraw/TechDoc" target="_blank" rel="noopener">Go轻松学 TechDoc</a></li>
<li><a href="https://github.com/astaxie/go-best-practice" target="_blank" rel="noopener">《Go实战开发》 go-best-practice</a></li>
</ul>
<hr>
<h5 id="基础教程-书籍离线版"><a href="#基础教程-书籍离线版" class="headerlink" title="基础教程 书籍离线版"></a>基础教程 书籍离线版</h5><ul>
<li><a href="https://github.com/qyuhen/book" target="_blank" rel="noopener">GitHub - qyuhen/book: 学习笔记</a></li>
</ul>
<hr>
<h5 id="基础教程-视频"><a href="#基础教程-视频" class="headerlink" title="基础教程 视频"></a>基础教程 视频</h5><ul>
<li><a href="http://study.163.com/course/courseMain.htm?courseId=306002" target="_blank" rel="noopener">Go编程基础</a></li>
<li><a href="http://pan.baidu.com/share/link?uk=1059486155&shareid=1843715017" target="_blank" rel="noopener">Go编程基础_免费高速下载|百度网盘-分享无限制</a></li>
</ul>
<hr>
<h4 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h4><ul>
<li><a href="http://study.163.com/course/introduction.htm?courseId=328001" target="_blank" rel="noopener">Go Web 基础 - 网易云课堂</a></li>
<li><a href="http://www.kancloud.cn/hello123/beego" target="_blank" rel="noopener">beego开发文档</a></li>
</ul>
<hr>
<h4 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h4><ul>
<li><a href="https://github.com/tiancaiamao/go-internals" target="_blank" rel="noopener">深入解析Go go-internals</a></li>
<li><a href="http://study.163.com/course/introduction.htm?courseId=510006" target="_blank" rel="noopener">Go名库讲解 - 网易云课堂</a></li>
<li><a href="https://github.com/polaris1119/The-Golang-Standard-Library-by-Example" target="_blank" rel="noopener">Go语言标准库</a></li>
<li><a href="https://github.com/hyper0x/go_command_tutorial" target="_blank" rel="noopener">GO 命令教程 : Golang command tutorial in Chinese.</a></li>
<li><a href="http://www.jianshu.com/p/dd80f6be7969" target="_blank" rel="noopener">理解Go语言的nil - 简书</a></li>
</ul>
<hr>
<h4 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h4><ul>
<li><a href="https://gowalker.org/" target="_blank" rel="noopener">Go Walker - Go 语言在线 API 文档</a></li>
<li><a href="https://gopm.io/" target="_blank" rel="noopener">Go 语言包管理</a></li>
<li><a href="http://regoio.herokuapp.com/" target="_blank" rel="noopener">Rego - A Go regular expression tester</a></li>
</ul>
<hr>
<h4 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h4><ul>
<li><a href="https://github.com/golang/go/wiki/Projects" target="_blank" rel="noopener">Projects · golang/go Wiki · GitHub</a></li>
</ul>
<hr>
<h4 id="Golang大牛"><a href="#Golang大牛" class="headerlink" title="Golang大牛"></a>Golang大牛</h4><ul>
<li><a href="https://github.com/Unknwon" target="_blank" rel="noopener">Unknwon (无闻) · GitHub</a></li>
<li><a href="https://github.com/qyuhen" target="_blank" rel="noopener">qyuhen (Q.yuhen) · GitHub</a></li>
</ul>
<hr>
<h4 id="Go-开发工具"><a href="#Go-开发工具" class="headerlink" title="Go 开发工具"></a>Go 开发工具</h4><ul>
<li>gosublimetext 插件</li>
<li><a href="https://github.com/DisposaBoy/GoSublime" target="_blank" rel="noopener">GitHub - DisposaBoy/GoSublime: A Golang plugin collection for SublimeText <strong>3</strong>, providing code completion and other IDE-like features.</a></li>
<li><a href="http://blog.wiseturtles.com/posts/go-ide.html" target="_blank" rel="noopener">Wise Turtles - Go学习笔记3之打造Sublime Text&nbsp;3作为Go的集成开发环境</a></li>
<li><a href="http://blog.csdn.net/chenggong2dm/article/details/49423555" target="_blank" rel="noopener">Go语言编辑器IDE之JetBrains篇(PyCharm+go插件plugin)</a></li>
<li><a href="http://www.vckai.com/p/13" target="_blank" rel="noopener">Sublime Text3 &#43; Golang搭建开发环境_随笔 - Vckai的个人技术博客. - Vckai.com</a></li>
<li><a href="http://www.cnblogs.com/sevenyuan/archive/2013/03/01/2938351.html" target="_blank" rel="noopener">Sublime Text 2搭建Go开发环境（Windows） - Bill Yuan - 博客园</a></li>
<li><a href="https://my.oschina.net/Obahua/blog/110767" target="_blank" rel="noopener">Ubuntu 配置 Go 语言开发环境（Sublime Text+GoSublime）  - 抛弃世俗之浮躁，留我钻研之刻苦 - 开源中国社区</a></li>
</ul>
<hr>
<h4 id="相关参考"><a href="#相关参考" class="headerlink" title="相关参考"></a>相关参考</h4><ul>
<li><a href="http://www.jianshu.com/p/d7a03c8e4e8a" target="_blank" rel="noopener">Golang学习历程 - 简书</a></li>
<li><a href="https://github.com/Unknwon/go-study-index" target="_blank" rel="noopener">GitHub - Unknwon/go-study-index: Go 语言学习资料索引</a></li>
<li><a href="http://ironxu.com/category/go" target="_blank" rel="noopener">Go 标准库介绍 ironxu</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/25493806" target="_blank" rel="noopener">GO语言学习资源整理 - 知乎专栏</a></li>
<li><a href="https://github.com/carryxyh/GO-Start/blob/master/Go%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%9A%84%E9%97%AD%E5%8C%85.md" target="_blank" rel="noopener">GO-Start/Go语言中的闭包.md at master · carryxyh/GO-Start · GitHub</a></li>
<li><a href="https://xiequan.info/go%E7%9A%84%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/" target="_blank" rel="noopener">Go的文件操作 - 谢权SELF</a></li>
<li><a href="https://yq.aliyun.com/articles/72365" target="_blank" rel="noopener">Go语言并发机制初探-博客-云栖社区-阿里云</a></li>
<li><a href="http://www.flysnow.org/categories/Golang/" target="_blank" rel="noopener">Go语言实战笔记</a></li>
<li><a href="https://segmentfault.com/a/1190000005757688" target="_blank" rel="noopener">Go学习【二】学习资料 - 一起学习 go - SegmentFault</a></li>
<li><a href="http://www.jianshu.com/p/a70098a94d18" target="_blank" rel="noopener">GO语言零基础入门资料整理 - 简书</a></li>
<li><a href="http://smallsoho.com/2016/11/20/Go%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B.html" target="_blank" rel="noopener">Go简明教程</a></li>
</ul>
<hr>
<h4 id="电子书教程"><a href="#电子书教程" class="headerlink" title="电子书教程"></a>电子书教程</h4><h5 id="Go-语言基础"><a href="#Go-语言基础" class="headerlink" title="Go 语言基础"></a>Go 语言基础</h5><ul>
<li><a href="https://www.gitbook.com/book/zengweigang/core-go/details" target="_blank" rel="noopener">go语言入门 · GitBook</a></li>
<li><a href="http://www.runoob.com/go/go-tutorial.html" target="_blank" rel="noopener">go语言教程</a></li>
<li><a href="http://mikespook.com/learning-go/" target="_blank" rel="noopener">《学习GO语言》中文版</a></li>
<li><a href="https://github.com/mikespook/Learning-Go-zh-cn" target="_blank" rel="noopener">《学习GO语言》GitHub - mikespook/Learning-Go-zh-cn: 一本学习 Go 语言的免费电子书。</a></li>
<li><a href="https://github.com/Unknwon/go-fundamental-programming" target="_blank" rel="noopener">GitHub - Unknwon/go-fundamental-programming: 《Go编程基础》是一套针对 Google 出品的 Go 语言的视频语音教程，主要面向新手级别的学习者。</a></li>
<li><a href="https://github.com/Unknwon/go-rock-libraries-showcases" target="_blank" rel="noopener">GitHub - Unknwon/go-rock-libraries-showcases: 《Go名库讲解》是一套针对 Google 出品的 Go 语言的第三方库进行评测讲解的集博客、示例与语音视频为一体的综合教程，适合完成学习完成《Go编程基础》教程的学习者。</a></li>
<li><a href="https://github.com/Unknwon/the-way-to-go_ZH_CN" target="_blank" rel="noopener">GitHub - Unknwon/the-way-to-go_ZH_CN: 《The Way to Go》中文译本，中文正式名《Go入门指南》</a></li>
<li><a href="http://docs.ruanjiadeng.com/gopl-zh/" target="_blank" rel="noopener">前言 | Go语言圣经</a></li>
</ul>
<h5 id="Go-Web-开发"><a href="#Go-Web-开发" class="headerlink" title="Go Web 开发"></a>Go Web 开发</h5><ul>
<li><a href="https://github.com/Unknwon/go-web-foundation" target="_blank" rel="noopener">GitHub - Unknwon/go-web-foundation: 《Go Web基础》是一套针对 Google 出品的 Go 语言的视频语音教程，主要面向完成《Go编程基础》教程后希望进一步了解有关 Go Web 开发的学习者。</a></li>
<li><a href="https://github.com/astaxie/build-web-application-with-golang" target="_blank" rel="noopener">《GO WEB编程》</a></li>
</ul>
<h4 id="视频教程"><a href="#视频教程" class="headerlink" title="视频教程"></a>视频教程</h4><ul>
<li><a href="http://edu.51cto.com/course/course_id-1762.html" target="_blank" rel="noopener">跟无闻学Go语言：Go编程基础视频教程（共15课时）_在线自学视频教程_51CTO学院</a></li>
<li><a href="http://edu.51cto.com/course/course_id-2038.html" target="_blank" rel="noopener">跟无闻学Go语言：Go Web基础视频教程（共12课时）_在线自学视频教程_51CTO学院</a></li>
<li><a href="http://www.imooc.com/learn/345" target="_blank" rel="noopener">Go语言第一课_Go语言视频教程-慕课网</a></li>
<li><a href="http://pan.baidu.com/share/link?uk=2550574961&shareid=1455348293#list/path=%2FGo%E8%A7%86%E9%A2%91%E6%95%99%E7%A8%8B%2FGo%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80%2FMP4%20%E5%9C%A8%E7%BA%BF%E6%92%AD%E6%94%BE&parentPath=%2F" target="_blank" rel="noopener">Go编程基础</a></li>
<li><a href="http://pan.baidu.com/share/link?uk=1812212015&shareid=3714035079#list/path=%2F" target="_blank" rel="noopener">Golang编程基础</a></li>
<li><a href="http://pan.baidu.com/share/link?uk=1898819075&shareid=1186516839#list/path=%2F&parentPath=%2F%E6%88%91%E7%9A%84%E8%B5%84%E6%BA%90%2F%E8%A7%86%E9%A2%91%E6%95%99%E7%A8%8B" target="_blank" rel="noopener">Go全套</a></li>
</ul>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker-Ubuntu-Gogs个性化设置</title>
    <url>/2017/03/27/docker-ubuntu-gogs-custom/</url>
    <content><![CDATA[<p>Docker Gogs 用更简单的方式部署、升级或迁移Gogs容器服务。</p>
<p>个性化的配置 Docker Gogs 首页样式。</p>
<h4 id="Gogs-MIT开源协议"><a href="#Gogs-MIT开源协议" class="headerlink" title="Gogs MIT开源协议"></a>Gogs MIT开源协议</h4><blockquote>
<p>Gogs 项目代码 100% 开源并可无条件免费使用。所有的源代码均通过 MIT 授权协议 托管在 GitHub 上。</p>
</blockquote>
<hr>
<h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><h5 id="在Docker宿主机和容器之间拷贝文件的命令"><a href="#在Docker宿主机和容器之间拷贝文件的命令" class="headerlink" title="在Docker宿主机和容器之间拷贝文件的命令"></a>在Docker宿主机和容器之间拷贝文件的命令</h5><p>以下命令均在 <code>宿主机</code> 上执行。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 拷贝文件从宿主机至容器：</span></span><br><span class="line">$ docker cp localfile &lt;ConName&gt;:/app/confile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拷贝文件从容器至宿主机：</span></span><br><span class="line">$ docker cp &lt;ConName&gt;:/app/confile localfile</span><br></pre></td></tr></table></figure>

<hr>
<h5 id="将待处理文件进行备份操作"><a href="#将待处理文件进行备份操作" class="headerlink" title="将待处理文件进行备份操作"></a>将待处理文件进行备份操作</h5><p>使用 <code>docker exec</code> 命令进入运行中的容器：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker <span class="built_in">exec</span> -it &lt;ConName&gt; /bin/bash</span><br></pre></td></tr></table></figure>

<p>备份Gogs目录下的以下文件：</p>
<ul>
<li><code>templates/home.tmpl</code></li>
<li><code>templates/base/head.tmpl</code></li>
<li><code>templates/base/footer.tmpl</code></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker@ConName/templates<span class="comment"># cp ./home.tmpl ./home.tmpl.tmp</span></span><br></pre></td></tr></table></figure>

<hr>
<h4 id="更改首页介绍-只保留Logo区域"><a href="#更改首页介绍-只保留Logo区域" class="headerlink" title="更改首页介绍 只保留Logo区域"></a>更改首页介绍 只保留Logo区域</h4><p>首页中部内容 – <code>home.tmpl</code> – 去除首页中下部分介绍，只保留Logo区域</p>
<p>将容器内的 <code>home.tmpl</code> 文件拷贝至宿主机本地：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker cp &lt;ConName&gt;:/home/git/gogs/templates/home.tmpl ./home.tmpl</span><br></pre></td></tr></table></figure>

<h5 id="修改首页站点介绍"><a href="#修改首页站点介绍" class="headerlink" title="修改首页站点介绍"></a>修改首页站点介绍</h5><p>网站标题和介绍部分在页面中的 <code>div.hero</code> 部分：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"hero"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"ui icon header title"</span>&gt;</span></span><br><span class="line">		...</span><br><span class="line">	<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">h2</span>&gt;</span>...<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这里我将站点介绍修改为了 ：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>用了雪哥Git库 从此编程不再吐<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h5 id="隐藏首页站点说明部分"><a href="#隐藏首页站点说明部分" class="headerlink" title="隐藏首页站点说明部分"></a>隐藏首页站点说明部分</h5><p>说明部分我仅以 <code>简体中文</code> 和 <code>English</code> 两种语言的修改来说明：</p>
<p>中文说明部分：内容在页面中的 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123;else if eq .Lang &quot;zh-CN&quot;&#125;&#125;</span><br></pre></td></tr></table></figure>
<p>和</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123;else if eq .Lang &quot;fr-FR&quot;&#125;&#125;</span><br></pre></td></tr></table></figure>
<p>之间：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;&#123;else if eq .Lang "zh-CN"&#125;&#125;</span><br><span class="line">		...</span><br><span class="line">		...</span><br><span class="line">&#123;&#123;else if eq .Lang "fr-FR"&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>英文说明部分：内容在页面中的 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123;else&#125;&#125;</span><br></pre></td></tr></table></figure>
<p>和</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123;end&#125;&#125;</span><br></pre></td></tr></table></figure>
<p>之间：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;&#123;else&#125;&#125;</span><br><span class="line">	...</span><br><span class="line">	...</span><br><span class="line">&#123;&#123;end&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>将这两部分的内容删除或用 <code>&lt;!-- --&gt;</code> 隐藏。</p>
<p>更改完成后，保存，并更新回容器中：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker cp ./home.tmpl &lt;ConName&gt;:/home/git/gogs/templates/home.tmpl</span></span><br></pre></td></tr></table></figure>

<hr>
<h4 id="去除未登录用户左上角显示的“帮助”按钮及更换背景图案"><a href="#去除未登录用户左上角显示的“帮助”按钮及更换背景图案" class="headerlink" title="去除未登录用户左上角显示的“帮助”按钮及更换背景图案"></a>去除未登录用户左上角显示的“帮助”按钮及更换背景图案</h4><p>头部导航 – <code>head.tmpl</code> – 去除未登录用户左上角显示的“帮助”按钮</p>
<p>先从容器中获取该文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker cp &lt;ConName&gt;:/home/git/gogs/templates/base/head.tmpl ./head.tmpl</span><br></pre></td></tr></table></figure>

<h5 id="去除未登录用户左上角显示的“帮助”按钮"><a href="#去除未登录用户左上角显示的“帮助”按钮" class="headerlink" title="去除未登录用户左上角显示的“帮助”按钮"></a>去除未登录用户左上角显示的“帮助”按钮</h5><p>将如下部分代码中的 <code>&lt;a&gt;...&lt;/a&gt;</code> 注释掉或删除，修改后如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;&#123;else&#125;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--&lt;a class="item" target="_blank" href="https://gogs.io/docs" rel="noreferrer"&gt;&#123;&#123;.i18n.Tr "help"&#125;&#125;&lt;/a&gt;--&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right menu"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h5 id="更改首页背景图案仿照-https-gogs-io-首页"><a href="#更改首页背景图案仿照-https-gogs-io-首页" class="headerlink" title="更改首页背景图案仿照 https://gogs.io/ 首页"></a>更改首页背景图案仿照 <code>https://gogs.io/</code> 首页</h5><p>在 <code>head.tmpl</code> 页面中找到如下部分:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Stylesheet --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"&#123;&#123;AppSubUrl&#125;&#125;/css/semantic-2.2.7.min.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"&#123;&#123;AppSubUrl&#125;&#125;/css/gogs.css?v=&#123;&#123;MD5 AppVer&#125;&#125;"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在这段下面添加如下代码:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;&#123;if .PageIsHome&#125;&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"&#123;&#123;AppSubUrl&#125;&#125;/css/gghome.min.css"</span>&gt;</span></span><br><span class="line">&#123;&#123;end&#125;&#125;</span><br></pre></td></tr></table></figure>


<p>然后在本地新建名为 <code>gghome.min.css</code> 的样式文件，注意文件的格式为 <code>UTF-8</code> 且行结束标识为 <code>Unix(LF)</code> ，添加如下样式：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.full</span><span class="selector-class">.height</span>&#123;<span class="attribute">background-color</span>:<span class="number">#0F8DEC</span>;<span class="attribute">background-image</span>:<span class="built_in">url</span>(<span class="string">"data:image/svg+xml,%3Csvg width='304' height='304' viewBox='0 0 304 304' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M44.1 224c.463-2.282 2.48-4 4.9-4 2.76 0 5 2.24 5 5s-2.24 5-5 5c-2.42 0-4.437-1.718-4.9-4H0v-2h44.1zm160 48c.463-2.282 2.48-4 4.9-4 2.76 0 5 2.24 5 5s-2.24 5-5 5c-2.42 0-4.437-1.718-4.9-4H82v-2h122.1zm57.8-46c-.463 2.282-2.48 4-4.9 4-2.76 0-5-2.24-5-5s2.24-5 5-5c2.42 0 4.437 1.718 4.9 4H304v2h-42.1zm0 16c-.463 2.282-2.48 4-4.9 4-2.76 0-5-2.24-5-5s2.24-5 5-5c2.42 0 4.437 1.718 4.9 4H304v2h-42.1zm6.2-114c.463-2.282 2.48-4 4.9-4 2.76 0 5 2.24 5 5s-2.24 5-5 5c-2.42 0-4.437-1.718-4.9-4h-86.2c-.463 2.282-2.48 4-4.9 4-2.76 0-5-2.24-5-5s2.24-5 5-5c2.42 0 4.437 1.718 4.9 4h86.2zm-256-48c.463-2.282 2.48-4 4.9-4 2.76 0 5 2.24 5 5s-2.24 5-5 5c-2.42 0-4.437-1.718-4.9-4H0v-2h12.1zm185.8 34c-.463 2.282-2.48 4-4.9 4-2.76 0-5-2.24-5-5s2.24-5 5-5c2.42 0 4.437 1.718 4.9 4h86.2c.463-2.282 2.48-4 4.9-4 2.76 0 5 2.24 5 5s-2.24 5-5 5c-2.42 0-4.437-1.718-4.9-4h-86.2zM258 12.1c2.282.463 4 2.48 4 4.9 0 2.76-2.24 5-5 5s-5-2.24-5-5c0-2.42 1.718-4.437 4-4.9V0h2v12.1zm-64 208c2.282.463 4 2.48 4 4.9 0 2.76-2.24 5-5 5s-5-2.24-5-5c0-2.42 1.718-4.437 4-4.9v-54.2c-2.282-.463-4-2.48-4-4.9 0-2.76 2.24-5 5-5s5 2.24 5 5c0 2.42-1.718 4.437-4 4.9v54.2zm48-198.2c2.282-.463 4-2.48 4-4.9 0-2.76-2.24-5-5-5s-5 2.24-5 5c0 2.42 1.718 4.437 4 4.9V82h64v-2h-62V21.9zm16 16c2.282-.463 4-2.48 4-4.9 0-2.76-2.24-5-5-5s-5 2.24-5 5c0 2.42 1.718 4.437 4 4.9V66h48v-2h-46V37.9zm-128 96c2.282-.463 4-2.48 4-4.9 0-2.76-2.24-5-5-5s-5 2.24-5 5c0 2.42 1.718 4.437 4 4.9V210h16v10.1c-2.282.463-4 2.48-4 4.9 0 2.76 2.24 5 5 5s5-2.24 5-5c0-2.42-1.718-4.437-4-4.9V208h-16v-74.1zm-5.9-21.9c.463-2.282 2.48-4 4.9-4 2.76 0 5 2.24 5 5s-2.24 5-5 5c-2.42 0-4.437-1.718-4.9-4H114v48H85.9c-.463 2.282-2.48 4-4.9 4-2.76 0-5-2.24-5-5s2.24-5 5-5c2.42 0 4.437 1.718 4.9 4H112v-48h12.1zm-6.2 130c-.463 2.282-2.48 4-4.9 4-2.76 0-5-2.24-5-5s2.24-5 5-5c2.42 0 4.437 1.718 4.9 4H176v-74.1c-2.282-.463-4-2.48-4-4.9 0-2.76 2.24-5 5-5s5 2.24 5 5c0 2.42-1.718 4.437-4 4.9V242h-60.1zm-16-64c-.463 2.282-2.48 4-4.9 4-2.76 0-5-2.24-5-5s2.24-5 5-5c2.42 0 4.437 1.718 4.9 4H114v48h10.1c.463-2.282 2.48-4 4.9-4 2.76 0 5 2.24 5 5s-2.24 5-5 5c-2.42 0-4.437-1.718-4.9-4H112v-48h-10.1zM66 284.1c2.282.463 4 2.48 4 4.9 0 2.76-2.24 5-5 5s-5-2.24-5-5c0-2.42 1.718-4.437 4-4.9V274H50v30h-2v-32h18v12.1zM236.1 176c.463-2.282 2.48-4 4.9-4 2.76 0 5 2.24 5 5s-2.24 5-5 5c-2.42 0-4.437-1.718-4.9-4H226v94h48v32h-2v-30h-48v-98h12.1zm25.8-30c-.463 2.282-2.48 4-4.9 4-2.76 0-5-2.24-5-5s2.24-5 5-5c2.42 0 4.437 1.718 4.9 4H274v44.1c2.282.463 4 2.48 4 4.9 0 2.76-2.24 5-5 5s-5-2.24-5-5c0-2.42 1.718-4.437 4-4.9V146h-10.1zm-64 96c-.463 2.282-2.48 4-4.9 4-2.76 0-5-2.24-5-5s2.24-5 5-5c2.42 0 4.437 1.718 4.9 4H208v-80h16v-14h-42.1c-.463 2.282-2.48 4-4.9 4-2.76 0-5-2.24-5-5s2.24-5 5-5c2.42 0 4.437 1.718 4.9 4H226v18h-16v80h-12.1zm86.2-210c.463-2.282 2.48-4 4.9-4 2.76 0 5 2.24 5 5s-2.24 5-5 5c-2.42 0-4.437-1.718-4.9-4H272V0h2v32h10.1zM98 101.9c2.282-.463 4-2.48 4-4.9 0-2.76-2.24-5-5-5s-5 2.24-5 5c0 2.42 1.718 4.437 4 4.9V144H53.9c-.463-2.282-2.48-4-4.9-4-2.76 0-5 2.24-5 5s2.24 5 5 5c2.42 0 4.437-1.718 4.9-4H98v-44.1zM53.9 34c-.463 2.282-2.48 4-4.9 4-2.76 0-5-2.24-5-5s2.24-5 5-5c2.42 0 4.437 1.718 4.9 4H80V0h2v34H53.9zm60.1 3.9c2.282-.463 4-2.48 4-4.9 0-2.76-2.24-5-5-5s-5 2.24-5 5c0 2.42 1.718 4.437 4 4.9V64H80v64H69.9c-.463-2.282-2.48-4-4.9-4-2.76 0-5 2.24-5 5s2.24 5 5 5c2.42 0 4.437-1.718 4.9-4H82V66h32V37.9zM101.9 82c-.463 2.282-2.48 4-4.9 4-2.76 0-5-2.24-5-5s2.24-5 5-5c2.42 0 4.437 1.718 4.9 4H128V37.9c-2.282-.463-4-2.48-4-4.9 0-2.76 2.24-5 5-5s5 2.24 5 5c0 2.42-1.718 4.437-4 4.9V82h-28.1zm16-64c-.463 2.282-2.48 4-4.9 4-2.76 0-5-2.24-5-5s2.24-5 5-5c2.42 0 4.437 1.718 4.9 4H146v44.1c2.282.463 4 2.48 4 4.9 0 2.76-2.24 5-5 5s-5-2.24-5-5c0-2.42 1.718-4.437 4-4.9V18h-26.1zm102.2 270c.463-2.282 2.48-4 4.9-4 2.76 0 5 2.24 5 5s-2.24 5-5 5c-2.42 0-4.437-1.718-4.9-4H98v14h-2v-16h124.1zM242 149.9c2.282-.463 4-2.48 4-4.9 0-2.76-2.24-5-5-5s-5 2.24-5 5c0 2.42 1.718 4.437 4 4.9V162h16v30h-16v66h48v46h2v-48h-48v-62h16v-34h-16v-10.1zM53.9 18c-.463 2.282-2.48 4-4.9 4-2.76 0-5-2.24-5-5s2.24-5 5-5c2.42 0 4.437 1.718 4.9 4H64V2H48V0h18v18H53.9zm112 32c-.463 2.282-2.48 4-4.9 4-2.76 0-5-2.24-5-5s2.24-5 5-5c2.42 0 4.437 1.718 4.9 4H192V0h50v2h-48v48h-28.1zm-48-48c-.463 2.282-2.48 4-4.9 4-2.76 0-5-2.24-5-5 0-.342.034-.677.1-1h2.07c-.11.313-.17.65-.17 1 0 1.657 1.343 3 3 3s3-1.343 3-3c0-.35-.06-.687-.17-1H178v34h-18V21.9c-2.282-.463-4-2.48-4-4.9 0-2.76 2.24-5 5-5s5 2.24 5 5c0 2.42-1.718 4.437-4 4.9V32h14V2h-58.1zm0 96c-.463 2.282-2.48 4-4.9 4-2.76 0-5-2.24-5-5s2.24-5 5-5c2.42 0 4.437 1.718 4.9 4H137l32-32h39V21.9c-2.282-.463-4-2.48-4-4.9 0-2.76 2.24-5 5-5s5 2.24 5 5c0 2.42-1.718 4.437-4 4.9V66h-40.172l-32 32H117.9zm28.1 90.1c2.282.463 4 2.48 4 4.9 0 2.76-2.24 5-5 5s-5-2.24-5-5c0-2.42 1.718-4.437 4-4.9v-76.513L175.586 80H224V21.9c-2.282-.463-4-2.48-4-4.9 0-2.76 2.24-5 5-5s5 2.24 5 5c0 2.42-1.718 4.437-4 4.9V82h-49.586L146 112.414V188.1zm16 32c2.282.463 4 2.48 4 4.9 0 2.76-2.24 5-5 5s-5-2.24-5-5c0-2.42 1.718-4.437 4-4.9v-99.513L184.586 96H300.1c.398-1.96 1.94-3.502 3.9-3.9v2.07c-1.165.413-2 1.524-2 2.83s.835 2.417 2 2.83v2.07c-1.96-.398-3.502-1.94-3.9-3.9H185.414L162 121.414V220.1zm-144-64c2.282.463 4 2.48 4 4.9 0 2.76-2.24 5-5 5s-5-2.24-5-5c0-2.42 1.718-4.437 4-4.9v-3.513l48-48V48h32V0h2v50H66v55.413l-48 48v2.687zM50 53.9c2.282-.463 4-2.48 4-4.9 0-2.76-2.24-5-5-5s-5 2.24-5 5c0 2.42 1.718 4.437 4 4.9v42.686l-48 48V210h28.1c.463 2.282 2.48 4 4.9 4 2.76 0 5-2.24 5-5s-2.24-5-5-5c-2.42 0-4.437 1.718-4.9 4H2v-62.586l48-48V53.9zm-16 16c2.282-.463 4-2.48 4-4.9 0-2.76-2.24-5-5-5s-5 2.24-5 5c0 2.42 1.718 4.437 4 4.9v18.686l-32 32v2.828l34-34V69.9zM12.1 32c.463-2.282 2.48-4 4.9-4 2.76 0 5 2.24 5 5s-2.24 5-5 5c-2.42 0-4.437-1.718-4.9-4H9.414L0 43.414v-2.828L8.586 32H12.1zm265.8 18c-.463 2.282-2.48 4-4.9 4-2.76 0-5-2.24-5-5s2.24-5 5-5c2.42 0 4.437 1.718 4.9 4h18.686L304 40.586v2.828L297.414 50H277.9zm-16 160c-.463 2.282-2.48 4-4.9 4-2.76 0-5-2.24-5-5s2.24-5 5-5c2.42 0 4.437 1.718 4.9 4H288V136.587l16-16v2.827l-14 14V210h-28.1zm-208 32c-.463 2.282-2.48 4-4.9 4-2.76 0-5-2.24-5-5s2.24-5 5-5c2.42 0 4.437 1.718 4.9 4H64v-22.586L40.586 194H21.9c-.463 2.282-2.48 4-4.9 4-2.76 0-5-2.24-5-5s2.24-5 5-5c2.42 0 4.437 1.718 4.9 4h19.513L66 216.586V242H53.9zm150.2 14c.463-2.282 2.48-4 4.9-4 2.76 0 5 2.24 5 5s-2.24 5-5 5c-2.42 0-4.437-1.718-4.9-4H96v-56.598L56.598 162H37.9c-.463 2.282-2.48 4-4.9 4-2.76 0-5-2.24-5-5s2.24-5 5-5c2.42 0 4.437 1.718 4.9 4h19.502L98 200.598V256h106.1zm-150.2 2c-.463 2.282-2.48 4-4.9 4-2.76 0-5-2.24-5-5s2.24-5 5-5c2.42 0 4.437 1.718 4.9 4H80v-46.586L48.586 178H21.9c-.463 2.282-2.48 4-4.9 4-2.76 0-5-2.24-5-5s2.24-5 5-5c2.42 0 4.437 1.718 4.9 4h27.513L82 208.586V258H53.9zM97 100c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm0-16c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm16 16c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm16 16c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm0 16c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm-48 32c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm16 16c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm32 48c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm-16 16c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm32-16c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm0-32c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm16 32c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm32 16c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm0-16c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm-16-64c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm16 0c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm16 96c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm0 16c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm16 16c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm16-144c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm0 32c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm16-32c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm16-16c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm-96 0c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm0 16c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm16-32c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm96 0c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm-16-64c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm16-16c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm-32 0c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm0-16c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm-16 0c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm-16 0c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm-16 0c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zM49 36c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm-32 0c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm32 16c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zM33 68c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm16-48c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm0 240c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm16 32c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm-16-64c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm0 16c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm-16-32c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm80-176c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm16 0c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm-16-16c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm32 48c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm16-16c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm0-32c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm112 176c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm-16 16c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm0 16c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm0 16c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zM17 180c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm0 16c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm0-32c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm16 0c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zM17 84c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm32 64c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm16-16c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zM34 39.793V0h-2v40.586L8.586 64H0v2h9.413L34 41.414v-1.62zM2 300.1V258h14v46h2v-48H0V302.17c.313-.11.65-.17 1-.17 1.306 0 2.417.835 2.83 2H5.9c-.398-1.96-1.94-3.502-3.9-3.9zM34 241v63h-2v-62H0v-2h34v1zM17 18h1V0h-2v16H0v2h17zm273-2V0h-2v18h16v-2h-14zm-32 273v15h-2v-14h-14v14h-2v-16h18v1zM0 92.1c.323-.066.658-.1 1-.1 2.76 0 5 2.24 5 5s-2.24 5-5 5c-.342 0-.677-.034-1-.1v-2.07c.313.11.65.17 1 .17 1.657 0 3-1.343 3-3s-1.343-3-3-3c-.35 0-.687.06-1 .17V92.1zM80 272h2v32h-2v-32zm37.9 32c-.463-2.282-2.48-4-4.9-4-2.42 0-4.437 1.718-4.9 4h2.07c.413-1.165 1.524-2 2.83-2s2.417.835 2.83 2h2.07zM5.9 0c.066.323.1.658.1 1 0 2.76-2.24 5-5 5-.342 0-.677-.034-1-.1V3.83C.313 3.94.65 4 1 4c1.657 0 3-1.343 3-3 0-.35-.06-.687-.17-1H5.9zm294.2 0c-.066.323-.1.658-.1 1 0 2.42 1.718 4.437 4 4.9V3.83c-1.165-.413-2-1.524-2-2.83 0-.35.06-.687.17-1h-2.07zm3.9 300.1c-1.96.398-3.502 1.94-3.9 3.9h2.07c.302-.852.978-1.528 1.83-1.83v-2.07z' fill='%23afcfe1' fill-opacity='0.23' fill-rule='evenodd'/%3E%3C/svg%3E"</span>)&#125;<span class="selector-class">.hero</span>&#123;<span class="attribute">color</span>:<span class="number">#fff</span>&#125;<span class="selector-class">.hero</span> <span class="selector-class">.ui</span><span class="selector-class">.header</span>&#123;<span class="attribute">color</span>:<span class="number">#fff</span>&#125;</span><br></pre></td></tr></table></figure>

<p>然后将该文件 <code>gghome.min.css</code> 添加到容器中：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker cp ./gghome.min.css &lt;ConName&gt;:/home/git/gogs/public/css/gghome.min.css</span><br></pre></td></tr></table></figure>

<hr>
<p>待以上步骤操作完成后，更新回容器中：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker cp ./head.tmpl &lt;ConName&gt;:/home/git/gogs/templates/base/head.tmpl</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="更改底栏“官方网站”字样为“Gogs官方网站”"><a href="#更改底栏“官方网站”字样为“Gogs官方网站”" class="headerlink" title="更改底栏“官方网站”字样为“Gogs官方网站”"></a>更改底栏“官方网站”字样为“Gogs官方网站”</h4><p>底部 – <code>footer.tmpl</code> – 更改底栏“官方网站”字样为“Gogs官方网站”</p>
<p>从容器中获取该文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker cp &lt;ConName&gt;:/home/git/gogs/templates/base/footer.tmpl ./footer.tmpl</span><br></pre></td></tr></table></figure>

<h5 id="更改底栏“官方网站”字样为“Gogs官方网站”-1"><a href="#更改底栏“官方网站”字样为“Gogs官方网站”-1" class="headerlink" title="更改底栏“官方网站”字样为“Gogs官方网站”"></a>更改底栏“官方网站”字样为“Gogs官方网站”</h5><p>将以下部分：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">href</span>=<span class="string">"https://gogs.io"</span>&gt;</span>&#123;&#123;.i18n.Tr "website"&#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>更改为：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">href</span>=<span class="string">"https://gogs.io"</span>&gt;</span>Gogs&#123;&#123;.i18n.Tr "website"&#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h5 id="Markdown文档中的链接跳转加上target标签"><a href="#Markdown文档中的链接跳转加上target标签" class="headerlink" title="Markdown文档中的链接跳转加上target标签"></a>Markdown文档中的链接跳转加上target标签</h5><p>底部 – <code>footer.tmpl</code> – Markdown文档中的链接跳转加上target标签</p>
<p>默认情况下，Gogs项目中的Markdown文档中的链接是在当前页面跳转的，但个人习惯还是喜欢在新页面打开链接。</p>
<p>找到 <code>footer.tmpl</code> 页面中如下代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"&#123;&#123;AppSubUrl&#125;&#125;/js/libs/clipboard-1.5.9.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&#123;&#123;template "inject/footer" .&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>在中间位置添加一行：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"&#123;&#123;AppSubUrl&#125;&#125;/js/mdlinktarget.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在本地创建一个js文件，注意文件的格式为 <code>UTF-8</code> 且行结束标识为 <code>Unix(LF)</code> 并命名为 <code>mdlinktarget.min.js</code> ，内容如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;$(<span class="string">'#file-content a[href^="http"]'</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;$(<span class="keyword">this</span>).attr(<span class="string">"target"</span>,<span class="string">"_blank"</span>)&#125;)&#125;);</span><br></pre></td></tr></table></figure>

<p>将该js文件拷贝添加到容器中的项目目录下，执行如下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker cp ./mdlinktarget.min.js &lt;ConName&gt;:/home/git/gogs/public/js/mdlinktarget.min.js</span><br></pre></td></tr></table></figure>

<hr>
<p>然后将更改后的 <code>footer.tmpl</code> 更新回容器中：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker cp ./footer.tmpl &lt;ConName&gt;:/home/git/gogs/templates/base/footer.tmpl</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="修改完成-重启容器"><a href="#修改完成-重启容器" class="headerlink" title="修改完成 重启容器"></a>修改完成 重启容器</h4><p>待以上各步骤操作完成后，重启容器。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker restart gogs</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="命令整理"><a href="#命令整理" class="headerlink" title="命令整理"></a>命令整理</h4><h5 id="示例命令"><a href="#示例命令" class="headerlink" title="示例命令"></a>示例命令</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker cp ./home.tmpl &lt;ConName&gt;:/home/git/gogs/templates/home.tmpl</span><br><span class="line">$ docker cp ./footer.tmpl &lt;ConName&gt;:/home/git/gogs/templates/base/footer.tmpl</span><br><span class="line">$ docker cp ./head.tmpl &lt;ConName&gt;:/home/git/gogs/templates/base/head.tmpl</span><br><span class="line">$ docker cp ./mdlinktarget.min.js &lt;ConName&gt;:/home/git/gogs/public/js/mdlinktarget.min.js</span><br><span class="line">$ docker cp ./gghome.min.css &lt;ConName&gt;:/home/git/gogs/public/css/gghome.min.css</span><br><span class="line">$ docker restart &lt;ConName&gt;</span><br></pre></td></tr></table></figure>

<h5 id="操作命令"><a href="#操作命令" class="headerlink" title="操作命令"></a>操作命令</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker cp ./home.tmpl gogs:/home/git/gogs/templates/home.tmpl</span><br><span class="line">$ docker cp ./footer.tmpl gogs:/home/git/gogs/templates/base/footer.tmpl</span><br><span class="line">$ docker cp ./head.tmpl gogs:/home/git/gogs/templates/base/head.tmpl</span><br><span class="line">$ docker cp ./mdlinktarget.min.js gogs:/home/git/gogs/public/js/mdlinktarget.min.js</span><br><span class="line">$ docker cp ./gghome.min.css gogs:/home/git/gogs/public/css/gghome.min.css</span><br><span class="line">$ docker restart gogs</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="获取文件"><a href="#获取文件" class="headerlink" title="获取文件"></a>获取文件</h4><p>以上操作的所有文件可以从 <a href="https://gist.github.com/Leafney/967c0122877f52729c49b1594a189c2e" target="_blank" rel="noopener">Docker Gogs custom files</a> 或 <a href="https://github.com/Leafney/ubuntu-gogs" target="_blank" rel="noopener">GitHub - Leafney/ubuntu-gogs: Docker Gogs 用更简单的方式部署、升级或迁移Gogs容器服务。</a> 中获取。</p>
]]></content>
      <categories>
        <category>Ubuntu-Gogs</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Gogs</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker-Ubuntu-Gogs部署及配置时遇到的问题</title>
    <url>/2017/03/24/docker-ubuntu-gogs-problems/</url>
    <content><![CDATA[<p>Docker Gogs 用更简单的方式部署、升级或迁移Gogs容器服务。</p>
<p>这里主要记录在Docker下部署Gogs项目过程中遇到的问题及解决方法。</p>
<h4 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h4><ol>
<li>Install页面中的注意问题</li>
<li><code>Connection timed out</code> 问题</li>
<li><code>hooks/update: No such file or directory</code></li>
<li>添加 <code>SSH key</code> 时显示报错页面 <code>500</code></li>
<li>要求输入git账户密码</li>
<li><code>SSH Connection refused</code> 问题</li>
<li><code>Git SSH</code> 使用非默认22端口时，如何隐藏端口号</li>
<li><code>WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!</code></li>
<li>echo 输出</li>
<li>Docker Gogs 使用 <code>HTTPS</code></li>
<li>上传文件遇到 <code>413 Request Entity Too Large</code> 错误</li>
</ol>
<h4 id="Install页面中的注意问题"><a href="#Install页面中的注意问题" class="headerlink" title="Install页面中的注意问题"></a>Install页面中的注意问题</h4><ul>
<li>domain: ensure that is the IP address of your docker host</li>
<li>SSH port: that is the forwarded ssh port. So if you forward 22 to 10022, it’s 10022.</li>
<li>HTTP port: my error, here, you must enter the HTTP in the container. So it’s 3000. Even if you forward it to 10080 ;)</li>
<li>Application URL: this is a combination of domain + forwarded HTTP port (I got this one wrong too). So, if you’re forwarding 3000 to 10080, then it’s <code>http://domain:10080</code>.</li>
<li>ssh端口使用外部端口，而http端口使用的是容器内部端口.</li>
</ul>
<p>着重需要说明的是：</p>
<ul>
<li><p><code>Domain</code> 填写Docker宿主机的物理IP地址，或者域名地址,注意这里是不带 <code>http</code>的 如： <code>192.168.137.140</code> 或 <code>git.mydomain.com</code></p>
</li>
<li><p><code>SSH port</code> 假如Docker映射的端口是 <code>10022:22</code> 那么这里就填写宿主机开放的端口 <code>10022</code></p>
</li>
<li><p><code>HTTP port</code> 假如Docker映射的端口是 <code>10080:3000</code> 这里要填容器内的监听端口 <code>3000</code></p>
</li>
<li><p><code>Application URL</code> 这里要填写的格式为 <code>http(s):// + Domain + HTTP port</code> ，比如：<code>http://git.mydomain.com/10080</code> 。还需要注意的一点是，如果你用了nginx来映射宿主机的 <code>10080</code> 端口，这里要去掉后面的端口，即 <code>http://git.mydomain.com/</code>，说白了就是你在外部浏览器上访问的地址。</p>
</li>
<li><p><a href="https://github.com/gogits/gogs/issues/3039" target="_blank" rel="noopener">Docker gogs web/ssh does not restart after reboot · Issue #3039 · gogits/gogs · GitHub</a></p>
</li>
</ul>
<hr>
<h4 id="Connection-timed-out-问题"><a href="#Connection-timed-out-问题" class="headerlink" title="Connection timed out 问题"></a><code>Connection timed out</code> 问题</h4><h5 id="使用HTTP方式-Push-代码时报错？"><a href="#使用HTTP方式-Push-代码时报错？" class="headerlink" title="使用HTTP方式 Push 代码时报错？"></a>使用HTTP方式 Push 代码时报错？</h5><p>使用HTTP方式获取：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git clone http:&#x2F;&#x2F;gogit.itfanr.cc&#x2F;xueer&#x2F;HelloWorld.git</span><br><span class="line">Cloning into &#39;HelloWorld&#39;...</span><br><span class="line">remote: Counting objects: 8, done.</span><br><span class="line">remote: Compressing objects: 100% (6&#x2F;6), done.</span><br><span class="line">remote: Total 8 (delta 1), reused 0 (delta 0)</span><br><span class="line">Unpacking objects: 100% (8&#x2F;8), done.</span><br><span class="line">Checking connectivity... done.</span><br></pre></td></tr></table></figure>

<p>使用HTTP方式提交：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git push</span><br><span class="line">Counting objects: 3, done.</span><br><span class="line">Writing objects: 100% (3&#x2F;3), 379 bytes | 0 bytes&#x2F;s, done.</span><br><span class="line">Total 3 (delta 0), reused 0 (delta 0)</span><br><span class="line">error: RPC failed; HTTP 504 curl 22 The requested URL returned error: 504 Gateway Time-out</span><br><span class="line">fatal: The remote end hung up unexpectedly</span><br><span class="line">fatal: The remote end hung up unexpectedly</span><br><span class="line">Everything up-to-date</span><br></pre></td></tr></table></figure>

<hr>
<h5 id="使用SSH方式获取代码时报错？"><a href="#使用SSH方式获取代码时报错？" class="headerlink" title="使用SSH方式获取代码时报错？"></a>使用SSH方式获取代码时报错？</h5><p>使用SSH方式获取：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git clone ssh:&#x2F;&#x2F;git@gogit.itfanr.cc:10022&#x2F;xueer&#x2F;HelloWorld.git</span><br><span class="line">Cloning into &#39;HelloWorld&#39;...</span><br><span class="line">ssh: connect to host gogit.itfanr.cc port 10022: Connection timed out</span><br><span class="line">fatal: Could not read from remote repository.</span><br><span class="line"></span><br><span class="line">Please make sure you have the correct access rights</span><br><span class="line">and the repository exists.</span><br></pre></td></tr></table></figure>


<p>对于 <code>Connection timed out</code> 的问题，可能是使用的端口已经被其他程序占用导致，也可能是缓存文件导致。</p>
<p>最后的解决方法是将 <code>data/sessions</code> 中的 <code>session</code> 文件删除，然后更换了其他端口后再次运行则能够提交数据了。</p>
<hr>
<h4 id="报错-hooks-update-No-such-file-or-directory"><a href="#报错-hooks-update-No-such-file-or-directory" class="headerlink" title="报错 hooks/update: No such file or directory"></a>报错 <code>hooks/update: No such file or directory</code></h4><p>将旧的配置和数据库拷贝到新的Gogs项目下（我这里是从v0.8.25.0129版本迁移到v0.10.18.0313版本），提交代码时会报如下错误：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git push origin master</span><br><span class="line">Counting objects: 3, done.</span><br><span class="line">Writing objects: 100% (3&#x2F;3), 432 bytes | 0 bytes&#x2F;s, done.</span><br><span class="line">Total 3 (delta 0), reused 0 (delta 0)</span><br><span class="line">remote: hooks&#x2F;update: line 2: &#x2F;home&#x2F;git&#x2F;gogs&#x2F;goapp&#x2F;gogs&#x2F;gogs: No such file or directory</span><br><span class="line">remote: error: hook declined to update refs&#x2F;heads&#x2F;master</span><br><span class="line">To http:&#x2F;&#x2F;gogit.itfanr.cc&#x2F;xueer&#x2F;HelloWorld.git</span><br><span class="line"> ! [remote rejected] master -&gt; master (hook declined)</span><br><span class="line">error: failed to push some refs to &#39;http:&#x2F;&#x2F;gogit.itfanr.cc&#x2F;xueer&#x2F;HelloWorld.git&#39;</span><br></pre></td></tr></table></figure>

<hr>
<p>解决方法：</p>
<p>根据Gogs官网中的<code>故障排查</code>的说明：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Update 钩子指向错误的二进制路径</span><br><span class="line"></span><br><span class="line">可能原因：您升级 &#96;Gogs&#96; 后将其移动到了和之前安装位置不同的目录</span><br><span class="line">解决方案：到管理员控制面板（&#96;&#x2F;admin&#96;）执行以下操作：</span><br><span class="line">重新生成 &#39;.ssh&#x2F;authorized_keys&#39; 文件</span><br><span class="line">重新同步所有仓库的 &#96;pre-receive&#96;、&#96;update&#96; 和 &#96;post-receive&#96; 钩子</span><br></pre></td></tr></table></figure>

<p>所以直接使用管理员账户在管理后台中操作即可解决。</p>
<p>详见：<a href="https://gogs.io/docs/intro/troubleshooting#update-%E9%92%A9%E5%AD%90%E6%8C%87%E5%90%91%E9%94%99%E8%AF%AF%E7%9A%84%E4%BA%8C%E8%BF%9B%E5%88%B6%E8%B7%AF%E5%BE%84" target="_blank" rel="noopener">故障排查</a></p>
<hr>
<p>之前的解决方法：</p>
<p>在新的Gogs位置执行 <code>gogs fix location &lt;old Gogs path&gt;</code></p>
<p>经测试，该方法似乎已过时，执行时会报如下错误：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;home&#x2F;git&#x2F;gogs# .&#x2F;gogs fix location &#x2F;home&#x2F;git&#x2F;gogs&#x2F;goapp&#x2F;gogs</span><br><span class="line">No help topic for &#39;fix&#39;</span><br></pre></td></tr></table></figure>

<ul>
<li><a href="https://github.com/gogits/gogs/issues/659" target="_blank" rel="noopener">remote: hooks/update: line 2: /path/to/dir: No such file or directory · Issue #659 · gogits/gogs · GitHub</a></li>
<li><a href="https://github.com/gogits/gogs/issues/654" target="_blank" rel="noopener">Question: How do I move servers? · Issue #654 · gogits/gogs · GitHub</a></li>
</ul>
<hr>
<h4 id="添加-SSH-key-时显示报错页面-error-500"><a href="#添加-SSH-key-时显示报错页面-error-500" class="headerlink" title="添加 SSH key 时显示报错页面 error 500"></a>添加 SSH key 时显示报错页面 <code>error 500</code></h4><p>查看日志，找到如下错误信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">AddPublicKey: addKey: open &#x2F;home&#x2F;git&#x2F;.ssh&#x2F;authorized_keys: permission denied</span><br></pre></td></tr></table></figure>

<p>按照如下说法操作成功：</p>
<blockquote>
<p>So I changed the .ssh/ folder to 0700 and .ssh/authorize_keys to 0600. It works.</p>
</blockquote>
<p>详细来源见：<a href="https://github.com/gogits/gogs/issues/545" target="_blank" rel="noopener">ssh 的链接地址不可以使用</a></p>
<p>修改 <code>/home/git/.ssh</code> 的权限为 <code>700</code><br>修改 <code>/home/git/.ssh/authorized_keys</code> 的权限为 <code>600</code>   </p>
<p>我的操作：</p>
<ol>
<li>登陆Gogs站点管理员账户，访问 <code>/admin</code> 页面，选择 <code>Rewrite &#39;.ssh/authorized_keys&#39; file (caution: non-Gogs keys will be lost)</code> 项 ，点击 <code>Run</code> 报错：<code>open /home/git/.ssh/authorized_keys.tmp: permission denied</code> 。</li>
<li>查看日志 <code>gogs.log</code> 文件，发现错误信息：<code>AddPublicKey: addKey: open /home/git/.ssh/authorized_keys: permission denied</code> 。</li>
<li>进入容器内部：<code>docker exec -it gogs /bin/bash</code> ,切换至git用户：<code>su git</code>,然后进入 <code>/home/git/</code> 目录，更改 <code>.ssh</code> 目录权限：<code>chmod 0700 .ssh</code> 。（此时，该 .ssh 目录内为空）</li>
<li>然后再次访问 <code>/admin</code> 页面，再次执行 <code>Run</code> 操作，提示“所有公钥重新生成成功！”信息。查看容器内的 <code>.ssh/</code> 目录下生成了一个 <code>authorized_keys</code> 文件。然后更改该文件权限：<code>chmod 0600 authorized_keys</code> 。</li>
<li>然后重启该容器。</li>
</ol>
<p>重启容器后该问题解决。</p>
<hr>
<h4 id="要求输入git账户密码"><a href="#要求输入git账户密码" class="headerlink" title="要求输入git账户密码"></a>要求输入git账户密码</h4><p>添加成功SSH密钥后，<code>git clone</code> 项目会报如下错误：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git clone ssh:&#x2F;&#x2F;git@gogit.itfanr.cc:10022&#x2F;xueer&#x2F;HelloWorld.git</span><br><span class="line">Cloning into &#39;Hello&#39;...</span><br><span class="line">The authenticity of host &#39;[gogit.itfanr.cc]:10022 ([gogit.itfanr.cc]:10022)&#39; can&#39;t be established.</span><br><span class="line">ECDSA key fingerprint is SHA256:+LHU3V00S0g9kNnpByc9ysAM5n6DWutT51YOldIcf88.</span><br><span class="line">Are you sure you want to continue connecting (yes&#x2F;no)? yes</span><br><span class="line">Warning: Permanently added &#39;[gogit.itfanr.cc]:10022&#39; (ECDSA) to the list of known hosts.</span><br><span class="line">git@gogit.itfanr.cc&#39;s password:</span><br><span class="line">Permission denied, please try again.</span><br><span class="line">git@gogit.itfanr.cc&#39;s password:</span><br><span class="line">fatal: Could not read from remote repository.</span><br><span class="line"></span><br><span class="line">Please make sure you have the correct access rights</span><br><span class="line">and the repository exists.</span><br></pre></td></tr></table></figure>

<p>一种可能的解决方式是 <code>Check if /home/git/.ssh/.authorized_keys&#39;s permission is 600.</code></p>
<p>这个问题还是关于 <code>.ssh/authorize_keys</code> 的权限问题。</p>
<p>我的解决方法：</p>
<ol>
<li>登陆Gogs站点管理员账户，访问 <code>/admin</code> 页面，选择 <code>Rewrite &#39;.ssh/authorized_keys&#39; file (caution: non-Gogs keys will be lost)</code> 项 ，点击 <code>Run</code> ，会提示更新成功。</li>
<li>重启该容器即可。</li>
</ol>
<p>2017-7-21 add:</p>
<p>如果以上方法无效，可以进入容器后将 <code>authorize_keys</code> 文件删除，然后在管理员操作页面中重新生成。这样应该能解决。</p>
<hr>
<ul>
<li><a href="https://github.com/gogits/gogs/issues/545" target="_blank" rel="noopener">ssh 的链接地址不可以使用 · Issue #545 · gogits/gogs · GitHub</a></li>
<li><a href="https://github.com/gogits/gogs/issues/2409" target="_blank" rel="noopener">SSH prompts for password in Docker · Issue #2409 · gogits/gogs · GitHub</a></li>
<li><a href="https://github.com/gogits/gogs/issues/1893" target="_blank" rel="noopener">How troubleshoot SSHd on Docker ?</a></li>
</ul>
<hr>
<h4 id="SSH-Connection-refused-问题"><a href="#SSH-Connection-refused-问题" class="headerlink" title="SSH Connection refused 问题"></a><code>SSH Connection refused</code> 问题</h4><p>添加成功SSH密钥后，<code>git clone</code> 项目会报如下错误：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git clone ssh:&#x2F;&#x2F;git@192.168.137.140:10022&#x2F;xueer&#x2F;HelloWorld.git</span><br><span class="line">Cloning into &#39;HelloWorld&#39;...</span><br><span class="line">ssh: connect to host 192.168.137.140 port 10022: Connection refused</span><br><span class="line">fatal: Could not read from remote repository.</span><br><span class="line"></span><br><span class="line">Please make sure you have the correct access rights</span><br><span class="line">and the repository exists.</span><br></pre></td></tr></table></figure>

<p>我的探索：</p>
<p>进入容器内部：<code>docker exec -it gogs /bin/bash</code></p>
<p>查看ssh连接：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@b48dfa9583f9:&#x2F;home&#x2F;git&#x2F;gogs# ssh localhost</span><br><span class="line">ssh: connect to host localhost port 22: Connection refused</span><br></pre></td></tr></table></figure>

<p>那现在这个问题就是在ubuntu下配置ssh链接的问题了。  </p>
<p>发现问题的原因是安装 <code>openssh</code> 后，并没有启动 <code>SSH</code> 服务。执行如下命令启动：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/etc/init.d/ssh start</span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line">service ssh start</span><br><span class="line">service ssh status</span><br></pre></td></tr></table></figure>

<p>通过如下命令查看ssh服务是否启动：<code>ps -e |grep ssh</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@b48dfa9583f9:&#x2F;home&#x2F;git&#x2F;gogs# ps -e |grep ssh</span><br><span class="line">   81 ?        00:00:00 sshd</span><br></pre></td></tr></table></figure>

<p>然后使用 <code>ssh localhost</code> 命令查看是否能够连接本地：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@b48dfa9583f9:&#x2F;home&#x2F;git&#x2F;gogs# ssh localhost</span><br><span class="line">The authenticity of host &#39;localhost (::1)&#39; can&#39;t be established.</span><br><span class="line">ECDSA key fingerprint is SHA256:eKk78mnEXpwvFhbzC6BgM70jZx3be4Fz8okyagHA6QA.</span><br><span class="line">Are you sure you want to continue connecting (yes&#x2F;no)? no</span><br><span class="line">Host key verification failed.</span><br></pre></td></tr></table></figure>

<p>可以看到SSH服务已经正常运行了。</p>
<p>然后在回到宿主机下，再次执行 <code>git clone</code> 命令，测试是否能够连通。</p>
<hr>
<p>这里我整理了两种连接方法：</p>
<p>连接方法一：</p>
<p><code>git clone ssh://git@192.168.137.140:10022/qqq/Xweixin.git</code>   Pull and Push Test Ok.</p>
<p>连接方法二：</p>
<p>如果嫌上面带有端口号的链接太不极客范儿，可以在客户端电脑上当前用户主目录的 <code>.ssh</code> 目录下创建一个没有扩展名的 <code>config</code> 文件（注意文件格式为 <code>UTF-8</code> 且行结束标识为 <code>Unix(LF)</code>），填写如下内容：</p>
<p><code>~/.ssh/config</code>:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Host 192.168.137.140</span><br><span class="line">HostName 192.168.137.140</span><br><span class="line">Port 10022</span><br><span class="line">User git</span><br></pre></td></tr></table></figure>

<p>这里，</p>
<ul>
<li><code>Host</code> 是远程git仓库所在宿主机的IP地址或域名；</li>
<li><code>HostName</code> 不太重要，仅起到标识的作用；</li>
<li><code>Port</code> 表示远程git仓库使用的端口号；</li>
<li><code>User</code> 表示远程git仓库的默认用户，这里填写默认的 <code>git</code> 即可。</li>
</ul>
<p>然后就可以直接请求不带端口号的ssh仓库地址了：</p>
<p><code>git clone ssh://git@192.168.137.140/qqq/Xweixin.git</code> Pull and Push Test Ok.</p>
<p>相关参考</p>
<ul>
<li><a href="http://blog.csdn.net/jszhangyili/article/details/8881807" target="_blank" rel="noopener">ssh: connect to host localhost port 22: Connection refused 问题</a></li>
<li><a href="http://os.51cto.com/art/201109/291634.htm" target="_blank" rel="noopener">ubuntu下如何安装使用SSH？</a></li>
<li><a href="http://ubuntuhandbook.org/index.php/2016/04/enable-ssh-ubuntu-16-04-lts/" target="_blank" rel="noopener">How to Enable SSH in Ubuntu 16.04 LTS | UbuntuHandbook</a></li>
<li><a href="https://github.com/gogits/gogs/issues/1788" target="_blank" rel="noopener">SSH doesn’t work on ports other than 22 in dockerized gogs</a></li>
</ul>
<hr>
<h4 id="Git-SSH-使用非默认22端口时，如何隐藏端口号"><a href="#Git-SSH-使用非默认22端口时，如何隐藏端口号" class="headerlink" title="Git SSH 使用非默认22端口时，如何隐藏端口号"></a>Git SSH 使用非默认22端口时，如何隐藏端口号</h4><p>Note that you can also add an entry to your <code>~/.ssh/config</code> file:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Host git.example.com</span><br><span class="line">Port 2222</span><br><span class="line">User git</span><br></pre></td></tr></table></figure>

<p>and then use the normal git clone <code>git@git.example.com:myuser/myproject.git</code> command.</p>
<p>相关参考</p>
<ul>
<li><a href="http://stackoverflow.com/questions/1558719/using-a-remote-repository-with-non-standard-port" target="_blank" rel="noopener">git - Using a remote repository with non-standard port - Stack Overflow</a></li>
<li><a href="https://prestongarrison.com/change-port-git-is-using-for-ssh/" target="_blank" rel="noopener">Change port git is using for ssh</a></li>
<li><a href="http://serverfault.com/questions/218256/specify-ssh-port-for-git" target="_blank" rel="noopener">Specify SSH Port for Git - Server Fault</a></li>
</ul>
<hr>
<h4 id="报错-WARNING-REMOTE-HOST-IDENTIFICATION-HAS-CHANGED"><a href="#报错-WARNING-REMOTE-HOST-IDENTIFICATION-HAS-CHANGED" class="headerlink" title="报错 WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!"></a>报错 <code>WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!</code></h4><p>使用 SSH 获取时报错：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git clone ssh:&#x2F;&#x2F;git@192.168.137.140:10022&#x2F;xueer&#x2F;HelloWorld.git</span><br><span class="line">Cloning into &#39;HelloWorld&#39;...</span><br><span class="line">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span><br><span class="line">@    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!     @</span><br><span class="line">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span><br><span class="line">IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!</span><br><span class="line">Someone could be eavesdropping on you right now (man-in-the-middle attack)!</span><br><span class="line">It is also possible that a host key has just been changed.</span><br><span class="line">The fingerprint for the ECDSA key sent by the remote host is</span><br><span class="line">SHA256:+LHU3V00S0g9kNnpByc9ysAM5n6DWutT51YOldIcf88.</span><br><span class="line">Please contact your system administrator.</span><br><span class="line">Add correct host key in &#x2F;c&#x2F;Users&#x2F;Yx&#x2F;.ssh&#x2F;known_hosts to get rid of this message.</span><br><span class="line">Offending ECDSA key in &#x2F;c&#x2F;Users&#x2F;Yx&#x2F;.ssh&#x2F;known_hosts:5</span><br><span class="line">ECDSA host key for [192.168.137.140]:10022 has changed and you have requested strict checking.</span><br><span class="line">Host key verification failed.</span><br><span class="line">fatal: Could not read from remote repository.</span><br><span class="line"></span><br><span class="line">Please make sure you have the correct access rights</span><br><span class="line">and the repository exists.</span><br></pre></td></tr></table></figure>

<p>该问题是由于客户端电脑上的 <code>.ssh/known_hosts</code> 文件中记录了重复或冲突的ssh信息，删除该文件重新设置ssh连接即解决。</p>
<hr>
<h4 id="echo-输出"><a href="#echo-输出" class="headerlink" title="echo 输出"></a>echo 输出</h4><p>下面两行命令的输出结果是不一样的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ab&#x3D;$(service ssh status);echo $ab;</span><br><span class="line"></span><br><span class="line">ab&#x3D;$(service ssh status);echo &quot;$ab&quot;;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">you can get output of third solution in good way:</span><br><span class="line"></span><br><span class="line">echo &quot;$var&quot;</span><br><span class="line">and also in nasty way:</span><br><span class="line"></span><br><span class="line">echo $var</span><br></pre></td></tr></table></figure>

<p>当 <code>echo</code> 后面的内容带有引号时，只会输出变量值的内容。当没有引号时，如果当前所在目录下有其他文件，这些文件的文件名也会被输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ab&#x3D;$(service ssh status);echo $ab;</span><br><span class="line">LICENSE README.md README_ZH.md custom data gogs log public scripts templates sshd is running</span><br></pre></td></tr></table></figure>

<ul>
<li><a href="http://stackoverflow.com/questions/4651437/how-to-set-a-variable-to-the-output-from-a-command-in-bash" target="_blank" rel="noopener">linux - How to set a variable to the output from a command in Bash? - Stack Overflow</a></li>
</ul>
<hr>
<h4 id="Gogs-使用-HTTPS"><a href="#Gogs-使用-HTTPS" class="headerlink" title="Gogs 使用 HTTPS"></a>Gogs 使用 HTTPS</h4><p>详细可见我的系列文章：<a href="/2018/09/24/https-certificate-two-of-nginx-settings/">HTTPS泛域名证书申请之二-Nginx配置 | IT范儿</a></p>
<ul>
<li><a href="https://github.com/Unknwon/wuwen.org/issues/12" target="_blank" rel="noopener">使用 HTTPS 部署 Gogs · Issue #12 · Unknwon/wuwen.org · GitHub</a></li>
<li><a href="https://github.com/richardskumat/gogsi/blob/master/gogs-nginx-ssl.conf" target="_blank" rel="noopener">gogsi/gogs-nginx-ssl.conf at master · richardskumat/gogsi · GitHub</a></li>
</ul>
<hr>
<h4 id="413-Request-Entity-Too-Large"><a href="#413-Request-Entity-Too-Large" class="headerlink" title="413 Request Entity Too Large"></a>413 Request Entity Too Large</h4><p>出现这个问题是因为我在服务器上使用Nginx对Gogs做反向代理，上传文件的大小超出了Nginx的限制。</p>
<p>我的Nginx配置如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name gogit.itfanr.cc;</span><br><span class="line"></span><br><span class="line">    location &#x2F; &#123;</span><br><span class="line">        # 3000 是 Gogs 运行的端口</span><br><span class="line">        proxy_pass http:&#x2F;&#x2F;localhost:3000; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Nginx允许的最大请求数据大小默认为 <code>1m</code> ，我们可以通过参数 <code>client_max_body_size</code> 来自定义：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name gogit.itfanr.cc;</span><br><span class="line"></span><br><span class="line">    # 设置最大为 100 M</span><br><span class="line">    client_max_body_size 100m;</span><br><span class="line"></span><br><span class="line">    location &#x2F; &#123;</span><br><span class="line">        # 3000 是 Gogs 运行的端口</span><br><span class="line">        proxy_pass http:&#x2F;&#x2F;localhost:3000; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如我设置的是 <code>100m</code> 大小。</p>
<p>之后，重启nginx服务即可：<code>sudo systemctl reload nginx</code> 。</p>
<hr>
<h4 id="One-More-Thing…"><a href="#One-More-Thing…" class="headerlink" title="One More Thing…"></a>One More Thing…</h4><p>根据以上遇到的问题，这里主要提一点：</p>
<p>但凡是SSH相关的问题，就是要保证目录 <code>/home/git/.ssh</code> 具有 <code>0700</code> 的权限，目录 <code>/home/git/.ssh/</code> 下的文件具有 <code>0600</code> 的权限。</p>
<p>或者直接尝试如下操作:</p>
<ol>
<li>登陆Gogs站点管理员账户，访问 <code>/admin</code> 页面，选择 <code>Rewrite &#39;.ssh/authorized_keys&#39; file (caution: non-Gogs keys will be lost)</code> 项 ，点击 <code>Run</code> 按钮，如果报错：<code>open /home/git/.ssh/authorized_keys.tmp: permission denied</code> 。否则直接跳至步骤5。</li>
<li>查看日志 <code>gogs.log</code> 文件，发现错误信息：<code>AddPublicKey: addKey: open /home/git/.ssh/authorized_keys: permission denied</code> 。</li>
<li>进入容器内部：<code>docker exec -it gogs /bin/bash</code> ,切换至git用户：<code>su git</code>,然后进入 <code>/home/git/</code> 目录，更改 <code>.ssh</code> 目录权限：<code>chmod 0700 .ssh</code> 。（此时，该 .ssh 目录内为空）</li>
<li>然后再次访问 <code>/admin</code> 页面，再次执行 <code>Run</code> 操作，提示“所有公钥重新生成成功！”信息。查看容器内的 <code>.ssh/</code> 目录下生成了一个 <code>authorized_keys</code> 文件。然后更改该文件权限：<code>chmod 0600 authorized_keys</code> 。</li>
<li>最后重启该容器。</li>
</ol>
<hr>
]]></content>
      <categories>
        <category>Ubuntu-Gogs</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Gogs</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker-Ubuntu-Gogs部署gogs容器过程记录</title>
    <url>/2017/03/23/docker-ubuntu-gogs-deploy/</url>
    <content><![CDATA[<p>Docker Gogs 用更简单的方式部署、升级或迁移Gogs容器服务。</p>
<p><code>Docker-Ubuntu-Gogs</code> 系列文章主要记录我在Docker下部署Gogs代码管理项目的过程。系列文章包括Gogs容器的部署过程，部署时遇到的问题及解决方法，个性化配置等。</p>
<p>这里底层系统选择了 <code>Ubuntu16.04</code> 版本，之前也曾尝试在 <code>Alpine</code> 系统下来部署Gogs，但安装完成后会报 <code>./gogs web is not found</code> 之类的错误，暂未找到解决方法。遂最后决定采用Ubuntu来部署。</p>
<p>对于 <code>Alpine</code> 系统下的部署方法，待后期再来完善。</p>
<p>另外，Gogs作者在Github中发布的Gogs容器版本是用Alpine系统来做的，如果比较在意容器的大小，可以直接用之。</p>
<hr>
<h4 id="测试操作步骤"><a href="#测试操作步骤" class="headerlink" title="测试操作步骤"></a>测试操作步骤</h4><p>操作记录：<code>Ubuntu16.04</code> 系统</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -it --name ugg1 -p 3000:3000 -p 8080:22 ubuntu /bin/bash</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">RUN <span class="built_in">echo</span> <span class="string">"deb http://cn.archive.ubuntu.com/ubuntu/ xenial main restricted universe multiverse"</span> &gt;&gt; /etc/apt/sources.list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">apt-get update</span><br><span class="line"></span><br><span class="line">apt-get install -y git wget openssh-server</span><br><span class="line"></span><br><span class="line">adduser git  (and <span class="built_in">set</span> <span class="built_in">pwd</span> git)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拷贝本地的gogs项目zip包到容器中</span></span><br><span class="line">docker cp linux_amd64.zip ugg1:/home/git/gogs.zip</span><br><span class="line"></span><br><span class="line">unzip gogs.zip</span><br><span class="line"></span><br><span class="line"><span class="comment">#***************</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> gogs</span><br><span class="line">mkdir -p custom/conf</span><br><span class="line">mkdir -p <span class="built_in">log</span></span><br><span class="line"></span><br><span class="line">chmod -R 777 custom</span><br><span class="line">chmod -R 777 <span class="built_in">log</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line">chown -R git:git gogs</span><br><span class="line"></span><br><span class="line"><span class="comment">#*******************</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># gosu</span></span><br><span class="line">docker cp gosu-amd64 ugg1:/usr/<span class="built_in">local</span>/bin/gosu</span><br><span class="line">chmod +x /usr/<span class="built_in">local</span>/bin/gosu</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动项目</span></span><br><span class="line"><span class="built_in">cd</span> gogs</span><br><span class="line">./gogs web</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动ssh服务（之前测试时把这项丢了，所以ssh功能一直无法使用）</span></span><br><span class="line">service ssh start </span><br><span class="line">service ssh restart</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">gosu git /home/git/gogs/gogs web</span><br><span class="line"></span><br><span class="line"><span class="comment"># 项目文件目录</span></span><br><span class="line">/app</span><br><span class="line">	gogs-repositories</span><br><span class="line">	gogs</span><br><span class="line">		<span class="built_in">log</span></span><br><span class="line">		ssh</span><br><span class="line">		conf</span><br><span class="line">		data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建数据文件</span></span><br><span class="line">mkdir -p /app/gogs-repositories /app/gogs/<span class="built_in">log</span> /app/gogs/ssh /app/gogs/data /app/gogs/conf</span><br><span class="line">chown -R git:git /app</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ln -sf /home/git/gogs/custom/conf/app.ini  /app/gogs/conf/app.ini</span><br><span class="line">chown -R git:git /app</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ docker run --name ugg1 -d -p 3002:3000 -p 8090:22 -v /home/tiger/xdk/dfile:/app gg1</span><br></pre></td></tr></table></figure>

<hr>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Link volumed data with app data</span><br><span class="line">ln -sf &#x2F;data&#x2F;gogs&#x2F;log  .&#x2F;log</span><br><span class="line">ln -sf &#x2F;data&#x2F;gogs&#x2F;data .&#x2F;data</span><br></pre></td></tr></table></figure>

<p>参考自gogs官方github中的dockerfile，使用gosu调用git用户：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export USER&#x3D;git</span><br><span class="line">exec gosu $USER &#x2F;app&#x2F;gogs&#x2F;gogs web</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="问题一：不能使用-gosu-调用-git-用户来启动"><a href="#问题一：不能使用-gosu-调用-git-用户来启动" class="headerlink" title="问题一：不能使用 gosu 调用 git 用户来启动"></a>问题一：不能使用 <code>gosu</code> 调用 <code>git</code> 用户来启动</h4><p>发现不能使用 <code>gosu</code> 调用 <code>git</code> 用户来启动，<code>gosu git /home/git/gogs/gogs web</code> 会报如下错误：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gogs 运行系统用户非当前用户：git &gt;</span><br></pre></td></tr></table></figure>

<p>不推荐的解决方法是： 切换到git账户下执行：<code>su - git</code>  <code>$ ./gogs web</code></p>
<p>通过测试，可以采用如下的方式来使用 <code>gosu</code> 调用 <code>git</code> 用户（参考自gogs官方github中的dockerfile）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export USER&#x3D;git</span><br><span class="line">exec gosu $USER &#x2F;app&#x2F;gogs&#x2F;gogs web</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="问题二：Fail-to-start-SSH-server-listen-tcp-0-0-0-0-22-bind-permission-denied"><a href="#问题二：Fail-to-start-SSH-server-listen-tcp-0-0-0-0-22-bind-permission-denied" class="headerlink" title="问题二：Fail to start SSH server: listen tcp 0.0.0.0:22: bind: permission denied"></a>问题二：<code>Fail to start SSH server: listen tcp 0.0.0.0:22: bind: permission denied</code></h4><p>启用内置SSH服务器会报该错误，暂未找到解决方法。</p>
<p>通过测试，将默认的 <code>22</code> 端口改成其他端口即可。</p>
<p>但是 <strong>gogs官方的docker配置中建议不要在Docker容器中使用内置的SSH服务器</strong>。</p>
<hr>
<h4 id="问题三：PANIC-session-start-mkdir-data-permission-denied"><a href="#问题三：PANIC-session-start-mkdir-data-permission-denied" class="headerlink" title="问题三：PANIC: session(start): mkdir data: permission denied"></a>问题三：<code>PANIC: session(start): mkdir data: permission denied</code></h4><p>详细错误信息如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[Macaron] 2017-03-21 06:05:40: Started GET &#x2F; for 192.168.137.1</span><br><span class="line">[Macaron] PANIC: session(start): mkdir data: permission denied</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;go&#x2F;src&#x2F;runtime&#x2F;panic.go:489 (0x4340bf)</span><br><span class="line">&#x2F;home&#x2F;vagrant&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;gogits&#x2F;gogs&#x2F;vendor&#x2F;github.com&#x2F;go-macaron&#x2F;session&#x2F;session.go:156 (0x8f478e)</span><br><span class="line">&#x2F;home&#x2F;vagrant&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;gogits&#x2F;gogs&#x2F;vendor&#x2F;gopkg.in&#x2F;macaron.v1&#x2F;context.go:79 (0x89ba01)</span><br><span class="line">&#x2F;home&#x2F;vagrant&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;gogits&#x2F;gogs&#x2F;vendor&#x2F;github.com&#x2F;go-macaron&#x2F;inject&#x2F;inject.go:157 (0x87dc92)</span><br><span class="line">&#x2F;home&#x2F;vagrant&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;gogits&#x2F;gogs&#x2F;vendor&#x2F;github.com&#x2F;go-macaron&#x2F;inject&#x2F;inject.go:135 (0x87da8b)</span><br><span class="line">&#x2F;home&#x2F;vagrant&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;gogits&#x2F;gogs&#x2F;vendor&#x2F;gopkg.in&#x2F;macaron.v1&#x2F;context.go:121 (0x89bc62)</span><br><span class="line">&#x2F;home&#x2F;vagrant&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;gogits&#x2F;gogs&#x2F;vendor&#x2F;gopkg.in&#x2F;macaron.v1&#x2F;context.go:112 (0x89bb86)</span><br><span class="line">&#x2F;home&#x2F;vagrant&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;gogits&#x2F;gogs&#x2F;vendor&#x2F;gopkg.in&#x2F;macaron.v1&#x2F;recovery.go:161 (0x8af50b)</span><br><span class="line">&#x2F;home&#x2F;vagrant&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;gogits&#x2F;gogs&#x2F;vendor&#x2F;gopkg.in&#x2F;macaron.v1&#x2F;logger.go:40 (0x89f118)</span><br></pre></td></tr></table></figure>

<p>该问题导致的原因是，当 <code>git</code> 用户运行 <code>./gogs web</code> 时，会在 <code>gogs</code> 项目的主目录下 ( 这里是 <code>/home/git/gogs</code>）创建一个 <code>data</code> 目录用于存放session缓存等临时文件。如果当前工作的主目录不是在 <code>/home/git/gogs</code> 目录，则git账户就没有权限来创建目录，从而导致权限错误。<br>解决方法是在Dockerfile中指定工作目录 <code>WORKDIR /home/git/gogs</code> 即可。 </p>
<p>后经查证，在 <code>Gogs</code> 项目目录下的 <code>custom</code> <code>data</code> 和 <code>log</code> 三个目录是用来存放项目运行期间产生的日志、配置文件、数据等信息的。当Gogs项目需要升级时，直接拷贝这三个目录到新项目目录下即可。<br>这里的 <code>data</code> 目录需要提前创建好。</p>
<hr>
<h4 id="相关参考"><a href="#相关参考" class="headerlink" title="相关参考"></a>相关参考</h4><ul>
<li><a href="http://amazingw.github.io/2016/03/22/ubuntu-with-gogs.html" target="_blank" rel="noopener">在ubuntu上安装gogs</a></li>
<li><a href="https://libhappy.com/2016/01/build-gogs-service/" target="_blank" rel="noopener">用Gogs搭建自己的Git服务器 - LibHappy</a></li>
<li><a href="https://www.digitalocean.com/community/tutorials/how-to-set-up-gogs-on-ubuntu-14-04" target="_blank" rel="noopener">How To Set Up Gogs on Ubuntu 14.04 | DigitalOcean</a></li>
<li><a href="http://www.cnblogs.com/sipher/articles/2429772.html" target="_blank" rel="noopener">chmod 777 修改权限 - 日光之下无新事 - 博客园</a></li>
<li><a href="https://segmentfault.com/q/1010000004608054" target="_blank" rel="noopener">linux - 安装gogs时报错：运行系统用户非当前用户：git -&gt; root。 不知道是什么意思 - SegmentFault</a></li>
</ul>
<hr>
<h4 id="Install时注意事项"><a href="#Install时注意事项" class="headerlink" title="Install时注意事项"></a>Install时注意事项</h4><ul>
<li><code>Database Type</code> 选择 <code>SQLite3</code> （目前仅测试了sqlite3数据库）</li>
<li><code>Sqlite Database Path</code> 使用固定路径 <code>/app/gogs/data/gogs.db</code> （后期改成默认目录也可以，详见Github）</li>
<li><code>Repository Root Path</code> 使用固定路径 <code>/app/gogs-repositories</code></li>
<li><code>Run User</code> 使用默认的 <code>git</code></li>
<li><code>Domain</code> 填写Docker宿主机的主机名或物理地址 类似于 <code>192.168.137.140</code></li>
<li><code>SSH Port</code> 不要勾选使用内置SSH服务器（Don’t user <code>Use Builtin SSH Server</code>） 如果你映射Docker外部端口如 <code>10022:22</code> 那么这里填写 <code>10022</code></li>
<li><code>HTTP Port</code> 如果映射外部端口 <code>10080:3000</code> 这里仍然使用 <code>3000</code></li>
<li><code>Application URL</code> 使用域和公开的HTTP端口值的组合 如 <code>http://192.168.137.140:10080</code></li>
<li><code>Log Path</code> 填写固定路径 <code>/app/gogs/log</code>  （后期改成默认目录也可以，详见Github）</li>
</ul>
<p><strong>注意：</strong></p>
<p>Dockerfile中必需添加 <code>WORKDIR /home/git/gogs</code> 即必需指定当前工作目录为 <code>gogs</code> 目录下，因为gogs在install完成后会在当前目录下创建一个 <code>data</code> 目录保存 <code>sessions</code> 信息。如果当前目录不是这里，则会报 <code>[Macaron] PANIC: session(start): mkdir data: permission denied</code> 的错误。</p>
<hr>
<h4 id="成果"><a href="#成果" class="headerlink" title="成果"></a>成果</h4><p>最终项目见：<a href="https://github.com/Leafney/ubuntu-gogs" target="_blank" rel="noopener">GitHub - Leafney/ubuntu-gogs: Docker + Ubuntu + Gogs</a></p>
<hr>
]]></content>
      <categories>
        <category>Ubuntu-Gogs</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Gogs</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker下配置Elasticsearch容器过程记录</title>
    <url>/2017/03/22/elasticsearch-container-in-alpine/</url>
    <content><![CDATA[<p>主要记录 Elasticsearch 容器创建流程</p>
<h4 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h4><ul>
<li>Elasticsearch 2.4.x</li>
<li>Elasticsearch 5.x</li>
</ul>
<h4 id="alpine-下配置java环境"><a href="#alpine-下配置java环境" class="headerlink" title="alpine 下配置java环境"></a>alpine 下配置java环境</h4><p>参考自 <code>https://github.com/docker-library/openjdk/blob/master/8-jdk/alpine/Dockerfile</code></p>
<p>后期创建一个java环境的基础容器。</p>
<hr>
<h4 id="测试记录"><a href="#测试记录" class="headerlink" title="测试记录"></a>测试记录</h4><p>下载 <code>elasticsearch.tar.gz</code> 文件并解压到指定目录：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ curl -sSL https:&#x2F;&#x2F;download.elastic.co&#x2F;elasticsearch&#x2F;release&#x2F;org&#x2F;elasticsearch&#x2F;distribution&#x2F;tar&#x2F;elasticsearch&#x2F;2.4.0&#x2F;elasticsearch-2.4.0.tar.gz | tar -zxv -C &#x2F;usr&#x2F;share&#x2F;elasticsearch --strip-components 1</span><br></pre></td></tr></table></figure>

<h4 id="只在-docker-run-时执行安装-elasticsearch-analysis-ik-插件"><a href="#只在-docker-run-时执行安装-elasticsearch-analysis-ik-插件" class="headerlink" title="只在 docker run 时执行安装 elasticsearch-analysis-ik 插件"></a>只在 <code>docker run</code> 时执行安装 <code>elasticsearch-analysis-ik</code> 插件</h4><p>在 dockerfile 中的 <code>ENTRYPOINT</code> 命令会在 <code>docker run</code> 或 <code>docker restart</code> 时都执行，这样就导致重复安装插件的问题。</p>
<p>目前采用的方法是在 <code>shell script</code> 文件中 通过判断 <code>plugins</code> 目录下是否存在 <code>elasticsearch-analysis-ik-${IK_ANALYSIS_VERSION}.zip</code> 文件来判断是否已经添加该插件。</p>
<p>另一种方式: 考虑通过 <code>docker exec</code> 在容器启动后来安装。</p>
<p>使用 <code>docker exec</code> 命令执行 <code>shell script</code> 时，有一个疑惑：需要执行的 <code>shell script</code> 文件应该放在容器内部还是可以调用外部即宿主机上的。(后经测试，放在容器内部。)</p>
<hr>
<h4 id="Elasticsearch-集群"><a href="#Elasticsearch-集群" class="headerlink" title="Elasticsearch 集群"></a>Elasticsearch 集群</h4><p>其中有一台被作为Master，其他为Slave。</p>
<p>配置 <code>elasticsearch.yml</code> （<strong>注意配置文件冒号“：”后要有一个空格，否则报错</strong>）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">network.host: 10.0.0.1</span><br><span class="line">cluster.name: elasticsearch    # 集群名称</span><br><span class="line">node.name: es-node1    # 节点名称 （同一集群下多个节点名称不同）</span><br><span class="line">bootstrap.mlockall: true  # </span><br><span class="line">node.master: true  # 是否作为主节点，每个节点都可以被配置成为主节点，默认值为true</span><br><span class="line">node.data: true  # 是否存储数据，即存储索引片段，默认值为true</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">discovery.zen.ping.unicast.hosts: [&quot;10.0.0.1:9300&quot;, &quot;10.0.0.2:9300&quot;]</span><br><span class="line">discovery.zen.minimum_master_nodes: 2</span><br></pre></td></tr></table></figure>


<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">network.host: [&quot;127.0.0.1&quot;, &quot;[::1]&quot;]</span><br><span class="line">cluster.name: elasticsearch</span><br><span class="line">node.name: $&#123;HOSTNAME&#125; # es_node_1</span><br><span class="line">discovery.zen.ping.unicast.hosts: [&quot;10.0.0.1&quot;, &quot;10.0.0.2&quot;, &quot;10.0.0.3&quot;]</span><br><span class="line"></span><br><span class="line">node.master: true</span><br><span class="line">node.data: false</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="如何指定自定义配置文件"><a href="#如何指定自定义配置文件" class="headerlink" title="如何指定自定义配置文件"></a>如何指定自定义配置文件</h4><h5 id="自定义配置文件和默认配置文件的关系"><a href="#自定义配置文件和默认配置文件的关系" class="headerlink" title="自定义配置文件和默认配置文件的关系"></a>自定义配置文件和默认配置文件的关系</h5><p>指定 配置文件路径：  <code>./bin/elasticsearch -Des.path.conf=/my/conf.yaml</code></p>
<p>注意： <strong>Des.config=/path/to/config/file doesn’t replace $ES_HOME/elasticsearch.conf, just appends to it</strong></p>
<p>详见：<a href="https://github.com/elastic/elasticsearch/issues/588" target="_blank" rel="noopener">-Des.config=/path/to/config/file doesn&#39;t replace $ES_HOME/elasticsearch.conf, just appends to it · Issue #588 · elastic/elasticsearch · GitHub</a></p>
<p>ES 2.4.0 </p>
<p>使用如下方式启动 <code>CMD gosu elasticsearch elasticsearch -Epath.conf=&quot;${ELASTICSEARCH_DATA}/config/elastic.yml&quot;</code> 报下面的错误：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ERROR: Parameter [-Epath.conf&#x3D;&quot;$&#123;ELASTICSEARCH_DATA&#125;&#x2F;config&#x2F;elastic.yml&quot;]does not start with --</span><br></pre></td></tr></table></figure>


<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-Des.path.conf</span><br><span class="line"></span><br><span class="line">bin&#x2F;elasticsearch -Des.path.conf&#x3D;&#x2F;etc&#x2F;elasticsearch&#x2F;node1</span><br></pre></td></tr></table></figure>

<p><strong>总结</strong> ：使用 <code>--path.conf=configdir</code> 来指定配置文件所在目录，并且配置文件必需命名为 <code>elasticsearch.yml</code> 才可以。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ .&#x2F;bin&#x2F;elasticsearch --path.conf&#x3D;&#x2F;path&#x2F;to&#x2F;conf&#x2F;dir</span><br></pre></td></tr></table></figure>

<p>详细分析过程如下：</p>
<h5 id="报错分析"><a href="#报错分析" class="headerlink" title="报错分析"></a>报错分析</h5><p>启动时报如下错误：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F; # gosu elasticsearch elasticsearch -Des.path.conf&#x3D;&#x2F;app&#x2F;config&#x2F;elastic.yml</span><br><span class="line">log4j:WARN No appenders could be found for logger (bootstrap).</span><br><span class="line">log4j:WARN Please initialize the log4j system properly.</span><br><span class="line">log4j:WARN See http:&#x2F;&#x2F;logging.apache.org&#x2F;log4j&#x2F;1.2&#x2F;faq.html#noconfig for more info.</span><br><span class="line">Exception in thread &quot;main&quot; java.lang.IllegalStateException: Unable to access &#39;path.conf&#39; (&#x2F;app&#x2F;config&#x2F;elastic.yml)</span><br><span class="line">Likely root cause: java.nio.file.NotDirectoryException: &#x2F;app&#x2F;config&#x2F;elastic.yml</span><br><span class="line">	at org.elasticsearch.bootstrap.Security.ensureDirectoryExists(Security.java:340)</span><br><span class="line">	at org.elasticsearch.bootstrap.Security.addPath(Security.java:314)</span><br><span class="line">	at org.elasticsearch.bootstrap.Security.addFilePermissions(Security.java:247)</span><br><span class="line">	at org.elasticsearch.bootstrap.Security.createPermissions(Security.java:212)</span><br><span class="line">	at org.elasticsearch.bootstrap.Security.configure(Security.java:118)</span><br><span class="line">	at org.elasticsearch.bootstrap.Bootstrap.setupSecurity(Bootstrap.java:212)</span><br><span class="line">	at org.elasticsearch.bootstrap.Bootstrap.setup(Bootstrap.java:183)</span><br><span class="line">	at org.elasticsearch.bootstrap.Bootstrap.init(Bootstrap.java:286)</span><br><span class="line">	at org.elasticsearch.bootstrap.Elasticsearch.main(Elasticsearch.java:35)</span><br><span class="line">Refer to the log for complete error details.</span><br></pre></td></tr></table></figure>

<p>解决方法：</p>
<p>找到一个讨论中的回答：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">It is no longer possible to specify a custom config file with the CONF_FILE environment variable, or the -Des.config, -Des.default.config, or -Delasticsearch.config parameters.</span><br><span class="line"></span><br><span class="line">Instead, the config file must be named elasticsearch.yml and must be located in the default config&#x2F; directory, unless a custom config directory is specified.</span><br></pre></td></tr></table></figure>

<ul>
<li><a href="https://discuss.elastic.co/t/problem-in-starting-a-node-in-es-2-2-1/45082/5" target="_blank" rel="noopener">Problem in starting a node in ES 2.2.1 - Elasticsearch - Discuss the Elastic Stack</a></li>
<li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/2.2/breaking_20_setting_changes.html#_custom_config_file" target="_blank" rel="noopener">Setting changes        | Elasticsearch Reference 2.2 | Elastic</a></li>
</ul>
<p>找到解决方案：</p>
<p>从文章 <a href="https://www.elastic.co/guide/en/elasticsearch/reference/2.4/breaking_20_setting_changes.html#_custom_config_file" target="_blank" rel="noopener">Setting changes | Elasticsearch Reference 2.4</a> 中这段：</p>
<blockquote>
<p>Custom config fileedit<br>It is no longer possible to specify a custom config file with the CONF_FILE environment variable, or the -Des.config, -Des.default.config, or -Delasticsearch.config parameters.<br>Instead, the config file must be named elasticsearch.yml and must be located in the default config/ directory, unless a custom config directory is specified.<br>The location of a custom config directory may be specified as follows:<br>./bin/elasticsearch –path.conf=/path/to/conf/dir<br>./bin/plugin -Des.path.conf=/path/to/conf/dir install analysis-icu<br>When using the RPM or debian packages, the plugin script and the init/service scripts will consult &gt; the CONF_DIR environment variable to check for a custom config location. The value of the CONF_DIR &gt; variable can be set in the environment config file which is located either in /etc/default/elasticsearch or /etc/sysconfig/elasticsearch.</p>
</blockquote>
<p>得知，之前的自定义配置文件方法 <code>-Des.path.conf</code> 改为了这种方式 <code>--path.conf</code> ，而且，只需要指定到配置文件所在目录即可。另外，配置文件的名称必须为 <code>elasticsearch.yml</code> 。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ gosu elasticsearch elasticsearch --path.conf&#x3D;&#x2F;app&#x2F;config</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="network-host-同时支持-IPV4-和-IPV6-报错"><a href="#network-host-同时支持-IPV4-和-IPV6-报错" class="headerlink" title="network.host 同时支持 IPV4 和 IPV6 报错"></a>network.host 同时支持 IPV4 和 IPV6 报错</h4><p>报如下错误：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; java.lang.IllegalArgumentException: bind address: &#123;0.0.0.0&#125; is wildcard, but multiple addresses specified: this makes no sense</span><br><span class="line">	at org.elasticsearch.common.network.NetworkService.resolveBindHostAddresses(NetworkService.java:132)</span><br><span class="line">	at org.elasticsearch.transport.netty.NettyTransport.bindServerBootstrap(NettyTransport.java:435)</span><br><span class="line">	at org.elasticsearch.transport.netty.NettyTransport.doStart(NettyTransport.java:332)</span><br><span class="line">	at org.elasticsearch.common.component.AbstractLifecycleComponent.start(AbstractLifecycleComponent.java:68)</span><br><span class="line">	at org.elasticsearch.transport.TransportService.doStart(TransportService.java:182)</span><br><span class="line">	at org.elasticsearch.common.component.AbstractLifecycleComponent.start(AbstractLifecycleComponent.java:68)</span><br><span class="line">	at org.elasticsearch.node.Node.start(Node.java:278)</span><br><span class="line">	at org.elasticsearch.bootstrap.Bootstrap.start(Bootstrap.java:222)</span><br><span class="line">	at org.elasticsearch.bootstrap.Bootstrap.init(Bootstrap.java:288)</span><br><span class="line">	at org.elasticsearch.bootstrap.Elasticsearch.main(Elasticsearch.java:35)</span><br></pre></td></tr></table></figure>

<p>配置文件内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># default</span><br><span class="line">network.host: [&quot;0.0.0.0&quot;, &quot;[::1]&quot;]</span><br><span class="line">path.data: &#x2F;app&#x2F;data</span><br><span class="line">path.logs: &#x2F;app&#x2F;logs</span><br><span class="line"></span><br><span class="line"># cluster</span><br><span class="line">cluster.name: elasticsearch</span><br><span class="line">node.name: $&#123;HOSTNAME&#125;</span><br><span class="line">node.master: true</span><br><span class="line">node.data: true</span><br><span class="line"># bootstrap.mlockall: true</span><br><span class="line">discovery.zen.ping.unicast.hosts: [&quot;localhost:9300&quot;, &quot;localhost:9301&quot;]</span><br></pre></td></tr></table></figure>

<p>改为 <code>network.host: 0.0.0.0</code> 后 启动成功。</p>
<p>可查看该讨论: <a href="https://github.com/elastic/elasticsearch/issues/20703" target="_blank" rel="noopener">Binding to the wildcard of one address family should not prevent binding to addresses in another family · Issue #20703 · elastic/elasticsearch · GitHub</a></p>
<hr>
<h4 id="当加上-bootstrap-mlockall-true-这行时，也会报错。-待探究原因！！！"><a href="#当加上-bootstrap-mlockall-true-这行时，也会报错。-待探究原因！！！" class="headerlink" title="当加上 bootstrap.mlockall: true 这行时，也会报错。 待探究原因！！！"></a>当加上 <code>bootstrap.mlockall: true</code> 这行时，也会报错。 待探究原因！！！</h4><hr>
<h4 id="elasticsearch-cluster-配置-unicast-hosts"><a href="#elasticsearch-cluster-配置-unicast-hosts" class="headerlink" title="elasticsearch cluster 配置 unicast.hosts"></a>elasticsearch cluster 配置 unicast.hosts</h4><h5 id="探究"><a href="#探究" class="headerlink" title="探究"></a>探究</h5><p>上面的配置文件中，设置的 <code>unicast.hosts</code> 值如下 ：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">discovery.zen.ping.unicast.hosts: [&quot;localhost:9300&quot;, &quot;localhost:9301&quot;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">discovery.zen.ping.unicast.hosts: [&quot;172.17.0.4:9300&quot;, &quot;172.17.0.5:9301&quot;]</span><br></pre></td></tr></table></figure>

<p>经测试，使用 <code>[&quot;localhost:9300&quot;, &quot;localhost:9301&quot;]</code> 无效。必须使用明确的IP地址 <code>[&quot;172.17.0.4:9300&quot;, &quot;172.17.0.5:9301&quot;]</code> 后才能互相发现。</p>
<p>通过 访问 <code>http://59.188.76.112:9200/_cluster/health?pretty</code> 能看到是否组成集群模式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;cluster_name&quot;: &quot;elasticsearch&quot;,</span><br><span class="line">    &quot;status&quot;: &quot;green&quot;,</span><br><span class="line">    &quot;timed_out&quot;: false,</span><br><span class="line">    &quot;number_of_nodes&quot;: 2,</span><br><span class="line">    &quot;number_of_data_nodes&quot;: 2,</span><br><span class="line">    &quot;active_primary_shards&quot;: 0,</span><br><span class="line">    &quot;active_shards&quot;: 0,</span><br><span class="line">    &quot;relocating_shards&quot;: 0,</span><br><span class="line">    &quot;initializing_shards&quot;: 0,</span><br><span class="line">    &quot;unassigned_shards&quot;: 0,</span><br><span class="line">    &quot;delayed_unassigned_shards&quot;: 0,</span><br><span class="line">    &quot;number_of_pending_tasks&quot;: 0,</span><br><span class="line">    &quot;number_of_in_flight_fetch&quot;: 0,</span><br><span class="line">    &quot;task_max_waiting_in_queue_millis&quot;: 0,</span><br><span class="line">    &quot;active_shards_percent_as_number&quot;: 100</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>考虑到Docker下容器的ip地址是随机的，容器重启后可能会改变，需要考虑其他确定的方式。</p>
<p>设置成 <code>localhost</code> 参考自 <a href="http://www.jianshu.com/p/265db8b05d85#" target="_blank" rel="noopener">如何使用一个IP搭建ES集群——Docker如你所愿 - 简书</a></p>
<p>可能的一种方法是在 <code>docker run</code> 时 指定 <code>--add-host=[]</code> 参数  ，待研究！！！</p>
<p>经测试，使用 <code>localhsot</code>  <code>127.0.0.1</code>  <code>0.0.0.0</code>  <code>docker name</code> 均无效。</p>
<p>经测试，可以设置为相应容器的IP 如 <code>172.17.0.5:9300</code> 。通过命令 :</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker inspect --format&#x3D;&#39;&#123;&#123;.NetworkSettings.IPAddress&#125;&#125;&#39; $CONTAINER_ID</span><br></pre></td></tr></table></figure>

<p>可以获得指定容器的ip地址。但这里的问题是 <code>容器的ip每次重启后都会改变，知道容器ip没什么意义。</code><br>所以这种方式也失败。</p>
<p>如果不指定容器的IP,但可以指定容器所在宿主机的IP <code>120.121.xx.xx:9300</code> ，这样能发现集群。</p>
<hr>
<h5 id="以下issure中，可以通过docker-compores-来指定容器ip-：待研究！！！"><a href="#以下issure中，可以通过docker-compores-来指定容器ip-：待研究！！！" class="headerlink" title="以下issure中，可以通过docker-compores 来指定容器ip ：待研究！！！"></a>以下issure中，可以通过docker-compores 来指定容器ip ：待研究！！！</h5><ul>
<li><a href="https://github.com/docker-library/elasticsearch/issues/68" target="_blank" rel="noopener">Cannot set up an elasticsearch:2 cluster in docker any more · Issue #68 · docker-library/elasticsearch · GitHub</a></li>
<li><a href="https://github.com/spujadas/elk-docker/issues/19" target="_blank" rel="noopener">Problems in getting single node cluster working as per your docs · Issue #19 · spujadas/elk-docker · GitHub</a></li>
</ul>
<hr>
<h5 id="另外一种方式，通过-link-来设置："><a href="#另外一种方式，通过-link-来设置：" class="headerlink" title="另外一种方式，通过 --link 来设置："></a>另外一种方式，通过 <code>--link</code> 来设置：</h5><p>参考自：<a href="https://github.com/itzg/dockerfiles/tree/master/elasticsearch" target="_blank" rel="noopener">dockerfiles/elasticsearch at master · itzg/dockerfiles · GitHub</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run --name es5 -d -p 9230:9200 -p 9330:9300 e2</span><br><span class="line">docker run --name es6 -d --link es5 e2</span><br><span class="line">docker run --name es7 -d --link es5 e2</span><br><span class="line"></span><br><span class="line">docker cp elasticsearch.yml es5:&#x2F;app&#x2F;config&#x2F;elasticsearch.yml</span><br><span class="line">docker cp elasticsearch.yml es6:&#x2F;app&#x2F;config&#x2F;elasticsearch.yml</span><br><span class="line">docker cp elasticsearch.yml es7:&#x2F;app&#x2F;config&#x2F;elasticsearch.yml</span><br><span class="line"></span><br><span class="line">docker restart es5 es6 es7</span><br></pre></td></tr></table></figure>

<p>配置文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># default</span><br><span class="line">network.host: 0.0.0.0</span><br><span class="line">path.data: &#x2F;app&#x2F;data</span><br><span class="line">path.logs: &#x2F;app&#x2F;logs</span><br><span class="line"></span><br><span class="line"># cluster</span><br><span class="line">cluster.name: elasticsearch</span><br><span class="line">node.name: $&#123;HOSTNAME&#125;</span><br><span class="line">node.master: true</span><br><span class="line">node.data: true</span><br><span class="line">discovery.zen.ping.unicast.hosts: [&quot;es5:9330&quot;]</span><br></pre></td></tr></table></figure>

<p><strong>这种方式经测试，无效。</strong> 报如下错误：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java.net.NoRouteToHostException: Host is unreachable</span><br><span class="line">	at sun.nio.ch.SocketChannelImpl.checkConnect(Native Method)</span><br><span class="line">	at sun.nio.ch.SocketChannelImpl.finishConnect(SocketChannelImpl.java:717)</span><br><span class="line">	at org.jboss.netty.channel.socket.nio.NioClientBoss.connect(NioClientBoss.java:152)</span><br><span class="line">	at org.jboss.netty.channel.socket.nio.NioClientBoss.processSelectedKeys(NioClientBoss.java:105)</span><br><span class="line">	at org.jboss.netty.channel.socket.nio.NioClientBoss.process(NioClientBoss.java:79)</span><br><span class="line">	at org.jboss.netty.channel.socket.nio.AbstractNioSelector.run(AbstractNioSelector.java:337)</span><br><span class="line">	at org.jboss.netty.channel.socket.nio.NioClientBoss.run(NioClientBoss.java:42)</span><br><span class="line">	at org.jboss.netty.util.ThreadRenamingRunnable.run(ThreadRenamingRunnable.java:108)</span><br><span class="line">	at org.jboss.netty.util.internal.DeadLockProofWorker$1.run(DeadLockProofWorker.java:42)</span><br><span class="line">	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)</span><br><span class="line">	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)</span><br><span class="line">	at java.lang.Thread.run(Thread.java:745)</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="Docker-elasticsearch-集群"><a href="#Docker-elasticsearch-集群" class="headerlink" title="Docker elasticsearch 集群"></a>Docker elasticsearch 集群</h4><ul>
<li><a href="https://hub.docker.com/r/itzg/elasticsearch/" target="_blank" rel="noopener">https://hub.docker.com/r/itzg/elasticsearch/</a></li>
<li><a href="https://github.com/Khezen/docker-elasticsearch/tree/2.4" target="_blank" rel="noopener">https://github.com/Khezen/docker-elasticsearch/tree/2.4</a></li>
</ul>
<p>看到网上大部分人都是将集群配置参数通过环境变量的形式在 <code>docker run</code> 时配置，考虑将配置文件暴露在主机目录下是否安全？</p>
<hr>
<h4 id="查看集群状态"><a href="#查看集群状态" class="headerlink" title="查看集群状态"></a>查看集群状态</h4><p>查看集群状态:  <code>curl -XGET &#39;http://172.16.212.102:9200/_cluster/health?pretty&#39;</code></p>
<hr>
<h4 id="相关参考"><a href="#相关参考" class="headerlink" title="相关参考"></a>相关参考</h4><h5 id="Elasticsearch集群搭建相关参考"><a href="#Elasticsearch集群搭建相关参考" class="headerlink" title="Elasticsearch集群搭建相关参考"></a>Elasticsearch集群搭建相关参考</h5><ul>
<li><a href="http://www.wklken.me/posts/2016/06/29/deploy-es.html" target="_blank" rel="noopener">ElasticSearch集群部署文档</a></li>
<li><a href="https://my.oschina.net/shyloveliyi/blog/653751" target="_blank" rel="noopener">elasticsearch2.3.1 集群安装 - 尚浩宇的博客</a> <strong>五角星 配置</strong></li>
<li><a href="https://www.digitalocean.com/community/tutorials/how-to-set-up-a-production-elasticsearch-cluster-on-ubuntu-14-04" target="_blank" rel="noopener">How To Set Up a Production Elasticsearch Cluster on Ubuntu 14.04 | DigitalOcean</a></li>
<li><a href="https://forums.docker.com/t/easy-elasticsearch-cluster-with-docker-1-12-swarm/19648/12" target="_blank" rel="noopener">Easy Elasticsearch cluster with docker 1.12 swarm? - General - Docker Forums</a></li>
<li><a href="https://stefanprodan.com/2016/elasticsearch-cluster-with-docker/" target="_blank" rel="noopener">Running an Elasticsearch cluster with Docker</a></li>
<li><a href="http://www.jianshu.com/p/265db8b05d85" target="_blank" rel="noopener">如何使用一个IP搭建ES集群——Docker如你所愿 - 简书</a> <strong>五角星</strong></li>
<li><a href="https://github.com/hangxin1940/docker-elasticsearch-cn/blob/master/docker-start" target="_blank" rel="noopener">docker-elasticsearch-cn/docker-start at master · hangxin1940/docker-elasticsearch-cn · GitHub</a></li>
<li><a href="http://forkday.com/elastic-search-ji-qun/" target="_blank" rel="noopener">elasticsearch 集群</a></li>
<li><a href="https://segmentfault.com/q/1010000001637726" target="_blank" rel="noopener">宿主机上如何获得 docker container 容器的 ip 地址？ - SegmentFault</a></li>
</ul>
<hr>
<h5 id="Elasticsearch容器创建相关参考"><a href="#Elasticsearch容器创建相关参考" class="headerlink" title="Elasticsearch容器创建相关参考"></a>Elasticsearch容器创建相关参考</h5><ul>
<li><a href="https://github.com/soldair/docker-alpine-elasticsearch" target="_blank" rel="noopener">GitHub - soldair/docker-alpine-elasticsearch: 130mb ish Elasticsearch container based on alpine linux.</a></li>
<li><a href="https://github.com/docker-library/elasticsearch" target="_blank" rel="noopener">GitHub - docker-library/elasticsearch: Docker Official Image packaging for elasticsearch</a></li>
<li><a href="https://github.com/kiasaki/docker-alpine-elasticsearch" target="_blank" rel="noopener">GitHub - kiasaki/docker-alpine-elasticsearch: ElasticSearch container based on Alpine Linux</a></li>
<li><a href="https://github.com/docker-library/openjdk" target="_blank" rel="noopener">GitHub - docker-library/openjdk: Docker Official Image packaging for Java (openJDK)</a></li>
<li><a href="https://github.com/Khezen/docker-elasticsearch" target="_blank" rel="noopener">docker elasticsearch</a></li>
<li><a href="https://github.com/itzg/dockerfiles" target="_blank" rel="noopener">GitHub - itzg/dockerfiles: Contains the various Dockerfile definitions I&#39;m maintaining.</a></li>
</ul>
<hr>
<h4 id="成果"><a href="#成果" class="headerlink" title="成果"></a>成果</h4><p>源码见：<a href="https://github.com/Leafney/alpine-elasticsearch" target="_blank" rel="noopener">GitHub - Leafney/alpine-elasticsearch: Docker + Alpine + Elasticsearch</a></p>
]]></content>
      <tags>
        <tag>Docker</tag>
        <tag>ElasticSearch</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux下使用SSH密钥连接Github</title>
    <url>/2017/03/03/using-ssh-key-connection-github-in-linux/</url>
    <content><![CDATA[<p>在 Linux 系统下如何通过 SSH 密钥来连接 GitHub (Mac系统下设置方法相同)。</p>
<h4 id="引申"><a href="#引申" class="headerlink" title="引申"></a>引申</h4><ul>
<li>Linux下 ：<a href="/2017/03/03/using-ssh-key-connection-github-in-linux/">Linux下使用SSH密钥连接Github</a></li>
<li>Windows下：<a href="/2016/09/24/using-ssh-key-connection-github/">使用SSH密钥连接Github</a></li>
</ul>
<hr>
<h4 id="Ubuntu-系统初始化配置git环境"><a href="#Ubuntu-系统初始化配置git环境" class="headerlink" title="Ubuntu 系统初始化配置git环境"></a>Ubuntu 系统初始化配置git环境</h4><p>测试系统版本 : <code>Ubuntu 16.04 LTS</code></p>
<h5 id="更新软件源"><a href="#更新软件源" class="headerlink" title="更新软件源"></a>更新软件源</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ echo &quot;deb http:&#x2F;&#x2F;cn.archive.ubuntu.com&#x2F;ubuntu&#x2F; xenial main restricted universe multiverse&quot; &gt;&gt; &#x2F;etc&#x2F;apt&#x2F;sources.list &amp;&amp; \</span><br><span class="line">echo &quot;deb http:&#x2F;&#x2F;cn.archive.ubuntu.com&#x2F;ubuntu&#x2F; xenial-security main restricted universe multiverse&quot; &gt;&gt; &#x2F;etc&#x2F;apt&#x2F;sources.list &amp;&amp; \</span><br><span class="line">echo &quot;deb http:&#x2F;&#x2F;cn.archive.ubuntu.com&#x2F;ubuntu&#x2F; xenial-updates main restricted universe multiverse&quot; &gt;&gt; &#x2F;etc&#x2F;apt&#x2F;sources.list</span><br></pre></td></tr></table></figure>

<h5 id="安装git依赖"><a href="#安装git依赖" class="headerlink" title="安装git依赖"></a>安装git依赖</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ apt-get update</span><br><span class="line">$ apt-get install git</span><br></pre></td></tr></table></figure>

<h5 id="设置时区"><a href="#设置时区" class="headerlink" title="设置时区"></a>设置时区</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ln -sf &#x2F;usr&#x2F;share&#x2F;zoneinfo&#x2F;Asia&#x2F;ShangHai &#x2F;etc&#x2F;localtime</span><br><span class="line">$ echo &quot;Asia&#x2F;Shanghai&quot; &gt; &#x2F;etc&#x2F;timezone</span><br><span class="line">$ dpkg-reconfigure -f noninteractive tzdata</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="Alpine-系统初始化配置git环境"><a href="#Alpine-系统初始化配置git环境" class="headerlink" title="Alpine 系统初始化配置git环境"></a>Alpine 系统初始化配置git环境</h4><p>测试系统版本 : <code>Alpine 3.5</code></p>
<h5 id="更新软件源-1"><a href="#更新软件源-1" class="headerlink" title="更新软件源"></a>更新软件源</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ echo &quot;http:&#x2F;&#x2F;dl-4.alpinelinux.org&#x2F;alpine&#x2F;v3.5&#x2F;main&quot; &gt;&gt; &#x2F;etc&#x2F;apk&#x2F;repositories</span><br><span class="line">$ echo &quot;http:&#x2F;&#x2F;dl-4.alpinelinux.org&#x2F;alpine&#x2F;v3.5&#x2F;community&quot; &gt;&gt; &#x2F;etc&#x2F;apk&#x2F;repositories</span><br></pre></td></tr></table></figure>

<h5 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h5><p>The <code>ssh-keygen</code> command is part of <code>OpenSSH</code> (package “openssh”).</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ apk update</span><br><span class="line">$ apk add git openssh</span><br></pre></td></tr></table></figure>

<h5 id="设置时区-1"><a href="#设置时区-1" class="headerlink" title="设置时区"></a>设置时区</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ apk add tzdata</span><br><span class="line">$ ln -sf &#x2F;usr&#x2F;share&#x2F;zoneinfo&#x2F;Asia&#x2F;Shanghai &#x2F;etc&#x2F;localtime</span><br><span class="line">$ echo &quot;Asia&#x2F;Shanghai&quot; &gt; &#x2F;etc&#x2F;timezone</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="Mac-系统初始化配置git环境"><a href="#Mac-系统初始化配置git环境" class="headerlink" title="Mac 系统初始化配置git环境"></a>Mac 系统初始化配置git环境</h4><p>Mac系统上安装git,可以直接从git网站下载安装包,访问 <a href="https://git-scm.com/download/mac" target="_blank" rel="noopener">Git - Downloads</a> 安装.</p>
<p>也可以通过 <code>homebrew</code> 进行安装:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ brew install git</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="设置git账户"><a href="#设置git账户" class="headerlink" title="设置git账户"></a>设置git账户</h4><p>执行如下两条命令设置git账户的用户名和密码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git config --global user.name &quot;Your Name&quot;</span><br><span class="line">$ git config --global user.email &quot;youremail@domain.com&quot;</span><br><span class="line"></span><br><span class="line">$ git config --list</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="生成SSH公钥"><a href="#生成SSH公钥" class="headerlink" title="生成SSH公钥"></a>生成SSH公钥</h4><p>SSH 公钥默认储存在账户的主目录下的 <code>~/.ssh</code> 目录。先确认是否已经有一个公钥了：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cd ~&#x2F;.ssh</span><br><span class="line">&#x2F;bin&#x2F;sh: cd: can&#39;t cd to &#x2F;root&#x2F;.ssh</span><br></pre></td></tr></table></figure>

<p>主要是看是否存在 <code>id_dsa</code> 或 <code>id_rsa</code> 文件。有 <code>.pub</code> 后缀的文件就是 <code>公钥</code>，另一个文件则是密钥。</p>
<h5 id="创建新的SSH密钥"><a href="#创建新的SSH密钥" class="headerlink" title="创建新的SSH密钥"></a>创建新的SSH密钥</h5><p>如果已经存在公钥，可跳过这步。如果没有，使用 <code>ssh-keygen</code> 来创建：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cd ~</span><br><span class="line">$ ssh-keygen -t rsa -C &quot;youremail@domain.com&quot;</span><br></pre></td></tr></table></figure>

<p>示例：(<code>xxxxxx@126.com</code> 为我的账户邮箱)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">~ # ssh-keygen -t rsa -C &quot;xxxxxx@126.com&quot;</span><br><span class="line">Generating public&#x2F;private rsa key pair.</span><br><span class="line">Enter file in which to save the key (&#x2F;root&#x2F;.ssh&#x2F;id_rsa): # 直接回车，则将密钥按默认路径及文件名进行存储。此时也可以输入特定的文件名</span><br><span class="line">Created directory &#39;&#x2F;root&#x2F;.ssh&#39;.</span><br><span class="line">Enter passphrase (empty for no passphrase):  # 根据提示，你需要输入密码和确认密码。可以不填，设置为空值，直接回车</span><br><span class="line">Enter same passphrase again: </span><br><span class="line">Your identification has been saved in &#x2F;root&#x2F;.ssh&#x2F;id_rsa.</span><br><span class="line">Your public key has been saved in &#x2F;root&#x2F;.ssh&#x2F;id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:yFt14TcP0H+ixy9VKiILPPJ6DVevkKgrbxVFqk7mn5k xxxxxx@126.com</span><br><span class="line">The key&#39;s randomart image is:</span><br><span class="line">+---[RSA 2048]----+</span><br><span class="line">|            o.   |</span><br><span class="line">|      .    . o.  |</span><br><span class="line">|     o    . o +. |</span><br><span class="line">|    .... ... ..++|</span><br><span class="line">|   . o .So .   o+|</span><br><span class="line">|  + o Bo&#x3D; . + + .|</span><br><span class="line">| &#x3D;   *.* +   o o |</span><br><span class="line">|  ++o o o .   . .|</span><br><span class="line">|  E&#x3D;++         . |</span><br><span class="line">+----[SHA256]-----+</span><br></pre></td></tr></table></figure>

<p>查看生成的文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cd ~&#x2F;.ssh</span><br><span class="line">~&#x2F;.ssh $ ls</span><br><span class="line">id_rsa      id_rsa.pub</span><br></pre></td></tr></table></figure>

<p>文件 <code>id_rsa.pub</code> 就是公钥。</p>
<hr>
<h4 id="在-GibHub-中添加你的公钥"><a href="#在-GibHub-中添加你的公钥" class="headerlink" title="在 GibHub 中添加你的公钥"></a>在 GibHub 中添加你的公钥</h4><p>复制公钥 <code>id_rsa.pub</code> 文件中的内容。</p>
<p>我这里使用 <code>XShell</code> 来登录的linux服务器，可以直接复制出来。或在 <code>vim</code> 下，可通过命令 <code>ggVG</code> 全选，<code>+y</code> 复制选中内容到+寄存器，也就是系统的剪贴板，供其他程序使用。</p>
<p>登陆Github网站，选择 <code>Settings</code> –&gt; <code>SSH and GPG keys</code> 菜单，点击 <code>New SSH key</code> 按钮。<br>粘贴你的密钥到 <code>Key</code> 输入框中并设置 <code>Title</code> 信息，点击 <code>Add SSH key</code> 按钮完成。</p>
<hr>
<h4 id="连接测试"><a href="#连接测试" class="headerlink" title="连接测试"></a>连接测试</h4><p>测试 SSH keys 是否设置成功，执行如下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br></pre></td></tr></table></figure>

<p>当提示如下信息时，说明正常连通了github:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Hi xxxxxx! You&#39;ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure>

<p>如果你是第一次设置连接github.com,会询问你是否继续,输入 <code>yes</code> 即可,这样就会将连接地址记录在本地:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br><span class="line">The authenticity of host &#39;github.com (192.30.253.112)&#39; can&#39;t be established.</span><br><span class="line">RSA key fingerprint is SHA256:nThbg6kXUpxxxxxxxxARLviKw6E5SY8.</span><br><span class="line">Are you sure you want to continue connecting (yes&#x2F;no)? yes</span><br><span class="line">Warning: Permanently added &#39;github.com,192.30.253.112&#39; (RSA) to the list of known hosts.</span><br><span class="line">Hi xxxxxx! You&#39;ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure>

<hr>
<p>然后就可以将本地的项目用github来管理了。</p>
<hr>
<h4 id="更新日志"><a href="#更新日志" class="headerlink" title="更新日志"></a>更新日志</h4><ul>
<li>2017-10-27 - 完善”连接测试”内容; 添加Mac系统下安装git配置</li>
</ul>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>GitHub</tag>
        <tag>SSH</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux下修改时区</title>
    <url>/2017/02/23/modify-timezone/</url>
    <content><![CDATA[<p>一般通过默认方式安装的linux系统显示的都是UTC时间，这样导致一些依赖时间的程序就会出现时差问题。下面介绍在Ubuntu和Alpine系统下如何更改UTC时区为CST时区。</p>
<h4 id="Alpine"><a href="#Alpine" class="headerlink" title="Alpine"></a>Alpine</h4><h5 id="alpine-下修改UTC时间为CST时间-测试通过"><a href="#alpine-下修改UTC时间为CST时间-测试通过" class="headerlink" title="alpine 下修改UTC时间为CST时间 (测试通过)"></a>alpine 下修改UTC时间为CST时间 (测试通过)</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ apk add tzdata </span><br><span class="line">$ ln -sf &#x2F;usr&#x2F;share&#x2F;zoneinfo&#x2F;Asia&#x2F;Shanghai &#x2F;etc&#x2F;localtime </span><br><span class="line">$ echo &quot;Asia&#x2F;Shanghai&quot; &gt; &#x2F;etc&#x2F;timezone</span><br></pre></td></tr></table></figure>

<h5 id="Docker-Alpine-下修改utc时间为cst时间"><a href="#Docker-Alpine-下修改utc时间为cst时间" class="headerlink" title="Docker + Alpine 下修改utc时间为cst时间"></a>Docker + Alpine 下修改utc时间为cst时间</h5><p>Dockerfile :</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">RUN apk update &amp;&amp; apk add ca-certificates &amp;&amp; \</span><br><span class="line">    apk add tzdata &amp;&amp; \</span><br><span class="line">    ln -sf &#x2F;usr&#x2F;share&#x2F;zoneinfo&#x2F;Asia&#x2F;Shanghai &#x2F;etc&#x2F;localtime &amp;&amp; \</span><br><span class="line">    echo &quot;Asia&#x2F;Shanghai&quot; &gt; &#x2F;etc&#x2F;timezone</span><br></pre></td></tr></table></figure>

<h4 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a>Ubuntu</h4><h5 id="Ubuntu-下手动修改配置-图形化界面"><a href="#Ubuntu-下手动修改配置-图形化界面" class="headerlink" title="Ubuntu 下手动修改配置 (图形化界面)"></a>Ubuntu 下手动修改配置 (图形化界面)</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo dpkg-reconfigure tzdata</span><br></pre></td></tr></table></figure>

<p>或：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo tzselect</span><br></pre></td></tr></table></figure>

<h5 id="Ubuntu下通过命令更改（已测试）"><a href="#Ubuntu下通过命令更改（已测试）" class="headerlink" title="Ubuntu下通过命令更改（已测试）"></a>Ubuntu下通过命令更改（已测试）</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo ln -sf &#x2F;usr&#x2F;share&#x2F;zoneinfo&#x2F;Asia&#x2F;ShangHai &#x2F;etc&#x2F;localtime</span><br><span class="line">$ sudo echo &quot;Asia&#x2F;Shanghai&quot; &gt; &#x2F;etc&#x2F;timezone</span><br><span class="line">$ sudo dpkg-reconfigure -f noninteractive tzdata</span><br></pre></td></tr></table></figure>

<p><strong>经测试，如果不加第一行，系统重启后又恢复UTC时间了</strong> </p>
<h5 id="Docker-Ubuntu-下修改UTC时间为CST时间"><a href="#Docker-Ubuntu-下修改UTC时间为CST时间" class="headerlink" title="Docker + Ubuntu 下修改UTC时间为CST时间"></a>Docker + Ubuntu 下修改UTC时间为CST时间</h5><p>Dockerfile:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Setting timezone</span><br><span class="line">RUN ln -sf &#x2F;usr&#x2F;share&#x2F;zoneinfo&#x2F;Asia&#x2F;ShangHai &#x2F;etc&#x2F;localtime &amp;&amp; \</span><br><span class="line">	echo &quot;Asia&#x2F;Shanghai&quot; &gt; &#x2F;etc&#x2F;timezone &amp;&amp; \</span><br><span class="line">	dpkg-reconfigure -f noninteractive tzdata</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="相关参考"><a href="#相关参考" class="headerlink" title="相关参考"></a>相关参考</h4><ul>
<li><a href="https://lengzzz.com/note/timezone-in-docker" target="_blank" rel="noopener">docker 中设置时区 | 水能载舟 亦可赛艇</a></li>
<li><a href="https://lesca.me/archives/set-timezone-with-command-line-on-ubuntu.html" target="_blank" rel="noopener">Ubuntu: 以命令行方式修改时区</a></li>
<li><a href="https://www.zybuluo.com/zwh8800/note/337111" target="_blank" rel="noopener">docker 中设置时区 - 作业部落 Cmd Markdown 编辑阅读器</a></li>
</ul>
]]></content>
      <tags>
        <tag>Docker</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu16.04配置RabbitMQ运行环境</title>
    <url>/2017/02/21/installation-rabbitmq-on-ubuntu/</url>
    <content><![CDATA[<p>该文章主要记录在 <code>Ubuntu 16.04.1 LTS</code> 系统下安装及配置 RabbitMQ 的方法。</p>
<h4 id="更新软件源"><a href="#更新软件源" class="headerlink" title="更新软件源"></a>更新软件源</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo echo &quot;deb http:&#x2F;&#x2F;cn.archive.ubuntu.com&#x2F;ubuntu&#x2F; xenial main restricted universe multiverse&quot; &gt; &#x2F;etc&#x2F;apt&#x2F;sources.list</span><br><span class="line">sudo echo &quot;deb http:&#x2F;&#x2F;cn.archive.ubuntu.com&#x2F;ubuntu&#x2F; xenial-security main restricted universe multiverse&quot; &gt;&gt; &#x2F;etc&#x2F;apt&#x2F;sources.list</span><br><span class="line"></span><br><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure>

<h4 id="安装Erlang依赖"><a href="#安装Erlang依赖" class="headerlink" title="安装Erlang依赖"></a>安装Erlang依赖</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;tmp</span><br><span class="line">wget http:&#x2F;&#x2F;packages.erlang-solutions.com&#x2F;ubuntu&#x2F;erlang_solutions.asc</span><br><span class="line">sudo apt-key add erlang_solutions.asc</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install erlang</span><br><span class="line">sudo apt-get install erlang-nox</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="安装RabbitMQ"><a href="#安装RabbitMQ" class="headerlink" title="安装RabbitMQ"></a>安装RabbitMQ</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo echo &quot;deb http:&#x2F;&#x2F;www.rabbitmq.com&#x2F;debian&#x2F; testing main&quot; &gt;&gt; &#x2F;etc&#x2F;apt&#x2F;sources.list</span><br><span class="line">sudo wget https:&#x2F;&#x2F;www.rabbitmq.com&#x2F;rabbitmq-release-signing-key.asc</span><br><span class="line">sudo apt-key add rabbitmq-release-signing-key.asc</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install rabbitmq-server</span><br></pre></td></tr></table></figure>

<h4 id="管理RabbitMQ服务"><a href="#管理RabbitMQ服务" class="headerlink" title="管理RabbitMQ服务"></a>管理RabbitMQ服务</h4><h5 id="管理服务"><a href="#管理服务" class="headerlink" title="管理服务"></a>管理服务</h5><p>可以使用 <code>rabbitmqctl</code> 或系统服务 <code>service</code> 或者 <code>systemctl</code> 来管理.</p>
<p><strong>rabbitmqctl</strong> :</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo rabbitmqctl [status|start|stop|reset]</span><br></pre></td></tr></table></figure>

<p><strong>systemctl</strong> :</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo systemctl [status|start|stop|restart] rabbitmq-server</span><br></pre></td></tr></table></figure>

<p><strong>service</strong> :</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo service rabbitmq-server [status|start|stop|restart]</span><br></pre></td></tr></table></figure>

<p>如果 <code>status</code> 状态显示无法连接rabbitmq服务，需要先启动该服务。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo rabbitmqctl status</span><br><span class="line">Status of node rabbit@localhost ...</span><br><span class="line">Error: unable to connect to node rabbit@localhost: nodedown</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ sudo rabbitmqctl start</span><br><span class="line"># 或者</span><br><span class="line">$ sudo service rabbitmq-server start&#x2F;restart</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ sudo rabbitmqctl status</span><br><span class="line">Status of node rabbit@localhost ...</span><br><span class="line">[&#123;pid,9286&#125;,</span><br><span class="line"> &#123;running_applications,[&#123;rabbit,&quot;RabbitMQ&quot;,&quot;3.6.6&quot;&#125;,</span><br><span class="line">                        &#123;mnesia,&quot;MNESIA  CXC 138 12&quot;,&quot;4.13.3&quot;&#125;,</span><br><span class="line">                        &#123;os_mon,&quot;CPO  CXC 138 46&quot;,&quot;2.4&quot;&#125;,</span><br><span class="line">                        &#123;rabbit_common,[],&quot;3.6.6&quot;&#125;,</span><br><span class="line">                        &#123;xmerl,&quot;XML parser&quot;,&quot;1.3.10&quot;&#125;,</span><br><span class="line">                        &#123;ranch,&quot;Socket acceptor pool for TCP protocols.&quot;,</span><br><span class="line">                               &quot;1.2.1&quot;&#125;,</span><br><span class="line">                        ...</span><br><span class="line">                        ...</span><br></pre></td></tr></table></figure>

<hr>
<h5 id="在Docker下管理"><a href="#在Docker下管理" class="headerlink" title="在Docker下管理"></a>在Docker下管理</h5><p>注意：在Ubuntu系统的 <code>Docker</code> 下 ，使用 <code>systemctl</code> 命令会报错，所以在docker下还是推荐使用 <code>service</code> 来管理。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@6b16517eab27:&#x2F;tmp# systemctl</span><br><span class="line">Failed to connect to bus: No such file or directory</span><br><span class="line"></span><br><span class="line">root@6b16517eab27:&#x2F;tmp# service rabbitmq-server status</span><br><span class="line">Status of node rabbit@6b16517eab27 ...</span><br><span class="line">[&#123;pid,12184&#125;,</span><br><span class="line"> &#123;running_applications,</span><br><span class="line">     [&#123;rabbitmq_management,&quot;RabbitMQ Management Console&quot;,&quot;3.6.6&quot;&#125;,</span><br><span class="line">      &#123;rabbitmq_web_dispatch,&quot;RabbitMQ Web Dispatcher&quot;,&quot;3.6.6&quot;&#125;,</span><br><span class="line">      &#123;webmachine,&quot;webmachine&quot;,&quot;1.10.3&quot;&#125;,</span><br><span class="line">      &#123;mochiweb,&quot;MochiMedia Web Server&quot;,&quot;2.13.1&quot;&#125;,</span><br><span class="line">      &#123;amqp_client,&quot;RabbitMQ AMQP Client&quot;,&quot;3.6.6&quot;&#125;,</span><br><span class="line">      &#123;rabbitmq_management_agent,&quot;RabbitMQ Management Agent&quot;,&quot;3.6.6&quot;&#125;,</span><br><span class="line">      &#123;rabbit,&quot;RabbitMQ&quot;,&quot;3.6.6&quot;&#125;,</span><br><span class="line">      ...</span><br><span class="line">      ...</span><br></pre></td></tr></table></figure>

<blockquote>
<p>So the systemctl can not run inside docker, right? thanks!</p>
</blockquote>
<ul>
<li><a href="https://github.com/docker/docker/issues/2296" target="_blank" rel="noopener">Running systemctl in container fails with &quot;Failed to get D-Bus connection&quot; · Issue #2296 · docker/docker · GitHub</a></li>
<li><a href="http://stackoverflow.com/questions/39169403/systemd-and-systemctl-within-ubuntu-docker-images" target="_blank" rel="noopener">systemd and systemctl within Ubuntu Docker images - Stack Overflow</a></li>
</ul>
<hr>
<h4 id="RabbitMQ-Web管理接口"><a href="#RabbitMQ-Web管理接口" class="headerlink" title="RabbitMQ Web管理接口"></a>RabbitMQ Web管理接口</h4><h5 id="启用rabbitmq-management"><a href="#启用rabbitmq-management" class="headerlink" title="启用rabbitmq-management"></a>启用rabbitmq-management</h5><p>启用rabbitmq-management插件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo rabbitmq-plugins enable rabbitmq_management</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo rabbitmq-plugins enable rabbitmq_management</span><br><span class="line">The following plugins have been enabled:</span><br><span class="line">  mochiweb</span><br><span class="line">  webmachine</span><br><span class="line">  rabbitmq_web_dispatch</span><br><span class="line">  amqp_client</span><br><span class="line">  rabbitmq_management_agent</span><br><span class="line">  rabbitmq_management</span><br><span class="line"></span><br><span class="line">Applying plugin configuration to rabbit@6b16517eab27... started 6 plugins.</span><br></pre></td></tr></table></figure>

<p>重启RabbitMQ:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo systemctl restart rabbitmq-server</span><br></pre></td></tr></table></figure>

<p>使用浏览器访问 <code>http://localhost:15672</code> ，使用默认的 <code>guest/guest</code> 用户登录。</p>
<hr>
<h5 id="使用guest账户远程访问"><a href="#使用guest账户远程访问" class="headerlink" title="使用guest账户远程访问"></a>使用guest账户远程访问</h5><p>注意：使用远程访问或在Ubuntu系统的Docker下使用所在服务器的地址访问时会报权限错误：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;error: &quot;not_authorised&quot;, reason: &quot;User can only log in via localhost&quot;&#125;</span><br></pre></td></tr></table></figure>

<p>这是因为 rabbitmq从3.3.0开始禁止使用 <code>guest/guest</code> 权限通过除 <code>localhost</code> 外的访问。</p>
<p>如果想使用 <code>guest/guest</code> 通过远程机器访问，需要在rabbitmq配置文件 <code>(/etc/rabbitmq/rabbitmq.config)</code> 中设置 <code>loopback_users为[]</code> 。</p>
<p><code>/etc/rabbitmq/rabbitmq.config</code> (不存在先创建) 文件完整内容如下（注意后面的半角句号）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[&#123;rabbit, [&#123;loopback_users, []&#125;]&#125;].</span><br></pre></td></tr></table></figure>

<p>操作步骤如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># ls &#x2F;etc&#x2F;rabbitmq&#x2F;</span><br><span class="line">enabled_plugins</span><br><span class="line"></span><br><span class="line">$ sudo vim &#x2F;etc&#x2F;rabbitmq&#x2F;rabbitmq.config</span><br><span class="line">    [&#123;rabbit, [&#123;loopback_users, []&#125;]&#125;].</span><br><span class="line"></span><br><span class="line">$ sudo service rabbitmq-server restart</span><br></pre></td></tr></table></figure>

<hr>
<h5 id="创建新账户"><a href="#创建新账户" class="headerlink" title="创建新账户"></a>创建新账户</h5><p>如果不想使用默认的 <code>guest</code> 账户，可以创建一个新的具有管理员权限的账户，如创建一个 <code>test/test</code> 账户操作如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rabbitmqctl add_user test test</span><br><span class="line">rabbitmqctl set_user_tags test administrator</span><br><span class="line">rabbitmqctl set_permissions -p &#x2F; test &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;</span><br></pre></td></tr></table></figure>

<hr>
<ul>
<li><a href="https://www.rabbitmq.com/access-control.html" target="_blank" rel="noopener">RabbitMQ - Access Control (Authentication, Authorisation) in RabbitMQ</a></li>
<li><a href="https://stackoverflow.com/questions/22850546/cant-access-rabbitmq-web-management-interface-after-fresh-install/22854222#22854222" target="_blank" rel="noopener">Can&#39;t access RabbitMQ web management interface after fresh install - Stack Overflow</a></li>
<li><a href="http://stackoverflow.com/questions/23669780/rabbitmq-3-3-1-can-not-login-with-guest-guest" target="_blank" rel="noopener">RabbitMQ 3.3.1 can not login with guest/guest - Stack Overflow</a></li>
<li><a href="http://www.cnblogs.com/lazyboy/p/3853371.html" target="_blank" rel="noopener">rabbitmq问题之HTTP access denied: user &#39;guest&#39; - User can only log in via localhost - 布雷泽 - 博客园</a></li>
</ul>
<hr>
<h4 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h4><ul>
<li><a href="http://idroot.net/linux/install-rabbitmq-ubuntu-16-04/" target="_blank" rel="noopener">How To Install RabbitMQ on Ubuntu 16.04 - idroot</a></li>
<li><a href="http://blog.topspeedsnail.com/archives/4750" target="_blank" rel="noopener">Ubuntu 16.04 安装 RabbitMQ</a></li>
</ul>
]]></content>
      <tags>
        <tag>RabbitMQ</tag>
        <tag>消息队列</tag>
      </tags>
  </entry>
  <entry>
    <title>Git使用技巧整理</title>
    <url>/2017/02/07/git-use-skills/</url>
    <content><![CDATA[<h4 id="一次添加多个文件"><a href="#一次添加多个文件" class="headerlink" title="一次添加多个文件"></a>一次添加多个文件</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git add .</span><br></pre></td></tr></table></figure>

<p>*<em>为什么用 <code>.</code> 不用 `</em>` **</p>
<p>In order to add the files that are not in the gitignore file,</p>
<blockquote>
<p>use <code>git add .</code> in the place of  <code>git add *</code></p>
</blockquote>
<p>This will stop confusing the *unix system since * means all ( including the ignored ones ) while . means the ones relative to the active action</p>
<hr>
<h4 id="强制添加文件"><a href="#强制添加文件" class="headerlink" title="强制添加文件"></a>强制添加文件</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git add -f aaa.exe</span><br></pre></td></tr></table></figure>

<p>一般在添加一个被忽略的文件时，会提示如下错误：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git add phantomjs.exe</span><br><span class="line">The following paths are ignored by one of your .gitignore files:</span><br><span class="line">phantomjs.exe</span><br><span class="line">Use -f if you really want to add them.</span><br></pre></td></tr></table></figure>

<p>遇到这种情况时候需要使用 <code>git add -f</code> 命令强制添加这个文件。</p>
<p>详见：<a href="http://m.blog.csdn.net/article/details?id=50906447" target="_blank" rel="noopener">git强制添加(add)文件</a></p>
<hr>
]]></content>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu16.04安装Docker及配置镜像加速器</title>
    <url>/2017/01/14/ubuntu-install-docker-and-configure-mirror-accelerator/</url>
    <content><![CDATA[<p>最近将虚拟机中的Ubuntu系统从14.04更新到了16.04.1版本，又要重新安装Docker服务，在安装的时候发现Docker的官方安装教程又有了更新，之前的安装方法已经过时。</p>
<h4 id="过时的安装方法"><a href="#过时的安装方法" class="headerlink" title="过时的安装方法"></a>过时的安装方法</h4><p>之前官网中提供的安装方法为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ curl -sSL https:&#x2F;&#x2F;get.docker.com&#x2F; | sudo sh</span><br></pre></td></tr></table></figure>

<p>现在如果再执行该命令，会直接报错。</p>
<h4 id="官方推荐安装方法"><a href="#官方推荐安装方法" class="headerlink" title="官方推荐安装方法"></a>官方推荐安装方法</h4><h5 id="查看系统内核"><a href="#查看系统内核" class="headerlink" title="查看系统内核"></a>查看系统内核</h5><p>Docker需要安装在Linux 64位系统下，内核版本在 3.10 以上。可以通过 <code>uname -r</code> 来查看内核信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ uname -r</span><br><span class="line">4.4.0-31-generic</span><br></pre></td></tr></table></figure>

<h5 id="更新源，安装CA证书"><a href="#更新源，安装CA证书" class="headerlink" title="更新源，安装CA证书"></a>更新源，安装CA证书</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get install apt-transport-https ca-certificates</span><br></pre></td></tr></table></figure>

<h5 id="导入-GPG-密钥"><a href="#导入-GPG-密钥" class="headerlink" title="导入 GPG 密钥"></a>导入 GPG 密钥</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo apt-key adv \</span><br><span class="line">               --keyserver hkp:&#x2F;&#x2F;ha.pool.sks-keyservers.net:80 \</span><br><span class="line">               --recv-keys 58118E89F3A912897C070ADBF76221572C52609D</span><br></pre></td></tr></table></figure>

<h5 id="添加docker源"><a href="#添加docker源" class="headerlink" title="添加docker源"></a>添加docker源</h5><p>根据当前系统版本，添加docker源命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ echo &quot;&lt;REPO&gt;&quot; | sudo tee &#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;docker.list</span><br></pre></td></tr></table></figure>

<p>只要将 <code>&lt;REPO&gt;</code> 替换成相应系统的源地址即可。</p>
<p>我这里当前系统Ubuntu16.04，源地址为：<code>deb https://apt.dockerproject.org/repo ubuntu-xenial main</code>，所以只需如下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ echo &quot;deb https:&#x2F;&#x2F;apt.dockerproject.org&#x2F;repo ubuntu-xenial main&quot; | sudo tee &#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;docker.list</span><br></pre></td></tr></table></figure>

<p>其他版本系统源地址如下：</p>
<table>
<thead>
<tr>
<th>Ubuntu version</th>
<th>Repository</th>
</tr>
</thead>
<tbody><tr>
<td>Precise 12.04 (LTS)</td>
<td>deb <a href="https://apt.dockerproject.org/repo" target="_blank" rel="noopener">https://apt.dockerproject.org/repo</a> ubuntu-precise main</td>
</tr>
<tr>
<td>Trusty 14.04 (LTS)</td>
<td>deb <a href="https://apt.dockerproject.org/repo" target="_blank" rel="noopener">https://apt.dockerproject.org/repo</a> ubuntu-trusty main</td>
</tr>
<tr>
<td>Wily 15.10</td>
<td>deb <a href="https://apt.dockerproject.org/repo" target="_blank" rel="noopener">https://apt.dockerproject.org/repo</a> ubuntu-wily main</td>
</tr>
<tr>
<td>Xenial 16.04 (LTS)</td>
<td>deb <a href="https://apt.dockerproject.org/repo" target="_blank" rel="noopener">https://apt.dockerproject.org/repo</a> ubuntu-xenial main</td>
</tr>
</tbody></table>
<h5 id="更新源列表"><a href="#更新源列表" class="headerlink" title="更新源列表"></a>更新源列表</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get update</span><br></pre></td></tr></table></figure>

<h5 id="验证-APT-能否正确获取"><a href="#验证-APT-能否正确获取" class="headerlink" title="验证 APT 能否正确获取"></a>验证 APT 能否正确获取</h5><p>执行如下命令会从docker官方仓库中列出所有docker的可安装版本：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ apt-cache policy docker-engine</span><br><span class="line">docker-engine:</span><br><span class="line">  Installed: null</span><br><span class="line">  Candidate: 1.12.6-0~ubuntu-xenial</span><br><span class="line">  Version table:</span><br><span class="line"> *** 1.12.6-0~ubuntu-xenial 500</span><br><span class="line">        500 https:&#x2F;&#x2F;apt.dockerproject.org&#x2F;repo ubuntu-xenial&#x2F;main amd64 Packages</span><br><span class="line">        100 &#x2F;var&#x2F;lib&#x2F;dpkg&#x2F;status</span><br><span class="line">     1.12.5-0~ubuntu-xenial 500</span><br><span class="line">        500 https:&#x2F;&#x2F;apt.dockerproject.org&#x2F;repo ubuntu-xenial&#x2F;main amd64 Packages</span><br><span class="line">     1.12.4-0~ubuntu-xenial 500</span><br><span class="line">        500 https:&#x2F;&#x2F;apt.dockerproject.org&#x2F;repo ubuntu-xenial&#x2F;main amd64 Packages</span><br><span class="line">     1.12.3-0~xenial 500</span><br><span class="line">        500 https:&#x2F;&#x2F;apt.dockerproject.org&#x2F;repo ubuntu-xenial&#x2F;main amd64 Packages</span><br><span class="line">     ...</span><br><span class="line">     ...</span><br></pre></td></tr></table></figure>

<h5 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h5><p>默认会安装推荐的版本 <code>Candidate</code> 项列出的，也是最新的版本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install -y docker-engine</span><br></pre></td></tr></table></figure>

<h5 id="启动docker服务"><a href="#启动docker服务" class="headerlink" title="启动docker服务"></a>启动docker服务</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo service docker start</span><br></pre></td></tr></table></figure>

<h5 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h5><p>在命令行下输入 <code>docker</code> ,如提示docker的 <code>[OPTIONS]</code> 说明，则表示docker服务已经安装成功了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ docker</span><br><span class="line">Usage: docker [OPTIONS] COMMAND [arg...]</span><br><span class="line">       docker [ --help | -v | --version ]</span><br><span class="line"></span><br><span class="line">A self-sufficient runtime for containers.</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line"></span><br><span class="line">  --config&#x3D;~&#x2F;.docker              Location of client config files</span><br><span class="line">  -D, --debug                     Enable debug mode</span><br><span class="line">  -H, --host&#x3D;[]                   Daemon socket(s) to connect to</span><br><span class="line">  -h, --help                      Print usage</span><br><span class="line">  -l, --log-level&#x3D;info            Set the logging level</span><br><span class="line">  --tls                           Use TLS; implied by --tlsverify</span><br><span class="line">  --tlscacert&#x3D;~&#x2F;.docker&#x2F;ca.pem    Trust certs signed only by this CA</span><br><span class="line">  --tlscert&#x3D;~&#x2F;.docker&#x2F;cert.pem    Path to TLS certificate file</span><br><span class="line">  --tlskey&#x3D;~&#x2F;.docker&#x2F;key.pem      Path to TLS key file</span><br><span class="line">  ...</span><br><span class="line">  ...</span><br></pre></td></tr></table></figure>
<hr>
<h4 id="将当前用户添加到docker的用户组"><a href="#将当前用户添加到docker的用户组" class="headerlink" title="将当前用户添加到docker的用户组"></a>将当前用户添加到docker的用户组</h4><p>Docker安装成功后，如果想查看docker的信息，执行 <code>docker info</code> 命令时可能会提示如下信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ docker info</span><br><span class="line">Cannot connect to the Docker daemon. Is the docker daemon running on this host?</span><br></pre></td></tr></table></figure>

<p>这是因为必需以管理员权限或使用 <code>sudo</code> 来运行命令才可以。为了以后执行命令时不用每次都必需添加 <code>sudo</code>，可以将当前用户加入到docker用户组中。</p>
<h5 id="创建-docker-分组"><a href="#创建-docker-分组" class="headerlink" title="创建 docker 分组"></a>创建 <code>docker</code> 分组</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo groupadd docker</span><br></pre></td></tr></table></figure>

<h5 id="将当前用户添加到组"><a href="#将当前用户添加到组" class="headerlink" title="将当前用户添加到组"></a>将当前用户添加到组</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo usermod -aG docker $USER</span><br></pre></td></tr></table></figure>

<p>注意：这里不用更改 <code>$USER</code> 这个参数，<code>$USER</code> 这个环境变量就是指当前用户名</p>
<h5 id="重启系统"><a href="#重启系统" class="headerlink" title="重启系统"></a>重启系统</h5><p>更改完成后，还需要重启系统才能看到效果。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo reboot</span><br></pre></td></tr></table></figure>

<h5 id="创建一个测试容器"><a href="#创建一个测试容器" class="headerlink" title="创建一个测试容器"></a>创建一个测试容器</h5><p>可通过如下命令来创建一个测试容器：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ docker run hello-world</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Hello from Docker.</span><br><span class="line">This message shows that your installation appears to be working correctly.</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="配置阿里云Docker镜像加速器"><a href="#配置阿里云Docker镜像加速器" class="headerlink" title="配置阿里云Docker镜像加速器"></a>配置阿里云Docker镜像加速器</h4><p>打开 <a href="https://dev.aliyun.com/" target="_blank" rel="noopener">开发者平台</a> – <code>管理中心</code> – <code>加速器</code> 。可以看到 “您的专属加速器地址” 即 <code>https://xxxxxxx.mirror.aliyuncs.com</code> 。 </p>
<p>注意：这里以 <code>Ubuntu 16.04</code> 系统为例，其他系统请到上述页面中查看相应操作命令。</p>
<h5 id="配置Docker加速器"><a href="#配置Docker加速器" class="headerlink" title="配置Docker加速器"></a>配置Docker加速器</h5><p>通过 <code>docker info</code> 命令可以知道上面安装好的Docker的版本为 <code>1.12.6</code> 。所以请通过修改daemon配置文件 <code>/etc/docker/daemon.json</code> (没有时新建该文件) 来使用加速器：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mkdir -p &#x2F;etc&#x2F;docker</span><br><span class="line"></span><br><span class="line">sudo tee &#x2F;etc&#x2F;docker&#x2F;daemon.json &lt;&lt;-&#39;EOF&#39;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https:&#x2F;&#x2F;xxxxxxx.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>

<h5 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h5><p>针对于Docker版本在1.10以下的情况，可以使用如下的配置方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mkdir -p &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;docker.service.d</span><br><span class="line"></span><br><span class="line">sudo tee &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;docker.service.d&#x2F;mirror.conf &lt;&lt;-&#39;EOF&#39;</span><br><span class="line">[Service]</span><br><span class="line">ExecStart&#x3D;&#x2F;usr&#x2F;bin&#x2F;docker daemon -H fd:&#x2F;&#x2F; --registry-mirror&#x3D;https:&#x2F;&#x2F;xxxxxxx.mirror.aliyuncs.com</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>

<p>但是该方法并不适用于1.12.0版本之后的Docker上。因为Docker的可执行文件名称从 <code>docker</code> 改成了 <code>dockerd</code>。如果使用了以上脚本，可能会报如下的错误：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo systemctl restart docker</span><br><span class="line">Job for docker.service failed because the control process exited with error code. See &quot;systemctl status docker.service&quot; and &quot;journalctl -xe&quot; for details.</span><br></pre></td></tr></table></figure>

<p>所以在配置加速器时一定要按照相应版本来设置。</p>
<p>还要注意一点：<strong>上文代码段中给出的镜像加速器地址中的 <code>xxxxxxx</code> 为阿里云在你注册账户后分配的指定地址名称，切记要修改为自己账户的给定地址。</strong></p>
<hr>
<h4 id="相关参考"><a href="#相关参考" class="headerlink" title="相关参考"></a>相关参考</h4><ul>
<li><a href="https://docs.docker.com/engine/installation/linux/ubuntulinux/" target="_blank" rel="noopener">Install Docker on Ubuntu - Docker</a></li>
<li><a href="https://www.digitalocean.com/community/tutorials/how-to-install-and-use-docker-on-ubuntu-16-04" target="_blank" rel="noopener">How To Install and Use Docker on Ubuntu 16.04 | DigitalOcean</a></li>
<li><a href="http://www.voidcn.com/blog/gsls200808/article/p-6323832.html" target="_blank" rel="noopener">ubuntu16.04安装docker - 程序园</a></li>
<li><a href="https://yq.aliyun.com/ask/43505" target="_blank" rel="noopener">Ubuntu 16.04安装docker加速器后无法启动docker-问答-云栖社区-阿里云</a></li>
</ul>
]]></content>
      <tags>
        <tag>Docker</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>在Flask中使用SQLAlchemy</title>
    <url>/2017/01/06/use-sqlalchemy-by-flask/</url>
    <content><![CDATA[<p>在Flask中使用SQLAlchemy操作数据库。</p>
<h4 id="安装-flask-sqlalchemy"><a href="#安装-flask-sqlalchemy" class="headerlink" title="安装 flask-sqlalchemy"></a>安装 flask-sqlalchemy</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ pip install flask</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ pip install flask-sqlalchemy</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h4><p>你所有模型的基类叫做 <code>db.Model</code> 。它存储在你必须创建的 <code>SQLAlchemy</code> 实例上。</p>
<p>在 Flask-sqlalchemy中，表名已自动设置好，除非自己重载它：eg: </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">__tablename__ &#x3D; &#39;students&#39; #指定表名</span><br></pre></td></tr></table></figure>

<hr>
<h5 id="Column类型"><a href="#Column类型" class="headerlink" title="Column类型"></a>Column类型</h5><table>
<thead>
<tr>
<th align="left">类型名</th>
<th align="left">Python 类型</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>Integer</code></td>
<td align="left">int</td>
<td align="left">整数</td>
</tr>
<tr>
<td align="left"><code>String(size)</code></td>
<td align="left">str</td>
<td align="left">有最大长度的字符串</td>
</tr>
<tr>
<td align="left"><code>Text</code></td>
<td align="left">str</td>
<td align="left">长 unicode 文本</td>
</tr>
<tr>
<td align="left"><code>Float</code></td>
<td align="left">float</td>
<td align="left">存储浮点值</td>
</tr>
<tr>
<td align="left"><code>Boolean</code></td>
<td align="left">bool</td>
<td align="left">存储布尔值</td>
</tr>
<tr>
<td align="left"><code>Date</code></td>
<td align="left">datetime.date</td>
<td align="left">日期</td>
</tr>
<tr>
<td align="left"><code>Time</code></td>
<td align="left">datetime.time</td>
<td align="left">时间</td>
</tr>
<tr>
<td align="left"><code>DateTime</code></td>
<td align="left">datetime.datetime</td>
<td align="left">日期和时间</td>
</tr>
<tr>
<td align="left"><code>PickleType</code></td>
<td align="left">任何python对象</td>
<td align="left">存储一个持久化 Python 对象</td>
</tr>
<tr>
<td align="left"><code>LargeBinary</code></td>
<td align="left">str</td>
<td align="left">存储任意大的二进制数据</td>
</tr>
</tbody></table>
<h5 id="常用字段"><a href="#常用字段" class="headerlink" title="常用字段"></a>常用字段</h5><table>
<thead>
<tr>
<th align="left">选项名</th>
<th align="left">说明</th>
<th align="left">示例</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>primary_key</code></td>
<td align="left">设置主键</td>
<td align="left"><code>primary_key=True</code></td>
</tr>
<tr>
<td align="left"><code>unique</code></td>
<td align="left">是否唯一</td>
<td align="left"><code>unique=True</code></td>
</tr>
<tr>
<td align="left"><code>index</code></td>
<td align="left">是否创建索引</td>
<td align="left"><code>index=True</code></td>
</tr>
<tr>
<td align="left"><code>nullable</code></td>
<td align="left">是否允许为空</td>
<td align="left"><code>nullable=True</code></td>
</tr>
<tr>
<td align="left"><code>default</code></td>
<td align="left">设置默认值</td>
<td align="left"><code>default=datetime.datetime.utcnow</code></td>
</tr>
</tbody></table>
<p>更详细的配置可参考 <a href="https://segmentfault.com/a/1190000002362175" target="_blank" rel="noopener">Flask Web Development —— 数据库（上） - young - SegmentFault</a></p>
<hr>
<h5 id="连接URI格式"><a href="#连接URI格式" class="headerlink" title="连接URI格式"></a>连接URI格式</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dialect+driver:&#x2F;&#x2F;username:password@host:port&#x2F;database</span><br></pre></td></tr></table></figure>

<ul>
<li>Mysql <code>mysql://scott:tiger@localhost/mydatabase</code></li>
<li>Postgres <code>postgresql://scott:tiger@localhost/mydatabase</code></li>
<li>SQLite <code>sqlite:////absolute/path/to/foo.db</code></li>
</ul>
<h5 id="Flask-SQLAlchemy-Sqlite连接路径问题"><a href="#Flask-SQLAlchemy-Sqlite连接路径问题" class="headerlink" title="Flask-SQLAlchemy Sqlite连接路径问题"></a>Flask-SQLAlchemy Sqlite连接路径问题</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sqlite:&#x2F;&#x2F;&#x2F;&#x2F;tmp&#x2F;test.db</span><br></pre></td></tr></table></figure>

<p>Sqlite连接字符串中的<code>/</code>斜杠说明：三斜杠为相对路径，四斜杠为绝对路径。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;sqlite:&#x2F;&#x2F;&#x2F;&#x2F;tmp&#x2F;test.db&#39;                #表示指向绝对路径在Ｔｍｐ目录的test.db文件</span><br><span class="line">&#39;sqlite:&#x2F;&#x2F;&#x2F;Data&#x2F;test.db&#39;                #表示指向相对路径在当前Py文件同目录的Data目录下test.db文件</span><br></pre></td></tr></table></figure>

<p><a href="https://my.oschina.net/zhangzhe/blog/415084" target="_blank" rel="noopener">Flask小记一：Flask-SQLAlchemy Sqlite连接路径问题 - 不折腾难受斯基</a></p>
<hr>
<h5 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h5><table>
<thead>
<tr>
<th align="left">过滤器</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>filter</code></td>
<td align="left">把过滤器添加到原查询上，返回一个新查询</td>
</tr>
<tr>
<td align="left"><code>filter_by</code></td>
<td align="left">把等值过滤器添加到原查询上，返回一个新查询</td>
</tr>
<tr>
<td align="left"><code>limit</code></td>
<td align="left">使用指定的值限制返回的结果数量，返回一个新查询</td>
</tr>
<tr>
<td align="left"><code>offset</code></td>
<td align="left">便宜原查询返回的结果， 返回一个新查询</td>
</tr>
<tr>
<td align="left"><code>order_by</code></td>
<td align="left">根据指定条件对原查询结果进行排序，返回一个新查询</td>
</tr>
<tr>
<td align="left"><code>group_by</code></td>
<td align="left">根据指定条件对原查询结构进行分组，返回一个新查询</td>
</tr>
</tbody></table>
<h5 id="执行器"><a href="#执行器" class="headerlink" title="执行器"></a>执行器</h5><table>
<thead>
<tr>
<th align="left">方法</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>all</code></td>
<td align="left">以列表形式返回查询的所有结果</td>
</tr>
<tr>
<td align="left"><code>first</code></td>
<td align="left">返回查询的第一个结果，如果没有结果，则返回 None</td>
</tr>
<tr>
<td align="left"><code>first_or_404</code></td>
<td align="left">返回查询的第一个结果，如果没有结果，则终止请求，返回 404 错误输出</td>
</tr>
<tr>
<td align="left"><code>get</code></td>
<td align="left">返回指定主键对应的行，如果没有对应的行，则返回 None</td>
</tr>
<tr>
<td align="left"><code>get_or_404</code></td>
<td align="left">返回指定主键对应的行，如果没找到指定的主键，则终止请求，返回 404 错误输出</td>
</tr>
<tr>
<td align="left"><code>count</code></td>
<td align="left">返回查询结果的数量</td>
</tr>
<tr>
<td align="left"><code>paginate</code></td>
<td align="left">返回一个 Paginate 对象，它包含指定范围内的结果</td>
</tr>
</tbody></table>
<hr>
<h4 id="简单示例"><a href="#简单示例" class="headerlink" title="简单示例"></a>简单示例</h4><h5 id="入门示例"><a href="#入门示例" class="headerlink" title="入门示例"></a>入门示例</h5><p>参考自官方入门教程示例代码 <a href="http://flask-sqlalchemy.pocoo.org/2.1/quickstart/" target="_blank" rel="noopener">Quickstart Flask-SQLAlchemy Documentation (2.1)</a></p>
<p><strong>flsksql.py</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># coding:utf-8</span><br><span class="line"></span><br><span class="line">from flask import Flask</span><br><span class="line">from flask_sqlalchemy import SQLAlchemy</span><br><span class="line"></span><br><span class="line">app&#x3D;Flask(__name__)</span><br><span class="line">app.config[&#39;SQLALCHEMY_DATABASE_URI&#39;]&#x3D;&#39;sqlite:&#x2F;&#x2F;&#x2F;test.db&#39;  # 连接当前项目同目录下的test.db数据库文件</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.config[&#39;SQLALCHEMY_TRACK_MODIFICATIONS&#39;]&#x3D;True</span><br><span class="line"></span><br><span class="line">db&#x3D;SQLAlchemy(app)</span><br><span class="line"></span><br><span class="line">class User(db.Model):</span><br><span class="line">	&quot;&quot;&quot;docstring for User&quot;&quot;&quot;</span><br><span class="line">	__tablename__&#x3D;&#39;users&#39;</span><br><span class="line">	id&#x3D;db.Column(db.Integer,primary_key&#x3D;True)</span><br><span class="line">	username&#x3D;db.Column(db.String(80),unique&#x3D;True)</span><br><span class="line">	email&#x3D;db.Column(db.String(64),unique&#x3D;True)</span><br><span class="line"></span><br><span class="line">	def __init__(self, username,email):</span><br><span class="line">		self.username&#x3D;username</span><br><span class="line">		self.email&#x3D;email</span><br><span class="line"></span><br><span class="line">	def __repr__(self):</span><br><span class="line">		return &#39;&lt;User %r&gt;&#39; % self.username</span><br></pre></td></tr></table></figure>

<p><strong>app.py</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># coding:utf-8</span><br><span class="line"></span><br><span class="line">from flask import Flask</span><br><span class="line">from flsksql import db</span><br><span class="line">from flsksql import User</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">	</span><br><span class="line">	# 初始化数据库</span><br><span class="line">	# db.create_all()</span><br><span class="line">	</span><br><span class="line">	# 新增</span><br><span class="line">	# user1&#x3D;User(&#39;abc&#39;,&#39;abc@124.com&#39;)</span><br><span class="line">	# user2&#x3D;User(&#39;def&#39;,&#39;def@129.com&#39;)</span><br><span class="line">	# db.session.add(user1)</span><br><span class="line">	# db.session.add(user2)</span><br><span class="line">	# 使用commit提交更改</span><br><span class="line">	# db.session.commit()</span><br><span class="line"></span><br><span class="line">	# 查询所有数据信息</span><br><span class="line">	# users&#x3D;User.query.all()</span><br><span class="line">	# print(users)</span><br><span class="line"></span><br><span class="line">	# 条件查询</span><br><span class="line">	# admin&#x3D;User.query.filter_by(username&#x3D;&#39;abc&#39;).first()</span><br><span class="line">	# print(admin)</span><br><span class="line"></span><br><span class="line">	# 模糊查询 </span><br><span class="line">	# user2_query&#x3D;User.query.filter(User.username.endswith(&#39;f&#39;)).first()</span><br><span class="line">	# print(user2_query)</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	# 删除</span><br><span class="line">	# u3&#x3D;User.query.first()</span><br><span class="line">	# print(u3.username)</span><br><span class="line">	# db.session.delete(u3)</span><br><span class="line">	# db.session.commit()</span><br><span class="line"></span><br><span class="line">	# 更改</span><br><span class="line">	# u4&#x3D;User.query.first()</span><br><span class="line">	# u4.username&#x3D;u&#39;专升本&#39;  # 中文必须为unicode类型，而不是str类型</span><br><span class="line">	# db.session.commit()</span><br></pre></td></tr></table></figure>

<hr>
<h5 id="通过上下文的方式-init-app"><a href="#通过上下文的方式-init-app" class="headerlink" title="通过上下文的方式-init_app()"></a>通过上下文的方式-init_app()</h5><h6 id="database-py–数据操作方法"><a href="#database-py–数据操作方法" class="headerlink" title="database.py–数据操作方法"></a>database.py–数据操作方法</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># coding:utf-8</span><br><span class="line"></span><br><span class="line">from flask import Flask</span><br><span class="line">from flask_sqlalchemy import SQLAlchemy</span><br><span class="line"></span><br><span class="line">db&#x3D;SQLAlchemy()</span><br><span class="line"></span><br><span class="line">def create_app(config_name&#x3D;None):</span><br><span class="line">	app&#x3D;Flask(__name__)</span><br><span class="line"></span><br><span class="line">	# 在此处加载配置文件</span><br><span class="line">	if config_name is not None:</span><br><span class="line">		# app.config.from_object()  # 默认的config.py</span><br><span class="line">		app.config.from_pyfile(config_name) # 通过配置文件名称加载配置文件</span><br><span class="line"></span><br><span class="line">	db.init_app(app)</span><br><span class="line"></span><br><span class="line">	# 在此处加载蓝图设置</span><br><span class="line"></span><br><span class="line">	with app.app_context():</span><br><span class="line">		# 添加数据对象的引用</span><br><span class="line">		from models import *</span><br><span class="line">		# 初始化数据库</span><br><span class="line">		db.create_all()</span><br><span class="line"></span><br><span class="line">	return app</span><br></pre></td></tr></table></figure>

<h6 id="models-py–Model实体"><a href="#models-py–Model实体" class="headerlink" title="models.py–Model实体"></a>models.py–Model实体</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># coding:utf-8</span><br><span class="line"></span><br><span class="line">from database import db</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class User(db.Model):</span><br><span class="line">	&quot;&quot;&quot;docstring for User&quot;&quot;&quot;</span><br><span class="line">	__tablename__&#x3D;&#39;users&#39;</span><br><span class="line">	id&#x3D;db.Column(db.Integer,primary_key&#x3D;True)</span><br><span class="line">	username&#x3D;db.Column(db.String(80))</span><br><span class="line">	email&#x3D;db.Column(db.String(64))</span><br><span class="line"></span><br><span class="line">	def __init__(self, username,email):</span><br><span class="line">		self.username&#x3D;username</span><br><span class="line">		self.email&#x3D;email</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Address(db.Model):</span><br><span class="line">	&quot;&quot;&quot;docstring for Address&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">	id&#x3D;db.Column(db.Integer,primary_key&#x3D;True)</span><br><span class="line">	name&#x3D;db.Column(db.String(32))</span><br><span class="line">	def __init__(self, name):</span><br><span class="line">		self.name&#x3D;name</span><br></pre></td></tr></table></figure>

<h6 id="config-py–sql配置文件"><a href="#config-py–sql配置文件" class="headerlink" title="config.py–sql配置文件"></a>config.py–sql配置文件</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DEBUG&#x3D;True</span><br><span class="line">SQLALCHEMY_DATABASE_URI&#x3D;&#39;sqlite:&#x2F;&#x2F;&#x2F;testabc.db&#39;</span><br><span class="line">SQLALCHEMY_TRACK_MODIFICATIONS&#x3D;True</span><br></pre></td></tr></table></figure>

<h6 id="app-py–项目"><a href="#app-py–项目" class="headerlink" title="app.py–项目"></a>app.py–项目</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># coding:utf-8</span><br><span class="line"></span><br><span class="line">from flask import Flask</span><br><span class="line">from database import db</span><br><span class="line">from database import create_app</span><br><span class="line">from models import User,Address</span><br><span class="line"></span><br><span class="line">app&#x3D;create_app(&#39;config.py&#39;)</span><br><span class="line"></span><br><span class="line">@app.route(&#39;&#x2F;&#39;)</span><br><span class="line">def index():</span><br><span class="line">	# user1&#x3D;User(&#39;aaa&#39;,&#39;aaa@124.com&#39;)</span><br><span class="line">	# user2&#x3D;User(u&#39;马云&#39;,&#39;mayun@111.com&#39;)</span><br><span class="line">	add1&#x3D;Address(&#39;beijing motuoluola&#39;)</span><br><span class="line">	# db.session.add(user1)</span><br><span class="line">	db.session.add(add1)</span><br><span class="line">	db.session.commit()</span><br><span class="line">	return &quot;create complate&quot;</span><br><span class="line"></span><br><span class="line">@app.route(&#39;&#x2F;show&#39;)</span><br><span class="line">def show():</span><br><span class="line">	u&#x3D;User.query.filter(User.email.startswith(&#39;m&#39;)).first()</span><br><span class="line">	return u.username</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">	app.run()</span><br></pre></td></tr></table></figure>

<h6 id="项目目录"><a href="#项目目录" class="headerlink" title="项目目录"></a>项目目录</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flaskdemo</span><br><span class="line">	app.py</span><br><span class="line">	database.py</span><br><span class="line">	models.py</span><br><span class="line">	config.py</span><br><span class="line">	testabc.db</span><br></pre></td></tr></table></figure>

<h6 id="init-app-相关参考"><a href="#init-app-相关参考" class="headerlink" title="init_app() 相关参考"></a>init_app() 相关参考</h6><ul>
<li><a href="http://blog.csdn.net/yannanxiu/article/details/53426359" target="_blank" rel="noopener">【Flask】Flask和SQLAlchemy：init_app - 阿秀的学习笔记        - 博客频道 - CSDN.NET</a></li>
<li><a href="http://piotr.banaszkiewicz.org/blog/2012/06/29/flask-sqlalchemy-init_app/" target="_blank" rel="noopener">Flask and SQLAlchemy: init_app &middot; Blog</a></li>
<li><a href="http://flask-sqlalchemy.pocoo.org/2.1/contexts/" target="_blank" rel="noopener">Introduction into Contexts &#8212; Flask-SQLAlchemy Documentation (2.1)</a></li>
</ul>
<hr>
<h4 id="一对多、多对多关系"><a href="#一对多、多对多关系" class="headerlink" title="一对多、多对多关系"></a>一对多、多对多关系</h4><h5 id="一对多"><a href="#一对多" class="headerlink" title="一对多"></a>一对多</h5><p>待完善。</p>
<h5 id="多对多"><a href="#多对多" class="headerlink" title="多对多"></a>多对多</h5><p>待完善。</p>
<hr>
<h4 id="文中所用各类库版本"><a href="#文中所用各类库版本" class="headerlink" title="文中所用各类库版本"></a>文中所用各类库版本</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Flask&#x3D;&#x3D;0.12</span><br><span class="line">Flask-SQLAlchemy&#x3D;&#x3D;2.1</span><br><span class="line">Jinja2&#x3D;&#x3D;2.8.1</span><br><span class="line">SQLAlchemy&#x3D;&#x3D;1.1.4</span><br></pre></td></tr></table></figure>

<h4 id="相关参考"><a href="#相关参考" class="headerlink" title="相关参考"></a>相关参考</h4><ul>
<li><a href="http://docs.jinkan.org/docs/flask-sqlalchemy/index.html" target="_blank" rel="noopener">Flask-SQLAlchemy &mdash; Flask-SQLAlchemy 0.16 documentation–中文版</a></li>
<li><a href="http://flask-sqlalchemy.pocoo.org/2.1/" target="_blank" rel="noopener">Flask-SQLAlchemy &mdash; Flask-SQLAlchemy Documentation (2.1)–英文版</a> （这两个文档比对着参考，0.16版中有些方法已经过时了，代码按照2.1的来，中文释义参考0.16版的）</li>
<li><a href="http://dormousehole.readthedocs.io/en/latest/patterns/sqlalchemy.html" target="_blank" rel="noopener">在 Flask 中使用 SQLAlchemy &mdash; Flask 0.10 documentation</a></li>
<li><a href="http://www.jianshu.com/p/a52cf3907f29" target="_blank" rel="noopener">flask-sqlalchemy 简单笔记 - 简书</a></li>
<li><a href="http://www.cnblogs.com/agmcs/p/4445583.html" target="_blank" rel="noopener">Flask学习记录之Flask-SQLAlchemy - agmcs - 博客园</a></li>
<li><a href="https://segmentfault.com/a/1190000004618621" target="_blank" rel="noopener">Flask-SQLAlchemy 学习总结 - python 学习 - SegmentFault</a></li>
<li><a href="https://segmentfault.com/a/1190000002362175" target="_blank" rel="noopener">Flask Web Development —— 数据库（上） - young - SegmentFault</a> <strong>这个配置说明比较详细</strong></li>
<li><a href="http://www.cnblogs.com/cjnmy36723/p/5201551.html" target="_blank" rel="noopener">使用 Flask 框架写用户登录功能的Demo时碰到的各种坑（一）——创建应用 - cjnmy36723 - 博客园</a></li>
<li><a href="https://wizardforcel.gitbooks.io/flask-extension-docs/content/flask-sqlalchemy.html" target="_blank" rel="noopener">Flask-SQLAlchemy–GitBook</a></li>
</ul>
]]></content>
      <tags>
        <tag>Flask</tag>
        <tag>SQLAlchemy</tag>
      </tags>
  </entry>
  <entry>
    <title>Python下操作SQLAlchemy</title>
    <url>/2017/01/06/use-sqlalchemy-by-python/</url>
    <content><![CDATA[<p>Python中通过SQLAlchemy操作数据库。</p>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>通过pip安装SQLAlchemy</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ pip install sqlalchemy</span><br></pre></td></tr></table></figure>

<hr>
<h5 id="初始化数据库连接"><a href="#初始化数据库连接" class="headerlink" title="初始化数据库连接"></a>初始化数据库连接</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 初始化数据库连接</span><br><span class="line">engine&#x3D;create_engine(&#39;sqlite:&#x2F;&#x2F;&#x2F;.&#x2F;cnblogblog.db&#39;,echo&#x3D;True)</span><br></pre></td></tr></table></figure>

<p>其中，<code>echo=True</code> 表示 是否将执行过程中的sql语句进行输出显示</p>
<h5 id="常用数据库连接写法"><a href="#常用数据库连接写法" class="headerlink" title="常用数据库连接写法"></a>常用数据库连接写法</h5><h6 id="整理常用-直接拷贝"><a href="#整理常用-直接拷贝" class="headerlink" title="整理常用-直接拷贝"></a>整理常用-直接拷贝</h6><ol>
<li>sqlite内存：<code>engine = create_engine(&#39;sqlite:///:memory:&#39;, echo=True)</code></li>
<li>sqlite文件: <code>engine=create_engine(&#39;sqlite:///./cnblogblog.db&#39;,echo=True)</code></li>
<li>mysql+pymysql：<code>engine = create_engine(&quot;mysql+pymysql://username:password@hostname:port/dbname&quot;,echo=True)</code></li>
<li>mssql+pymssql: <code>engine = create_engine(&#39;mssql+pymssql://username:password@hostname:port/dbname&#39;,echo=True)</code></li>
</ol>
<hr>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; from sqlalchemy import create_engine</span><br></pre></td></tr></table></figure>

<p><code>create_engine()</code> 用来初始化数据库连接。SQLAlchemy用一个字符串表示连接信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;数据库类型+数据库驱动名称:&#x2F;&#x2F;用户名:口令@机器地址:端口号&#x2F;数据库名&#39;</span><br></pre></td></tr></table></figure>


<ol>
<li>sqlite 内存 示例 <code>engine = create_engine(&#39;sqlite:///:memory:&#39;, echo=True)</code></li>
<li>sqlite 文件 示例 <code>engine=create_engine(&#39;sqlite:///./cnblogblog.db&#39;,echo=True)</code></li>
<li>mysql通用 <code>engine = create_engine(&#39;mysql+mysqlconnector://root:password@localhost:3306/test&#39;)</code></li>
<li>mysql+pymysql 示例 <code>engine = create_engine(&quot;mysql+pymysql://username:password@hostname/dbname&quot;, encoding=&quot;utf8&quot;, echo=True)</code></li>
<li>postgresql 示例 <code>engine = create_engine(&#39;postgresql://scott:tiger@localhost:5432/mydatabase&#39;)</code></li>
</ol>
<p><strong>PostgreSQL</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># default</span><br><span class="line">engine &#x3D; create_engine(&#39;postgresql:&#x2F;&#x2F;scott:tiger@localhost&#x2F;mydatabase&#39;)</span><br><span class="line"></span><br><span class="line"># psycopg2</span><br><span class="line">engine &#x3D; create_engine(&#39;postgresql+psycopg2:&#x2F;&#x2F;scott:tiger@localhost&#x2F;mydatabase&#39;)</span><br><span class="line"></span><br><span class="line"># pg8000</span><br><span class="line">engine &#x3D; create_engine(&#39;postgresql+pg8000:&#x2F;&#x2F;scott:tiger@localhost&#x2F;mydatabase&#39;)</span><br></pre></td></tr></table></figure>

<p><strong>MySQL</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># default</span><br><span class="line">engine &#x3D; create_engine(&#39;mysql:&#x2F;&#x2F;scott:tiger@localhost&#x2F;foo&#39;)</span><br><span class="line"></span><br><span class="line"># mysql-python</span><br><span class="line">engine &#x3D; create_engine(&#39;mysql+mysqldb:&#x2F;&#x2F;scott:tiger@localhost&#x2F;foo&#39;)</span><br><span class="line"></span><br><span class="line"># MySQL-connector-python</span><br><span class="line">engine &#x3D; create_engine(&#39;mysql+mysqlconnector:&#x2F;&#x2F;scott:tiger@localhost&#x2F;foo&#39;)</span><br><span class="line"></span><br><span class="line"># OurSQL</span><br><span class="line">engine &#x3D; create_engine(&#39;mysql+oursql:&#x2F;&#x2F;scott:tiger@localhost&#x2F;foo&#39;)</span><br></pre></td></tr></table></figure>

<p><strong>Oracle</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">engine &#x3D; create_engine(&#39;oracle:&#x2F;&#x2F;scott:tiger@127.0.0.1:1521&#x2F;sidname&#39;)</span><br><span class="line"></span><br><span class="line">engine &#x3D; create_engine(&#39;oracle+cx_oracle:&#x2F;&#x2F;scott:tiger@tnsname&#39;)</span><br></pre></td></tr></table></figure>

<p><strong>MS SQL</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># pyodbc</span><br><span class="line">engine &#x3D; create_engine(&#39;mssql+pyodbc:&#x2F;&#x2F;scott:tiger@mydsn&#39;)</span><br><span class="line"></span><br><span class="line"># pymssql</span><br><span class="line">engine &#x3D; create_engine(&#39;mssql+pymssql:&#x2F;&#x2F;scott:tiger@hostname:port&#x2F;dbname&#39;)</span><br></pre></td></tr></table></figure>

<p><strong>SQLite</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># sqlite:&#x2F;&#x2F;&lt;nohostname&gt;&#x2F;&lt;path&gt;</span><br><span class="line"># where &lt;path&gt; is relative:</span><br><span class="line">engine &#x3D; create_engine(&#39;sqlite:&#x2F;&#x2F;&#x2F;foo.db&#39;)</span><br><span class="line"></span><br><span class="line">#Unix&#x2F;Mac - 4 initial slashes in total</span><br><span class="line">engine &#x3D; create_engine(&#39;sqlite:&#x2F;&#x2F;&#x2F;&#x2F;absolute&#x2F;path&#x2F;to&#x2F;foo.db&#39;)</span><br><span class="line">#Windows</span><br><span class="line">engine &#x3D; create_engine(&#39;sqlite:&#x2F;&#x2F;&#x2F;C:\\path\\to\\foo.db&#39;)</span><br><span class="line">#Windows alternative using raw string</span><br><span class="line">engine &#x3D; create_engine(r&#39;sqlite:&#x2F;&#x2F;&#x2F;C:\path\to\foo.db&#39;)</span><br><span class="line"></span><br><span class="line">#memory</span><br><span class="line">engine &#x3D; create_engine(&#39;sqlite:&#x2F;&#x2F;&#39;)</span><br></pre></td></tr></table></figure>

<p>详见官网文档：<a href="http://docs.sqlalchemy.org/en/latest/core/engines.html" target="_blank" rel="noopener">Engine Configuration</a></p>
<hr>
<h5 id="如何设置初始化表结构时字段的-主键-自增-等属性"><a href="#如何设置初始化表结构时字段的-主键-自增-等属性" class="headerlink" title="如何设置初始化表结构时字段的 主键 自增 等属性"></a>如何设置初始化表结构时字段的 <code>主键</code> <code>自增</code> 等属性</h5><p>sqlite中如果设置主键自增，还需要添加 <code>__table_args__</code> 参数，示例如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Person(Base):</span><br><span class="line">    __tablename__ &#x3D; &quot;person&quot;</span><br><span class="line">    __table_args__ &#x3D; &#123;&#39;sqlite_autoincrement&#39;: True&#125;</span><br><span class="line"></span><br><span class="line">	id&#x3D;Column(Integer,primary_key&#x3D;True,autoincrement&#x3D;True)</span><br></pre></td></tr></table></figure>

<ul>
<li><a href="http://stackoverflow.com/questions/4567574/pylons-sqlite-and-autoincrementing-fields" target="_blank" rel="noopener">sqlalchemy - Pylons, SQlite and autoincrementing fields - Stack Overflow</a></li>
</ul>
<h5 id="设置表结构的-不可空-默认值-唯一-等属性"><a href="#设置表结构的-不可空-默认值-唯一-等属性" class="headerlink" title="设置表结构的 不可空  默认值  唯一 等属性"></a>设置表结构的 <code>不可空</code>  <code>默认值</code>  <code>唯一</code> 等属性</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 定义User对象</span><br><span class="line">class User(Base):</span><br><span class="line">	&quot;&quot;&quot;Users table&quot;&quot;&quot;</span><br><span class="line">	# 表的名字</span><br><span class="line">	__tablename__&#x3D;&#39;users&#39;</span><br><span class="line">	__table_args__&#x3D;&#123;&#39;sqlite_autoincrement&#39;: True&#125;</span><br><span class="line">	# 表结构</span><br><span class="line">	id&#x3D;Column(Integer,primary_key&#x3D;True,autoincrement&#x3D;True)</span><br><span class="line">	name&#x3D;Column(String(32),nullable&#x3D;False)</span><br><span class="line">	age&#x3D;Column(Integer,default&#x3D;0)</span><br><span class="line">	password&#x3D;Column(String(64),unique&#x3D;True)</span><br></pre></td></tr></table></figure>

<h5 id="插入中文数据"><a href="#插入中文数据" class="headerlink" title="插入中文数据"></a>插入中文数据</h5><p>直接插入中文数据，可能会报如下错误信息：</p>
<blockquote>
<p>sqlalchemy.exc.ProgrammingError: (sqlite3.ProgrammingError) You must not use 8-bit bytestrings unless you use a text_factory that can interpret 8-bit bytestrings (like text_factory = str). It is highly recommended that you instead just switch your application to Unicode strings.</p>
</blockquote>
<p>相应的解决方法是：将 <code>str</code> 类型的中文转成 <code>unicode</code> 类型再插入即可。</p>
<p>示例代码如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 添加一条数据</span><br><span class="line">def addUserForZhCn():</span><br><span class="line">	session&#x3D;DBSession()</span><br><span class="line">	new_user&#x3D;User(name&#x3D;u&#39;关羽2&#39;,password&#x3D;&#39;12322233&#39;)</span><br><span class="line">	session.add(new_user)</span><br><span class="line">	session.commit()</span><br><span class="line">	session.close()</span><br></pre></td></tr></table></figure>

<p>参考自：</p>
<blockquote>
<p>Python 官方文档中不建议使用这种方式：use of sys.setdefaultencoding() has always been discouraged，在文件头写上 # coding: utf-8 之类的注释并且在 Unicode 字符串前加上 <code>u</code> 就可以了。</p>
</blockquote>
<p><a href="http://python-china.org/t/1148" target="_blank" rel="noopener">Flask Sqlalchemy中文模糊搜索错误</a></p>
<hr>
<h5 id="Mysql-指定表的引擎和编码格式"><a href="#Mysql-指定表的引擎和编码格式" class="headerlink" title="Mysql 指定表的引擎和编码格式"></a>Mysql 指定表的引擎和编码格式</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from sqlalchemy import Column, Integer, String</span><br><span class="line"></span><br><span class="line">class User(BaseModel):</span><br><span class="line">	__tablename__&#x3D;&#39;users&#39;</span><br><span class="line">	__table_args__&#x3D;&#123;</span><br><span class="line">		&quot;mysql_engine&quot;:&quot;InnoDB&quot;,   # 表的引擎</span><br><span class="line">		&quot;mysql_charset&quot;:&quot;utf8&quot;   # 表的编码格式</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	id&#x3D;Column(&quot;id&quot;,Integer,primary_key&#x3D;True,autoincrement&#x3D;True)</span><br><span class="line">	name&#x3D;Column(&quot;name&quot;,String(50),nullable&#x3D;False)</span><br><span class="line">	age&#x3D;Column(&quot;age&quot;,Integer,default&#x3D;0)</span><br></pre></td></tr></table></figure>

<hr>
<h5 id="如果记录存在则修改，不存在则添加"><a href="#如果记录存在则修改，不存在则添加" class="headerlink" title="如果记录存在则修改，不存在则添加"></a>如果记录存在则修改，不存在则添加</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">session.merge()</span><br></pre></td></tr></table></figure>

<h5 id="模型的属性名称和表的字段名称不一致"><a href="#模型的属性名称和表的字段名称不一致" class="headerlink" title="模型的属性名称和表的字段名称不一致"></a>模型的属性名称和表的字段名称不一致</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">id&#x3D;Column(&quot;id&quot;,Integer,primary_key&#x3D;True,autoincrement&#x3D;True)</span><br><span class="line">name&#x3D;Column(&quot;name&quot;,String(50),nullable&#x3D;False)</span><br></pre></td></tr></table></figure>

<h5 id="增删改-查询"><a href="#增删改-查询" class="headerlink" title="增删改 查询"></a>增删改 查询</h5><p>增删改需要 <code>commit</code> 操作 :</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">session&#x3D;DBSession()</span><br><span class="line">duser&#x3D;session.query(User).filter(User.id&#x3D;&#x3D;2).delete()</span><br><span class="line">session.commit()</span><br><span class="line">session.close()</span><br></pre></td></tr></table></figure>

<p>查询不需要 <code>commit</code> 操作: </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">session&#x3D;DBSession()</span><br><span class="line">quser&#x3D;session.query(User).filter(User.id&#x3D;&#x3D;4).one()</span><br><span class="line">print(&#39;name:&#39;,quser.name)</span><br><span class="line">session.close()</span><br></pre></td></tr></table></figure>

<hr>
<h5 id="first-和-one-的区别"><a href="#first-和-one-的区别" class="headerlink" title="first() 和 one() 的区别"></a>first() 和 one() 的区别</h5><p>query.first()：返回第一个元素<br>query.one()有且只有一个元素时才正确返回</p>
<p>first()方法限制并仅作为标量返回结果集的第一条记录</p>
<p>one()方法，完整的提取所有的记录行，并且如果没有明确的一条记录行(没有找到这条记录)或者结果中存在多条记录行，将会引发错误异常NoResultFound或者MultipleResultsFound。</p>
<p>当没有数据行返回时，使用 <code>one()</code> 方法会报错，可以使用 <code>one_or_none()</code> 方法来代替，当没有数据时，会返回 <code>None</code> 而不是异常。</p>
<hr>
<h5 id="执行sql语句"><a href="#执行sql语句" class="headerlink" title="执行sql语句"></a>执行sql语句</h5><p>绑定参数也可以用基于字符串的SQL指派，使用冒号来标记替代参数，然后再使用params()方法指定相应的值。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">session.query(User).filter(&quot;id&lt;:value and name&#x3D;:name&quot;).\</span><br><span class="line">params(value&#x3D;224, name&#x3D;&#39;fred&#39;).order_by(User.id).one()</span><br></pre></td></tr></table></figure>

<p><strong>execute() 方法</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">s&#x3D;DBSession()</span><br><span class="line"># 不能用 &#96;?&#96; 的方式来传递参数 要用 &#96;:param&#96; 的形式来指定参数</span><br><span class="line"># s.execute(&#39;INSERT INTO users (name, age, password) VALUES (?, ?, ?)&#39;,(&#39;bigpang&#39;,2,&#39;1122121&#39;))  </span><br><span class="line"># 这样执行报错 </span><br><span class="line"></span><br><span class="line"># s.execute(&#39;INSERT INTO users (name, age, password) VALUES (:aa, :bb, :cc)&#39;,(&#123;&#39;aa&#39;:&#39;bigpang2&#39;,&#39;bb&#39;:22,&#39;cc&#39;:&#39;998&#39;&#125;))</span><br><span class="line"># s.commit()</span><br><span class="line"># 这样执行成功</span><br><span class="line"></span><br><span class="line">res&#x3D;s.execute(&#39;select * from users where age&#x3D;:aaa&#39;,&#123;&#39;aaa&#39;:4&#125;)</span><br><span class="line"># print(res[&#39;name&#39;])  # 错误</span><br><span class="line"># print(res.name)    # 错误</span><br><span class="line"># print(type(res))   # 错误</span><br><span class="line">for r in res:</span><br><span class="line">	print(r[&#39;name&#39;])</span><br><span class="line">	</span><br><span class="line">s.close()</span><br></pre></td></tr></table></figure>

<p>可参考：<a href="http://stackoverflow.com/questions/17972020/how-to-execute-raw-sql-in-sqlalchemy-flask-app" target="_blank" rel="noopener">python - How to execute raw SQL in SQLAlchemy-flask app - Stack Overflow</a></p>
<hr>
<h5 id="执行sql语句-高级"><a href="#执行sql语句-高级" class="headerlink" title="执行sql语句 高级"></a>执行sql语句 高级</h5><ul>
<li>执行sql语句，可以使用传统的 <code>connection</code> 方式，也可以使用 <code>session</code> 方式</li>
<li>sqlalchemy下的传统connection方式，执行sql语句时不需要 <code>cursor</code> 光标，执行增删改直接生效，执行sql语句不需要 <code>commit</code> 操作。</li>
<li>sqlalchemy下的传统connection方式，参数形式与传统方式相同，使用 <code>?</code> 占位，元祖形式传值</li>
<li>sqlalchemy下的session方式，执行增删改需要 <code>commit</code> 操作。</li>
<li>sqlalchemy下的session方式，参数形式为 dict, 在sql语句中使用 <code>:key</code> 占位，dict形式传值</li>
</ul>
<hr>
<h4 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># **传统 connection方式**</span><br><span class="line"># 创建一个connection对象，使用方法与调用python自带的sqlite使用方式类似</span><br><span class="line"># 使用with 来创建 conn，不需要显示执行关闭连接</span><br><span class="line"># with engine.connect() as conn:</span><br><span class="line"># 	res&#x3D;conn.execute(&#39;select * from users&#39;)</span><br><span class="line"># 	data&#x3D;res.fetchone()</span><br><span class="line"># 	print(&#39;user is %s&#39; %data[1])</span><br><span class="line"></span><br><span class="line"># 与python自带的sqlite不同，这里不需要 cursor 光标，执行sql语句不需要commit。如果是增删改，则直接生效，也不需要commit.</span><br><span class="line"></span><br><span class="line"># **传统 connection 事务**</span><br><span class="line">with engine.connect() as conn:</span><br><span class="line">	trans&#x3D;conn.begin()</span><br><span class="line">	try:</span><br><span class="line">		r1&#x3D;conn.execute(&quot;select * from users&quot;)</span><br><span class="line">		print(r1.fetchone()[1])</span><br><span class="line">		r2&#x3D;conn.execute(&quot;insert into users (name,age,password) values (?,?,?)&quot;,(&#39;tang&#39;,5,&#39;133444&#39;))</span><br><span class="line">		trans.commit()</span><br><span class="line">	except:</span><br><span class="line">		trans.rollback()</span><br><span class="line">		raise</span><br><span class="line"></span><br><span class="line"># **session**</span><br><span class="line">session&#x3D;DBSession()</span><br><span class="line"></span><br><span class="line">session.execute(&#39;select * from users&#39;)</span><br><span class="line">session.execute(&#39;insert into users (name,age,password) values (:name,:age,:password)&#39;,&#123;&quot;name&quot;:&#39;dayuzhishui&#39;,&#39;age&#39;:6,&#39;password&#39;:&#39;887&#39;&#125;)</span><br><span class="line"># 注意参数使用dict，并在sql语句中使用:key占位</span><br><span class="line"></span><br><span class="line"># 如果是增删改，需要 commit</span><br><span class="line">session.commit()</span><br><span class="line"># 用完记得关闭，也可以用 with</span><br><span class="line">session.close()</span><br></pre></td></tr></table></figure>

<p>详情可见：<a href="https://segmentfault.com/a/1190000006949536" target="_blank" rel="noopener">sqlalchemy学习笔记 - python学习笔记 - SegmentFault</a></p>
<hr>
<h4 id="完整测试代码"><a href="#完整测试代码" class="headerlink" title="完整测试代码"></a>完整测试代码</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># coding:utf-8</span><br><span class="line"></span><br><span class="line">from sqlalchemy import create_engine</span><br><span class="line"></span><br><span class="line">from sqlalchemy.ext.declarative import declarative_base</span><br><span class="line"></span><br><span class="line">from sqlalchemy import Column, Integer, String</span><br><span class="line"></span><br><span class="line">from sqlalchemy.orm import sessionmaker</span><br><span class="line"></span><br><span class="line"># ***************************</span><br><span class="line"></span><br><span class="line"># 初始化数据库连接</span><br><span class="line">engine&#x3D;create_engine(&#39;sqlite:&#x2F;&#x2F;&#x2F;.&#x2F;cnblogblog.db&#39;,echo&#x3D;True)</span><br><span class="line"></span><br><span class="line"># 创建对象的基类</span><br><span class="line">Base&#x3D;declarative_base()</span><br><span class="line"># 创建会话类</span><br><span class="line">DBSession&#x3D;sessionmaker(bind&#x3D;engine)</span><br><span class="line"></span><br><span class="line"># ******************</span><br><span class="line"></span><br><span class="line"># 定义User对象</span><br><span class="line">class User(Base):</span><br><span class="line">	&quot;&quot;&quot;Users table&quot;&quot;&quot;</span><br><span class="line">	# 表的名字</span><br><span class="line">	__tablename__&#x3D;&#39;users&#39;</span><br><span class="line">	__table_args__&#x3D;&#123;&#39;sqlite_autoincrement&#39;: True&#125;</span><br><span class="line">	# 表结构</span><br><span class="line">	id&#x3D;Column(Integer,primary_key&#x3D;True,autoincrement&#x3D;True)</span><br><span class="line">	name&#x3D;Column(String(32),nullable&#x3D;False)</span><br><span class="line">	age&#x3D;Column(Integer,default&#x3D;0)</span><br><span class="line">	password&#x3D;Column(String(64),unique&#x3D;True)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Blog(Base):</span><br><span class="line">	&quot;&quot;&quot;docstring for Blog&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">	__tablename__&#x3D;&#39;blogs&#39;</span><br><span class="line"></span><br><span class="line">	id&#x3D;Column(Integer,primary_key&#x3D;True)</span><br><span class="line">	title&#x3D;Column(String(100))</span><br><span class="line">	desc&#x3D;Column(String(500))</span><br><span class="line"></span><br><span class="line">class Tips(Base):</span><br><span class="line">	&quot;&quot;&quot;docstring for Tips&quot;&quot;&quot;</span><br><span class="line">	</span><br><span class="line">	__tablename__&#x3D;&#39;tips&#39;</span><br><span class="line">		</span><br><span class="line">	id&#x3D;Column(Integer,primary_key&#x3D;True)</span><br><span class="line">	name&#x3D;Column(String(32))</span><br><span class="line"></span><br><span class="line"># ***********************</span><br><span class="line"></span><br><span class="line"># 添加一条数据</span><br><span class="line">def newUser():</span><br><span class="line">	# 创建会话对象</span><br><span class="line">	session&#x3D;DBSession()</span><br><span class="line"></span><br><span class="line">	new_user&#x3D;User(name&#x3D;&#39;Jery&#39;,password&#x3D;&#39;123&#39;)</span><br><span class="line"></span><br><span class="line">	session.add(new_user)</span><br><span class="line"></span><br><span class="line">	session.commit()</span><br><span class="line">	session.close()</span><br><span class="line"></span><br><span class="line"># 添加一条数据</span><br><span class="line">def addUserForZhCn():</span><br><span class="line">	session&#x3D;DBSession()</span><br><span class="line">	new_user&#x3D;User(name&#x3D;u&#39;关羽2&#39;,password&#x3D;&#39;12322233&#39;)</span><br><span class="line">	session.add(new_user)</span><br><span class="line">	session.commit()</span><br><span class="line">	session.close()</span><br><span class="line"></span><br><span class="line"># 新增多条数据</span><br><span class="line">def addmoreUser():</span><br><span class="line">	session&#x3D;DBSession()</span><br><span class="line">	session.add_all([</span><br><span class="line">		User(name&#x3D;&#39;guanyu&#39;,age&#x3D;4,password&#x3D;&#39;11111&#39;),</span><br><span class="line">		User(name&#x3D;&#39;zhangfei&#39;,password&#x3D;&#39;2233&#39;),</span><br><span class="line">		User(name&#x3D;&#39;zhenji&#39;,password&#x3D;&#39;44556&#39;)</span><br><span class="line">		])</span><br><span class="line">	session.commit()</span><br><span class="line">	session.close()</span><br><span class="line"></span><br><span class="line"># 查询</span><br><span class="line">def queryUser():</span><br><span class="line">	session&#x3D;DBSession()</span><br><span class="line">	quser&#x3D;session.query(User).filter(User.id&#x3D;&#x3D;4).one()</span><br><span class="line">	print(&#39;name:&#39;,quser.name)</span><br><span class="line">	session.close()</span><br><span class="line"></span><br><span class="line"># 删除</span><br><span class="line">def deleteUser():</span><br><span class="line">	session&#x3D;DBSession()</span><br><span class="line">	duser&#x3D;session.query(User).filter(User.id&#x3D;&#x3D;2).delete()</span><br><span class="line">	session.commit()</span><br><span class="line">	session.close()</span><br><span class="line"></span><br><span class="line"># 执行sql语句</span><br><span class="line">def SQlUser():</span><br><span class="line">	s&#x3D;DBSession()</span><br><span class="line">	# 不能用 &#96;?&#96; 的方式来传递参数 要用 &#96;:param&#96; 的形式来指定参数</span><br><span class="line">	# s.execute(&#39;INSERT INTO users (name, age, password) VALUES (?, ?, ?)&#39;,(&#39;bigpang&#39;,2,&#39;1122121&#39;))  </span><br><span class="line">	# 这样执行报错 </span><br><span class="line">	</span><br><span class="line">	# s.execute(&#39;INSERT INTO users (name, age, password) VALUES (:aa, :bb, :cc)&#39;,(&#123;&#39;aa&#39;:&#39;bigpang2&#39;,&#39;bb&#39;:22,&#39;cc&#39;:&#39;998&#39;&#125;))</span><br><span class="line">	# s.commit()</span><br><span class="line">	# 这样执行成功</span><br><span class="line"></span><br><span class="line">	res&#x3D;s.execute(&#39;select * from users where age&#x3D;:aaa&#39;,&#123;&#39;aaa&#39;:4&#125;)</span><br><span class="line">	# print(res[&#39;name&#39;])  # 错误</span><br><span class="line">	# print(res.name)    # 错误</span><br><span class="line">	# print(type(res))   # 错误</span><br><span class="line">	for r in res:</span><br><span class="line">		print(r[&#39;name&#39;])</span><br><span class="line"></span><br><span class="line">	s.close()</span><br><span class="line"></span><br><span class="line"># 执行sql语句</span><br><span class="line">def SQlUser2():</span><br><span class="line"></span><br><span class="line">	# **传统 connection方式**</span><br><span class="line">	# 创建一个connection对象，使用方法与调用python自带的sqlite使用方式类似</span><br><span class="line">	# 使用with 来创建 conn，不需要显示执行关闭连接</span><br><span class="line">	# with engine.connect() as conn:</span><br><span class="line">	# 	res&#x3D;conn.execute(&#39;select * from users&#39;)</span><br><span class="line">	# 	data&#x3D;res.fetchone()</span><br><span class="line">	# 	print(&#39;user is %s&#39; %data[1])</span><br><span class="line"></span><br><span class="line">	# 与python自带的sqlite不同，这里不需要 cursor 光标，执行sql语句不需要commit。如果是增删改，则直接生效，也不需要commit.</span><br><span class="line">	</span><br><span class="line">	# **传统 connection 事务**</span><br><span class="line">	with engine.connect() as conn:</span><br><span class="line">		trans&#x3D;conn.begin()</span><br><span class="line">		try:</span><br><span class="line">			r1&#x3D;conn.execute(&quot;select * from users&quot;)</span><br><span class="line">			print(r1.fetchone()[1])</span><br><span class="line">			r2&#x3D;conn.execute(&quot;insert into users (name,age,password) values (?,?,?)&quot;,(&#39;tang&#39;,5,&#39;133444&#39;))</span><br><span class="line">			trans.commit()</span><br><span class="line">		except:</span><br><span class="line">			trans.rollback()</span><br><span class="line">			raise</span><br><span class="line"></span><br><span class="line">	# **session**</span><br><span class="line">	session&#x3D;DBSession()</span><br><span class="line"></span><br><span class="line">	session.execute(&#39;select * from users&#39;)</span><br><span class="line">	session.execute(&#39;insert into users (name,age,password) values (:name,:age,:password)&#39;,&#123;&quot;name&quot;:&#39;dayuzhishui&#39;,&#39;age&#39;:6,&#39;password&#39;:&#39;887&#39;&#125;)</span><br><span class="line">	# 注意参数使用dict，并在sql语句中使用:key占位</span><br><span class="line"></span><br><span class="line">	# 如果是增删改，需要 commit</span><br><span class="line">	session.commit()</span><br><span class="line">	# 用完记得关闭，也可以用 with</span><br><span class="line">	session.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 更多操作</span><br><span class="line">def TestUser():</span><br><span class="line">	session&#x3D;DBSession()</span><br><span class="line"></span><br><span class="line">	# test1</span><br><span class="line">	# 使用merge方法，如果存在则修改，如果不存在则插入（只判断主键，不判断unique列）</span><br><span class="line">	# t1&#x3D;session.query(User).filter(User.name&#x3D;&#x3D;&#39;zhenji&#39;).first()</span><br><span class="line">	# t1.age&#x3D;34</span><br><span class="line">	# session.merge(t1)</span><br><span class="line">	# session.commit()</span><br><span class="line"></span><br><span class="line">	# test2</span><br><span class="line">	# merge方法，如果数据库中没有则添加</span><br><span class="line">	# t2&#x3D;User()</span><br><span class="line">	# t2.name&#x3D;&#39;haha&#39;</span><br><span class="line">	# session.merge(t2)</span><br><span class="line">	# session.commit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	# test3</span><br><span class="line">	# 获取第2-3项</span><br><span class="line">	# tUser&#x3D;session.query(User)[1:3]   </span><br><span class="line">	# for u in tUser:</span><br><span class="line">	# 	print(u.id)</span><br><span class="line"></span><br><span class="line">	# test4</span><br><span class="line">	# </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">	</span><br><span class="line">	# 删除全部数据库</span><br><span class="line">	# Base.metadata.drop_all(engine)</span><br><span class="line">	</span><br><span class="line">	# 初始化数据库</span><br><span class="line">	# Base.metadata.create_all(engine)</span><br><span class="line"></span><br><span class="line">	# 删除全部数据库</span><br><span class="line">	# Base.metadata.drop_all(engine)</span><br><span class="line"></span><br><span class="line">	# 删除指定的数据库</span><br><span class="line">	# 如删除 Blogs表</span><br><span class="line">	# 详见 ：http:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;35918605&#x2F;how-to-delete-a-table-in-sqlalchemy</span><br><span class="line">	# Blog.__table__.drop(engine)</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">	# 新增数据</span><br><span class="line">	# newUser()</span><br><span class="line"></span><br><span class="line">	# 新增多条数据</span><br><span class="line">	# addmoreUser()</span><br><span class="line"></span><br><span class="line">	# 新增数据含中文</span><br><span class="line">	# addUserForZhCn()</span><br><span class="line"></span><br><span class="line">	# 查询数据</span><br><span class="line">	# queryUser()</span><br><span class="line">	</span><br><span class="line">	# 删除</span><br><span class="line">	# deleteUser()</span><br><span class="line"></span><br><span class="line">	# 测试</span><br><span class="line">	# TestUser()</span><br><span class="line">	 </span><br><span class="line">	# 执行sql语句</span><br><span class="line">	# SQlUser()</span><br><span class="line">	</span><br><span class="line">	# 执行sql语句2</span><br><span class="line">	SQlUser2()</span><br><span class="line"></span><br><span class="line">	print(&#39;ok&#39;)</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="sqlalchemy-教程"><a href="#sqlalchemy-教程" class="headerlink" title="sqlalchemy 教程"></a>sqlalchemy 教程</h4><h5 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h5><ul>
<li><a href="https://gist.github.com/tuxmartin/ea5783d1ebb99057dd81" target="_blank" rel="noopener">Test.py</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/23190728" target="_blank" rel="noopener">作为一个Pythoner，不会SQLAlchemy</a>  <strong>☆</strong></li>
<li><a href="http://www.jianshu.com/p/0d234e14b5d3" target="_blank" rel="noopener">SQLAlchemy ORM教程之一：Create - 简书</a>  <strong>☆</strong></li>
<li><a href="http://www.jianshu.com/p/8d085e2f2657" target="_blank" rel="noopener">SQLAlchemy ORM教程之二：Query - 简书</a>  <strong>☆</strong></li>
<li><a href="http://www.jianshu.com/p/9771b0a3e589" target="_blank" rel="noopener">SQLAlchemy ORM教程之三：Relationship - 简书</a> <strong>☆</strong></li>
</ul>
<h5 id="增删改查常用命令"><a href="#增删改查常用命令" class="headerlink" title="增删改查常用命令"></a>增删改查常用命令</h5><ul>
<li><a href="https://segmentfault.com/a/1190000006949536" target="_blank" rel="noopener">sqlalchemy学习笔记 - python学习笔记 - SegmentFault</a> <strong>☆</strong></li>
<li><a href="https://www.keakon.net/2012/12/03/SQLAlchemy%E4%BD%BF%E7%94%A8%E7%BB%8F%E9%AA%8C" target="_blank" rel="noopener">SQLAlchemy 使用经验</a></li>
<li><a href="https://github.com/lzjun567/note/blob/master/note/python/sqlalchemy.md" target="_blank" rel="noopener">note/sqlalchemy.md at master · lzjun567/note · GitHub</a></li>
</ul>
<hr>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>SQLAlchemy</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux系统实时监控工具-Glances</title>
    <url>/2017/01/05/linux-real-time-monitoring-glances/</url>
    <content><![CDATA[<h4 id="Ubuntu系统下安装"><a href="#Ubuntu系统下安装" class="headerlink" title="Ubuntu系统下安装"></a>Ubuntu系统下安装</h4><h5 id="通过-apt-get-方式来安装"><a href="#通过-apt-get-方式来安装" class="headerlink" title="通过 apt-get 方式来安装"></a>通过 <code>apt-get</code> 方式来安装</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get install glances</span><br></pre></td></tr></table></figure>

<hr>
<h5 id="通过-pip-方式来安装-推荐"><a href="#通过-pip-方式来安装-推荐" class="headerlink" title="通过 pip 方式来安装(推荐)"></a>通过 <code>pip</code> 方式来安装(推荐)</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo pip install python-dev</span><br><span class="line">$ sudo pip install glances</span><br></pre></td></tr></table></figure>

<p>建议通过 <code>pip</code> 的方式来安装，因为我通过 <code>apt-get</code> 方式安装的 <code>glances</code> 版本为 <code>Glances version 1.7.3 with PsUtil 1.2.1</code> ，而通过 <code>pip</code> 安装的为 <code>Glances v2.7.1 with psutil v4.3.1</code> ，旧版本的功能比较简单。</p>
<hr>
<p>在安装过程中可能出现报错：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">warning: no previously-included files matching &#39;*&#39; found under directory &#39;docs&#x2F;_build&#39;</span><br></pre></td></tr></table></figure>

<p>首先执行如下命令并尝试再次安装：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get install libpq-dev python-dev</span><br></pre></td></tr></table></figure>

<hr>
<h5 id="通过官方给出的方式安装"><a href="#通过官方给出的方式安装" class="headerlink" title="通过官方给出的方式安装"></a>通过官方给出的方式安装</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ curl -L https:&#x2F;&#x2F;bit.ly&#x2F;glances | &#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure>

<p>or:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ wget -O- https:&#x2F;&#x2F;bit.ly&#x2F;glances | &#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="Alpine系统下安装"><a href="#Alpine系统下安装" class="headerlink" title="Alpine系统下安装"></a>Alpine系统下安装</h4><h5 id="执行如下命令安装"><a href="#执行如下命令安装" class="headerlink" title="执行如下命令安装"></a>执行如下命令安装</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ apk update</span><br><span class="line">$ apk add python-dev py-pip py2-psutil</span><br><span class="line">$ pip install glances</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>安装完成后，可以执行下面的命令启动 Glances：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ glances</span><br></pre></td></tr></table></figure>

<p>可以看到类似下面的输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MyServer (Ubuntu 14.04 64bit &#x2F; Linux 4.4.0-38-generic)                                            Uptime: 1:41:59</span><br><span class="line"></span><br><span class="line">CPU  [  3.0%]   CPU       3.0%  nice:     0.0%  ctx_sw:   193   MEM      6.5%   SWAP      0.0%   LOAD    2-core</span><br><span class="line">MEM  [  6.5%]   user:     1.3%  irq:      0.0%  inter:    266   total:  1.95G   total:   2.24G   1 min:    0.00</span><br><span class="line">SWAP [    0%]   system:   1.3%  iowait:   0.0%  sw_int:   372   used:    129M   used:        0   5 min:    0.00</span><br><span class="line">                idle:    97.1%  steal:    0.2%                  free:   1.82G   free:    2.24G   15 min:   0.00</span><br><span class="line"></span><br><span class="line">NETWORK     Rx&#x2F;s   Tx&#x2F;s   TASKS 114 (140 thr), 1 run, 113 slp, 0 oth sorted automatically</span><br><span class="line">docker0       0b     0b</span><br><span class="line">eth0        75Kb   44Kb     CPU%  MEM%  VIRT   RES   PID USER        NI S     TIME+   R&#x2F;s   W&#x2F;s Command </span><br><span class="line">lo            0b     0b      4.7   1.2  377M 23.2M 11918 tiger        0 R   0:01.90     0     0 &#x2F;usr&#x2F;bin&#x2F;python &#x2F;</span><br><span class="line">                             0.3   0.1  250M 2.63M   556 syslog       0 S   0:00.18     0     0 rsyslogd</span><br><span class="line">DISK I&#x2F;O     R&#x2F;s    W&#x2F;s      0.0   0.0     0     0    18 root       -20 S   0:00.00     0     0 perf</span><br><span class="line">dm-0           0    19K      0.0   0.1 23.1M 2.12M   915 root         0 S   0:00.00     0     0 cron</span><br><span class="line">dm-1           0      0      0.0   0.2 42.4M 3.22M   630 root         0 S   0:00.10     0     0 &#x2F;lib&#x2F;systemd&#x2F;syst</span><br><span class="line">xvda1          0      0      0.0   0.0     0     0    19 root         0 S   0:00.00     0     0 xenwatch</span><br><span class="line">xvda2          0      0      0.0   0.0     0     0    81 root       -20 S   0:00.00     0     0 bioset</span><br><span class="line">xvda5          0    19K      0.0   0.0     0     0     2 root         0 S   0:00.00     0     0 kthreadd</span><br><span class="line">xvdb           0      0      0.0   0.0     0     0    71 root       -20 S   0:00.00     0     0 bioset</span><br></pre></td></tr></table></figure>

<p>要退出 <code>Glances</code> 终端，按 <code>ESC</code> 键或 <code>Ctrl + C</code>。</p>
<hr>
<h4 id="通过browser查看"><a href="#通过browser查看" class="headerlink" title="通过browser查看"></a>通过browser查看</h4><p>先安装 <code>bottle</code> ，然后通过 <code>-w</code> 参数启动浏览器服务，默认会监听 <code>61208</code> 端口。</p>
<p>更多命令可通过命令 <code>glances --help</code> 查看帮助。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo pip install bottle</span><br><span class="line"></span><br><span class="line">$ glances -w</span><br><span class="line">Glances web server started on http:&#x2F;&#x2F;0.0.0.0:61208&#x2F;</span><br></pre></td></tr></table></figure>

<p>然后在浏览器端输入网址即可查看。</p>
<hr>
<h4 id="相关参考"><a href="#相关参考" class="headerlink" title="相关参考"></a>相关参考</h4><ul>
<li><a href="https://nicolargo.github.io/glances/" target="_blank" rel="noopener">glances</a></li>
<li><a href="https://github.com/nicolargo/glances" target="_blank" rel="noopener">GitHub - nicolargo/glances: Glances an Eye on your system. A top/htop alternative.</a></li>
<li><a href="https://glances.readthedocs.io/en/stable/index.html" target="_blank" rel="noopener">Glances &mdash; Glances 2.7.1 documentation</a></li>
</ul>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>Glances</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序开发体验</title>
    <url>/2017/01/05/wx-xiaochengxu-development-experience/</url>
    <content><![CDATA[<h4 id="简易教程"><a href="#简易教程" class="headerlink" title="简易教程"></a>简易教程</h4><p>官方文档 <a href="https://mp.weixin.qq.com/debug/wxadoc/dev/" target="_blank" rel="noopener">简易教程-小程序</a></p>
<p>app.js、app.json、app.wxss 这三个，.js后缀的是脚本文件，.json后缀的文件是配置文件，.wxss后缀的是样式表文件。</p>
<ul>
<li>app.js是小程序的脚本代码。我们可以在这个文件中监听并处理小程序的生命周期函数、声明全局变量。调用框架提供的丰富的 API，如本例的同步存储及同步读取本地数据。</li>
<li>app.json 是对整个小程序的全局配置。我们可以在这个文件中配置小程序是由哪些页面组成，配置小程序的窗口背景色，配置导航条样式，配置默认标题。注意该文件不可添加任何注释。详见：<a href="https://mp.weixin.qq.com/debug/wxadoc/dev/framework/config.html?t=1475052047016" target="_blank" rel="noopener">配置</a></li>
<li>app.wxss 是整个小程序的公共样式表。</li>
</ul>
<h5 id="创建页面"><a href="#创建页面" class="headerlink" title="创建页面"></a>创建页面</h5><p>页面都在 <code>pages</code> 目录下。</p>
<p>微信小程序中的每一个页面的【路径+页面名】都需要写在 app.json 的 pages 中，且 pages 中的第一个页面是小程序的首页。</p>
<p>每一个小程序页面是由同路径下同名的四个不同后缀文件的组成，如：index.js、index.wxml、index.wxss、index.json。.js后缀的文件是脚本文件，.json后缀的文件是配置文件，.wxss后缀的是样式表文件，.wxml后缀的文件是页面结构文件。</p>
<p>页面的样式表是非必要的。当有页面样式表时，页面的样式表中的样式规则会层叠覆盖 app.wxss 中的样式规则。</p>
<hr>
<h4 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h4><p>框架提供了自己的视图层描述语言 WXML 和 WXSS，以及基于 JavaScript 的逻辑层框架，并在视图层与逻辑层间提供了数据传输和事件系统，可以让开发者可以方便的聚焦于数据与逻辑上。</p>
<h5 id="响应的数据绑定"><a href="#响应的数据绑定" class="headerlink" title="响应的数据绑定"></a>响应的数据绑定</h5><p>框架的核心是一个响应的数据绑定系统。</p>
<p>整个系统分为两块视图层（View）和逻辑层（App Service）</p>
<hr>
<h4 id="文件结构"><a href="#文件结构" class="headerlink" title="文件结构"></a>文件结构</h4><p>框架程序包含一个描述整体程序的 app 和多个描述各自页面的 page。</p>
<p>一个框架程序主体部分由三个文件组成，必须放在项目的根目录：app.js app.json app.wxss</p>
<p>一个框架页面由四个文件组成，分别是：*.js  *.wxml *.wxss *.json</p>
<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>使用app.json文件来对微信小程序进行全局配置，决定页面文件的路径、窗口表现、设置网络超时时间、设置多 tab 等。</p>
<p>app.json 配置项列表</p>
<ul>
<li><code>pages</code> 设置页面路径</li>
<li><code>window</code> 设置默认页面的窗口表现</li>
<li><code>tabBar</code> 设置底部 tab 的表现</li>
<li><code>networkTimeout</code> 设置网络超时时间 </li>
<li><code>debug</code> 设置是否开启 debug 模式</li>
</ul>
<h5 id="pages"><a href="#pages" class="headerlink" title="pages"></a>pages</h5><ul>
<li>接受一个数组，每一项都是字符串，来指定小程序由哪些页面组成。</li>
<li>对应页面的【路径+文件名】信息</li>
<li>数组的第一项代表小程序的初始页面。</li>
<li>小程序中新增/减少页面，都需要对 pages 数组进行修改</li>
<li>文件名不需要写文件后缀</li>
</ul>
<h5 id="window"><a href="#window" class="headerlink" title="window"></a>window</h5><p>设置小程序的状态栏、导航条、标题、窗口背景色。</p>
<ul>
<li><code>navigationBarBackgroundColor</code>   导航栏背景颜色，如”#000000”</li>
<li><code>navigationBarTextStyle</code>  导航栏标题颜色，仅支持 black/white</li>
<li><code>navigationBarTitleText</code>  导航栏标题文字内容</li>
<li><code>backgroundColor</code>  窗口的背景色</li>
<li><code>backgroundTextStyle</code>   下拉背景字体、loading 图的样式，仅支持 dark/light</li>
<li><code>enablePullDownRefresh</code>  是否开启下拉刷新 false/true</li>
</ul>
<h5 id="tabBar"><a href="#tabBar" class="headerlink" title="tabBar"></a>tabBar</h5><p>多 tab 应用（客户端窗口的底部有tab栏可以切换页面）, 可以通过 tabBar 配置项指定 tab 栏的表现，以及 tab 切换时显示的对应页面。</p>
<p>tabBar 是一个数组，<strong>只能配置最少2个、最多5个 tab</strong>，tab 按数组的顺序排序。</p>
<ul>
<li><code>color</code>  tab 上的文字默认颜色</li>
<li><code>selectedColor</code>  tab 上的文字选中时的颜色</li>
<li><code>backgroundColor</code>  tab 的背景色</li>
<li><code>borderStyle</code>  tabbar上边框的颜色， 仅支持 black/white</li>
<li><code>list</code>  tab 的列表，最少2个、最多5个 tab</li>
</ul>
<p>list 属性值：</p>
<ul>
<li><code>pagePath</code>  页面路径，必须在 pages 中先定义</li>
<li><code>text</code>  tab 上按钮文字</li>
<li><code>iconPath</code>  图片路径，icon 大小限制为40kb</li>
<li><code>selectedIconPath</code>  选中时的图片路径，icon 大小限制为40kb</li>
</ul>
<h5 id="networkTimeout"><a href="#networkTimeout" class="headerlink" title="networkTimeout"></a>networkTimeout</h5><p>设置各种网络请求的超时时间。</p>
<ul>
<li><code>request</code>  wx.request的超时时间，单位毫秒</li>
<li><code>connectSocket</code>  wx.connectSocket的超时时间，单位毫秒</li>
<li><code>uploadFile</code>   wx.uploadFile的超时时间，单位毫秒</li>
<li><code>downloadFile</code>  wx.downloadFile的超时时间，单位毫秒</li>
</ul>
<h5 id="debug"><a href="#debug" class="headerlink" title="debug"></a>debug</h5><p>在控制台面板中调试信息以 <code>info</code> 的形式给出，其信息有Page的注册，页面路由，数据更新，事件触发 。</p>
<h4 id="page-json"><a href="#page-json" class="headerlink" title="page.json"></a>page.json</h4><p>每一个小程序页面也可以使用.json文件来对本页面的窗口表现进行配置。 页面的配置比app.json全局配置简单得多，只是设置 app.json 中的 window 配置项的内容，页面中配置项会覆盖 app.json 的 window 中相同的配置项。</p>
<p>页面的.json只能设置 window 相关的配置项,以决定本页面的窗口表现，无需写 window 这个键。</p>
<hr>
<h4 id="逻辑层"><a href="#逻辑层" class="headerlink" title="逻辑层"></a>逻辑层</h4><h5 id="App"><a href="#App" class="headerlink" title="App"></a>App</h5><h6 id="App-1"><a href="#App-1" class="headerlink" title="App()"></a>App()</h6><p>App() 函数用来注册一个小程序。接受一个 object 参数，其指定小程序的生命周期函数等。</p>
<p>object 参数说明：</p>
<ul>
<li><code>onLaunch</code>   当小程序初始化完成时，会触发 onLaunch（全局只触发一次）</li>
<li><code>onShow</code>   当小程序启动，或从后台进入前台显示，会触发 onShow</li>
<li><code>onHide</code>   当小程序从前台进入后台，会触发 onHide</li>
<li>其他   开发者可以添加任意的函数或数据到 Object 参数中，用 this 可以访问</li>
</ul>
<p>前台、后台定义： 当用户点击左上角关闭，或者按了设备 Home 键离开微信，小程序并没有直接销毁，而是进入了后台；当再次进入微信或再次打开小程序，又会从后台进入前台。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">App(&#123;</span><br><span class="line">  onLaunch: function() &#123; </span><br><span class="line">    &#x2F;&#x2F; Do something initial when launch.</span><br><span class="line">  &#125;,</span><br><span class="line">  onShow: function() &#123;</span><br><span class="line">      &#x2F;&#x2F; Do something when show.</span><br><span class="line">  &#125;,</span><br><span class="line">  onHide: function() &#123;</span><br><span class="line">      &#x2F;&#x2F; Do something when hide.</span><br><span class="line">  &#125;,</span><br><span class="line">  globalData: &#39;I am global data&#39;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h6 id="App-prototype-getCurrentPage"><a href="#App-prototype-getCurrentPage" class="headerlink" title="App.prototype.getCurrentPage()"></a>App.prototype.getCurrentPage()</h6><p>getCurrentPage() 函数用户获取当前页面的实例。</p>
<h6 id="getApp"><a href="#getApp" class="headerlink" title="getApp()"></a>getApp()</h6><p>全局的 getApp() 函数，可以获取到小程序实例。</p>
<p>注意：</p>
<ul>
<li>App() 必须在 app.js 中注册，且不能注册多个。</li>
<li>不要在定义于 App() 内的函数中调用 getApp() ，使用 this 就可以拿到 app 实例。</li>
<li>不要在 onLaunch 的时候调用 getCurrentPage()，此时 page 还没有生成。</li>
<li>通过 getApp() 获取实例之后，不要私自调用生命周期函数。</li>
</ul>
<hr>
<h5 id="Page"><a href="#Page" class="headerlink" title="Page"></a>Page</h5><p>Page() 函数用来注册一个页面。接受一个 object 参数，其指定页面的初始数据、生命周期函数、事件处理函数等。</p>
<p>object参数说明：</p>
<ul>
<li><code>data</code>  页面的初始数据</li>
<li><code>onLoad</code>  生命周期函数–监听页面加载</li>
<li><code>onReady</code>  生命周期函数–监听页面初次渲染完成</li>
<li><code>onShow</code>  生命周期函数–监听页面显示</li>
<li><code>onHide</code>  生命周期函数–监听页面隐藏</li>
<li><code>onUnload</code>  生命周期函数–监听页面卸载</li>
<li><code>onPullDownRefreash</code>  页面相关事件处理函数–监听用户下拉动作</li>
<li>其他  开发者可以添加任意的函数或数据到 object 参数中，用 this 可以访问</li>
</ul>
<h6 id="初始化数据"><a href="#初始化数据" class="headerlink" title="初始化数据"></a>初始化数据</h6><p>初始化数据将作为页面的第一次渲染。数据必须是可以转成 JSON 的格式：字符串，数字，布尔值，对象，数组。</p>
<h6 id="Page-prototype-setData"><a href="#Page-prototype-setData" class="headerlink" title="Page.prototype.setData()"></a>Page.prototype.setData()</h6><p>setData 函数用于将数据从逻辑层发送到视图层，同时改变对应的 this.data 的值。</p>
<p>注意：</p>
<ol>
<li>直接修改 <code>this.data</code> 无效</li>
<li>单次设置的数据不能超过 1024 KB </li>
</ol>
<h6 id="setData-参数格式"><a href="#setData-参数格式" class="headerlink" title="setData() 参数格式"></a>setData() 参数格式</h6><p>接受一个对象，以 key，value 的形式表示将 this.data 中的 key 对应的值改变成 value。</p>
<h6 id="页面的路由"><a href="#页面的路由" class="headerlink" title="页面的路由"></a>页面的路由</h6><hr>
<h4 id="文件作用域"><a href="#文件作用域" class="headerlink" title="文件作用域"></a>文件作用域</h4><ul>
<li><p>在 JavaScript 文件中声明的变量和函数只在该文件中有效；</p>
</li>
<li><p>不同的文件中可以声明相同名字的变量和函数，不会互相影响。</p>
</li>
<li><p>通过全局函数 getApp() 可以获取全局的应用实例</p>
</li>
<li><p>如果需要全局的数据可以在 App() 中设置</p>
</li>
</ul>
<h4 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h4><p>模块只有通过 module.exports 才能对外暴露接口。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; common.js</span><br><span class="line">function sayHello(name) &#123;</span><br><span class="line">  console.log(&#39;Hello &#39; + name + &#39;!&#39;)</span><br><span class="line">&#125;</span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">  sayHello: sayHello</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在需要使用这些模块的文件中，使用 require(path) 将公共代码引入。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var common &#x3D; require(&#39;common.js&#39;)</span><br><span class="line">Page(&#123;</span><br><span class="line">  helloMINA: function() &#123;</span><br><span class="line">    common.sayHello(&#39;MINA&#39;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<hr>
]]></content>
      <tags>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP 413 curl 22 The requested URL returned error 413 Request Entity Too Large</title>
    <url>/2016/12/30/nginx-request-entity-too-large/</url>
    <content><![CDATA[<h4 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h4><p>在使用gogs时，<code>git push</code> 代码报如下错误：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">error: RPC failed; HTTP 413 curl 22 The requested URL returned error: 413 Request Entity Too Large</span><br></pre></td></tr></table></figure>

<p>经查证，是服务器上的nginx默认情况下只允许上传最大 <code>1m</code> 大小的文件。nginx默认配置如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Syntax:		client_max_body_size size;</span><br><span class="line">Default:	client_max_body_size 1m;</span><br><span class="line">Context:	http, server, location</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><p>在 <code>nginx</code> 的配置文件 <code>nginx.conf</code> 中的 <code>http</code> 段内，添加 <code>client_max_body_size</code> 配置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">	...</span><br><span class="line">	client_max_body_size 50m;</span><br><span class="line">	...</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>后面的 <code>50m</code> 表示最大允许上传 <code>50M</code> 大小的文件。</p>
<p>然后重新加载 <code>nginx</code> 配置信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo service nginx reload</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="相关参考"><a href="#相关参考" class="headerlink" title="相关参考"></a>相关参考</h4><ul>
<li><a href="http://nginx.org/en/docs/http/ngx_http_core_module.html#client_max_body_size" target="_blank" rel="noopener">Module ngx_http_core_module</a></li>
<li><a href="http://yanghao.org/blog/archives/365" target="_blank" rel="noopener">nginx client_max_body_size 的问题 | yanghao&#039;s blog</a></li>
<li><a href="http://stackoverflow.com/questions/7489813/github-push-error-rpc-failed-result-22-http-code-413" target="_blank" rel="noopener">git - Github Push Error: RPC failed; result=22, HTTP code = 413 - Stack Overflow</a></li>
</ul>
]]></content>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Python独立运行环境Virtualenv</title>
    <url>/2016/12/28/python-independent-operating-environment-virtualenv/</url>
    <content><![CDATA[<p>Virtualenv可以为每个Python应用创建独立的开发环境，使他们互不影响，Virtualenv能够做到：</p>
<ul>
<li>在没有权限的情况下安装新套件</li>
<li>不同应用可以使用不同的套件版本</li>
<li>套件升级不影响其他应用</li>
</ul>
<hr>
<h4 id="安装virtualenv"><a href="#安装virtualenv" class="headerlink" title="安装virtualenv"></a>安装virtualenv</h4><h5 id="使用pip安装（推荐）"><a href="#使用pip安装（推荐）" class="headerlink" title="使用pip安装（推荐）"></a>使用pip安装（推荐）</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo pip install virtualenv</span><br></pre></td></tr></table></figure>

<h5 id="使用-easy-install-安装："><a href="#使用-easy-install-安装：" class="headerlink" title="使用 easy_install 安装："></a>使用 easy_install 安装：</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo easy_install virtualenv</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><p>我通常创建一个包含虚拟名称为 <code>venv</code> 文件夹的项目文件夹:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ mkdir myproject</span><br><span class="line">$ cd myproject</span><br><span class="line">$ virtualenv venv</span><br><span class="line">New python executable in venv&#x2F;bin&#x2F;python2</span><br><span class="line">Also creating executable in venv&#x2F;bin&#x2F;python</span><br><span class="line">Installing setuptools, pip...done.</span><br></pre></td></tr></table></figure>

<h4 id="激活虚拟环境"><a href="#激活虚拟环境" class="headerlink" title="激活虚拟环境"></a>激活虚拟环境</h4><p>现在，每次需要使用项目时，必须先激活相应的环境。</p>
<h5 id="在Linux系统下执行"><a href="#在Linux系统下执行" class="headerlink" title="在Linux系统下执行"></a>在Linux系统下执行</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ls</span><br><span class="line">-- venv</span><br><span class="line">$ source .&#x2F;venv&#x2F;bin&#x2F;activate</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;结果：</span><br><span class="line">(venv)tiger@VirtualBox:~&#x2F;xbox&#x2F;myflask$</span><br></pre></td></tr></table></figure>

<h5 id="在Win系统下执行"><a href="#在Win系统下执行" class="headerlink" title="在Win系统下执行"></a>在Win系统下执行</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; ls</span><br><span class="line">venv&#x2F;</span><br><span class="line">&gt; venv\Scripts\activate.bat</span><br><span class="line">(venv) D:\YYYY</span><br></pre></td></tr></table></figure>

<p>你现在就进入你的 <code>virtualenv</code> 虚拟环境了（<strong>注意查看你的 <code>shell</code> 提示符已经改变了</strong>）。</p>
<hr>
<h4 id="退出虚拟环境"><a href="#退出虚拟环境" class="headerlink" title="退出虚拟环境"></a>退出虚拟环境</h4><p>通过 <code>deactivate</code> 命令退出虚拟环境。</p>
<hr>
<h4 id="virtualenv-命令整理"><a href="#virtualenv-命令整理" class="headerlink" title="virtualenv 命令整理"></a>virtualenv 命令整理</h4><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install virtualenv</span><br></pre></td></tr></table></figure>

<h5 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">virtualenv &lt;EnvName&gt;</span><br></pre></td></tr></table></figure>

<h5 id="nix"><a href="#nix" class="headerlink" title="*nix"></a>*nix</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ source .&#x2F;venv&#x2F;bin&#x2F;activate</span><br></pre></td></tr></table></figure>

<p>此处 <code>venv</code> 为 <code>&lt;EnvName&gt;</code></p>
<h5 id="Win"><a href="#Win" class="headerlink" title="Win"></a>Win</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; venv\Scripts\activate</span><br></pre></td></tr></table></figure>

<p>此处 <code>venv</code> 为 <code>&lt;EnvName&gt;</code></p>
<h5 id="退出"><a href="#退出" class="headerlink" title="退出"></a>退出</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deactivate</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="相关参考"><a href="#相关参考" class="headerlink" title="相关参考"></a>相关参考</h4><ul>
<li><a href="https://virtualenv-chinese-docs.readthedocs.io/en/latest/" target="_blank" rel="noopener">virtualenv &mdash; virtualenv 1.7.1.2.post1 documentation</a></li>
</ul>
<hr>
]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux系统下使用Gogs搭建Git Service</title>
    <url>/2016/12/26/use-gogs-to-build-yourself-git-server/</url>
    <content><![CDATA[<h4 id="基本环境搭建"><a href="#基本环境搭建" class="headerlink" title="基本环境搭建"></a>基本环境搭建</h4><ul>
<li>新建用户</li>
</ul>
<p>Gogs 默认以 <code>git</code> 用户运行（你应该也不会想一个能修改 <code>ssh</code> 配置的程序以 <code>root</code> 用户运行吧？）。<br>运行 <code>sudo adduser git</code> 新建好 <code>git</code> 用户并设置密码。</p>
<p>然后 <code>su - git</code> 切换至 <code>git</code> 用户登录。</p>
<p>具体操作如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo adduser git</span><br></pre></td></tr></table></figure>

<p>根据提示信息，输入新账户 <code>git</code> 密码，其他用户信息直接敲回车即可。</p>
<hr>
<ul>
<li>安装git</li>
</ul>
<p>因为新创建的用户 <code>git</code> 没有设置管理员权限，所以我们先在 <code>root</code> 账户或其他管理员账户下安装 <code>git</code> :</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get install git</span><br><span class="line">$ git --version  &#x2F;&#x2F;检查git是否安装成功</span><br></pre></td></tr></table></figure>

<hr>
<p>切换到新创建的git用户：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ su - git</span><br></pre></td></tr></table></figure>

<p>进入用户git的根目录下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cd ~</span><br></pre></td></tr></table></figure>

<hr>
<ul>
<li>下载解包</li>
</ul>
<p>我使用的是预编译的二进制安装包。需要从源码编译的话，请参考一般 Go 语言项目的编译。</p>
<p>数据库采用 <code>Sqlite3</code> 数据库，如想使用<code>Mysql</code> 获取其他数据库，请参考官网的安装方法。</p>
<p>创建gogs应用的解压目录：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ mkdir goapp</span><br><span class="line">$ cd goapp</span><br><span class="line">$ pwd</span><br><span class="line">&#x2F;home&#x2F;git&#x2F;goapp</span><br></pre></td></tr></table></figure>

<p>从 <a href="https://gogs.io/docs/installation/install_from_binary.html" target="_blank" rel="noopener">官网</a> 或从 <a href="https://github.com/gogits/gogs/tags" target="_blank" rel="noopener">GitHub Tags</a> 下载当前最新的版本 <code>v0.9.13</code> 版，<a href="https://dl.gogs.io/gogs_v0.9.13_linux_amd64.zip" target="_blank" rel="noopener">linux amd64</a> 并解压：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ wget https:&#x2F;&#x2F;dl.gogs.io&#x2F;gogs_v0.9.13_linux_amd64.zip</span><br><span class="line">$ unzip gogs_v0.9.13_linux_amd64.zip</span><br><span class="line">$ ls</span><br><span class="line">gogs gogs_v0.9.13_linux_amd64.zip</span><br></pre></td></tr></table></figure>

<p>进入 <code>gogs</code> 目录：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cd gogs</span><br><span class="line">$ ls</span><br><span class="line">gogs LICENSE public README.md README_ZH.md scripts templates</span><br></pre></td></tr></table></figure>

<p>创建自定义配置文件目录并修改文件夹权限：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ mkdir custom</span><br><span class="line">$ mkdir custom&#x2F;conf</span><br><span class="line"></span><br><span class="line">$ sudo chmod -R 777 custom</span><br></pre></td></tr></table></figure>

<p>在当前 <code>git</code> 用户下，如果提示没有 <code>sudo</code> 权限，可以先临时更新为其他用户，更改目录读写权限，改完后再切换回 <code>git</code> 用户：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ su root</span><br><span class="line">$ sudo chmod -R 777 custom</span><br><span class="line">$ su - git</span><br></pre></td></tr></table></figure>

<p>创建日志目录并修改文件夹权限：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ mkdir log</span><br><span class="line"></span><br><span class="line">$ sudo chmod -R 777 log</span><br></pre></td></tr></table></figure>

<hr>
<ul>
<li>启动gogs:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ pwd</span><br><span class="line">&#x2F;home&#x2F;git&#x2F;goapp&#x2F;gogs</span><br><span class="line"></span><br><span class="line">$ .&#x2F;gogs web</span><br></pre></td></tr></table></figure>

<p>执行命令后，出现 <code>Listen:http://0.0.0.0:3000</code> 提示信息，表示 <code>gogs</code> 启动成功。</p>
<p>然后访问 <code>http://服务器IP:3000/</code> 来进行安装，填写好表单之后提交就可以了。默认第一个创建的账户为管理员账户。</p>
<p>表单中指定了 <code>Database Settings</code> – <code>Path</code> 为数据库的存放目录。<code>Application General Settings</code> – <code>Repository Root Path</code> 为仓库文件的存放目录。</p>
<hr>
<h4 id="配置Nginx"><a href="#配置Nginx" class="headerlink" title="配置Nginx"></a>配置Nginx</h4><p>在管理员账户下执行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install nginx</span><br></pre></td></tr></table></figure>

<p>在 <code>/etc/nginx/conf.d</code> 目录下添加 <code>gogsweb.conf</code> 文件，填入如下内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server &#123;		</span><br><span class="line">	server_name git.****.com;</span><br><span class="line">	listen 80;</span><br><span class="line"></span><br><span class="line">	location &#x2F; &#123;</span><br><span class="line">		proxy_pass http:&#x2F;&#x2F;127.0.0.1:3000&#x2F;;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后通过 <code>sudo service nginx restart</code> 重启 <code>nginx</code> 服务。</p>
<hr>
<h4 id="配置-supervisor-启动"><a href="#配置-supervisor-启动" class="headerlink" title="配置 supervisor 启动"></a>配置 supervisor 启动</h4><p>在管理员账户下执行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install supervisor</span><br></pre></td></tr></table></figure>

<p>在 <code>/etc/supervisor/conf.d</code> 目录下添加 <code>gogsweb.conf</code> 文件，填入如下内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[program:gogs]</span><br><span class="line">directory&#x3D;&#x2F;home&#x2F;git&#x2F;goapp&#x2F;gogs&#x2F;</span><br><span class="line">command&#x3D;&#x2F;home&#x2F;git&#x2F;goapp&#x2F;gogs&#x2F;gogs web</span><br><span class="line">autostart&#x3D;true</span><br><span class="line">autorestart&#x3D;true</span><br><span class="line">startsecs&#x3D;10</span><br><span class="line">stdout_logfile&#x3D;&#x2F;home&#x2F;git&#x2F;goapp&#x2F;gogs&#x2F;log&#x2F;stdout.log</span><br><span class="line">stdout_logfile_maxbytes&#x3D;1MB</span><br><span class="line">stdout_logfile_backups&#x3D;10</span><br><span class="line">stdout_capture_maxbytes&#x3D;1MB</span><br><span class="line">stderr_logfile&#x3D;&#x2F;home&#x2F;git&#x2F;goapp&#x2F;gogs&#x2F;log&#x2F;stderr.log</span><br><span class="line">stderr_logfile_maxbytes&#x3D;1MB</span><br><span class="line">stderr_logfile_backups&#x3D;10</span><br><span class="line">stderr_capture_maxbytes&#x3D;1MB</span><br><span class="line">user &#x3D; git</span><br><span class="line">environment &#x3D; HOME&#x3D;&quot;&#x2F;home&#x2F;git&quot;, USER&#x3D;&quot;git&quot;</span><br></pre></td></tr></table></figure>

<p>以上的配置信息在 <code>gogs</code> 目录下的 <code>Scripts</code> 文件夹下有给出，可参考。</p>
<h5 id="开启-supervisor-UI-管理台"><a href="#开启-supervisor-UI-管理台" class="headerlink" title="开启 supervisor UI 管理台"></a>开启 supervisor UI 管理台</h5><p>编辑 <code>/etc/supervisor/supervisor.conf</code> 主配置文件，修改或添加(通过apt-get的方式安装后不包含该配置) 以下内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[inet_http_server]         ; inet (TCP) server disabled by default</span><br><span class="line">port&#x3D;*:9001        ; (ip_address:port specifier, *:port for all iface)</span><br><span class="line">username&#x3D;user              ; (default is no username (open server))</span><br><span class="line">password&#x3D;123               ; (default is no password (open server))</span><br></pre></td></tr></table></figure>

<p><code>port</code> 中 <code>*.9001</code> 表示接受任意网络的请求，如果设置成 <code>127.0.0.1</code> 则只接受本地访问请求。</p>
<p>通过通过 <code>sudo supervisorctl reload</code> 重启服务。</p>
<p>重启之后，如果之前的配置也没有问题的话，现在在浏览器上通过域名即可浏览该站点了。</p>
<p>在浏览器中输入 <code>服务器IP:9001</code> 来访问 supervisor UI 的管理端页面。</p>
<hr>
<h4 id="Gogs的个性化配置"><a href="#Gogs的个性化配置" class="headerlink" title="Gogs的个性化配置"></a>Gogs的个性化配置</h4><ol>
<li><p>顶部导航菜单中 “帮助” 链接文字，未登录用户不显示 “帮助” 按钮：</p>
<ul>
<li>目录:   <code>gogs\templates\base\head.tmpl</code></li>
<li>位置：  </li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;a class&#x3D;&quot;item&quot; target&#x3D;&quot;_blank&quot; href&#x3D;&quot;http:&#x2F;&#x2F;gogs.io&#x2F;docs&quot; rel&#x3D;&quot;noreferrer&quot;&gt;&#123;&#123;.i18n.Tr &quot;help&quot;&#125;&#125;&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>将 <code></code> 标签下面的改行注释掉。</li>
</ul>
</li>
<li><p>底部右下角显示 “官方网站” 字样，修改为 “Gogs官方网站”：</p>
<ul>
<li>目录： <code>gogs\templates\base\footer.tmpl</code></li>
<li>位置： </li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;a target&#x3D;&quot;_blank&quot; href&#x3D;&quot;http:&#x2F;&#x2F;gogs.io&quot;&gt;&#123;&#123;.i18n.Tr &quot;website&quot;&#125;&#125;&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>更改为：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;a target&#x3D;&quot;_blank&quot; href&#x3D;&quot;https:&#x2F;&#x2F;gogs.io&quot;&gt;Gogs&#123;&#123;.i18n.Tr &quot;website&quot;&#125;&#125;&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>首页，首页样式改版：</p>
<ul>
<li>目录： <code>gogs\templates\home.tmpl</code></li>
</ul>
</li>
<li><p>为md文件中的a标签链接添加target属性，在新页面打开</p>
<p> 在 <code>goapp/gogs/public/js/</code> 目录下，添加名为 <code>mdlinktarget-1.0.min.js</code> 内容如下：</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(document).ready(function()&#123;$(&#39;#file-content a[href^&#x3D;&quot;http&quot;]&#39;).each(function()&#123;$(this).attr(&quot;target&quot;,&quot;_blank&quot;)&#125;)&#125;);</span><br></pre></td></tr></table></figure>

<p>在项目目录 <code>gogs\templates\base</code> 下找到 <code>footer.tmpl</code> 文件，在最下面添加js引用：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script src&#x3D;&quot;&#123;&#123;AppSubUrl&#125;&#125;&#x2F;js&#x2F;mdlinktarget-1.0.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul>
<li><a href="https://gogs.io/docs/installation" target="_blank" rel="noopener">Installation - Gogs - Go Git Service</a></li>
<li><a href="https://mynook.info/blog/post/host-your-own-git-server-using-gogs" target="_blank" rel="noopener">使用 Gogs 搭建自己的 Git 服务器 - My Nook</a></li>
</ul>
]]></content>
      <tags>
        <tag>Gogs</tag>
        <tag>Git Server</tag>
        <tag>代码管理</tag>
      </tags>
  </entry>
  <entry>
    <title>配置Docker镜像加速器</title>
    <url>/2016/12/26/setting-docker-mirror-image-accelerator/</url>
    <content><![CDATA[<p>由于“你懂得”的原因，在国内获取Docker镜像时经常因为网络原因而下载失败，有些人会选择“番茄”，但是配置起来着实麻烦。所以选择国内的镜像加速器是目前解决该问题的最好方法。这里我主要介绍阿里云的Docker镜像加速器和DaoCload的镜像加速器的配置方法。</p>
<p>注意：针对于 Ubunt16.04系统下的Docker配置镜像加速器，可直接参考整理的最新文章：<a href="/2017/01/14/ubuntu-install-docker-and-configure-mirror-accelerator/">Ubuntu16.04安装Docker及配置镜像加速器</a></p>
<p><strong>注意：由于该文章写于2016年12月，其中的一些配置方法可能已过时，建议搜索本站其他相关文章中的最新设置方法。</strong></p>
<h4 id="配置阿里云Docker镜像加速器"><a href="#配置阿里云Docker镜像加速器" class="headerlink" title="配置阿里云Docker镜像加速器"></a>配置阿里云Docker镜像加速器</h4><p>打开 <code>官方地址</code> <a href="https://dev.aliyun.com/" target="_blank" rel="noopener">开发者平台</a>  –  <code>管理中心</code> – <code>加速器</code> 。可以看到 “您的专属加速器地址” 即 <code>https://xxxxxxx.mirror.aliyuncs.com</code> 。</p>
<h5 id="Ubuntu系统下如何配置"><a href="#Ubuntu系统下如何配置" class="headerlink" title="Ubuntu系统下如何配置"></a>Ubuntu系统下如何配置</h5><p>因为我的系统为 <code>Ubuntu 15.04</code> , 所以这里仅以Ubuntu系统下的配置方法为例，其他系统可参考官网中的说明。</p>
<h6 id="安装或升级Docker"><a href="#安装或升级Docker" class="headerlink" title="安装或升级Docker"></a>安装或升级Docker</h6><p>这里要求必须是 1.6.0 以上版本的Docker。可以从阿里云的镜像仓库下载 <a href="mirrors.aliyun.com/help/docker-engine">mirrors.aliyun.com/help/docker-engine</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -sSL http:&#x2F;&#x2F;acs-public-mirror.oss-cn-hangzhou.aliyuncs.com&#x2F;docker-engine&#x2F;internet | sh -</span><br></pre></td></tr></table></figure>

<h6 id="配置Docker加速器"><a href="#配置Docker加速器" class="headerlink" title="配置Docker加速器"></a>配置Docker加速器</h6><p>如果Ubuntu系统是 <code>12.04</code> <code>14.04</code> ，<code>Docker 1.9</code> 以上， 执行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo &quot;DOCKER_OPTS&#x3D;\&quot;\$DOCKER_OPTS --registry-mirror&#x3D;https:&#x2F;&#x2F;xxxxxxx.mirror.aliyuncs.com\&quot;&quot; | sudo tee -a &#x2F;etc&#x2F;default&#x2F;docker</span><br><span class="line">sudo service docker restart</span><br></pre></td></tr></table></figure>

<p>如果Ubuntu系统是 <code>15.04</code> <code>16.04</code> ，<code>Docker 1.9</code> 以上， 执行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mkdir -p &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;docker.service.d</span><br><span class="line">sudo tee &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;docker.service.d&#x2F;mirror.conf &lt;&lt;-&#39;EOF&#39;</span><br><span class="line">[Service]</span><br><span class="line">ExecStart&#x3D;</span><br><span class="line">ExecStart&#x3D;&#x2F;usr&#x2F;bin&#x2F;docker daemon -H fd:&#x2F;&#x2F; --registry-mirror&#x3D;https:&#x2F;&#x2F;xxxxxxx.mirror.aliyuncs.com</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>

<p>等待Docker服务重启后，再次下载镜像则非常快了。</p>
<hr>
<h4 id="配置DaoCload的镜像加速器"><a href="#配置DaoCload的镜像加速器" class="headerlink" title="配置DaoCload的镜像加速器"></a>配置DaoCload的镜像加速器</h4><p>打开 <code>官方地址</code> <a href="http://www.daocloud.io/" target="_blank" rel="noopener">DaoCloud</a> – <code>产品</code> – <code>加速器</code> – <code>立即使用</code> 。</p>
<h5 id="Linux系统配置-Docker-加速器"><a href="#Linux系统配置-Docker-加速器" class="headerlink" title="Linux系统配置 Docker 加速器"></a>Linux系统配置 Docker 加速器</h5><h6 id="命令脚本自动配置-（推荐）"><a href="#命令脚本自动配置-（推荐）" class="headerlink" title="命令脚本自动配置 （推荐）"></a>命令脚本自动配置 （推荐）</h6><p>DaoCloud也会为你分配一个专属的加速器地址，可以直接拷贝页面中给出的代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># curl -sSL https:&#x2F;&#x2F;get.daocloud.io&#x2F;daotools&#x2F;set_mirror.sh | sh -s http:&#x2F;&#x2F;xxxxxx.m.daocloud.io</span><br></pre></td></tr></table></figure>

<p>该脚本可以将 <code>--registry-mirror</code> 加入到你的 Docker 配置文件 <code>/etc/default/docker</code> 中。适用于 Ubuntu14.04、Debian、CentOS6 、CentOS7、Fedora、Arch Linux、openSUSE Leap 42.1，其他版本可能有细微不同。</p>
<h6 id="手动配置"><a href="#手动配置" class="headerlink" title="手动配置"></a>手动配置</h6><p>也可以自己手动修改。</p>
<p>在 <code>/etc/default/docker</code> 文件底部添加如下内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo vim &#x2F;etc&#x2F;default&#x2F;docker</span><br></pre></td></tr></table></figure>

<p>添加：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DOCKER_OPTS&#x3D;&quot;$DOCKER_OPTS --registry-mirror&#x3D;http:&#x2F;&#x2F;xxxxxx.m.daocloud.io&quot;</span><br></pre></td></tr></table></figure>

<h6 id="重启Docker服务"><a href="#重启Docker服务" class="headerlink" title="重启Docker服务"></a>重启Docker服务</h6><p>配置完成后需要重启docker服务。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo service docker restart</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ul>
<li>如果你的系统当前登陆用户不是管理员账户的话，记得添加 <code>sudo</code> 以免执行失败。</li>
<li><strong>上文代码段中给出的镜像加速器地址中的 <code>xxxxxxx</code> 为阿里云或DaoCloud在你注册账户后分配的指定地址名称，切记要修改为自己账户的给定地址。</strong></li>
</ul>
<hr>
<h4 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h4><ul>
<li><a href="https://dev.aliyun.com/" target="_blank" rel="noopener">阿里云开发者平台</a></li>
<li><a href="http://www.daocloud.io/" target="_blank" rel="noopener">DaoCloud</a></li>
<li><a href="https://yq.aliyun.com/articles/29941" target="_blank" rel="noopener">Docker 镜像加速器-博客-云栖社区-阿里云</a></li>
<li><a href="http://www.jianshu.com/p/bc35ea82b61d" target="_blank" rel="noopener">使用DaoCloud安装Docker和镜像 - 简书</a></li>
</ul>
]]></content>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Alpine下配置Selenium运行环境</title>
    <url>/2016/10/19/configuration-the-selenium-running-environment-in-alpine/</url>
    <content><![CDATA[<h4 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h4><ul>
<li>Alpine Linux 3.4</li>
</ul>
<h4 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h4><h5 id="设置软件安装源"><a href="#设置软件安装源" class="headerlink" title="设置软件安装源"></a>设置软件安装源</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ echo &quot;http:&#x2F;&#x2F;dl-4.alpinelinux.org&#x2F;alpine&#x2F;v3.4&#x2F;main&quot; &gt;&gt; &#x2F;etc&#x2F;apk&#x2F;repositories</span><br></pre></td></tr></table></figure>

<h5 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h5><p>执行以下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ apk update</span><br><span class="line">$ apk add python py-pip curl unzip</span><br><span class="line">$ pip install selenium</span><br></pre></td></tr></table></figure>

<h4 id="支持的浏览器及-WebDriver-驱动"><a href="#支持的浏览器及-WebDriver-驱动" class="headerlink" title="支持的浏览器及 WebDriver 驱动"></a>支持的浏览器及 WebDriver 驱动</h4><p>这里我以常用的Chrome 和 Firefox 为例，来配置运行环境。</p>
<h4 id="Selenium调用Chrome浏览器"><a href="#Selenium调用Chrome浏览器" class="headerlink" title="Selenium调用Chrome浏览器"></a>Selenium调用Chrome浏览器</h4><p>Alpine系统下面使用Chrome推荐安装开源的 Chromium 浏览器</p>
<h5 id="安装-Chromium"><a href="#安装-Chromium" class="headerlink" title="安装 Chromium"></a>安装 Chromium</h5><p>因为在软件库中存在 <code>Chromium</code> 的包，所以可以直接通过 <code>apk</code> 来安装：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ apk add chromium</span><br></pre></td></tr></table></figure>

<p>然后还要安装 chromium 的依赖包：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ apk add libexif udev</span><br></pre></td></tr></table></figure>

<p>如果没有安装 <code>libexif</code> <code>udev</code> 这两个依赖包，会报如下错误，Chromium浏览器会无法启动：</p>
<blockquote>
<p>selenium.common.exceptions.WebDriverException: Message: unknown error: Chrome failed to start: crashed</p>
</blockquote>
<p>上面命令执行完成后，chromium 浏览器就安装好了。可以通过命令 <code>chromium-browser</code> 来测试：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ chromium-browser</span><br><span class="line">[54:54:1019&#x2F;081743:ERROR:browser_main_loop.cc(261)] Gtk: cannot open display:</span><br></pre></td></tr></table></figure>

<p>因为在 Server 系统下没有显示窗口，提示上面的信息说明 chromium 程序可以调用的到，只是无法显示。</p>
<h5 id="安装-ChromeDriver"><a href="#安装-ChromeDriver" class="headerlink" title="安装 ChromeDriver"></a>安装 ChromeDriver</h5><p>ChromeDriver是一个实现了WebDriver与Chromium联接协议的独立服务。</p>
<h6 id="通过-apk-安装"><a href="#通过-apk-安装" class="headerlink" title="通过 apk 安装"></a>通过 apk 安装</h6><p>我们可以直接通过如下命令来安装 <code>chromedriver</code> 程序：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ apk add chromium-chromedriver</span><br></pre></td></tr></table></figure>

<h6 id="测试-ChromeDriver"><a href="#测试-ChromeDriver" class="headerlink" title="测试 ChromeDriver"></a>测试 ChromeDriver</h6><p>执行 <code>chromedriver</code> 查看是否能正常运行。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ chromedriver</span><br><span class="line">Starting ChromeDriver 2.22 (5e2d5494d735a71aa5c2e7ef9bf5ce96945e92e9) on port 9515</span><br><span class="line">Only local connections are allowed.</span><br></pre></td></tr></table></figure>

<p>当提示 <code>Starting ChromeDriver xxx on port 9515</code> 信息时，说明 <code>ChromeDriver</code> 设置成功。  </p>
<hr>
<h4 id="Selenium调用Firefox浏览器"><a href="#Selenium调用Firefox浏览器" class="headerlink" title="Selenium调用Firefox浏览器"></a>Selenium调用Firefox浏览器</h4><h5 id="安装-Firefox-浏览器"><a href="#安装-Firefox-浏览器" class="headerlink" title="安装 Firefox 浏览器"></a>安装 Firefox 浏览器</h5><p>可以通过 <code>apk</code> 直接安装 Firefox 浏览器：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ apk add firefox-esr</span><br></pre></td></tr></table></figure>

<p>然后还要安装 firefox 的依赖包：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ apk add dbus-x11 ttf-freefont</span><br></pre></td></tr></table></figure>

<p>其中 <code>dbus-x11</code> 中 <code>x11</code> 中是数字1，<code>D-Bus</code> 是一个消息总线，用于在应用程序间发送消息。 如果不安装会报如下错误信息：</p>
<blockquote>
<p>selenium.common.exceptions.WebDriverException: Message: connection refused</p>
</blockquote>
<p>在 geckodriver.log 文件中查看到如下信息:</p>
<blockquote>
<p>process 116: D-Bus library appears to be incorrectly set up; failed to read machine uuid: Failed to open “/etc/machine-id”: No such file or directory<br>See the manual page for dbus-uuidgen to correct this issue.<br>  D-Bus not compiled with backtrace support so unable to print a backtrace<br>Redirecting call to abort() to mozalloc_abort</p>
</blockquote>
<hr>
<p>其中 <code>ttf-freefont</code> 是一个字体相关的依赖包，如果不安装会报如下错：</p>
<blockquote>
<p>selenium.common.exceptions.WebDriverException: Message: Failed to decode response from marionette</p>
</blockquote>
<p>在 geckodriver.log 文件中查看到如下信息:</p>
<blockquote>
<p>Crash Annotation GraphicsCriticalError: |[0][GFX1]: no fonts - init: 1 fonts: 0 loader: 0[GFX1]: no fonts - init: 1 fonts: 0 loader: 0<br>^G[162] ###!!! ABORT: unable to find a usable font (serif): file /home/buildozer/aports/community/firefox-esr/src/firefox-45.4.0esr/gfx/thebes/gfxTextRun.cpp<br>[162] ###!!! ABORT: unable to find a usable font (serif): file /home/buildozer/aports/community/firefox-esr/src/firefox-45.4.0esr/gfx/thebes/gfxTextRun.cpp,</p>
</blockquote>
<hr>
<p>可通过命令 <code>firefox</code> 测试 firefox浏览器是否安装成功：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ firefox</span><br><span class="line">Error: no display specified</span><br></pre></td></tr></table></figure>

<p>同样的，由于没有显示窗口，也会提示 <code>no display</code> 的错误。</p>
<h5 id="安装-geckodriver"><a href="#安装-geckodriver" class="headerlink" title="安装 geckodriver"></a>安装 geckodriver</h5><h6 id="下载-geckodriver"><a href="#下载-geckodriver" class="headerlink" title="下载 geckodriver"></a>下载 geckodriver</h6><p>访问站点 <a href="https://github.com/mozilla/geckodriver/releases" target="_blank" rel="noopener">geckodriver</a> 下载当前系统对应 geckodriver 程序。</p>
<p>执行如下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ curl https:&#x2F;&#x2F;github.com&#x2F;mozilla&#x2F;geckodriver&#x2F;releases&#x2F;download&#x2F;v0.11.1&#x2F;geckodriver-v0.11.1-linux64.tar.gz -O</span><br><span class="line"></span><br><span class="line">$ tar -zxvf geckodriver-v0.11.1-linux64.tar.gz</span><br><span class="line"></span><br><span class="line">$ ls</span><br><span class="line">geckodriver</span><br></pre></td></tr></table></figure>

<p>解压后我们得到了一个 <code>geckodriver</code> 执行程序。</p>
<p>该 <code>geckodriver</code> 压缩包可能由于网络原因下载失败，可通过迅雷等软件下载后拷贝到Linux系统中。</p>
<h6 id="将-geckodriver-放到系统-PATH-目录下"><a href="#将-geckodriver-放到系统-PATH-目录下" class="headerlink" title="将 geckodriver 放到系统 PATH 目录下"></a>将 geckodriver 放到系统 PATH 目录下</h6><p>我们可以在程序中指定具体的 geckodriver 所在的目录，不指定的话会默认去系统PATH目录下找。为了编程方便，我们将其放到系统PATH目录下。</p>
<p>查看系统目录：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ echo $PATH</span><br></pre></td></tr></table></figure>

<p>这里我将其放到 <code>/usr/local/bin/</code> 目录下，并添加可执行权限：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ mv .&#x2F;geckodriver &#x2F;usr&#x2F;local&#x2F;bin&#x2F;</span><br><span class="line"></span><br><span class="line">$ chmod a+x &#x2F;usr&#x2F;local&#x2F;bin&#x2F;geckodriver</span><br></pre></td></tr></table></figure>

<h6 id="测试-geckodriver"><a href="#测试-geckodriver" class="headerlink" title="测试 geckodriver"></a>测试 geckodriver</h6><p>执行 <code>geckodriver</code> 查看是否能正常运行。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ geckodriver </span><br><span class="line">1476443497207	geckodriver	INFO	Listening on 127.0.0.1:4444</span><br></pre></td></tr></table></figure>

<p>当提示 <code>Listening on 127.0.0.1:4444</code> 信息时，说明 <code>geckodriver</code> 设置成功。  </p>
<p>如果提示如下错误信息，则是在系统PATH下找不到 <code>geckodriver</code> :</p>
<blockquote>
<p>selenium.common.exceptions.WebDriverException: Message: ‘geckodriver’ executable needs to be in PATH.</p>
</blockquote>
<hr>
<h4 id="安装虚拟显示器-xvfb"><a href="#安装虚拟显示器-xvfb" class="headerlink" title="安装虚拟显示器 xvfb"></a>安装虚拟显示器 xvfb</h4><h5 id="为什么要用-xvfb"><a href="#为什么要用-xvfb" class="headerlink" title="为什么要用 xvfb??"></a>为什么要用 xvfb??</h5><p>xvfb 这个工具相当于一个wrapper，给应用程序提供虚拟的 X server</p>
<h5 id="执行如下命令安装"><a href="#执行如下命令安装" class="headerlink" title="执行如下命令安装"></a>执行如下命令安装</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ apk add xvfb</span><br><span class="line">$ pip install pyvirtualdisplay</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="测试-selenium-调用浏览器获取网页"><a href="#测试-selenium-调用浏览器获取网页" class="headerlink" title="测试 selenium 调用浏览器获取网页"></a>测试 selenium 调用浏览器获取网页</h4><h5 id="Chrome-版本"><a href="#Chrome-版本" class="headerlink" title="Chrome 版本"></a>Chrome 版本</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#coding:utf-8</span><br><span class="line"></span><br><span class="line">import time</span><br><span class="line">from selenium import webdriver</span><br><span class="line">from pyvirtualdisplay import Display</span><br><span class="line"></span><br><span class="line">display&#x3D;Display(visible&#x3D;0,size&#x3D;(800,800))</span><br><span class="line">display.start()</span><br><span class="line"></span><br><span class="line">driver&#x3D;webdriver.Chrome()</span><br><span class="line">driver.get(&#39;http:&#x2F;&#x2F;www.cnblogs.com&#x2F;&#39;)</span><br><span class="line">time.sleep(5)</span><br><span class="line">title&#x3D;driver.title</span><br><span class="line">print(title.encode(&#39;utf-8&#39;))</span><br><span class="line">driver.close()</span><br><span class="line"></span><br><span class="line">display.stop()</span><br></pre></td></tr></table></figure>

<p>将以上代码保存为 <code>chrome.py</code> ，执行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ python chrome.py</span><br><span class="line">博客园 - 开发者的网上家园</span><br></pre></td></tr></table></figure>

<h5 id="Firefox-版本"><a href="#Firefox-版本" class="headerlink" title="Firefox 版本"></a>Firefox 版本</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#coding:utf-8</span><br><span class="line"></span><br><span class="line">import time</span><br><span class="line">from selenium import webdriver</span><br><span class="line">from pyvirtualdisplay import Display</span><br><span class="line"></span><br><span class="line">display&#x3D;Display(visible&#x3D;0,size&#x3D;(800,800))</span><br><span class="line">display.start()</span><br><span class="line"></span><br><span class="line">driver&#x3D;webdriver.Firefox()</span><br><span class="line">driver.get(&#39;http:&#x2F;&#x2F;www.cnblogs.com&#x2F;&#39;)</span><br><span class="line">time.sleep(5)</span><br><span class="line">title&#x3D;driver.title</span><br><span class="line">print(title.encode(&#39;utf-8&#39;))</span><br><span class="line">driver.close()</span><br><span class="line"></span><br><span class="line">display.stop()</span><br></pre></td></tr></table></figure>

<p>将以上代码保存为 <code>firefox.py</code> ，执行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ python firefox.py</span><br><span class="line">博客园 - 开发者的网上家园</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="Docker实现"><a href="#Docker实现" class="headerlink" title="Docker实现"></a>Docker实现</h4><p>详情请参考开源项目：</p>
<ul>
<li><a href="https://github.com/Leafney/alpine-selenium-chrome" target="_blank" rel="noopener">Leafney/alpine-selenium-chrome</a></li>
<li><a href="https://hub.docker.com/r/leafney/alpine-selenium-chrome/" target="_blank" rel="noopener">leafney/alpine-selenium-chrome</a></li>
<li><a href="https://github.com/Leafney/alpine-selenium-firefox" target="_blank" rel="noopener">Leafney/alpine-selenium-firefox</a></li>
<li><a href="https://hub.docker.com/r/leafney/alpine-selenium-firefox/" target="_blank" rel="noopener">leafney/alpine-selenium-firefox</a></li>
</ul>
<hr>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>Alpine</tag>
        <tag>Selenium</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu下配置Selenium运行环境</title>
    <url>/2016/10/19/configuration-the-selenium-running-environment-in-ubuntu/</url>
    <content><![CDATA[<p>Selenium，自动化测试工具。</p>
<h4 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h4><ul>
<li>Ubuntu 16.04 TLS</li>
</ul>
<h4 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h4><h5 id="设置软件安装源"><a href="#设置软件安装源" class="headerlink" title="设置软件安装源"></a>设置软件安装源</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ echo &quot;deb http:&#x2F;&#x2F;cn.archive.ubuntu.com&#x2F;ubuntu&#x2F; xenial main restricted universe multiverse&quot; &gt;&gt; &#x2F;etc&#x2F;apt&#x2F;sources.list</span><br></pre></td></tr></table></figure>

<p>也可以改成：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ echo &quot;deb http:&#x2F;&#x2F;cn.archive.ubuntu.com&#x2F;ubuntu&#x2F; xenial main restricted universe multiverse&quot; &gt; &#x2F;etc&#x2F;apt&#x2F;sources.list</span><br></pre></td></tr></table></figure>

<h5 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h5><p>执行以下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get install python python-pip curl unzip -y</span><br><span class="line">$ sudo pip install selenium</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="支持的浏览器及-WebDriver-驱动"><a href="#支持的浏览器及-WebDriver-驱动" class="headerlink" title="支持的浏览器及 WebDriver 驱动"></a>支持的浏览器及 WebDriver 驱动</h4><p>Selenium可以调用Chrome 、Firefox 、Safari 等浏览器。</p>
<p>WebDriver 支持以下的</p>
<ul>
<li>ChromeDriver</li>
<li>EventFiringWebDriver</li>
<li>FirefoxDriver</li>
<li>HtmlUnitDriver</li>
<li>InternetExplorerDriver</li>
<li>PhantomJSDriver</li>
<li>RemoteWebDriver</li>
<li>SafariDriver</li>
</ul>
<p>这里我以常用的Chrome 和 Firefox 为例，来配置运行环境。</p>
<p>我们需要安装相对应的浏览器和浏览器驱动 WebDriver 。比如 Selenium 无法直接启动 Chrome ，需要用第三方插件 ChromeDriver 来调用。</p>
<h4 id="Selenium调用Chrome浏览器"><a href="#Selenium调用Chrome浏览器" class="headerlink" title="Selenium调用Chrome浏览器"></a>Selenium调用Chrome浏览器</h4><p>Chrome浏览器我们可以使用官方的 Google Chrome 浏览器 或者 开源的 Chromium 浏览器</p>
<h5 id="安装-Google-Chrome"><a href="#安装-Google-Chrome" class="headerlink" title="安装 Google Chrome"></a>安装 Google Chrome</h5><p>执行如下命令安装，这里我们选择的是 <code>google-chrome-stable</code> 版本：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ wget -q -O - https:&#x2F;&#x2F;dl-ssl.google.com&#x2F;linux&#x2F;linux_signing_key.pub | sudo apt-key add -</span><br><span class="line"></span><br><span class="line">$ sudo sh -c &#39;echo &quot;deb [arch&#x3D;amd64] http:&#x2F;&#x2F;dl.google.com&#x2F;linux&#x2F;chrome&#x2F;deb&#x2F; stable main&quot; &gt;&gt; &#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;google.list&#39;</span><br><span class="line"></span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install google-chrome-stable</span><br></pre></td></tr></table></figure>

<p>详细可访问：</p>
<ul>
<li><a href="http://www.ubuntuupdates.org/ppa/google_chrome" target="_blank" rel="noopener">UbuntuUpdates-Google Chrome</a></li>
<li><a href="http://www.ubuntuupdates.org/pm/google-chrome-stable" target="_blank" rel="noopener">All “google-chrome-stable” versions</a></li>
</ul>
<p>或者可以通过以下命令直接下载 <code>*.deb</code> 安装包：</p>
<ul>
<li>x64 – <code>$ curl http://dl.google.com/linux/chrome/deb/pool/main/g/google-chrome-stable/google-chrome-stable_54.0.2840.59-1_amd64.deb -O</code></li>
<li>x32 – 32位版本已不可用</li>
</ul>
<p>安装deb安装包：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ dpkg -i google-chrome-stable_54.0.2840.59-1_amd64.deb</span><br></pre></td></tr></table></figure>

<p>安装过程中可能会安装失败，缺少依赖：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dpkg: error processing package google-chrome-stable (--install):</span><br><span class="line"> dependency problems - leaving unconfigured</span><br><span class="line">Processing triggers for mime-support (3.59ubuntu1) ...</span><br><span class="line">Errors were encountered while processing:</span><br><span class="line"> google-chrome-stable</span><br></pre></td></tr></table></figure>

<p>通过如下命令解决：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ apt-get -f install</span><br></pre></td></tr></table></figure>

<ul>
<li><a href="http://askubuntu.com/questions/510056/how-to-install-google-chrome" target="_blank" rel="noopener">software installation - How to install Google Chrome? - Ask Ubuntu</a></li>
</ul>
<hr>
<h5 id="安装-Chromium"><a href="#安装-Chromium" class="headerlink" title="安装 Chromium"></a>安装 Chromium</h5><p>Google Chrome isn’t in the repositories - however, Chromium is.</p>
<p>因为在软件库中存在 Chromium 的包，所以可以直接通过 <code>apt-get</code> 来安装：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get install chromium-browser</span><br></pre></td></tr></table></figure>

<h5 id="未安装Chrome浏览器异常"><a href="#未安装Chrome浏览器异常" class="headerlink" title="未安装Chrome浏览器异常"></a>未安装Chrome浏览器异常</h5><p>如果未安装 Google-Chrome 或  Chromium 浏览器，会提示如下错误信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">selenium.common.exceptions.WebDriverException: Message: unknown error: cannot find Chrome binary</span><br></pre></td></tr></table></figure>

<h5 id="安装-ChromeDriver"><a href="#安装-ChromeDriver" class="headerlink" title="安装 ChromeDriver"></a>安装 ChromeDriver</h5><p>ChromeDriver是一个实现了WebDriver与Chromium联接协议的独立服务。</p>
<h6 id="下载-ChromeDriver"><a href="#下载-ChromeDriver" class="headerlink" title="下载 ChromeDriver"></a>下载 ChromeDriver</h6><p>访问站点 <a href="http://chromedriver.storage.googleapis.com/index.html" target="_blank" rel="noopener">chromedriver</a> 下载当前系统对应的 <code>chromedriver</code> 程序, 页面中给出了不同Chrome版本对应的 ChromeDriver 程序。</p>
<p>执行命令如下，下载并解压：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ curl http:&#x2F;&#x2F;chromedriver.storage.googleapis.com&#x2F;2.24&#x2F;chromedriver_linux64.zip -O</span><br><span class="line"></span><br><span class="line">$ unzip chromedriver_linux64.zip</span><br><span class="line"></span><br><span class="line">$ ls</span><br><span class="line">chromedriver</span><br></pre></td></tr></table></figure>

<p>解压后我们得到了一个 <code>chromedriver</code> 执行程序。</p>
<h6 id="将-ChromeDriver-放到系统-PATH-目录下"><a href="#将-ChromeDriver-放到系统-PATH-目录下" class="headerlink" title="将 ChromeDriver 放到系统 PATH 目录下"></a>将 ChromeDriver 放到系统 PATH 目录下</h6><p>我们可以在程序中指定具体的 ChromeDriver 所在的目录，不指定的话会默认去系统PATH目录下找。为了编程方便，我们将其放到系统PATH目录下。</p>
<p>查看系统目录：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ echo $PATH</span><br></pre></td></tr></table></figure>

<p>这里我将其放到 <code>/usr/local/bin/</code> 目录下，并添加可执行权限：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo mv .&#x2F;chromedriver &#x2F;usr&#x2F;local&#x2F;bin&#x2F;</span><br><span class="line"></span><br><span class="line">$ sudo chmod a+x &#x2F;usr&#x2F;local&#x2F;bin&#x2F;chromedriver</span><br></pre></td></tr></table></figure>

<h6 id="测试-ChromeDriver"><a href="#测试-ChromeDriver" class="headerlink" title="测试 ChromeDriver"></a>测试 ChromeDriver</h6><p>执行 <code>chromedriver</code> 查看是否能正常运行。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ chromedriver </span><br><span class="line">Starting ChromeDriver 2.24.417424 (c5c5ea873213ee72e3d0929b47482681555340c3) on port 9515</span><br><span class="line">Only local connections are allowed.</span><br></pre></td></tr></table></figure>

<p>当提示 <code>Starting ChromeDriver xxx on port 9515</code> 信息时，说明 <code>ChromeDriver</code> 设置成功。  </p>
<p>如果提示如下错误信息，则是在系统PATH下找不到 <code>ChromeDriver</code> :</p>
<blockquote>
<p>selenium.common.exceptions.WebDriverException: Message: ‘chromedriver’ executable needs to be in PATH. Please see <a href="https://sites.google.com/a/chromium.org/chromedriver/home" target="_blank" rel="noopener">https://sites.google.com/a/chromium.org/chromedriver/home</a></p>
</blockquote>
<hr>
<h4 id="Selenium调用Firefox浏览器"><a href="#Selenium调用Firefox浏览器" class="headerlink" title="Selenium调用Firefox浏览器"></a>Selenium调用Firefox浏览器</h4><h5 id="安装-Firefox-浏览器"><a href="#安装-Firefox-浏览器" class="headerlink" title="安装 Firefox 浏览器"></a>安装 Firefox 浏览器</h5><p>可以通过 <code>apt-get</code> 直接安装 Firefox 浏览器：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install firefox</span><br></pre></td></tr></table></figure>

<h5 id="未安装Firefox浏览器异常"><a href="#未安装Firefox浏览器异常" class="headerlink" title="未安装Firefox浏览器异常"></a>未安装Firefox浏览器异常</h5><p>如果未安装 Firefox 浏览器程序，则会提示如下错误：</p>
<blockquote>
<p>selenium.common.exceptions.WebDriverException: Message: Expected browser binary location, but unable to find binary in default location, no ‘moz:firefoxOptions.binary’ capability provided, and no binary flag set on the command line</p>
</blockquote>
<h5 id="安装-geckodriver"><a href="#安装-geckodriver" class="headerlink" title="安装 geckodriver"></a>安装 geckodriver</h5><h6 id="下载-geckodriver"><a href="#下载-geckodriver" class="headerlink" title="下载 geckodriver"></a>下载 geckodriver</h6><p>访问站点 <a href="https://github.com/mozilla/geckodriver/releases" target="_blank" rel="noopener">geckodriver</a> 下载当前系统对应 geckodriver 程序。</p>
<p>执行如下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ curl https:&#x2F;&#x2F;github.com&#x2F;mozilla&#x2F;geckodriver&#x2F;releases&#x2F;download&#x2F;v0.11.1&#x2F;geckodriver-v0.11.1-linux64.tar.gz -O</span><br><span class="line"></span><br><span class="line">$ tar -zxvf geckodriver-v0.11.1-linux64.tar.gz</span><br><span class="line"></span><br><span class="line">$ ls</span><br><span class="line">geckodriver</span><br></pre></td></tr></table></figure>

<p>解压后我们得到了一个 <code>geckodriver</code> 执行程序。</p>
<p>该 <code>geckodriver</code> 压缩包可能由于网络原因下载失败，可通过迅雷等软件下载后拷贝到Linux系统中。</p>
<h6 id="将-geckodriver-放到系统-PATH-目录下"><a href="#将-geckodriver-放到系统-PATH-目录下" class="headerlink" title="将 geckodriver 放到系统 PATH 目录下"></a>将 geckodriver 放到系统 PATH 目录下</h6><p>我们可以在程序中指定具体的 geckodriver 所在的目录，不指定的话会默认去系统PATH目录下找。为了编程方便，我们将其放到系统PATH目录下。</p>
<p>查看系统目录：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ echo $PATH</span><br></pre></td></tr></table></figure>

<p>这里我将其放到 <code>/usr/local/bin/</code> 目录下，并添加可执行权限：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo mv .&#x2F;geckodriver &#x2F;usr&#x2F;local&#x2F;bin&#x2F;</span><br><span class="line"></span><br><span class="line">$ sudo chmod a+x &#x2F;usr&#x2F;local&#x2F;bin&#x2F;geckodriver</span><br></pre></td></tr></table></figure>

<h6 id="测试-geckodriver"><a href="#测试-geckodriver" class="headerlink" title="测试 geckodriver"></a>测试 geckodriver</h6><p>执行 <code>geckodriver</code> 查看是否能正常运行。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ geckodriver </span><br><span class="line">1476443497207	geckodriver	INFO	Listening on 127.0.0.1:4444</span><br></pre></td></tr></table></figure>

<p>当提示 <code>Listening on 127.0.0.1:4444</code> 信息时，说明 <code>geckodriver</code> 设置成功。  </p>
<p>如果提示如下错误信息，则是在系统PATH下找不到 <code>geckodriver</code> :</p>
<blockquote>
<p>selenium.common.exceptions.WebDriverException: Message: ‘geckodriver’ executable needs to be in PATH.</p>
</blockquote>
<hr>
<h4 id="安装虚拟显示器-xvfb"><a href="#安装虚拟显示器-xvfb" class="headerlink" title="安装虚拟显示器 xvfb"></a>安装虚拟显示器 xvfb</h4><h5 id="为什么要用-xvfb"><a href="#为什么要用-xvfb" class="headerlink" title="为什么要用 xvfb??"></a>为什么要用 xvfb??</h5><p>xvfb 这个工具相当于一个wrapper，给应用程序提供虚拟的 X server</p>
<h5 id="执行如下命令安装"><a href="#执行如下命令安装" class="headerlink" title="执行如下命令安装"></a>执行如下命令安装</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install xvfb</span><br><span class="line">$ sudo pip install pyvirtualdisplay</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="测试selenium调用浏览器获取网页"><a href="#测试selenium调用浏览器获取网页" class="headerlink" title="测试selenium调用浏览器获取网页"></a>测试selenium调用浏览器获取网页</h4><h5 id="Chrome-版本"><a href="#Chrome-版本" class="headerlink" title="Chrome 版本"></a>Chrome 版本</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#coding:utf-8</span><br><span class="line"></span><br><span class="line">import time</span><br><span class="line">from selenium import webdriver</span><br><span class="line">from pyvirtualdisplay import Display</span><br><span class="line"></span><br><span class="line">display&#x3D;Display(visible&#x3D;0,size&#x3D;(800,800))</span><br><span class="line">display.start()</span><br><span class="line"></span><br><span class="line">driver&#x3D;webdriver.Chrome()</span><br><span class="line">driver.get(&#39;http:&#x2F;&#x2F;www.cnblogs.com&#x2F;&#39;)</span><br><span class="line">time.sleep(5)</span><br><span class="line">title&#x3D;driver.title</span><br><span class="line">print(title.encode(&#39;utf-8&#39;))</span><br><span class="line">driver.close()</span><br><span class="line"></span><br><span class="line">display.stop()</span><br></pre></td></tr></table></figure>

<p>将以上代码保存为 <code>chrome.py</code> ，执行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ python chrome.py</span><br><span class="line">博客园 - 开发者的网上家园</span><br></pre></td></tr></table></figure>

<h5 id="Firefox-版本"><a href="#Firefox-版本" class="headerlink" title="Firefox 版本"></a>Firefox 版本</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#coding:utf-8</span><br><span class="line"></span><br><span class="line">import time</span><br><span class="line">from selenium import webdriver</span><br><span class="line">from pyvirtualdisplay import Display</span><br><span class="line"></span><br><span class="line">display&#x3D;Display(visible&#x3D;0,size&#x3D;(800,800))</span><br><span class="line">display.start()</span><br><span class="line"></span><br><span class="line">driver&#x3D;webdriver.Firefox()</span><br><span class="line">driver.get(&#39;http:&#x2F;&#x2F;www.cnblogs.com&#x2F;&#39;)</span><br><span class="line">time.sleep(5)</span><br><span class="line">title&#x3D;driver.title</span><br><span class="line">print(title.encode(&#39;utf-8&#39;))</span><br><span class="line">driver.close()</span><br><span class="line"></span><br><span class="line">display.stop()</span><br></pre></td></tr></table></figure>

<p>将以上代码保存为 <code>firefox.py</code> ，执行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ python firefox.py</span><br><span class="line">博客园 - 开发者的网上家园</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="代码详解"><a href="#代码详解" class="headerlink" title="代码详解"></a>代码详解</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#coding:utf-8</span><br><span class="line"></span><br><span class="line">import time</span><br><span class="line">from selenium import webdriver</span><br><span class="line">from pyvirtualdisplay import Display</span><br><span class="line"></span><br><span class="line"># 设置虚拟显示器的窗口大小</span><br><span class="line">display&#x3D;Display(visible&#x3D;0,size&#x3D;(800,800))</span><br><span class="line">display.start()</span><br><span class="line"></span><br><span class="line">driver&#x3D;webdriver.Chrome()</span><br><span class="line">driver.get(&#39;http:&#x2F;&#x2F;www.cnblogs.com&#x2F;&#39;)</span><br><span class="line">time.sleep(5)</span><br><span class="line"></span><br><span class="line"># 打印网页的标题</span><br><span class="line">title&#x3D;driver.title</span><br><span class="line">print(title.encode(&#39;utf-8&#39;))</span><br><span class="line"># 退出浏览器</span><br><span class="line">driver.close()</span><br><span class="line"></span><br><span class="line"># 关闭虚拟显示器窗口</span><br><span class="line">display.stop()</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="Docker实现"><a href="#Docker实现" class="headerlink" title="Docker实现"></a>Docker实现</h4><p>详情请参考开源项目：</p>
<hr>
<h4 id="相关参考"><a href="#相关参考" class="headerlink" title="相关参考"></a>相关参考</h4><ul>
<li><a href="http://chromedriver.storage.googleapis.com/index.html" target="_blank" rel="noopener">ChromeDriver</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Mozilla/QA/Marionette/WebDriver" target="_blank" rel="noopener">WebDriver - Mozilla | MDN</a></li>
<li><a href="https://github.com/mozilla/geckodriver" target="_blank" rel="noopener">GitHub - mozilla/geckodriver: WebDriver &lt;-&gt; Marionette proxy</a> <strong>☆</strong></li>
<li><a href="http://stackoverflow.com/questions/6183276/how-do-i-run-selenium-in-xvfb" target="_blank" rel="noopener">python - How do I run Selenium in Xvfb? - Stack Overflow</a> <strong>☆</strong></li>
<li><a href="http://blog.163.com/he_junwei/blog/static/1979376462013126105119274/" target="_blank" rel="noopener">Selenium2.0</a></li>
</ul>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>Selenium</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu下安装及配置MySql数据库</title>
    <url>/2016/10/06/ubuntu-install-mysql-db/</url>
    <content><![CDATA[<h4 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h4><p>测试系统为 <code>Ubuntu 16.04 LTS</code></p>
<h5 id="更新Ubuntu软件安装源"><a href="#更新Ubuntu软件安装源" class="headerlink" title="更新Ubuntu软件安装源"></a>更新Ubuntu软件安装源</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ echo &quot;deb http:&#x2F;&#x2F;cn.archive.ubuntu.com&#x2F;ubuntu&#x2F; xenial main restricted universe multiverse&quot; &gt;&gt; &#x2F;etc&#x2F;apt&#x2F;sources.list</span><br></pre></td></tr></table></figure>

<h5 id="安装mysql-server"><a href="#安装mysql-server" class="headerlink" title="安装mysql-server"></a>安装mysql-server</h5><p>执行如下命令安装mysql:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get install mysql-server</span><br></pre></td></tr></table></figure>

<p>安装过程会弹出提示框，输入root用户的密码，这里设置密码为 <code>mysql</code> 。</p>
<p>安装完成后，通过命令 <code>mysql -V</code> 查看mysql版本信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># mysql -V</span><br><span class="line">mysql  Ver 14.14 Distrib 5.7.15, for Linux (x86_64) using  EditLine wrapper</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="解决mysql连接错误-ERROR-2002-HY000"><a href="#解决mysql连接错误-ERROR-2002-HY000" class="headerlink" title="解决mysql连接错误 ERROR 2002 (HY000)"></a>解决mysql连接错误 ERROR 2002 (HY000)</h4><p>在使用 <code>root</code> 账户连接mysql时，报了如下的 <code>2002</code> 错误：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># mysql -uroot -p</span><br><span class="line">Enter password: </span><br><span class="line">ERROR 2002 (HY000): Can&#39;t connect to local MySQL server through socket &#39;&#x2F;var&#x2F;run&#x2F;mysqld&#x2F;mysqld.sock&#39; (2)</span><br></pre></td></tr></table></figure>

<p>查看 <code>mysql</code> 服务是否启动，执行如下命令查看：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># ps -aux |grep mysqld</span><br><span class="line">root       984  0.0  0.0  11276   728 ?        S+   07:23   0:00 grep --color&#x3D;auto mysqld</span><br><span class="line"># ps -aux |grep mysql </span><br><span class="line">root       986  0.0  0.0  11276   728 ?        S+   07:23   0:00 grep --color&#x3D;auto mysql</span><br></pre></td></tr></table></figure>

<p>可见mysql的服务并没有启动，然后我们尝试启动服务：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo service mysql start</span><br><span class="line"></span><br><span class="line"># service mysql start</span><br><span class="line"> * Starting MySQL database server mysqld                                                                                                                       No directory, logging in with HOME&#x3D;&#x2F;</span><br></pre></td></tr></table></figure>

<p>mysql的服务居然无法启动。</p>
<p>最终找到原因是当前用户对 <code>/var/run/mysqld</code> 目录没有操作权限导致的。</p>
<p>先查看 <code>/var/run/</code> 下是否存在 mysqld目录，没有先创建。</p>
<p>执行如下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo chown -R mysql:mysql &#x2F;var&#x2F;run&#x2F;mysqld</span><br></pre></td></tr></table></figure>

<p>然后再次尝试启动mysql服务：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo service mysql start</span><br><span class="line"></span><br><span class="line"># service mysql status</span><br><span class="line"> * &#x2F;usr&#x2F;bin&#x2F;mysqladmin  Ver 8.42 Distrib 5.7.15, for Linux on x86_64</span><br><span class="line">Copyright (c) 2000, 2016, Oracle and&#x2F;or its affiliates. All rights reserved.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and&#x2F;or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Server version		5.7.15-0ubuntu0.16.04.1</span><br><span class="line">Protocol version	10</span><br><span class="line">Connection		Localhost via UNIX socket</span><br><span class="line">UNIX socket		&#x2F;var&#x2F;run&#x2F;mysqld&#x2F;mysqld.sock</span><br><span class="line">Uptime:			7 sec</span><br><span class="line"></span><br><span class="line">Threads: 1  Questions: 8  Slow queries: 0  Opens: 105  Flush tables: 1  Open tables: 98  Queries per second avg: 1.142</span><br></pre></td></tr></table></figure>

<p>可以看到mysql服务启动成功了。</p>
<p>网上查找各种解决该问题的方法，也只有这一种方法是根本原因。</p>
<p>所以当再次遇到该问题的时候，先查看一下目录是否有操作权限：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ls -al &#x2F;var&#x2F;run&#x2F;mysqld&#x2F;</span><br></pre></td></tr></table></figure>

<p><strong>chown命令将指定文件的拥有者改为指定的用户或组</strong></p>
<ul>
<li><a href="http://www.faceye.net/search/79276.html" target="_blank" rel="noopener">Can’t connect to local MySQL server through socket ‘/var/run/mysqld/mysqld.sock’的解决</a></li>
</ul>
<hr>
<h4 id="新增账户及权限设置"><a href="#新增账户及权限设置" class="headerlink" title="新增账户及权限设置"></a>新增账户及权限设置</h4><h5 id="第一种方法"><a href="#第一种方法" class="headerlink" title="第一种方法"></a>第一种方法</h5><h6 id="以管理员身份登陆mysql"><a href="#以管理员身份登陆mysql" class="headerlink" title="以管理员身份登陆mysql"></a>以管理员身份登陆mysql</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ mysql -uroot -p</span><br></pre></td></tr></table></figure>
<p>输入之前设置的密码，登陆mysql命令模式。</p>
<h6 id="选择-mysql-数据库"><a href="#选择-mysql-数据库" class="headerlink" title="选择 mysql 数据库"></a>选择 <code>mysql</code> 数据库</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; use mysql;</span><br></pre></td></tr></table></figure>

<h6 id="创建用户并设定密码"><a href="#创建用户并设定密码" class="headerlink" title="创建用户并设定密码"></a>创建用户并设定密码</h6><p>先查看默认存在哪些账户：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select host,user from user;</span><br><span class="line"></span><br><span class="line">+-----------+------------------+</span><br><span class="line">| host      | user             |</span><br><span class="line">+-----------+------------------+</span><br><span class="line">| localhost | debian-sys-maint |</span><br><span class="line">| localhost | mysql.sys        |</span><br><span class="line">| localhost | root             |</span><br><span class="line">+-----------+------------------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>执行以下命令来创建新用户账户及密码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; create user &#39;testuser1&#39;@&#39;localhost&#39; identified by &#39;testpassword&#39;;</span><br></pre></td></tr></table></figure>

<p>将 <code>testpassword</code> 替换为你自己的密码。</p>
<p>执行如下命令使操作生效：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; flush privileges;</span><br></pre></td></tr></table></figure>

<p>示例操作如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; create user &#39;testuser1&#39;@&#39;localhost&#39; identified by &#39;123456&#39;;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; flush privileges;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select host,user from user;</span><br><span class="line">+-----------+------------------+</span><br><span class="line">| host      | user             |</span><br><span class="line">+-----------+------------------+</span><br><span class="line">| localhost | debian-sys-maint |</span><br><span class="line">| localhost | mysql.sys        |</span><br><span class="line">| localhost | root             |</span><br><span class="line">| localhost | testuser1        |</span><br><span class="line">+-----------+------------------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<h6 id="为新账户创建数据库"><a href="#为新账户创建数据库" class="headerlink" title="为新账户创建数据库"></a>为新账户创建数据库</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; create database testdb;</span><br><span class="line">Query OK, 1 row affected (0.03 sec)</span><br></pre></td></tr></table></figure>

<h6 id="为新账户赋予操作新建数据库-testdb-的权限"><a href="#为新账户赋予操作新建数据库-testdb-的权限" class="headerlink" title="为新账户赋予操作新建数据库 testdb 的权限"></a>为新账户赋予操作新建数据库 <code>testdb</code> 的权限</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; grant all privileges on testdb.* to &#39;testuser1&#39;@&#39;localhost&#39; identified by &#39;123456&#39;;</span><br><span class="line">Query OK, 0 rows affected, 1 warning (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; flush privileges;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>

<ul>
<li><code>testdb.*</code> 表示操作 <code>testdb</code> 这个数据库中所有的表</li>
<li><code>&#39;testuser1&#39;@&#39;localhost&#39;</code> 表示使用账户 <code>testuser1</code> 登陆到 <code>localhost</code></li>
<li><code>&#39;123456&#39;</code> 表示登陆密码</li>
</ul>
<h6 id="使用新账户登陆"><a href="#使用新账户登陆" class="headerlink" title="使用新账户登陆"></a>使用新账户登陆</h6><p>我们在上面的步骤中创建的新用户为 <code>testuse1</code> 密码为 <code>123456</code> 管理的数据库为 <code>testdb</code>。</p>
<p>使用 <code>exit</code> 退出 <code>root</code> 账户的登陆，然后使用新账户登陆：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; exit</span><br><span class="line">Bye</span><br><span class="line"></span><br><span class="line">$ mysql -u testuser1 -p</span><br><span class="line">Enter password: </span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br></pre></td></tr></table></figure>

<p>登陆成功后，查看数据库列表：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; show databases;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| testdb             |</span><br><span class="line">+--------------------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<hr>
<h5 id="第二种方法-通过GRANT授权的方式新增用户"><a href="#第二种方法-通过GRANT授权的方式新增用户" class="headerlink" title="第二种方法  通过GRANT授权的方式新增用户"></a>第二种方法  通过GRANT授权的方式新增用户</h5><h6 id="以root账户登录："><a href="#以root账户登录：" class="headerlink" title="以root账户登录："></a>以root账户登录：</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ mysql -uroot -p </span><br><span class="line">Enter password: </span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br></pre></td></tr></table></figure>

<h6 id="新增数据库"><a href="#新增数据库" class="headerlink" title="新增数据库"></a>新增数据库</h6><p>为新账户创建数据库 <code>testdb2</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; create database testdb2;</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br></pre></td></tr></table></figure>

<h6 id="新增账户并设置密码"><a href="#新增账户并设置密码" class="headerlink" title="新增账户并设置密码"></a>新增账户并设置密码</h6><p>新增账户 <code>testuser2</code> 密码为 <code>123456</code> 管理 <code>testdb2</code> 数据库。</p>
<p>通过 <code>grant all privileges on</code> 语句来操作：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; show databases;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| sys                |</span><br><span class="line">| testdb             |</span><br><span class="line">| testdb2            |</span><br><span class="line">+--------------------+</span><br><span class="line">6 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; grant all privileges on testdb2.* to &#39;testuser2&#39;@&#39;localhost&#39; identified by &#39;123456&#39;;</span><br><span class="line">Query OK, 0 rows affected, 1 warning (0.00 sec)</span><br></pre></td></tr></table></figure>

<p><code>grant all</code> 语句不需要使用 <code>flush privilege;</code> 刷新系统权限表，该操作立即生效。</p>
<h6 id="使用新账户-testuser2-登陆"><a href="#使用新账户-testuser2-登陆" class="headerlink" title="使用新账户 testuser2 登陆"></a>使用新账户 <code>testuser2</code> 登陆</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; exit</span><br><span class="line">Bye</span><br><span class="line"></span><br><span class="line">$ mysql -utestuser2 -p</span><br><span class="line">Enter password: </span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line"></span><br><span class="line">mysql&gt; show databases;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| testdb2            |</span><br><span class="line">+--------------------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="将默认编码改为utf8"><a href="#将默认编码改为utf8" class="headerlink" title="将默认编码改为utf8"></a>将默认编码改为utf8</h4><p>默认情况下，MySQL的字符集是 <code>latin1</code> ，因此在存储中文的时候，会出现乱码的情况，所以我们需要把字符集统一改成 <code>UTF-8</code> 。</p>
<h5 id="mysql-默认编码"><a href="#mysql-默认编码" class="headerlink" title="mysql 默认编码"></a>mysql 默认编码</h5><p>通过如下命令查看mysql默认编码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; show variables like &quot;%character%&quot;;show variables like &quot;%collation%&quot;;</span><br><span class="line"></span><br><span class="line">+--------------------------+----------------------------+</span><br><span class="line">| Variable_name            | Value                      |</span><br><span class="line">+--------------------------+----------------------------+</span><br><span class="line">| character_set_client     | latin1                     |</span><br><span class="line">| character_set_connection | latin1                     |</span><br><span class="line">| character_set_database   | latin1                     |</span><br><span class="line">| character_set_filesystem | binary                     |</span><br><span class="line">| character_set_results    | latin1                     |</span><br><span class="line">| character_set_server     | latin1                     |</span><br><span class="line">| character_set_system     | utf8                       |</span><br><span class="line">| character_sets_dir       | &#x2F;usr&#x2F;share&#x2F;mysql&#x2F;charsets&#x2F; |</span><br><span class="line">+--------------------------+----------------------------+</span><br><span class="line">8 rows in set (0.01 sec)</span><br><span class="line"></span><br><span class="line">+----------------------+-------------------+</span><br><span class="line">| Variable_name        | Value             |</span><br><span class="line">+----------------------+-------------------+</span><br><span class="line">| collation_connection | latin1_swedish_ci |</span><br><span class="line">| collation_database   | latin1_swedish_ci |</span><br><span class="line">| collation_server     | latin1_swedish_ci |</span><br><span class="line">+----------------------+-------------------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<h5 id="更改配置文件"><a href="#更改配置文件" class="headerlink" title="更改配置文件"></a>更改配置文件</h5><p>一般情况下，在 Ubuntu 14.04 系统中，mysql的配置文件目录为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;etc&#x2F;mysql&#x2F;my.cnf</span><br></pre></td></tr></table></figure>

<p>在 Ubuntu 16.04 系统下，mysql的配置文件目录为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;etc&#x2F;mysql&#x2F;my.cnf</span><br><span class="line"></span><br><span class="line">&#x2F;etc&#x2F;mysql&#x2F;mysql.conf.d&#x2F;mysqld.cnf</span><br></pre></td></tr></table></figure>

<p>我当前的系统为 <code>Ubuntu16.04</code> 。其实在 ubuntu 16.04 系统中，mysql的配置文件路径也为 <code>/etc/mysql/my.cnf</code> ，只不过这个 <code>my.cnf</code> 是全局配置文件，在该文件内部可以看到如下配置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># </span><br><span class="line">!includedir &#x2F;etc&#x2F;mysql&#x2F;conf.d&#x2F;</span><br><span class="line">!includedir &#x2F;etc&#x2F;mysql&#x2F;mysql.conf.d&#x2F;</span><br></pre></td></tr></table></figure>

<p>具体的配置文件是存放在上面两个目录下的。所以我们可以更改 <code>/etc/mysql/my.cnf</code> 这个文件，也可以更改 <code>/etc/mysql/mysql.conf.d/mysqld.cnf</code> 这个文件。或者也可以自己新增一个扩展名为 <code>*.cnf</code> 的配置文件放在上面包含的两个目录内。</p>
<p>从网上找到各种说法的修改编码为utf-8的方法，经测试后需要修改的配置如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[client]</span><br><span class="line">default-character-set&#x3D;utf8</span><br><span class="line"></span><br><span class="line">[mysql]</span><br><span class="line">default-character-set&#x3D;utf8</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line">init_connect&#x3D;&#39;SET NAMES utf8&#39;</span><br><span class="line">character-set-server&#x3D;utf8</span><br><span class="line">collation-server&#x3D;utf8_unicode_ci</span><br></pre></td></tr></table></figure>

<p>编辑 <code>/etc/mysql/my.cnf</code> 配置文件，依次添加上面的编码设置。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#</span><br><span class="line"></span><br><span class="line">[client]</span><br><span class="line">default-character-set&#x3D;utf8</span><br><span class="line"></span><br><span class="line">[mysql]</span><br><span class="line">default-character-set&#x3D;utf8</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line">init_connect&#x3D;&#39;SET NAMES utf8&#39;</span><br><span class="line">character-set-server&#x3D;utf8</span><br><span class="line">collation-server&#x3D;utf8_unicode_ci</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">!includedir &#x2F;etc&#x2F;mysql&#x2F;conf.d&#x2F;</span><br><span class="line">!includedir &#x2F;etc&#x2F;mysql&#x2F;mysql.conf.d&#x2F;</span><br></pre></td></tr></table></figure>

<hr>
<p>然后重启 mysql 服务：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ service mysql restart</span><br></pre></td></tr></table></figure>

<p>再次登录mysql命令模式查看默认编码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ mysql -uroot -p</span><br><span class="line">Enter password: </span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line"></span><br><span class="line">mysql&gt; show variables like &quot;%character%&quot;;show variables like &quot;%collation%&quot;;</span><br><span class="line">+--------------------------+----------------------------+</span><br><span class="line">| Variable_name            | Value                      |</span><br><span class="line">+--------------------------+----------------------------+</span><br><span class="line">| character_set_client     | utf8                       |</span><br><span class="line">| character_set_connection | utf8                       |</span><br><span class="line">| character_set_database   | utf8                       |</span><br><span class="line">| character_set_filesystem | binary                     |</span><br><span class="line">| character_set_results    | utf8                       |</span><br><span class="line">| character_set_server     | utf8                       |</span><br><span class="line">| character_set_system     | utf8                       |</span><br><span class="line">| character_sets_dir       | &#x2F;usr&#x2F;share&#x2F;mysql&#x2F;charsets&#x2F; |</span><br><span class="line">+--------------------------+----------------------------+</span><br><span class="line">8 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">+----------------------+-----------------+</span><br><span class="line">| Variable_name        | Value           |</span><br><span class="line">+----------------------+-----------------+</span><br><span class="line">| collation_connection | utf8_general_ci |</span><br><span class="line">| collation_database   | utf8_unicode_ci |</span><br><span class="line">| collation_server     | utf8_unicode_ci |</span><br><span class="line">+----------------------+-----------------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>可见，我们已经更改成功了。</p>
<ul>
<li><a href="http://stackoverflow.com/questions/3513773/change-mysql-default-character-set-to-utf-8-in-my-cnf" target="_blank" rel="noopener">Change MySQL default character set to UTF-8 in my.cnf? - Stack Overflow</a></li>
</ul>
<hr>
<h4 id="让MySQL服务器被远程访问"><a href="#让MySQL服务器被远程访问" class="headerlink" title="让MySQL服务器被远程访问"></a>让MySQL服务器被远程访问</h4><p>默认情况下，root账户只能从 <code>localhost</code> 即本机下来访问mysql的服务。而在正式使用时，mysql数据库都是放在远程的数据库服务器上，这样也就需要我们通过远程的方式能够访问到mysql服务。</p>
<h5 id="开启绑定端口"><a href="#开启绑定端口" class="headerlink" title="开启绑定端口"></a>开启绑定端口</h5><p>编辑配置文件 <code>/etc/mysql/my.cnf</code> 或 <code>/etc/mysql/mysql.conf.d/mysqld.cnf</code> ，将绑定地址行注释掉或者修改为指定IP：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#注释bind-address</span><br><span class="line"># bind-address                   &#x3D; 127.0.0.1</span><br></pre></td></tr></table></figure>

<ul>
<li>注释掉则允许所有ip都能够访问，也可以设置成 <code>0.0.0.0</code></li>
<li>修改为指定的IP地址，则只允许该IP网段可以访问</li>
</ul>
<p>修改配置文件后，重启 mysql 服务生效：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ service mysql restart</span><br></pre></td></tr></table></figure>

<p>如果这时通过外网连接mysql，在连接时会出现错误 “’Host XXX is not allowed to connect to this MySQL server’ ” ，则还需要修改数据库中用户的访问权限。</p>
<h5 id="修改数据库中账户访问权限"><a href="#修改数据库中账户访问权限" class="headerlink" title="修改数据库中账户访问权限"></a>修改数据库中账户访问权限</h5><p>这里以 <code>root</code> 账户为例来设置远程访问。</p>
<h6 id="查看root账户可访问权限"><a href="#查看root账户可访问权限" class="headerlink" title="查看root账户可访问权限"></a>查看root账户可访问权限</h6><p>以 <code>root</code> 账户登录：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql -u root -p</span><br><span class="line">Enter password: &lt;enter password&gt;</span><br></pre></td></tr></table></figure>

<p>切换到 <code>mysql</code> 数据库，并查询 <code>user</code> 表中的账户设置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; use mysql;</span><br><span class="line">Reading table information for completion of table and column names</span><br><span class="line">You can turn off this feature to get a quicker startup with -A</span><br><span class="line"></span><br><span class="line">Database changed</span><br><span class="line"></span><br><span class="line">mysql&gt; select host,user from user;</span><br><span class="line">+-----------+------------------+</span><br><span class="line">| host      | user             |</span><br><span class="line">+-----------+------------------+</span><br><span class="line">| localhost | debian-sys-maint |</span><br><span class="line">| localhost | mysql.sys        |</span><br><span class="line">| localhost | root             |</span><br><span class="line">| localhost | testuser1        |</span><br><span class="line">| localhost | testuser2        |</span><br><span class="line">+-----------+------------------+</span><br><span class="line">5 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>可以看到，root账户默认下不允许从远程登陆，只能从 <code>localhost</code> 来访问，我们还要为 <code>root</code> 账户添加访问权限。</p>
<h6 id="添加远程访问授权"><a href="#添加远程访问授权" class="headerlink" title="添加远程访问授权"></a>添加远程访问授权</h6><p>这里有两种方法，一种是将上面的 <code>mysql</code> 数据库中的 <code>user</code> 表里的 <code>host</code> 项，将 <code>localhost</code> 改为 <code>%</code>，</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; use mysql;</span><br><span class="line">mysql&gt; update user set host &#x3D;&#39;%&#39; where user &#x3D;&#39;root&#39;;</span><br></pre></td></tr></table></figure>

<p>另外一种是为账号 <code>root</code> 添加一个新的远程访问授权。</p>
<p>这里我们采用第二种方法。</p>
<p>通过命令 <code>GRANT ALL PRIVILEGES ON *.* to root@&#39;%&#39; IDENTIFIED BY &#39;put-your-password&#39; WITH GRANT OPTION;</code> 来操作。</p>
<p>执行如下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql -u root -p</span><br><span class="line">Enter password: &lt;enter password&gt;</span><br><span class="line"></span><br><span class="line">mysql&gt; GRANT ALL PRIVILEGES ON *.* to root@&#39;%&#39; IDENTIFIED BY &#39;mysql&#39; WITH GRANT OPTION;</span><br><span class="line"></span><br><span class="line">mysql&gt; FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure>

<p>再次查看：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select host,user from user;</span><br><span class="line">+-----------+------------------+</span><br><span class="line">| host      | user             |</span><br><span class="line">+-----------+------------------+</span><br><span class="line">| %         | root             |</span><br><span class="line">| localhost | debian-sys-maint |</span><br><span class="line">| localhost | mysql.sys        |</span><br><span class="line">| localhost | root             |</span><br><span class="line">| localhost | testuser1        |</span><br><span class="line">| localhost | testuser2        |</span><br><span class="line">+-----------+------------------+</span><br><span class="line">6 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>现在再尝试通过外网来连接 <code>mysql</code> 数据库，就能连接成功了。</p>
<hr>
<h6 id="本地和远程访问使用不同权限或密码"><a href="#本地和远程访问使用不同权限或密码" class="headerlink" title="本地和远程访问使用不同权限或密码"></a>本地和远程访问使用不同权限或密码</h6><p>在上面的表中我们可以知道，<code>root</code> 账户有两个 <code>host</code> 配置项，一个本地的，一个远程的。其实我们可以将两项设置成不同的密码，以防止本地或远程的密码泄露问题。也可以在 <code>grant</code> 后跟详细的查询条件 <code>select,delete</code> 等，为本地或远程访问设置不同的访问权限。比如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; GRANT SELECT,UPDATE,INSERT,DELETE on *.* to root@&#39;%&#39; IDENTIFIED BY &#39;mysql&#39; WITH GRANT OPTION;</span><br></pre></td></tr></table></figure>

<ul>
<li><a href="http://www.cnblogs.com/redfox241/archive/2009/08/07/1541212.html" target="_blank" rel="noopener">mysql grant 命令三种常用 - redfox - 博客园</a></li>
<li><a href="http://5iwww.blog.51cto.com/856039/267499" target="_blank" rel="noopener">mysql Grant 语法详解</a></li>
</ul>
<hr>
<h6 id="添加特定远程访问权限"><a href="#添加特定远程访问权限" class="headerlink" title="添加特定远程访问权限"></a>添加特定远程访问权限</h6><p>假设账户 <code>myuser</code> 密码 <code>mypwd</code></p>
<ol>
<li><code>grant all privileges on *.* to &#39;myuser&#39;@&#39;localhost&#39; identified by &#39;mypwd&#39;</code></li>
<li><code>grant all privileges on *.* to &#39;myuser&#39;@&#39;%&#39; identified by &#39;mypwd&#39;</code></li>
<li><code>grant all privileges on *.* to &#39;myuser&#39;@&#39;10.22.255.18&#39; identified by &#39;mypwd&#39;</code></li>
</ol>
<p>说明：</p>
<ol>
<li>添加一个本地用户 <code>myuser</code> ,一般用于web服务器和数据库服务器在一起的情况</li>
<li>添加一个用户 <code>myuser</code> ,只要能连接数据库服务器的机器都可以使用，这个比较危险，一般不用</li>
<li>在数据库服务器上给 <code>10.22.255.18</code> 机器添加一个用户 <code>myuser</code>，一般用于web服务器和数据库服务器分离的情况</li>
</ol>
<p><strong>注意</strong>：真正使用的时候不会用 <code>grant all PRIVILEGES on *.*</code> ，而是根据实际需要设定相关的权限。</p>
<hr>
<h6 id="特定访问权限"><a href="#特定访问权限" class="headerlink" title="特定访问权限"></a>特定访问权限</h6><ul>
<li>如果想让账户 <code>myuser</code> 使用 <code>mypwd</code> 从任何主机连接到 <code>mysql</code> 服务器，执行：  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GRANT ALL PRIVILEGES ON *.* to myuser@&#39;%&#39; IDENTIFIED BY &#39;mypwd&#39; WITH GRANT OPTION;</span><br></pre></td></tr></table></figure></li>
<li>如果想让账户 <code>myuser</code> 使用密码 <code>123456</code> 从 ip为 <code>123.123.123.123</code> 的主机连接到 <code>mysql</code> 服务器，执行：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GRANT ALL PRIVILEGES ON *.* to myuser@&#39;123.123.123.123&#39; IDENTIFIED BY &#39;123456&#39; WITH GRANT OPTION;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>即  ‘%’ 表示任何主机。</p>
<hr>
<h6 id="WITH-GRANT-OPTION-是啥意思"><a href="#WITH-GRANT-OPTION-是啥意思" class="headerlink" title="WITH GRANT OPTION 是啥意思"></a><code>WITH GRANT OPTION</code> 是啥意思</h6><p><code>WITH GRANT OPTION</code> 表示具有授予权限的权利。比如 上面的： </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GRANT ALL PRIVILEGES ON *.* to myuser@&#39;%&#39; IDENTIFIED BY &#39;mypwd&#39; WITH GRANT OPTION;</span><br></pre></td></tr></table></figure>

<p>为 <code>root</code> 用户赋予了 <code>ALL PRIVILEGES</code> 的权限，那么 <code>root</code> 账户就可以为其他的账户比如 <code>testuser1</code> 设置不同的权限。</p>
<hr>
]]></content>
      <tags>
        <tag>Ubuntu</tag>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu系统下安装终极Shell-zsh</title>
    <url>/2016/10/05/ubuntu-install-zsh/</url>
    <content><![CDATA[<h4 id="查看系统-shell"><a href="#查看系统-shell" class="headerlink" title="查看系统 shell"></a>查看系统 shell</h4><p>终端输入 <code>echo $SHELL</code> ，可以输出当前使用的shell。</p>
<p>终端输入 <code>cat /etc/shells</code> ，可以输出当前系统已经安装的shell。</p>
<hr>
<h4 id="安装-zsh"><a href="#安装-zsh" class="headerlink" title="安装 zsh"></a>安装 zsh</h4><p>安装 <code>zsh</code> 需要 <code>git</code> 环境支持，请先确保已安装 <code>git</code> 环境：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install git</span><br></pre></td></tr></table></figure>

<h5 id="安装-zsh-1"><a href="#安装-zsh-1" class="headerlink" title="安装 zsh"></a>安装 zsh</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get install zsh</span><br></pre></td></tr></table></figure>

<h5 id="安装增强插件-oh-my-zsh"><a href="#安装增强插件-oh-my-zsh" class="headerlink" title="安装增强插件 oh-my-zsh"></a>安装增强插件 oh-my-zsh</h5><p>可以通过 <code>wget</code> 或者 <code>curl</code> 来安装。下面的命令是在 <a href="https://ohmyz.sh/" target="_blank" rel="noopener">Oh My Zsh</a> 官网中查看到的最新安装命令，建议用官网中的推荐安装方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; wget</span><br><span class="line">$ sh -c &quot;$(wget https:&#x2F;&#x2F;raw.github.com&#x2F;robbyrussell&#x2F;oh-my-zsh&#x2F;master&#x2F;tools&#x2F;install.sh -O -)&quot;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; curl</span><br><span class="line">$ sh -c &quot;$(curl -fsSL https:&#x2F;&#x2F;raw.github.com&#x2F;robbyrussell&#x2F;oh-my-zsh&#x2F;master&#x2F;tools&#x2F;install.sh)&quot;</span><br></pre></td></tr></table></figure>

<p>执行完上面的命令后，可能会出现两种情况。</p>
<h6 id="输入密码后立即生效"><a href="#输入密码后立即生效" class="headerlink" title="输入密码后立即生效"></a>输入密码后立即生效</h6><p>当提示停留在 <code>Password</code> 处要求输入当前账户的密码时，直接输入密码，等待自动配置完成即可。<code>oh-my-zsh</code> 会立即生效。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ubuntu@VM-46-228-ubuntu:~$ sh -c &quot;$(curl -fsSL https:&#x2F;&#x2F;raw.github.com&#x2F;robbyrussell&#x2F;oh-my-zsh&#x2F;master&#x2F;tools&#x2F;install.sh)&quot;</span><br><span class="line">Cloning Oh My Zsh...</span><br><span class="line">Cloning into &#39;&#x2F;home&#x2F;ubuntu&#x2F;.oh-my-zsh&#39;...</span><br><span class="line">remote: Counting objects: 891, done.</span><br><span class="line">remote: Compressing objects: 100% (756&#x2F;756), done.</span><br><span class="line">remote: Total 891 (delta 20), reused 708 (delta 7), pack-reused 0</span><br><span class="line">Receiving objects: 100% (891&#x2F;891), 590.35 KiB | 111.00 KiB&#x2F;s, done.</span><br><span class="line">Resolving deltas: 100% (20&#x2F;20), done.</span><br><span class="line">Checking connectivity... done.</span><br><span class="line">Looking for an existing zsh config...</span><br><span class="line">Using the Oh My Zsh template file and adding it to ~&#x2F;.zshrc</span><br><span class="line">Time to change your default shell to zsh!</span><br><span class="line">Password:</span><br><span class="line">         __                                     __</span><br><span class="line">  ____  &#x2F; &#x2F;_     ____ ___  __  __   ____  _____&#x2F; &#x2F;_</span><br><span class="line"> &#x2F; __ \&#x2F; __ \   &#x2F; __ &#96;__ \&#x2F; &#x2F; &#x2F; &#x2F;  &#x2F;_  &#x2F; &#x2F; ___&#x2F; __ \</span><br><span class="line">&#x2F; &#x2F;_&#x2F; &#x2F; &#x2F; &#x2F; &#x2F;  &#x2F; &#x2F; &#x2F; &#x2F; &#x2F; &#x2F; &#x2F;_&#x2F; &#x2F;    &#x2F; &#x2F;_(__  ) &#x2F; &#x2F; &#x2F;</span><br><span class="line">\____&#x2F;_&#x2F; &#x2F;_&#x2F;  &#x2F;_&#x2F; &#x2F;_&#x2F; &#x2F;_&#x2F;\__, &#x2F;    &#x2F;___&#x2F;____&#x2F;_&#x2F; &#x2F;_&#x2F;</span><br><span class="line">                        &#x2F;____&#x2F;                       ....is now installed!</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Please look over the ~&#x2F;.zshrc file to select plugins, themes, and options.</span><br><span class="line"></span><br><span class="line">p.s. Follow us at https:&#x2F;&#x2F;twitter.com&#x2F;ohmyzsh.</span><br><span class="line"></span><br><span class="line">p.p.s. Get stickers and t-shirts at https:&#x2F;&#x2F;shop.planetargon.com.</span><br><span class="line"></span><br><span class="line">➜  ~</span><br></pre></td></tr></table></figure>

<p>可以看到前面的提示符已经变了。</p>
<h6 id="需要重启生效"><a href="#需要重启生效" class="headerlink" title="需要重启生效"></a>需要重启生效</h6><p>如果提示如下信息，则直接忽略即可，继续执行下面的步骤。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Looking for an existing zsh config...</span><br><span class="line">Using the Oh My Zsh template file and adding it to ~&#x2F;.zshrc</span><br><span class="line">Time to change your default shell to zsh!</span><br><span class="line">Password: chsh: PAM: Authentication failure</span><br></pre></td></tr></table></figure>

<p>如果提示 <code>Authentication failure</code>，则还需要执行如下命令将zsh更改为默认shell,根据提示输入当前用户的密码,重新登录终端或重启后生效：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ chsh -s &#x2F;bin&#x2F;zsh</span><br><span class="line">&#x2F;&#x2F;或:</span><br><span class="line">$ chsh -s &#96;which zsh&#96;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ sudo reboot</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="zsh-主题"><a href="#zsh-主题" class="headerlink" title="zsh 主题"></a>zsh 主题</h4><p>zsh的默认配置项都在 <code>~/.zshrc</code> 文件中，例如里面的<code>ZSH_THEME=&quot;robbyrussell&quot;</code> 表示当前zsh的主题为<code>robbyrussell</code>.</p>
<p>配置完之后，我们需要重启终端或打开新的标签，或者用以下命令刷新配置： </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">source ~&#x2F;.zshrc</span><br></pre></td></tr></table></figure>

<p><code>oh-my-zsh</code> 提供了数十种主题，我们可以在目录 <code>~/.oh-my-zsh/themes</code> 中看到他们：  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">~&#x2F;.oh-my-zsh&#x2F;themes</span><br></pre></td></tr></table></figure>

<p>如果你不知道选哪个好，我们可以设置成随机项：  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ZSH_THEME&#x3D;&quot;random&quot;</span><br></pre></td></tr></table></figure>

<p>oh-my-zsh官方提供的主题如下：<br><a href="https://github.com/robbyrussell/oh-my-zsh/wiki/themes" target="_blank" rel="noopener">Themes · robbyrussell/oh-my-zsh Wiki · GitHub</a></p>
<hr>
<h4 id="zsh-下的后台程序"><a href="#zsh-下的后台程序" class="headerlink" title="zsh 下的后台程序"></a>zsh 下的后台程序</h4><p>在 <code>zsh</code> 下，如果有后台运行的程序，此时执行 <code>exit</code> 会提示如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜  ~ exit</span><br><span class="line">zsh: you have running jobs.</span><br></pre></td></tr></table></figure>

<p>在一般的 <code>Bash</code> 下，我们设置后台运行程序用 <code>&amp;</code>:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ python cnblog.py &amp;</span><br></pre></td></tr></table></figure>

<p>而在 <code>zsh</code> 下，我们设置后台运行程序则需要用 <code>&amp;!</code>:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ python cnblog.py &amp;!</span><br></pre></td></tr></table></figure>

<p>StackOverflow上的提示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Start the program with—</span><br><span class="line">dolphin &amp;!</span><br><span class="line">The &amp;! (or equivalently, &amp;|) is a zsh-specific shortcut to both background and disown the process, such that exiting the shell will leave it running.</span><br></pre></td></tr></table></figure>

<p>详见：<a href="http://stackoverflow.com/questions/19302913/exit-zsh-but-leave-running-jobs-open" target="_blank" rel="noopener">bash - Exit zsh, but leave running jobs open? - Stack Overflow</a></p>
<hr>
<h4 id="相关参考"><a href="#相关参考" class="headerlink" title="相关参考"></a>相关参考</h4><ul>
<li><a href="http://logicmd.net/2012/11/installing-zsh-on-ubuntu/" target="_blank" rel="noopener">在Ubuntu上安装zsh</a></li>
<li><a href="https://ldsink.com/archives/install-zsh-on-ubuntu.html" target="_blank" rel="noopener">Ubuntu 上安装 zsh</a></li>
<li><a href="https://segmentfault.com/a/1190000003019439" target="_blank" rel="noopener">[Linux] ubuntu安装zsh - TangShangWen - SegmentFault</a></li>
<li><a href="https://github.com/robbyrussell/oh-my-zsh" target="_blank" rel="noopener">oh-my-zsh</a></li>
</ul>
]]></content>
      <tags>
        <tag>zsh</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux下进程管理Supervisor</title>
    <url>/2016/10/04/supervisor-process-management/</url>
    <content><![CDATA[<h4 id="Supervisor"><a href="#Supervisor" class="headerlink" title="Supervisor"></a>Supervisor</h4><blockquote>
<p>Supervisor,是一个进程控制系统，是一个客户端/服务器端系统允许用户在UNIX-LIKE 操作系统中去监控，控制一些进程。Supervisor作为主进程，Supervisor下管理的时一些子进程，当某一个子进程异常退出时，Supervisor会立马对此做处理，通常会守护进程，重启该进程。</p>
</blockquote>
<p><code>Supervisor</code> 有两个主要的组成部分：</p>
<ul>
<li><code>supervisord</code>，运行 <code>Supervisor</code> 时会启动一个进程 <code>supervisord</code>，它负责启动所管理的进程，并将所管理的进程作为自己的子进程来启动，而且可以在所管理的进程出现崩溃时自动重启。</li>
<li><code>supervisorctl</code>，是命令行管理工具，可以用来执行 <code>stop</code>、<code>start</code>、<code>restart</code> 等命令，来对这些子进程进行管理。</li>
</ul>
<hr>
<h4 id="Supervisor-安装"><a href="#Supervisor-安装" class="headerlink" title="Supervisor 安装"></a><code>Supervisor</code> 安装</h4><p>通常除了通过源码的 <code>setup.py</code> 的方式来安装(详见官网文档 <a href="http://supervisord.org/index.html" target="_blank" rel="noopener">Supervisor: A Process Control System &mdash; Supervisor 3.3.0 documentation</a> )，还有以下两种方式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install supervisor</span><br><span class="line">$ sudo pip install supervisor</span><br></pre></td></tr></table></figure>

<p>但这两种安装方式是有区别的。</p>
<p>通过 <code>pip</code> 的方式安装后不会安装为默认服务，还需要自己将supervisor程序设置为后台服务。而通过 <code>apt-get</code> 的方式安装后就默认创建为了后台服务，可以直接通过 <code>service supervisor restart</code> 的方式来管理。</p>
<p>可见：<a href="http://stackoverflow.com/questions/12226113/supervisor-conf-default-location" target="_blank" rel="noopener">python - supervisor.conf default location - Stack Overflow</a></p>
<hr>
<h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><p>supervisor的配置文件通常命名为 <code>supervisord.conf</code>。</p>
<p>配置文件检测顺序如下(默认会使用找到的第一个):</p>
<ul>
<li><code>$CWD/supervisord.conf</code></li>
<li><code>$CWD/etc/supervisord.conf</code></li>
<li><code>/etc/supervisord.conf</code></li>
<li><code>/etc/supervisor/supervisord.conf (since Supervisor 3.3.0)</code></li>
<li><code>../etc/supervisord.conf (Relative to the executable)</code></li>
<li><code>../supervisord.conf (Relative to the executable)</code></li>
</ul>
<hr>
<h4 id="通过-apt-get-install-supervisor-方式安装"><a href="#通过-apt-get-install-supervisor-方式安装" class="headerlink" title="通过 apt-get install supervisor 方式安装"></a>通过 <code>apt-get install supervisor</code> 方式安装</h4><p>执行 ：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install supervisor</span><br></pre></td></tr></table></figure>

<p>安装完成后会默认将 <code>supervisord</code> 启动为后台服务：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ps -ef|grep supervisor</span><br><span class="line">root      1455     1  0 15:46 ?        00:00:00 &#x2F;usr&#x2F;bin&#x2F;python &#x2F;usr&#x2F;bin&#x2F;supervisord -c &#x2F;etc&#x2F;supervisor&#x2F;supervisord.conf</span><br><span class="line">tiger     1470  1298  0 15:46 pts&#x2F;1    00:00:00 grep --color&#x3D;auto supervisor</span><br></pre></td></tr></table></figure>

<p>通过 <code>apt-get</code> 安装的 <code>supervisord</code> 程序位于 <code>/usr/bin/</code> 目录下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo whereis supervisord</span><br><span class="line">[sudo] password for tiger:</span><br><span class="line">supervisord: &#x2F;usr&#x2F;bin&#x2F;supervisord</span><br></pre></td></tr></table></figure>

<p>安装完成后查看 <code>ls /etc/supervisor/</code> :</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ls &#x2F;etc&#x2F;supervisor&#x2F;</span><br><span class="line">conf.d  supervisord.conf</span><br></pre></td></tr></table></figure>

<p>我们看到会生成一个默认的 <code>supervisord.conf</code> 配置文件，也可以在 <code>conf.d</code> 目录下创建自己的配置文件。</p>
<p>查看文件 <code>supervisord.conf</code> 内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">; supervisor config file</span><br><span class="line"></span><br><span class="line">[unix_http_server]</span><br><span class="line">file&#x3D;&#x2F;var&#x2F;run&#x2F;supervisor.sock   ; (the path to the socket file)</span><br><span class="line">chmod&#x3D;0700                       ; sockef file mode (default 0700)</span><br><span class="line"></span><br><span class="line">[supervisord]</span><br><span class="line">logfile&#x3D;&#x2F;var&#x2F;log&#x2F;supervisor&#x2F;supervisord.log ; (main log file;default $CWD&#x2F;supervisord.log)</span><br><span class="line">pidfile&#x3D;&#x2F;var&#x2F;run&#x2F;supervisord.pid ; (supervisord pidfile;default supervisord.pid)</span><br><span class="line">childlogdir&#x3D;&#x2F;var&#x2F;log&#x2F;supervisor            ; (&#39;AUTO&#39; child log dir, default $TEMP)</span><br><span class="line"></span><br><span class="line">; the below section must remain in the config file for RPC</span><br><span class="line">; (supervisorctl&#x2F;web interface) to work, additional interfaces may be</span><br><span class="line">; added by defining them in separate rpcinterface: sections</span><br><span class="line">[rpcinterface:supervisor]</span><br><span class="line">supervisor.rpcinterface_factory &#x3D; supervisor.rpcinterface:make_main_rpcinterface</span><br><span class="line"></span><br><span class="line">[supervisorctl]</span><br><span class="line">serverurl&#x3D;unix:&#x2F;&#x2F;&#x2F;var&#x2F;run&#x2F;supervisor.sock ; use a unix:&#x2F;&#x2F; URL  for a unix socket</span><br><span class="line"></span><br><span class="line">; The [include] section can just contain the &quot;files&quot; setting.  This</span><br><span class="line">; setting can list multiple files (separated by whitespace or</span><br><span class="line">; newlines).  It can also contain wildcards.  The filenames are</span><br><span class="line">; interpreted as relative to this file.  Included files *cannot*</span><br><span class="line">; include files themselves.</span><br><span class="line"></span><br><span class="line">[include]</span><br><span class="line">files &#x3D; &#x2F;etc&#x2F;supervisor&#x2F;conf.d&#x2F;*.conf</span><br></pre></td></tr></table></figure>

<p>该默认配置文件中是包含着 <code>conf.d</code> 目录下的所有 <code>*.conf</code> 文件的。我们可以对于不同的项目，使用各自独立的配置文件，放置在 <code>/etc/supervisor/conf.d</code> 目录下。</p>
<hr>
<p>我们在 <code>conf.d</code> 目录下使用 <code>echo_supervisord_conf</code> 命令来创建一个 <code>hello.conf</code> 配置文件(或者直接通过 <code>vim</code> 创建一个空的 <code>.conf</code> 文件也可)：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ tiger@localhost:&#x2F;etc&#x2F;supervisor&#x2F;conf.d$ echo_supervisord_conf &gt; hello.conf</span><br><span class="line">-bash: Hello.conf: 权限不够</span><br></pre></td></tr></table></figure>

<p>如果提示没有权限的问题，可以使用下面的命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo su - root -c &quot;echo_supervisord_conf &gt; &#x2F;etc&#x2F;supervisor&#x2F;conf.d&#x2F;hello.conf&quot;</span><br></pre></td></tr></table></figure>

<p>查看生成的 <code>hello.conf</code> :</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">;[program:theprogramname]</span><br><span class="line">;command&#x3D;&#x2F;bin&#x2F;cat              ; the program (relative uses PATH, can take args)</span><br><span class="line">;process_name&#x3D;%(program_name)s ; process_name expr (default %(program_name)s)</span><br><span class="line">;numprocs&#x3D;1                    ; number of processes copies to start (def 1)</span><br><span class="line">;directory&#x3D;&#x2F;tmp                ; directory to cwd to before exec (def no cwd)</span><br><span class="line">;umask&#x3D;022                     ; umask for process (default None)</span><br><span class="line">;priority&#x3D;999                  ; the relative start priority (default 999)</span><br><span class="line">;autostart&#x3D;true                ; start at supervisord start (default: true)</span><br><span class="line">;autorestart&#x3D;unexpected        ; whether&#x2F;when to restart (default: unexpected)</span><br><span class="line">;startsecs&#x3D;1                   ; number of secs prog must stay running (def. 1)</span><br><span class="line">;startretries&#x3D;3                ; max # of serial start failures (default 3)</span><br><span class="line">;exitcodes&#x3D;0,2                 ; &#39;expected&#39; exit codes for process (default 0,2)</span><br><span class="line">;stopsignal&#x3D;QUIT               ; signal used to kill process (default TERM)</span><br><span class="line">;stopwaitsecs&#x3D;10               ; max num secs to wait b4 SIGKILL (default 10)</span><br><span class="line">;stopasgroup&#x3D;false             ; send stop signal to the UNIX process group (default false)</span><br><span class="line">;killasgroup&#x3D;false             ; SIGKILL the UNIX process group (def false)</span><br><span class="line">;user&#x3D;chrism                   ; setuid to this UNIX account to run the program</span><br><span class="line">;redirect_stderr&#x3D;true          ; redirect proc stderr to stdout (default false)</span><br><span class="line">;stdout_logfile&#x3D;&#x2F;a&#x2F;path        ; stdout log path, NONE for none; default AUTO</span><br><span class="line">;stdout_logfile_maxbytes&#x3D;1MB   ; max # logfile bytes b4 rotation (default 50MB)</span><br><span class="line">;stdout_logfile_backups&#x3D;10     ; # of stdout logfile backups (default 10)</span><br><span class="line">;stdout_capture_maxbytes&#x3D;1MB   ; number of bytes in &#39;capturemode&#39; (default 0)</span><br><span class="line">;stdout_events_enabled&#x3D;false   ; emit events on stdout writes (default false)</span><br><span class="line">;stderr_logfile&#x3D;&#x2F;a&#x2F;path        ; stderr log path, NONE for none; default AUTO</span><br><span class="line">;stderr_logfile_maxbytes&#x3D;1MB   ; max # logfile bytes b4 rotation (default 50MB)</span><br><span class="line">;stderr_logfile_backups&#x3D;10     ; # of stderr logfile backups (default 10)</span><br><span class="line">;stderr_capture_maxbytes&#x3D;1MB   ; number of bytes in &#39;capturemode&#39; (default 0)</span><br><span class="line">;stderr_events_enabled&#x3D;false   ; emit events on stderr writes (default false)</span><br><span class="line">;environment&#x3D;A&#x3D;1,B&#x3D;2           ; process environment additions (def no adds)</span><br><span class="line">;serverurl&#x3D;AUTO                ; override serverurl computation (childutils)</span><br></pre></td></tr></table></figure>

<p>我们需要管理的程序只要依照上面的说明进行配置即可：</p>
<p>假如在目录 <code>/home/tiger/py</code> 下有一个需要在后台运行的 Python 程序 <code>hello.py</code> 。日志文件保存在 <code>/home/tiger/py/logs</code> 下。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># coding:utf-8</span><br><span class="line"></span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">def make_log():</span><br><span class="line">	while True:</span><br><span class="line">		time.sleep(2)</span><br><span class="line">		with open(&#39;hello.log&#39;,&#39;a&#39;) as f:</span><br><span class="line">			f.write(&#39;hello_&#39;+time.strftime(&quot;%H:%M:%S&quot;)+&#39;\r&#39;)</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">	make_log()</span><br></pre></td></tr></table></figure>

<p>我们向上面创建的配置文件 <code>/etc/supervisor/conf.d/hello.conf</code> 中写入如下数据(可把已有的数据清空，分号 <code>;</code> 开头的表示注释信息)：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[program:hello]  ;服务的名称</span><br><span class="line">command&#x3D;python hello.py     				; supervisor启动命令</span><br><span class="line">directory&#x3D;&#x2F;home&#x2F;tiger&#x2F;py 			        ; 项目的文件夹路径</span><br><span class="line">user&#x3D;tiger  								; 进程执行的用户身份</span><br><span class="line">autostart&#x3D;true                           	; 是否自动启动</span><br><span class="line">autorestart&#x3D;true                         	; 是否自动重启</span><br><span class="line">startsecs&#x3D;1  								; 自动重启间隔</span><br><span class="line">;log日志文件的位置</span><br><span class="line">stdout_logfile&#x3D;&#x2F;home&#x2F;tiger&#x2F;py&#x2F;logs&#x2F;hellopy.log     ; log 日志</span><br><span class="line">stderr_logfile&#x3D;&#x2F;home&#x2F;tiger&#x2F;py&#x2F;logs&#x2F;hellopy.err     ; 错误日志</span><br></pre></td></tr></table></figure>

<p>使文件具有可写权限:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo chmod 777 &#x2F;etc&#x2F;supervisor&#x2F;conf.d&#x2F;hello.conf</span><br></pre></td></tr></table></figure>

<p>通过如下命令启动 supervisor：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo supervisord -c &#x2F;etc&#x2F;supervisor&#x2F;supervisord.conf</span><br></pre></td></tr></table></figure>

<p>通过 <code>apt-get</code> 安装的 <code>supervisor</code> 在安装完成后已经作为了后台服务启动了，修改了配置文件后只需要重新加载即可生效。</p>
<p>重新加载配置文件使用命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo supervisorctl reload</span><br></pre></td></tr></table></figure>

<p>其他操作命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo supervisorctl -c &#x2F;etc&#x2F;supervisor&#x2F;supervisord.conf status  查看管理进程状态</span><br><span class="line">$ sudo supervisorctl -c &#x2F;etc&#x2F;supervisor&#x2F;supervisord.conf reload  重新载入配置项</span><br><span class="line">$ sudo supervisorctl -c &#x2F;etc&#x2F;supervisor&#x2F;supervisord.conf start [all]|[appname]     启动指定&#x2F;所有程序进程</span><br><span class="line">$ sudo supervisorctl -c &#x2F;etc&#x2F;supervisor&#x2F;supervisord.conf stop [all]|[appname]      关闭指定&#x2F;所有程序进程</span><br></pre></td></tr></table></figure>

<p>注意：</p>
<p><code>supervisor</code> 默认情况下如果不指定要执行的配置文件路径会按照默认的顺序去查询相应的配置文件，按找到的第一个为准。<br>所以，执行以上代码时，精简的代码为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo supervisorctl status</span><br></pre></td></tr></table></figure>

<p>完整的代码为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo supervisorctl -c &#x2F;etc&#x2F;supervisor&#x2F;supervisord.conf status</span><br></pre></td></tr></table></figure>

<p><code>-c</code> 参数指定使用的配置文件目录 更多参数请通过 <code>supervisorctl -h/--help</code> 查看。</p>
<hr>
<p><del>测试时发现在 <code>Ubuntu 16.04</code> 系统下通过 <code>apt-get</code> 方式安装的 <code>Supervisor 3.3.0</code> 之前版本(eg:3.2.0.x) 默认不会注册为后台服务，3.3.0.x后的版本会默认注册为后台服务。</del>  待考证</p>
<hr>
<h4 id="通过-pip-install-supervisor-的方式安装"><a href="#通过-pip-install-supervisor-的方式安装" class="headerlink" title="通过 pip install supervisor 的方式安装"></a>通过 <code>pip install supervisor</code> 的方式安装</h4><p>通过 <code>sudo pip install supervisor</code> 安装完成后不会在 <code>/etc/</code> 下生成 <code>supervisor</code> 目录及其下的文件。应用程序是存在于 <code>/usr/local/bin/</code> 目录中:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ls &#x2F;usr&#x2F;local&#x2F;bin&#x2F;</span><br><span class="line">echo_supervisord_conf  pidproxy  supervisorctl  supervisord</span><br></pre></td></tr></table></figure>

<p>可见安装时的脚本如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">......</span><br><span class="line">......</span><br><span class="line">Installing &#x2F;usr&#x2F;local&#x2F;lib&#x2F;python2.7&#x2F;dist-packages&#x2F;supervisor-3.3.0-nspkg.pth</span><br><span class="line">   Installing echo_supervisord_conf script to &#x2F;usr&#x2F;local&#x2F;bin</span><br><span class="line">   Installing pidproxy script to &#x2F;usr&#x2F;local&#x2F;bin</span><br><span class="line">   Installing supervisorctl script to &#x2F;usr&#x2F;local&#x2F;bin</span><br><span class="line">   Installing supervisord script to &#x2F;usr&#x2F;local&#x2F;bin</span><br></pre></td></tr></table></figure>

<p>可见通过 <code>pip</code> 安装的 <code>supervisord</code> 程序位于 <code>/usr/local/bin/</code> 目录下(或者通过如下命令查找)。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo whereis supervisord</span><br><span class="line">[sudo] password for tiger:</span><br><span class="line">supervisord: &#x2F;usr&#x2F;local&#x2F;bin&#x2F;supervisord</span><br></pre></td></tr></table></figure>

<hr>
<h5 id="配置文件-1"><a href="#配置文件-1" class="headerlink" title="配置文件"></a>配置文件</h5><p>通常默认配置文件位于 <code>/etc/supervisord.conf</code>。</p>
<p>通过以下命令来创建默认配置文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ echo_supervisord_conf &gt; &#x2F;etc&#x2F;supervisord.conf</span><br></pre></td></tr></table></figure>

<p>如果出现没有权限的问题，可以使用这条命令:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo su - root -c &quot;echo_supervisord_conf &gt; &#x2F;etc&#x2F;supervisord.conf&quot;</span><br></pre></td></tr></table></figure>

<hr>
<p>默认的配置文件是下面这样的，但是这里有个坑需要注意：<code>supervisord.pid</code> 以及 <code>supervisor.sock</code> 是放在 <code>/tmp</code> 目录下，但是 <code>/tmp</code> 目录是存放临时文件，里面的文件会被linux系统删除的，一旦这些文件丢失，就无法再通过 <code>supervisorctl</code> 来执行 <code>restart</code> 和 <code>stop</code> 命令了，将只会得到 <code>unix:///tmp/supervisor.sock</code> 不存在的错误。(通过 <code>apt-get</code> 方式安装的配置文件中不是 <code>/tmp</code> 而是<code>/var/run</code>)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[unix_http_server]</span><br><span class="line">file&#x3D;&#x2F;tmp&#x2F;supervisor.sock   ; (the path to the socket file)</span><br><span class="line">;chmod&#x3D;0700                 ; socket file mode (default 0700)</span><br><span class="line">;chown&#x3D;nobody:nogroup       ; socket file uid:gid owner</span><br><span class="line">;username&#x3D;user              ; (default is no username (open server))</span><br><span class="line">;password&#x3D;123               ; (default is no password (open server))</span><br><span class="line"></span><br><span class="line">;[inet_http_server]         ; inet (TCP) server disabled by default</span><br><span class="line">;port&#x3D;127.0.0.1:9001        ; (ip_address:port specifier, *:port for all iface)</span><br><span class="line">;username&#x3D;user              ; (default is no username (open server))</span><br><span class="line">;password&#x3D;123               ; (default is no password (open server))</span><br><span class="line"></span><br><span class="line">[supervisord]</span><br><span class="line">logfile&#x3D;&#x2F;tmp&#x2F;supervisord.log ; (main log file;default $CWD&#x2F;supervisord.log)</span><br><span class="line">logfile_maxbytes&#x3D;50MB        ; (max main logfile bytes b4 rotation;default 50MB)</span><br><span class="line">logfile_backups&#x3D;10           ; (num of main logfile rotation backups;default 10)</span><br><span class="line">loglevel&#x3D;info                ; (log level;default info; others: debug,warn,trace)</span><br><span class="line">pidfile&#x3D;&#x2F;tmp&#x2F;supervisord.pid ; (supervisord pidfile;default supervisord.pid)</span><br><span class="line">nodaemon&#x3D;false               ; (start in foreground if true;default false)</span><br><span class="line">minfds&#x3D;1024                  ; (min. avail startup file descriptors;default 1024)</span><br><span class="line">minprocs&#x3D;200                 ; (min. avail process descriptors;default 200)</span><br><span class="line">;umask&#x3D;022                   ; (process file creation umask;default 022)</span><br><span class="line">;user&#x3D;chrism                 ; (default is current user, required if root)</span><br><span class="line">;identifier&#x3D;supervisor       ; (supervisord identifier, default is &#39;supervisor&#39;)</span><br><span class="line">;directory&#x3D;&#x2F;tmp              ; (default is not to cd during start)</span><br><span class="line">;nocleanup&#x3D;true              ; (don&#39;t clean up tempfiles at start;default false)</span><br><span class="line">;childlogdir&#x3D;&#x2F;tmp            ; (&#39;AUTO&#39; child log dir, default $TEMP)</span><br><span class="line">;environment&#x3D;KEY&#x3D;&quot;value&quot;     ; (key value pairs to add to environment)</span><br><span class="line">;strip_ansi&#x3D;false            ; (strip ansi escape codes in logs; def. false)</span><br><span class="line"></span><br><span class="line">; the below section must remain in the config file for RPC</span><br><span class="line">; (supervisorctl&#x2F;web interface) to work, additional interfaces may be</span><br><span class="line">; added by defining them in separate rpcinterface: sections</span><br><span class="line">[rpcinterface:supervisor]</span><br><span class="line">supervisor.rpcinterface_factory &#x3D; supervisor.rpcinterface:make_main_rpcinterface</span><br><span class="line"></span><br><span class="line">[supervisorctl]</span><br><span class="line">serverurl&#x3D;unix:&#x2F;&#x2F;&#x2F;tmp&#x2F;supervisor.sock ; use a unix:&#x2F;&#x2F; URL  for a unix socket</span><br><span class="line">;serverurl&#x3D;http:&#x2F;&#x2F;127.0.0.1:9001 ; use an http:&#x2F;&#x2F; url to specify an inet socket</span><br><span class="line">;username&#x3D;chris              ; should be same as http_username if set</span><br><span class="line">;password&#x3D;123                ; should be same as http_password if set</span><br><span class="line">;prompt&#x3D;mysupervisor         ; cmd line prompt (default &quot;supervisor&quot;)</span><br><span class="line">...</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>将默认配置文件中的以下项进行修改：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">;file&#x3D;&#x2F;tmp&#x2F;supervisor.sock</span><br><span class="line">;修改为 &#96;&#x2F;var&#x2F;run&#96; 目录</span><br><span class="line">file&#x3D;&#x2F;var&#x2F;run&#x2F;supervisor.sock</span><br><span class="line"></span><br><span class="line">;logfile&#x3D;&#x2F;tmp&#x2F;supervisord.log</span><br><span class="line">;修改为 &#96;&#x2F;var&#x2F;log&#96; 目录</span><br><span class="line">logfile&#x3D;&#x2F;var&#x2F;log&#x2F;supervisord.log</span><br><span class="line"></span><br><span class="line">;pidfile&#x3D;&#x2F;tmp&#x2F;supervisord.pid</span><br><span class="line">;修改为 &#96;&#x2F;var&#x2F;run&#96; 目录</span><br><span class="line">pidfile&#x3D;&#x2F;var&#x2F;run&#x2F;supervisord.pid</span><br><span class="line"></span><br><span class="line">;serverurl&#x3D;unix:&#x2F;&#x2F;&#x2F;tmp&#x2F;supervisor.sock</span><br><span class="line">;修改为 &#96;&#x2F;var&#x2F;run&#96; 目录</span><br><span class="line">serverurl&#x3D;unix:&#x2F;&#x2F;&#x2F;var&#x2F;run&#x2F;supervisor.sock</span><br></pre></td></tr></table></figure>

<p>然后在配置文件中添加启动的程序配置项：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[program:hello]   							;服务的名称</span><br><span class="line">command&#x3D;python hello.py     				; supervisor启动命令</span><br><span class="line">directory&#x3D;&#x2F;home&#x2F;tiger&#x2F;py 			        ; 项目的文件夹路径</span><br><span class="line">user&#x3D;tiger  								; 进程执行的用户身份</span><br><span class="line">autostart&#x3D;true                           	; 是否自动启动</span><br><span class="line">autorestart&#x3D;true                         	; 是否自动重启</span><br><span class="line">startsecs&#x3D;1  								; 自动重启间隔</span><br><span class="line">;log日志文件的位置</span><br><span class="line">stdout_logfile&#x3D;&#x2F;home&#x2F;tiger&#x2F;py&#x2F;logs&#x2F;hellopy.log     ; log 日志</span><br><span class="line">stderr_logfile&#x3D;&#x2F;home&#x2F;tiger&#x2F;py&#x2F;logs&#x2F;hellopy.err     ; 错误日志</span><br></pre></td></tr></table></figure>

<hr>
<h5 id="启动-supervisord"><a href="#启动-supervisord" class="headerlink" title="启动 supervisord"></a>启动 supervisord</h5><p>执行 <code>supervisord</code> 命令，将会启动 <code>supervisord</code> 进程，同时我们在配置文件中设置的进程也会相应启动。</p>
<p>使用如下命令来启动:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo supervisord -c &#x2F;etc&#x2F;supervisord.conf</span><br></pre></td></tr></table></figure>

<p>示例操作命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tiger@localhost:~&#x2F;py$ ps -ef | grep supervisor</span><br><span class="line"></span><br><span class="line">tiger@localhost:~&#x2F;py$ sudo supervisord -c &#x2F;etc&#x2F;supervisord.conf</span><br><span class="line"></span><br><span class="line">tiger@localhost:~&#x2F;py$ ps -ef | grep supervisor</span><br><span class="line">root      7363     1  0 11:42 ?        00:00:00 &#x2F;usr&#x2F;bin&#x2F;python &#x2F;usr&#x2F;local&#x2F;bin&#x2F;supervisord -c &#x2F;etc&#x2F;supervisord.conf</span><br><span class="line"></span><br><span class="line">tiger@localhost:~&#x2F;py$ ps -ef | grep hello</span><br><span class="line">tiger     7364  7363  0 11:42 ?        00:00:00 python hello.py</span><br></pre></td></tr></table></figure>

<p>我们使用 <code>supervisord</code> 来启动管理进程，之后所有的操作都用 <code>supervisorctl</code> 来控制。 (default /etc/supervisord.conf)</p>
<h5 id="supervisorctl-命令介绍"><a href="#supervisorctl-命令介绍" class="headerlink" title="supervisorctl 命令介绍"></a>supervisorctl 命令介绍</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># appname 为 [program:x] 里的 x</span><br><span class="line">$ sudo supervisorctl start [appname]|[all]      启动指定&#x2F;所有程序进程</span><br><span class="line">$ sudo supervisorctl stop [appname]|[all]       停止指定&#x2F;所有程序进程</span><br><span class="line">$ sudo supervisorctl status  					查看管理所有进程状态</span><br><span class="line">$ sudo supervisorctl status [appname]  			查看管理指定进程状态</span><br><span class="line">$ sudo supervisorctl reload  	载入最新的配置文件，停止原有进程并按新的配置启动、管理所有进程</span><br><span class="line">$ sudo supervisorctl update  	根据最新的配置文件，启动新配置或有改动的进程，配置没有改动的进程不会受影响而重启</span><br><span class="line">$ sudo supervisorctl restart [appname]  		重启某个进程</span><br><span class="line">$ sudo supervisorctl shutdown  	关闭所有管理进程</span><br><span class="line"></span><br><span class="line">$ sudo supervisorctl start&#x2F;stop&#x2F;restart&#x2F;status groupworker:    		管理所有属于名为 groupworker 这个分组的进程</span><br><span class="line">$ sudo supervisorctl start&#x2F;stop&#x2F;restart&#x2F;status groupworker:name1    管理分组里指定的进程</span><br></pre></td></tr></table></figure>

<p><del>注意：显示用 <code>stop</code> 停止掉的进程，用 <code>reload</code> 或者 <code>update</code> 都不会自动重启。</del>  该问题待考证</p>
<p>示例操作命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tiger@localhost:~&#x2F;py$ sudo supervisorctl status</span><br><span class="line">hello                            RUNNING   pid 7382, uptime 0:01:50</span><br><span class="line">tiger@localhost:~&#x2F;py$ sudo supervisorctl stop hello</span><br><span class="line">hello: stopped</span><br><span class="line">tiger@localhost:~&#x2F;py$ sudo supervisorctl status</span><br><span class="line">hello                            STOPPED   Jul 27 11:47 AM</span><br></pre></td></tr></table></figure>

<hr>
<h5 id="开机自动启动-Supervisord"><a href="#开机自动启动-Supervisord" class="headerlink" title="开机自动启动 Supervisord"></a>开机自动启动 Supervisord</h5><p>通过 <code>pip</code> 安装的 <code>Supervisord</code> 默认情况下并没有被安装成服务，它本身也是一个进程。我们可以使用安装脚本将supervisord设置为服务。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 下载脚本 (需要root权限)</span><br><span class="line">$ sudo su - root -c &quot;sudo curl https:&#x2F;&#x2F;gist.githubusercontent.com&#x2F;howthebodyworks&#x2F;176149&#x2F;raw&#x2F;d60b505a585dda836fadecca8f6b03884153196b&#x2F;supervisord.sh &gt; &#x2F;etc&#x2F;init.d&#x2F;supervisord&quot;</span><br><span class="line"># 设置该脚本为可以执行</span><br><span class="line">$ sudo chmod +x &#x2F;etc&#x2F;init.d&#x2F;supervisord</span><br><span class="line"># 设置为开机自动运行</span><br><span class="line">% sudo update-rc.d supervisord defaults</span><br><span class="line"># 试一下，是否工作正常</span><br><span class="line">$ sudo service supervisord stop</span><br><span class="line">$ sudo service supervisord start</span><br><span class="line"># 查看supervisord进程</span><br><span class="line">$ sudo ps -ef| grep supervisor</span><br></pre></td></tr></table></figure>

<p>注意：下载了 <code>supervisord.sh</code> 文件后，请核对好里面的配置参数和本地文件所在目录是否一致(主要是以下部分)：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">	...</span><br><span class="line"># PATH should only include &#x2F;usr&#x2F;* if it runs after the mountnfs.sh script</span><br><span class="line">PATH&#x3D;&#x2F;sbin:&#x2F;usr&#x2F;sbin:&#x2F;bin:&#x2F;usr&#x2F;bin</span><br><span class="line">DESC&#x3D;&quot;Description of the service&quot;</span><br><span class="line">NAME&#x3D;supervisord</span><br><span class="line">DAEMON&#x3D;&#x2F;usr&#x2F;local&#x2F;bin&#x2F;supervisord</span><br><span class="line">DAEMON_ARGS&#x3D;&quot;&quot;</span><br><span class="line">PIDFILE&#x3D;&#x2F;var&#x2F;run&#x2F;$NAME.pid</span><br><span class="line">SCRIPTNAME&#x3D;&#x2F;etc&#x2F;init.d&#x2F;$NAME</span><br><span class="line">	...</span><br></pre></td></tr></table></figure>

<p>详细安装方法及脚本文件见下面两个链接说明：</p>
<ul>
<li><a href="http://serverfault.com/questions/96499/how-to-automatically-start-supervisord-on-linux-ubuntu" target="_blank" rel="noopener">python - How to automatically start supervisord on Linux (Ubuntu) - Server Fault</a></li>
<li><a href="https://gist.github.com/howthebodyworks/176149" target="_blank" rel="noopener">an init.d script for supervisord · GitHub</a></li>
</ul>
<p>还有第二种方法将supervisor随系统启动而启动，Linux 在启动的时候会执行 <code>/etc/rc.local</code> 里面的脚本，所以只要在这里添加执行命令即可：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 如果是 Ubuntu 添加以下内容（这里要写全路径，因为此时PATH的环境变量未必设置）</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;bin&#x2F;supervisord -c &#x2F;etc&#x2F;supervisord.conf</span><br><span class="line"></span><br><span class="line"># 如果是 Centos 添加以下内容</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;supervisord -c &#x2F;etc&#x2F;supervisord.conf</span><br></pre></td></tr></table></figure>

<hr>
<h5 id="测试-supervisor-管理的进程能自动重启"><a href="#测试-supervisor-管理的进程能自动重启" class="headerlink" title="测试 supervisor 管理的进程能自动重启"></a>测试 supervisor 管理的进程能自动重启</h5><p>将 <code>supervisor</code> 管理的进程用 <code>kill</code> 命令杀掉，看是否能够自动重启。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tiger@localhost:~&#x2F;py$ ps -ef | grep hello</span><br><span class="line">tiger     7364  7363  0 11:42 ?        00:00:00 python hello.py</span><br><span class="line">tiger     7368  1255  0 11:42 pts&#x2F;0    00:00:00 grep --color&#x3D;auto hello</span><br><span class="line">tiger@localhost:~&#x2F;py$ kill 7364</span><br><span class="line">tiger@localhost:~&#x2F;py$ ps -ef | grep hello</span><br><span class="line">tiger     7382  7363  2 11:45 ?        00:00:00 python hello.py</span><br><span class="line">tiger     7384  1255  0 11:45 pts&#x2F;0    00:00:00 grep --color&#x3D;auto hello</span><br></pre></td></tr></table></figure>

<hr>
<h5 id="使用-include"><a href="#使用-include" class="headerlink" title="使用 include"></a>使用 include</h5><p>在配置文件的最后，有一个 <code>[include]</code> 的配置项。我们可以 <code>include</code> 某个文件夹下的所有配置文件，这样就能为每个进程或相关的几个进程的配置单独写成一个文件。</p>
<p>配置文件的后缀名可以为 <code>.conf</code> 或 <code>.ini</code>。</p>
<p>在 <code>/etc/supervisord.conf</code> 末尾添加如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[include]</span><br><span class="line">files &#x3D; &#x2F;etc&#x2F;supervisord.d&#x2F;*.conf</span><br></pre></td></tr></table></figure>

<p>我们在 <code>/home/tiger/py</code> 目录下再建立一个 <code>world.py</code> 的python程序来做测试。</p>
<p>然后在 <code>/etc</code> 目录下创建 <code>supervisord.d</code> 目录，添加一个 <code>world.conf</code> 配置文件，写入如下配置信息。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[program:world]  ;服务的名称，后面操作会用到</span><br><span class="line">command&#x3D;python world.py     				; supervisor启动命令</span><br><span class="line">directory&#x3D;&#x2F;home&#x2F;tiger&#x2F;py 			        ; 项目的文件夹路径</span><br><span class="line">user&#x3D;tiger  								; 进程执行的用户身份</span><br><span class="line">autostart&#x3D;true                           	; 是否自动启动</span><br><span class="line">autorestart&#x3D;true                         	; 是否自动重启</span><br><span class="line">startsecs&#x3D;1  								; 自动重启间隔</span><br><span class="line">;log日志文件的位置</span><br><span class="line">stdout_logfile&#x3D;&#x2F;home&#x2F;tiger&#x2F;py&#x2F;logs&#x2F;worldpy.log     ; log 日志</span><br><span class="line">stderr_logfile&#x3D;&#x2F;home&#x2F;tiger&#x2F;py&#x2F;logs&#x2F;worldpy.err     ; 错误日志</span><br></pre></td></tr></table></figure>

<p>然后重新加载配置文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo supervisorctl reload</span><br></pre></td></tr></table></figure>

<p>查看运行状态：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo supervisorctl status</span><br><span class="line">hello                            RUNNING   pid 1549, uptime 0:00:28</span><br><span class="line">world                            RUNNING   pid 1548, uptime 0:00:28</span><br><span class="line">$ sudo supervisorctl stop hello</span><br><span class="line">hello: stopped</span><br><span class="line">$ sudo supervisorctl status</span><br><span class="line">hello                            STOPPED   Jul 27 04:53 PM</span><br><span class="line">world                            RUNNING   pid 1573, uptime 0:00:21</span><br></pre></td></tr></table></figure>

<p>这样我们就通过不同的配置文件来管理不同的程序进程了。</p>
<hr>
<h4 id="Supervisor-UI-管理台："><a href="#Supervisor-UI-管理台：" class="headerlink" title="Supervisor UI 管理台："></a>Supervisor UI 管理台：</h4><p>在默认配置文件中我们可以找到下面的配置项：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">;[inet_http_server]         ; inet (TCP) server disabled by default</span><br><span class="line">;port&#x3D;127.0.0.1:9001        ; (ip_address:port specifier, *:port for all iface)</span><br><span class="line">;username&#x3D;user              ; (default is no username (open server))</span><br><span class="line">;password&#x3D;123               ; (default is no password (open server))</span><br></pre></td></tr></table></figure>

<p>去除 <code>[inet_http_server]</code> 和 <code>port=127.0.0.1:9001</code> 前面的分号，然后执行 <code>sudo supervisorctl reload</code> 重新加载配置文件。之后在浏览器中访问 <code>http://localhost:9001</code> 就能查看到Web版的进程管理界面了。</p>
<p>注意：如果设置为 <code>port=127.0.0.1:9001</code>，则只能在本机访问；如果为 <code>port=*:9001</code> 则可以在外网进行访问。</p>
<p>注意：<code>;[inet_http_server]</code> 这个前面的分号必须去掉，要不然不管用。</p>
<hr>
<h4 id="Supervisor-集群管理"><a href="#Supervisor-集群管理" class="headerlink" title="Supervisor 集群管理"></a>Supervisor 集群管理</h4><p>集中进程管理，可在一台机器下管理多台机器的进程。</p>
<p>详见：Supervisor集群管理开发 文档</p>
<ul>
<li><a href="http://supervisord.org/api.html" target="_blank" rel="noopener">XML-RPC API Documentation &mdash; Supervisor 3.3.0 documentation</a></li>
<li><a href="https://segmentfault.com/a/1190000000606682" target="_blank" rel="noopener">supervisord 的 XML-RPC API 使用说明 - yexiaoxiaobai - SegmentFault</a></li>
<li><a href="http://blog.csdn.net/u013411478/article/details/25387587" target="_blank" rel="noopener">Supervisor集群管理WEB UI (monitor) - WisZhou的想到啥写啥        - 博客频道 - CSDN.NET</a></li>
<li><a href="https://github.com/WisZhou/supervisord-monitor" target="_blank" rel="noopener">GitHub - WisZhou/supervisord-monitor: Supervisord Monitoring Tool</a></li>
<li><a href="https://github.com/luxbet/supervisorui" target="_blank" rel="noopener">GitHub - luxbet/supervisorui: Supervisor multi-server dashboard</a></li>
</ul>
<hr>
<h4 id="unix-var-run-supervisor-sock-no-such-file"><a href="#unix-var-run-supervisor-sock-no-such-file" class="headerlink" title="unix:///var/run/supervisor.sock no such file"></a><code>unix:///var/run/supervisor.sock no such file</code></h4><p>某些情况下，可能会出现如下错误：<code>unix:///var/run/supervisor.sock no such file</code> </p>
<p>对于该问题，我的操作是，执行命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo supervisord</span><br></pre></td></tr></table></figure>

<ul>
<li><a href="https://github.com/Supervisor/supervisor/issues/480" target="_blank" rel="noopener">unix:///var/run/supervisor.sock no such file #480</a></li>
</ul>
<hr>
<h4 id="注意：被监控的进程要以非daemon方式运行"><a href="#注意：被监控的进程要以非daemon方式运行" class="headerlink" title="注意：被监控的进程要以非daemon方式运行"></a>注意：被监控的进程要以非daemon方式运行</h4><p>该问题暂未研究。略。</p>
<hr>
<h4 id="supervisor深入研究之-多进程"><a href="#supervisor深入研究之-多进程" class="headerlink" title="supervisor深入研究之 多进程"></a>supervisor深入研究之 <strong>多进程</strong></h4><p>略。</p>
<hr>
<h4 id="supervisor深入研究之-group-分组管理"><a href="#supervisor深入研究之-group-分组管理" class="headerlink" title="supervisor深入研究之 group 分组管理"></a>supervisor深入研究之 <strong>group</strong> 分组管理</h4><p>略。</p>
<hr>
<h4 id="supervisor调用-virtualenv-环境中的python项目"><a href="#supervisor调用-virtualenv-环境中的python项目" class="headerlink" title="supervisor调用 virtualenv 环境中的python项目"></a>supervisor调用 virtualenv 环境中的python项目</h4><p>配置 .conf 文件时，加上 <code>environment</code> 参数，指定 virtualenv 的目录:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">command &#x3D; &#x2F;home&#x2F;www&#x2F;flasky&#x2F;env&#x2F;bin&#x2F;gunicorn -w 2 -b 0.0.0.0:8080 --max-requests 2000 --log-level debug --name %(program_name)s &quot;app:create_app(&#39;development&#39;)&quot;</span><br><span class="line">directory &#x3D; &#x2F;home&#x2F;www&#x2F;flasky</span><br><span class="line">environment&#x3D;PATH&#x3D;&quot;&#x2F;home&#x2F;www&#x2F;flasky&#x2F;env&#x2F;bin&quot;, GEVENT_RESOLVER&#x3D;&quot;ares&quot;</span><br><span class="line">user &#x3D; root</span><br><span class="line">numprocs&#x3D;1</span><br><span class="line">autostart&#x3D;false</span><br><span class="line">autorestart&#x3D;true</span><br><span class="line">...</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h4><ul>
<li><p><a href="http://www.cnblogs.com/restran/p/4854623.html" target="_blank" rel="noopener">Python 进程管理工具 Supervisor 使用教程 - restran - 博客园</a></p>
</li>
<li><p><a href="https://www.restran.net/2015/10/04/supervisord-tutorial/" target="_blank" rel="noopener">Python 进程管理工具 Supervisor 使用教程 | 淡水网志</a></p>
</li>
<li><p><a href="http://serverfault.com/questions/96499/how-to-automatically-start-supervisord-on-linux-ubuntu" target="_blank" rel="noopener">python - How to automatically start supervisord on Linux (Ubuntu) - Server Fault</a></p>
</li>
<li><p><a href="http://ju.outofmemory.cn/entry/208687" target="_blank" rel="noopener">ubuntu下supervisor安装与使用笔记 - 为程序员服务</a></p>
</li>
<li><p><a href="http://liyangliang.me/posts/2015/06/using-supervisor/" target="_blank" rel="noopener">使用 supervisor 管理进程 - 李林克斯</a></p>
</li>
<li><p><a href="http://everet.org/supervisor.html" target="_blank" rel="noopener">使用Supervisor简化进程管理工作 - EverET.org</a></p>
</li>
<li><p><a href="http://stackoverflow.com/questions/12226113/supervisor-conf-default-location" target="_blank" rel="noopener">python - supervisor.conf default location - Stack Overflow</a> supervisor的配置文件查询目录 </p>
</li>
<li><p><a href="http://www.cnblogs.com/youxin/p/4147384.html" target="_blank" rel="noopener">linux 后台进程管理利器supervisor - youxin - 博客园</a></p>
</li>
<li><p><a href="http://andrewliu.in/2016/02/19/Supervisor%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/" target="_blank" rel="noopener">Supervisor使用教程 | Snow Memory</a> <strong>☆</strong></p>
</li>
<li><p><a href="http://cpper.info/2016/04/14/supervisor-usage.html" target="_blank" rel="noopener">Linux进程管理工具supervisor安装及使用 | cpper</a> <strong>☆</strong></p>
</li>
<li><p><a href="http://supervisord.org/index.html" target="_blank" rel="noopener">Supervisor: A Process Control System &mdash; Supervisor 3.3.0 documentation</a> 官方文档</p>
</li>
<li><p><a href="https://www.digitalocean.com/community/tutorials/how-to-install-and-manage-supervisor-on-ubuntu-and-debian-vps" target="_blank" rel="noopener">How To Install and Manage Supervisor on Ubuntu and Debian VPS | DigitalOcean</a></p>
</li>
<li><p><a href="http://www.jianshu.com/p/9abffc905645" target="_blank" rel="noopener">supervisor初体验 - 简书</a></p>
</li>
<li><p><a href="http://liyangliang.me/posts/2015/06/using-supervisor/" target="_blank" rel="noopener">使用 supervisor 管理进程 - 李林克斯</a>  排版好看</p>
</li>
<li><p><a href="https://liuliqiang.info/deploy-flask-gunicorn-by-supervisord/" target="_blank" rel="noopener">supervisord 部署 Flask &#8211; Angiris Council</a> 好</p>
</li>
<li><p><a href="https://www.gitbook.com/book/wohugb/supervisor/details" target="_blank" rel="noopener">Supervisor手册  - GitBook</a></p>
</li>
<li><p><a href="https://liuliqiang.info/deploy-flask-gunicorn-by-supervisord/" target="_blank" rel="noopener">supervisord 部署 Flask</a></p>
</li>
</ul>
<ul>
<li><a href="https://liuliqiang.info/post/125/" target="_blank" rel="noopener">virtualenv wrapper</a></li>
</ul>
]]></content>
      <tags>
        <tag>Supervisor</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Shadowsocks轻松实现科学上网</title>
    <url>/2016/10/02/use-shadowsocks-to-have-better-internet-experience/</url>
    <content><![CDATA[<p>由于个人对百度的厌恶，平时上网很少用百度搜索。而又因为众所周知的原因，在国内要想用Google来上网着实是要费一翻心思的。所以也只能退而求其次，用微软的Bing来查询一些资料。</p>
<p>前几天刚刚把我在香港的云服务器进行了系统更换，从Windows Server换成了Linux系统，想起之前曾看过的使用Shadowsocks实现代理上网的文章，所以就想要亲自实现一下。</p>
<p>shadowsocks是一个著名的轻量级socket代理，原始版本是基于Python编写，后来又有了Go语言版本。不过该版本在Github上的源代码由于“你懂得”的原因，已经被开发者删除了。</p>
<p>这里我推荐安装的是 <code>shadowsocks-libev</code> 版本。<code>shadowsocks-libev</code> 是一个 shadowsocks 协议的轻量级实现，是 shadowsocks-android, shadowsocks-ios 以及 shadowsocks-openwrt 的上游项目。其特点如下：</p>
<ul>
<li>体积小巧，静态编译并打包后只有 100 KB</li>
<li>高并发，基于 libev 实现的异步 I/O，以及基于线程池的异步 DNS，同时连接数可上万。</li>
<li>基于C语言实现，内存占用小（600k左右），低 CPU 消耗</li>
</ul>
<hr>
<h4 id="shadowsocks-libev-的安装"><a href="#shadowsocks-libev-的安装" class="headerlink" title="shadowsocks-libev 的安装"></a>shadowsocks-libev 的安装</h4><p>我的云服务器系统为 <code>Ubuntu 14.04 TFS</code></p>
<p>通常 <code>shadowsocks-libev</code> 版本有两种安装方式，从源码安装和通过软件源来安装。这里我推荐使用源码安装的方式。</p>
<h5 id="从源码安装-Ubuntu-Debian系统下"><a href="#从源码安装-Ubuntu-Debian系统下" class="headerlink" title="从源码安装 (Ubuntu/Debian系统下)"></a>从源码安装 (Ubuntu/Debian系统下)</h5><h6 id="安装必须的包"><a href="#安装必须的包" class="headerlink" title="安装必须的包"></a>安装必须的包</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get udpate</span><br><span class="line"></span><br><span class="line">$ mkdir shadowsocks-libev &amp;&amp; cd shadowsocks-libev</span><br><span class="line"></span><br><span class="line">$ sudo apt-get install build-essential autoconf libtool libssl-dev gawk debhelper dh-systemd init-system-helpers pkg-config asciidoc xmlto apg libpcre3-dev</span><br></pre></td></tr></table></figure>

<p>安装过程会需要一些时间。</p>
<h6 id="通过Git下载源码"><a href="#通过Git下载源码" class="headerlink" title="通过Git下载源码"></a>通过Git下载源码</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git clone https:&#x2F;&#x2F;github.com&#x2F;shadowsocks&#x2F;shadowsocks-libev.git</span><br></pre></td></tr></table></figure>

<p>然后生成deb包并安装，依照以下步骤依次执行(如果出错请检查系统或者之前的步骤)：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cd shadowsocks-libev</span><br><span class="line"></span><br><span class="line">$ dpkg-buildpackage -b -us -uc -i</span><br><span class="line"></span><br><span class="line">$ cd ..</span><br><span class="line"></span><br><span class="line">$ sudo dpkg -i shadowsocks-libev*.deb</span><br></pre></td></tr></table></figure>

<p>在上面的第三步 <code>cd ..</code> 后，可以看到目录下编译生成了三个 <code>*.deb</code> 文件，我这里的是：</p>
<ul>
<li><code>libshadowsocks-libev-dev_2.5.3-1_amd64.deb</code></li>
<li><code>libshadowsocks-libev2_2.5.3-1_amd64.deb</code></li>
<li><code>shadowsocks-libev_2.5.3-1_amd64.deb</code></li>
</ul>
<p>上面的步骤操作完成后，我们就已经安装成功了 <code>shadowsocks-libev</code> 。</p>
<p>通过如下命令来查看运行状态：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo service shadowsocks-libev status</span><br><span class="line"> * shadowsocks-libev is not running</span><br></pre></td></tr></table></figure>

<p>通过deb包安装的方式默认会开启自启。</p>
<hr>
<h5 id="直接从作者提供的软件源安装（Ubuntu-Debian）"><a href="#直接从作者提供的软件源安装（Ubuntu-Debian）" class="headerlink" title="直接从作者提供的软件源安装（Ubuntu/Debian）"></a>直接从作者提供的软件源安装（Ubuntu/Debian）</h5><p>由于作者更新源码后并不一定及时更新这些预编译的包，所以无法保证最新版本，但操作步骤比较简单。</p>
<h6 id="先添加GPG-Key"><a href="#先添加GPG-Key" class="headerlink" title="先添加GPG Key"></a>先添加GPG Key</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ wget -O- http:&#x2F;&#x2F;shadowsocks.org&#x2F;debian&#x2F;1D27208A.gpg | sudo apt-key add -</span><br></pre></td></tr></table></figure>

<h6 id="配置安装源，在-etc-apt-sources-list末尾添加"><a href="#配置安装源，在-etc-apt-sources-list末尾添加" class="headerlink" title="配置安装源，在/etc/apt/sources.list末尾添加"></a>配置安装源，在/etc/apt/sources.list末尾添加</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Ubuntu 14.04 or above</span><br><span class="line">$ deb http:&#x2F;&#x2F;shadowsocks.org&#x2F;ubuntu trusty main</span><br><span class="line"></span><br><span class="line"># Debian Wheezy, Ubuntu 12.04 or any distribution with libssl &gt; 1.0.1</span><br><span class="line">$ deb http:&#x2F;&#x2F;shadowsocks.org&#x2F;debian wheezy main</span><br></pre></td></tr></table></figure>

<h6 id="执行安装"><a href="#执行安装" class="headerlink" title="执行安装"></a>执行安装</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ apt-get update</span><br><span class="line">$ apt-get install shadowsocks-libev</span><br></pre></td></tr></table></figure>

<p>这里我在 配置 <code>wget -O- http://shadowsocks.org/debian/1D27208A.gpg | sudo apt-key add -</code> 时无法连接到 <code>http://shadowsocks.org</code> 站点，所以这种方法我就没有继续测试。</p>
<hr>
<h5 id="shadowsocks-libev-一键安装"><a href="#shadowsocks-libev-一键安装" class="headerlink" title="shadowsocks-libev 一键安装"></a>shadowsocks-libev 一键安装</h5><p>待完善，详见：<a href="https://github.com/iMeiji/shadowsocks_install/wiki/shadowsocks-libev-%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85" target="_blank" rel="noopener">https://github.com/iMeiji/shadowsocks_install/wiki/shadowsocks-libev-%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85</a></p>
<hr>
<h4 id="配置与启动"><a href="#配置与启动" class="headerlink" title="配置与启动"></a>配置与启动</h4><h5 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h5><p><code>shadowsocks-divev</code> 生成的默认配置文件在目录 <code>/etc/shadowsocks-libev</code> 下，找到 <code>config.json</code> 文件并编辑：</p>
<p>将配置信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;server&quot;:&quot;127.0.0.1&quot;,</span><br><span class="line">    &quot;server_port&quot;:8388,</span><br><span class="line">    &quot;local_port&quot;:1080,</span><br><span class="line">    &quot;password&quot;:&quot;OikIryahoa&quot;,</span><br><span class="line">    &quot;timeout&quot;:60,</span><br><span class="line">    &quot;method&quot;:null</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改为如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;server&quot;:&quot;0.0.0.0&quot;,</span><br><span class="line">    &quot;server_port&quot;:8388,</span><br><span class="line">    &quot;local_port&quot;:1080,</span><br><span class="line">    &quot;password&quot;:&quot;OikIryahoa&quot;,</span><br><span class="line">    &quot;timeout&quot;:60,</span><br><span class="line">    &quot;method&quot;:&quot;aes-256-cfb&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中：</p>
<ul>
<li><code>server</code> ：主机域名或者IP地址，尽量填IP (可以为服务器实际的IP地址或 <code>0.0.0.0</code> ) </li>
<li><code>server_port</code> ：服务器监听端口</li>
<li>local_port: 客户端连接端口</li>
<li><code>password</code> ：密码</li>
<li><code>timeout</code> ：连接超时时间，单位秒。要适中</li>
<li><code>method</code> ：加密方式 默认为table,其他有rc4,rc4-md5,aes-128-cfb, aes-192-cfb, aes-256-cfb,bf-cfb, camellia-128-cfb, camellia-192-cfb,camellia-256-cfb, cast5-cfb, des-cfb</li>
</ul>
<p><strong>注意：</strong> </p>
<ul>
<li>如果客户端有OpenWRT路由器等设备，推荐 <code>rc4-md5</code> ，性能更好；否则可以选用安全性更好的 <code>aes-256-cfb</code> 等。</li>
<li><code>server</code> 配置项表示主机的域名或IP地址，这里默认情况下是 <code>127.0.0.1</code> 但不建议设置成 <code>127.0.0.1</code> ，测试时发现无法正确连通。你可以设置成 <strong><code>0.0.0.0</code></strong> 或 <strong>真实的服务器所在的IP地址</strong>。修改配置文件重启后生效。</li>
<li>默认的客户端的IP地址为 <code>127.0.0.1</code></li>
</ul>
<hr>
<h5 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h5><p>上面有提到，通过deb包安装后就默认启动了，通过如下命令来控制：  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo service shadowsocks-libev start</span><br><span class="line">$ sudo service shadowsocks-libev stop</span><br><span class="line">$ sudo service shadowsocks-libev status</span><br><span class="line">$ sudo service shadowsocks-libev restart</span><br></pre></td></tr></table></figure>

<p>安装后的shadowsocks程序名为 <code>ss-server</code> ，程序目录为 <code>/usr/bin/ss-server</code> 。</p>
<p>查看 <code>ss-server</code> 的启动信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo service shadowsocks-libev status</span><br><span class="line"> * shadowsocks-libev is not running</span><br><span class="line"></span><br><span class="line">$ ps ax |grep ss-server</span><br><span class="line">40160 ?        Ss     0:00 &#x2F;usr&#x2F;bin&#x2F;ss-server -c &#x2F;etc&#x2F;shadowsocks-libev&#x2F;config.json -a root -u -f &#x2F;var&#x2F;run&#x2F;shadowsocks-libev&#x2F;shadowsocks-libev.pid -u</span><br><span class="line">40162 ?        S+     0:00 grep --color&#x3D;auto ss-server</span><br></pre></td></tr></table></figure>

<p>注意其中有 <code>-u</code>，表示会通过udp的方式进行连接。</p>
<p>通过 <code>netstat -lnp</code> 可以查看 <code>ss-server</code> 监听的端口：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ netstat -lnp</span><br><span class="line">(No info could be read for &quot;-p&quot;: geteuid()&#x3D;1000 but you should be root.)</span><br><span class="line">Active Internet connections (only servers)</span><br><span class="line">Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID&#x2F;Program name</span><br><span class="line">tcp        0      0 0.0.0.0:8388            0.0.0.0:*               LISTEN      -                          </span><br><span class="line">tcp        0      0 0.0.0.0:80              0.0.0.0:*               LISTEN      -               </span><br><span class="line">tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      -               </span><br><span class="line">tcp6       0      0 :::80                   :::*                    LISTEN      -               </span><br><span class="line">tcp6       0      0 :::22                   :::*                    LISTEN      -                        </span><br><span class="line">udp        0      0 0.0.0.0:8388            0.0.0.0:*                           -</span><br></pre></td></tr></table></figure>

<p>可以看到 <code>ss-server</code> 通过 <code>tcp</code> 和 <code>udp</code> 两种方式监听了 <code>8388</code> 端口。</p>
<hr>
<h4 id="shadowsocks-客户端的设置"><a href="#shadowsocks-客户端的设置" class="headerlink" title="shadowsocks 客户端的设置"></a>shadowsocks 客户端的设置</h4><p>shadowsocks 默认支持多种客户端。可以从 <a href="https://shadowsocks.org/en/download/clients.html" target="_blank" rel="noopener">Shadowsocks - Clients</a> 下载对应平台的客户端软件。</p>
<h5 id="windows-客户端"><a href="#windows-客户端" class="headerlink" title="windows 客户端"></a>windows 客户端</h5><p>windows用户可以从 <a href="https://github.com/shadowsocks/shadowsocks-windows/releases" target="_blank" rel="noopener">Releases · shadowsocks/shadowsocks-windows · GitHub</a> 下载安装包。解压后得到 <code>Shadowsocks.exe</code> 程序。</p>
<p>运行，配置 <code>服务器地址</code> <code>服务器端口</code> <code>密码</code> <code>加密方式</code> 即可。按照配置文件中的设置，默认监听客户端所在本地系统 <code>127.0.0.1</code> 的 <code>1080</code> 端口。</p>
<p>更加详细的内容可以参考如下文章：</p>
<ul>
<li><a href="https://github.com/shadowsocks/shadowsocks-windows/wiki/Shadowsocks-Windows-%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E" target="_blank" rel="noopener">Shadowsocks Windows 使用说明 · shadowsocks/shadowsocks-windows Wiki · GitHub</a></li>
</ul>
<hr>
<h5 id="Chrome-SwitchyOmega实现科学上网"><a href="#Chrome-SwitchyOmega实现科学上网" class="headerlink" title="Chrome+SwitchyOmega实现科学上网"></a>Chrome+SwitchyOmega实现科学上网</h5><p>详见另一篇文章：<a href="/2019/09/04/autoproxy-by-shadowsocks-and-switchyomega/">Chrome浏览器通过SwitchyOmega实现自动代理切换 | IT范儿</a></p>
<hr>
<h4 id="shadowsocks-libev-的多用户配置"><a href="#shadowsocks-libev-的多用户配置" class="headerlink" title="shadowsocks-libev 的多用户配置"></a>shadowsocks-libev 的多用户配置</h4><p>C语言编写的shadowsocks客户端/服务端软件shadowsocks-libev并不像go版本或python版本的shadowsocks客户端/服务端软件那样直接支持多实例配置，具体可以查看如下说明：</p>
<ul>
<li><a href="https://github.com/shadowsocks/shadowsocks-libev/issues/5" target="_blank" rel="noopener">please support multi-port config.json · Issue #5</a></li>
</ul>
<p><code>shadowsocks-libev</code> 版本默认不支持在同一个配置文件 <code>config.json</code> 中一次设置多个端口和密码，如果想要设置多个，可以通过添加多个配置文件来实现。</p>
<h5 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h5><p>先停止 <code>ss-server</code> 服务：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo service shadowsocks-libev status</span><br><span class="line"> * shadowsocks-libev is running</span><br><span class="line">$ sudo service shadowsocks-libev stop</span><br><span class="line">$ sudo service shadowsocks-libev status</span><br><span class="line"> * shadowsocks-libev is not running</span><br></pre></td></tr></table></figure>

<p>然后，拷贝一份原来的配置文件，自定义新的文件名，只要保证扩展名为 <code>.json</code> 即可，我这里命名为 <code>configuser1.json</code> ：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cd &#x2F;etc&#x2F;shadowsocks-libev</span><br><span class="line">$ sudo cp config.json configuser1.json</span><br><span class="line">$ sudo vim configuser1.json</span><br></pre></td></tr></table></figure>

<p>修改配置参数中的端口号，密码等：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;server&quot;:&quot;0.0.0.0&quot;,</span><br><span class="line">    &quot;server_port&quot;:8398,</span><br><span class="line">    &quot;local_port&quot;:1080,</span><br><span class="line">    &quot;password&quot;:&quot;OikIrya3oyt&quot;,</span><br><span class="line">    &quot;timeout&quot;:60,</span><br><span class="line">    &quot;method&quot;:&quot;aes-256-cfb&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后启动 <code>ss-server</code> 服务：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo service shadowsocks-libev start</span><br><span class="line">$ sudo service shadowsocks-libev status</span><br><span class="line"> * shadowsocks-libev is running</span><br></pre></td></tr></table></figure>

<p>执行如下命令添加新的配置文件设置 ：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ setsid ss-server -c &#x2F;etc&#x2F;shadowsocks-libev&#x2F;***.json -u</span><br></pre></td></tr></table></figure>

<p>注意将其中的 <code>***</code> 替换为你的配置文件名称。</p>
<hr>
<h5 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h5><p>如果你嫌上面的“停止-拷贝已有配置文件-重启”操作太麻烦，也可以直接新建一个json配置文件，然后填入如下配置信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;server&quot;:&quot;0.0.0.0&quot;,</span><br><span class="line">    &quot;server_port&quot;:8398,</span><br><span class="line">    &quot;local_port&quot;:1080,</span><br><span class="line">    &quot;password&quot;:&quot;OikIrya3oyt&quot;,</span><br><span class="line">    &quot;timeout&quot;:60,</span><br><span class="line">    &quot;method&quot;:&quot;aes-256-cfb&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意 <code>server_port</code> 要设置成新的端口号。</p>
<p>然后直接执行如下命令即可：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ setsid ss-server -c &#x2F;etc&#x2F;shadowsocks-libev&#x2F;***.json -u</span><br></pre></td></tr></table></figure>

<p>查看启动信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ps ax |grep ss-server</span><br><span class="line">40103 ?        Ss     0:00 ss-server -c &#x2F;etc&#x2F;shadowsocks-libev&#x2F;configuser1.json -u</span><br><span class="line">40160 ?        Ss     0:00 &#x2F;usr&#x2F;bin&#x2F;ss-server -c &#x2F;etc&#x2F;shadowsocks-libev&#x2F;config.json -a root -u -f &#x2F;var&#x2F;run&#x2F;shadowsocks-libev&#x2F;shadowsocks-libev.pid -u</span><br><span class="line">40162 ?        S+     0:00 grep --color&#x3D;auto ss-server</span><br></pre></td></tr></table></figure>

<p>可以看到比之前多了一条后台服务。</p>
<p>通过 <code>netstat -lnp</code> 来查看 <code>ss-server</code> 是否监听了多个端口：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ netstat -lnp</span><br><span class="line">(No info could be read for &quot;-p&quot;: geteuid()&#x3D;1000 but you should be root.)</span><br><span class="line">Active Internet connections (only servers)</span><br><span class="line">Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID&#x2F;Program name</span><br><span class="line">tcp        0      0 0.0.0.0:8388            0.0.0.0:*               LISTEN      -                          </span><br><span class="line">tcp        0      0 0.0.0.0:8398            0.0.0.0:*               LISTEN      -      </span><br><span class="line">tcp        0      0 0.0.0.0:80              0.0.0.0:*               LISTEN      -               </span><br><span class="line">tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      -               </span><br><span class="line">tcp6       0      0 :::80                   :::*                    LISTEN      -               </span><br><span class="line">tcp6       0      0 :::22                   :::*                    LISTEN      -                        </span><br><span class="line">udp        0      0 0.0.0.0:8388            0.0.0.0:*                           -     </span><br><span class="line">udp        0      0 0.0.0.0:8398            0.0.0.0:*                           -</span><br></pre></td></tr></table></figure>

<p>这样，就实现了监听多个端口，实现多用户连接了。如果想要停止新增的监听端口，只需要重启shadowsocks服务就又恢复默认，只会监听的 <code>config.json</code> 中配置的端口了。</p>
<hr>
<h4 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h4><ul>
<li><a href="https://github.com/iMeiji/shadowsocks_install/wiki/shadowsocks-libev" target="_blank" rel="noopener">shadowsocks libev</a> <strong>☆</strong></li>
<li><a href="https://shadowsocks.org/en/download/clients.html" target="_blank" rel="noopener">shadowsocks client</a></li>
<li><a href="https://github.com/shadowsocks/shadowsocks-windows/wiki/Shadowsocks-Windows-%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E" target="_blank" rel="noopener">Shadowsocks Windows 使用说明</a></li>
</ul>
]]></content>
      <tags>
        <tag>Shadowsocks</tag>
      </tags>
  </entry>
  <entry>
    <title>重新安装Ubuntu系统后的必要设置</title>
    <url>/2016/10/01/first-install-ubuntu-need-config/</url>
    <content><![CDATA[<p>以下为我在重装Linux系统后进行的一些必要的操作，特此记录。</p>
<h4 id="ubuntu-14-04-升级到-16-04"><a href="#ubuntu-14-04-升级到-16-04" class="headerlink" title="ubuntu 14.04 升级到 16.04"></a>ubuntu 14.04 升级到 16.04</h4><p>如果直接执行 <code># do-release-upgrade</code> 升级命令，会遇到：<code>需要的依赖关系未安装</code> 的报错信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">The required dependency &#39;apt (&gt;&#x3D; 1.0.1ubuntu2.13)&#39; is not installed.</span><br></pre></td></tr></table></figure>

<p>我们需要先更新 <code>apt</code> 到 <code>1.0.1ubuntu2.13</code> 以上才能进行升级操作。</p>
<p>通过以下操作来更新：</p>
<ol>
<li>保持软件源指向 14.04(trusty) 不变</li>
<li><code>sudo apt-get update &amp;&amp; sudo apt-get upgrade</code></li>
</ol>
<p>此时 <code>apt</code> 应已升级到 <code>1.0.1ubuntu2.13</code>，可以继续 <code>do-release-upgrade</code> 了。</p>
<p>总结需要执行的命令如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># sudo apt-get update</span><br><span class="line"># sudo apt-get upgrade</span><br><span class="line"># sudo do-release-upgrade</span><br></pre></td></tr></table></figure>

<p>操作完成后，重启系统即可：<code># sudo reboot</code> 。</p>
<hr>
<h4 id="更新软件包及升级系统到最新的内核"><a href="#更新软件包及升级系统到最新的内核" class="headerlink" title="更新软件包及升级系统到最新的内核"></a>更新软件包及升级系统到最新的内核</h4><h5 id="更新软件包"><a href="#更新软件包" class="headerlink" title="更新软件包"></a>更新软件包</h5><p>刚装完linux系统后，软件及内核版本都比较低，需要先更新一下：</p>
<p>刚装完后系统版本为： <code>Ubuntu 16.04.1 LTS</code></p>
<p>因为我的服务器在香港，所以能连接到ubuntu官方的软件源，如果你的系统是在国内，可能需要更新一下软件源，以免下载太慢或更新失败，设置软件源：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># echo &quot;deb http:&#x2F;&#x2F;cn.archive.ubuntu.com&#x2F;ubuntu&#x2F; trusty main restricted universe multiverse&quot; &gt;&gt; &#x2F;etc&#x2F;apt&#x2F;sources.list</span><br></pre></td></tr></table></figure>

<p>其他系统可参考 ：<a href="http://wiki.ubuntu.org.cn/%E6%BA%90%E5%88%97%E8%A1%A8" target="_blank" rel="noopener">Ubuntu 源列表</a></p>
<p>执行如下命令进行更新：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># sudo apt-get update</span><br><span class="line"># sudo apt-get upgrade</span><br></pre></td></tr></table></figure>

<p>更新后的系统显示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Welcome to Ubuntu 14.04.5 LTS (GNU&#x2F;Linux 3.16.0-30-generic x86_64)</span><br></pre></td></tr></table></figure>

<hr>
<h5 id="升级系统内核"><a href="#升级系统内核" class="headerlink" title="升级系统内核"></a>升级系统内核</h5><p>升级内核版本，执行如下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># sudo apt-get install linux-generic-lts-xenial linux-image-generic-lts-xenial</span><br></pre></td></tr></table></figure>

<p>安装完成后重启：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># sudo reboot</span><br></pre></td></tr></table></figure>

<p>登陆后我们可以看到，内核已经更新了：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Welcome to Ubuntu 14.04.5 LTS (GNU&#x2F;Linux 4.4.0-38-generic x86_64)</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="Ubuntu新增普通管理员账户并设置管理员权限"><a href="#Ubuntu新增普通管理员账户并设置管理员权限" class="headerlink" title="Ubuntu新增普通管理员账户并设置管理员权限"></a>Ubuntu新增普通管理员账户并设置管理员权限</h4><p>在Linux系统下，<code>$</code> 是普通管理员命令标识，<code>#</code> 是系统管理员命令标识</p>
<h5 id="更改已有用户账户密码"><a href="#更改已有用户账户密码" class="headerlink" title="更改已有用户账户密码"></a>更改已有用户账户密码</h5><p>我们可以使用 <code>passwd</code> 命令来更改账户的命令，执行后输入两次新密码即可。例如为 <code>root</code> 账户修改密码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo passwd root</span><br></pre></td></tr></table></figure>

<h5 id="新增用户账户"><a href="#新增用户账户" class="headerlink" title="新增用户账户"></a>新增用户账户</h5><p>可以通过 <code>adduser</code> 命令来新增账户：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo adduser username</span><br></pre></td></tr></table></figure>

<p>同样的需要输入两次密码，其他的设置项直接按回车即可。</p>
<p>新创建的用户只有普通用户权限，如果想要安装软件或更新软件包，还需要赋予账户管理员权限才行。</p>
<hr>
<h5 id="使新增用户具有-root-权限–命令法-不推荐"><a href="#使新增用户具有-root-权限–命令法-不推荐" class="headerlink" title="使新增用户具有 root 权限–命令法(不推荐)"></a>使新增用户具有 <code>root</code> 权限–命令法(不推荐)</h5><p>在网上查看为新增用户账户可以通过如下的命令来添加管理员权限，但我在实际操作后并没有生效，所以这里暂不推荐该方法。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo usermod -G root username</span><br></pre></td></tr></table></figure>

<p>要添加新用户到 <code>sudo</code>，最简单的方式就是使用 <code>usermod</code> 命令。运行 :</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$sudo usermod -G root username</span><br></pre></td></tr></table></figure>

<p>然而，如果用户已经是其他组的成员，你需要添加 <code>-a</code> 这个选项，象这样：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$sudo usermod -a -G root username</span><br></pre></td></tr></table></figure>

<p>这里暂作记录，待以后找到为何无效的原因再来修改。</p>
<hr>
<h5 id="使新增用户具有-root-权限–修改文件法-推荐"><a href="#使新增用户具有-root-权限–修改文件法-推荐" class="headerlink" title="使新增用户具有 root 权限–修改文件法(推荐)"></a>使新增用户具有 <code>root</code> 权限–修改文件法(推荐)</h5><p>使用新创建的用户账户登陆。这里我新建的用户是 <code>tiger</code> 账户。执行更新命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tiger@MyServer:~$ apt-get update</span><br><span class="line">E: Could not open lock file &#x2F;var&#x2F;lib&#x2F;apt&#x2F;lists&#x2F;lock - open (13: Permission denied)</span><br><span class="line">E: Unable to lock directory &#x2F;var&#x2F;lib&#x2F;apt&#x2F;lists&#x2F;</span><br><span class="line">E: Could not open lock file &#x2F;var&#x2F;lib&#x2F;dpkg&#x2F;lock - open (13: Permission denied)</span><br><span class="line">E: Unable to lock the administration directory (&#x2F;var&#x2F;lib&#x2F;dpkg&#x2F;), are you root?</span><br><span class="line">tiger@MyServer:~$ sudo apt-get update</span><br><span class="line">[sudo] password for tiger: </span><br><span class="line">tiger is not in the sudoers file.  This incident will be reported.</span><br><span class="line">tiger@MyServer:~$</span><br></pre></td></tr></table></figure>

<p>报错信息：<code>tiger is not in the sudoers file.  This incident will be reported.</code> 表名我们新建的账户 <code>tiger</code> 在 <code>sudoers</code> 文件中并没有指定权限，所以也就无法以管理员权限执行命令。</p>
<p>执行下面的操作：</p>
<p>先切换回 <code>root</code> 账户下(注意 <code>su -</code> 后面的 <code>-</code> 和后面的账户名之间有一个空格)：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tiger@MyServer:~$ su - root</span><br></pre></td></tr></table></figure>

<p>为文件 <code>/etc/sudoers</code> 添加写权限，默认情况下该文件为只读属性。执行命令：<code># chmod u+w /etc/sudoers</code> 。</p>
<p>然后编辑该文件，找到这一行 :  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root  ALL&#x3D;(ALL:ALL)  ALL</span><br></pre></td></tr></table></figure>

<p>在下面按照同样的格式添加:  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">xxx  ALL&#x3D;(ALL:ALL)  ALL</span><br></pre></td></tr></table></figure>

<p>(这里的xxx是你要设置的用户名)，然后保存退出。</p>
<p>撤销文件的写权限，执行命令：<code># chmod u-w /etc/sudoers</code> 。</p>
<p>完整的命令如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@MyCloudServer:&#x2F;home&#x2F;tiger# chmod u+w &#x2F;etc&#x2F;sudoers</span><br><span class="line">root@MyCloudServer:&#x2F;home&#x2F;tiger# vim &#x2F;etc&#x2F;sudoers</span><br><span class="line">root@MyCloudServer:&#x2F;home&#x2F;tiger# ls -al &#x2F;etc&#x2F;sudoers </span><br><span class="line">-rw-r----- 1 root root 770 Sep 28 02:15 &#x2F;etc&#x2F;sudoers</span><br><span class="line">root@MyCloudServer:&#x2F;home&#x2F;tiger# chmod u-w &#x2F;etc&#x2F;sudoers</span><br><span class="line">root@MyCloudServer:&#x2F;home&#x2F;tiger# su - tiger</span><br><span class="line">tiger@MyCloudServer:~$ apt-get update</span><br><span class="line"></span><br><span class="line">E: Could not open lock file &#x2F;var&#x2F;lib&#x2F;apt&#x2F;lists&#x2F;lock - open (13: Permission denied)</span><br><span class="line">E: Unable to lock directory &#x2F;var&#x2F;lib&#x2F;apt&#x2F;lists&#x2F;</span><br><span class="line">E: Could not open lock file &#x2F;var&#x2F;lib&#x2F;dpkg&#x2F;lock - open (13: Permission denied)</span><br><span class="line">E: Unable to lock the administration directory (&#x2F;var&#x2F;lib&#x2F;dpkg&#x2F;), are you root?</span><br><span class="line">tiger@MyCloudServer:~$ sudo apt-get update</span><br><span class="line"></span><br><span class="line">Get:1 http:&#x2F;&#x2F;security.ubuntu.com trusty-security InRelease [65.9 kB]</span><br><span class="line">Ign http:&#x2F;&#x2F;us.archive.ubuntu.com trusty InRelease          </span><br><span class="line">Get:2 http:&#x2F;&#x2F;us.archive.ubuntu.com trusty-updates InRelease [65.9 kB]</span><br><span class="line">Get:3 http:&#x2F;&#x2F;security.ubuntu.com trusty-security&#x2F;main Sources [120 kB] </span><br><span class="line">Get:4 http:&#x2F;&#x2F;us.archive.ubuntu.com trusty-backports InRelease [65.9 kB]        </span><br><span class="line">Get:5 http:&#x2F;&#x2F;security.ubuntu.com trusty-security&#x2F;restricted Sources [4,064 B]  </span><br><span class="line">Hit http:&#x2F;&#x2F;us.archive.ubuntu.com trusty Release.gpg        </span><br><span class="line">Get:6 http:&#x2F;&#x2F;security.ubuntu.com trusty-security&#x2F;universe Sources [42.5 kB]</span><br><span class="line">Get:7 http:&#x2F;&#x2F;us.archive.ubuntu.com trusty-updates&#x2F;main Sources [383 kB]</span><br><span class="line">Get:8 http:&#x2F;&#x2F;security.ubuntu.com trusty-security&#x2F;multiverse Sources [2,749 B]</span><br><span class="line">...</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>这样，我们就为新创建的账户 <code>tiger</code> 设置了管理员权限，执行命令时就可以通过 <code>sudo</code> 来提权了。</p>
<p>参考：</p>
<ul>
<li><a href="http://www.cnblogs.com/evasnowind/archive/2011/02/04/1949113.html" target="_blank" rel="noopener">xx is not in the sudoers file 问题解决【转载】 - evasnowind - 博客园</a></li>
<li><a href="http://www.linuxidc.com/Linux/2010-12/30386.htm" target="_blank" rel="noopener">Ubuntu技巧之 is not in the sudoers file解决方法_Linux教程_Linux公社-Linux系统门户网站</a></li>
</ul>
<hr>
<h4 id="Ubuntu-sudo-Error-unable-to-resolve-host"><a href="#Ubuntu-sudo-Error-unable-to-resolve-host" class="headerlink" title="Ubuntu sudo Error:unable to resolve host"></a>Ubuntu sudo Error:unable to resolve host</h4><p>为新增用户设置了管理员权限后，每次执行 <code>$ sudo xxxx</code> 命令时都会弹出下面一条信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Ubuntu sudo Error:unable to resolve host</span><br></pre></td></tr></table></figure>

<p>这种情况是 系统的主机名和配置文件中的主机名不一致造成的。</p>
<p>编辑 <code>/etc/hostname</code> 更改主机名(hostname)<br>主机名是在命令行中 <code>tiger@MyServer:~$</code> @符合后面的。</p>
<p>编辑 <code>/etc/hosts</code> 文件中：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1	localhost</span><br><span class="line"></span><br><span class="line">127.0.1.1	ubuntu</span><br></pre></td></tr></table></figure>

<p>更改 <code>ubuntu</code> 为你的 <code>hostname</code> 的名称。</p>
<p>结果为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1       localhost</span><br><span class="line">127.0.1.1       myhostname</span><br><span class="line"></span><br><span class="line"># The following lines are desirable for IPv6 capable hosts</span><br><span class="line">::1     localhost ip6-localhost ip6-loopback</span><br><span class="line">ff02::1 ip6-allnodes</span><br><span class="line">ff02::2 ip6-allrouters</span><br></pre></td></tr></table></figure>


<p>然后重启系统。<code>sudo reboot</code> 。必需重启之后才有效。</p>
<ul>
<li><a href="http://blog.csdn.net/wzb56_earl/article/details/6289988" target="_blank" rel="noopener">ubuntu 下修复使用sudo命令后出现主机名字不能解析的错误：Fix Ubuntu sudo Error:unable to resolve host - wzb56的资料库        - 博客频道 - CSDN.NET</a></li>
</ul>
<hr>
<h4 id="Ubuntu-14-04-修改时区"><a href="#Ubuntu-14-04-修改时区" class="headerlink" title="Ubuntu 14.04 修改时区"></a>Ubuntu 14.04 修改时区</h4><p>在系统下通过 <code>date</code> 命令查看时间，可能会与本地的之间不一致。</p>
<p>比如 我当前系统的时间为 <code>2016-10-5 15:53:54</code> 而 服务器的时间为 <code>Wed Oct  5 03:58:37 EDT 2016</code> 。按理说，Linux系统在重启后会自动同步时间的，而这种情况可能是时区不一致的原因。</p>
<p>执行下面命令，并按照提示选择 “Asia/Shanghai”：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># sudo dpkg-reconfigure tzdata</span><br></pre></td></tr></table></figure>

<p>选择完成后，会输出如下结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Current default time zone: &#39;Asia&#x2F;Shanghai&#39;</span><br><span class="line">Local time is now:      Wed Oct  5 16:01:12 CST 2016.</span><br><span class="line">Universal Time is now:  Wed Oct  5 08:01:12 UTC 2016.</span><br></pre></td></tr></table></figure>

<p>再次查看时间：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tiger@MyServer:~$ date</span><br><span class="line">Wed Oct  5 16:02:13 CST 2016</span><br></pre></td></tr></table></figure>

<ul>
<li><a href="https://my.oschina.net/zhangrf/blog/224758" target="_blank" rel="noopener">Ubuntu 14.04 修改时区 - MyPy的个人页面 - 开源中国社区</a></li>
</ul>
<hr>
<h4 id="Linux-下切换用户"><a href="#Linux-下切换用户" class="headerlink" title="Linux 下切换用户"></a>Linux 下切换用户</h4><p><code>su</code> 和 <code>su -</code> 的区别</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">su abc</span><br><span class="line">su - abc</span><br></pre></td></tr></table></figure>

<p>注意，<code>su -</code> 在 <code>-</code> 和账户名后面还有一个空格分隔。</p>
<ul>
<li><a href="http://www.ha97.com/4001.html" target="_blank" rel="noopener">（总结）Linux下su与su -命令的本质区别</a></li>
<li><a href="http://unix.stackexchange.com/questions/7013/why-do-we-use-su-and-not-just-su" target="_blank" rel="noopener">linux - Why do we use su - and not just su? - Unix &amp; Linux Stack Exchange</a></li>
</ul>
<hr>
<h4 id="Ubuntu下SSH能连接而SFTP不能连接"><a href="#Ubuntu下SSH能连接而SFTP不能连接" class="headerlink" title="Ubuntu下SSH能连接而SFTP不能连接"></a>Ubuntu下SSH能连接而SFTP不能连接</h4><p><a href="http://m.2cto.com/os/201211/169172.html" target="_blank" rel="noopener">ssh能够连接而sftp不能连接的解决方法</a></p>
<p>用FileZilla一直不能登录远程的服务器，ssh的登录就OK</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># locate sftp-server</span><br></pre></td></tr></table></figure>

<p>locate一下ftp-server，发现目录跟配置文件中的不同</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># vi &#x2F;etc&#x2F;ssh&#x2F;sshd_config</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Allow client to pass locale environment variables</span><br><span class="line">AcceptEnv LANG LC_*</span><br><span class="line"></span><br><span class="line">#Subsystem sftp &#x2F;usr&#x2F;lib&#x2F;openssh&#x2F;sftp-server</span><br></pre></td></tr></table></figure>

<p>上面的 locate 查看到的列表，我更改成了如下的设置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Allow client to pass locale environment variables</span><br><span class="line">AcceptEnv LANG LC_*</span><br><span class="line"></span><br><span class="line">Subsystem sftp &#x2F;usr&#x2F;lib&#x2F;sftp-server</span><br></pre></td></tr></table></figure>

<p>即把它默认成第二个改成了列表中的第一项。</p>
<p>然后重启ssh服务：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo service ssh restart</span><br></pre></td></tr></table></figure>

<p>再次尝试，则能够正常连接了。</p>
<hr>
]]></content>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker+Flask搭建微信公众平台之一</title>
    <url>/2016/09/24/docker-and-flask-build-wechat-public-platform-first/</url>
    <content><![CDATA[<p>之前申请的个人公众号在申请通过后用.NET开发了一版比较简单的交互逻辑功能，最近在知乎中看到有关Python开发微信公众号的文章，正好前几天也在学习Docker技术，所以就想研究一下在Docker下如何用Flask配置微信公众平台的开发环境。</p>
<p>因为我的公众号是 <strong>个人号且是未认证</strong> 的，可获得的权限有限，所以目前我只做了消息的发送和接收相关的功能，更多功能后期再考虑加入。</p>
<p>下面测试Demo是申请的微信公众平台的测试号来开发的。</p>
<h4 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h4><ul>
<li><strong>主系统</strong> 为 <code>Win10</code></li>
<li><strong>宿主机</strong> 为 在 <code>Win10</code> 下的 <code>Hyper-V</code> 虚拟机中安装的 <code>Ubuntu 14.04 LTS</code> 系统 宿主机ip地址为 <code>http://192.168.137.219/</code></li>
<li><strong>测试Docker容器</strong> 为在 <code>宿主机</code> 下安装的 <code>Ubuntu 14.04 LTS</code> 系统 </li>
<li>使用的软件是 <code>Sublime Text</code> 和 <code>Xshell 4</code> 、<code>FileZilla</code></li>
<li>Python环境为 <code>2.7.12</code></li>
</ul>
<p>这里提一点，如果你不知如何配置Docker环境，或从未接触过Docker技术，在我之后的文章中我会有详细的介绍，欢迎关注。</p>
<hr>
<h4 id="安装流程"><a href="#安装流程" class="headerlink" title="安装流程"></a>安装流程</h4><h5 id="配置-Flask-运行环境"><a href="#配置-Flask-运行环境" class="headerlink" title="配置 Flask 运行环境"></a>配置 Flask 运行环境</h5><p>在 宿主机中，当前的账户为 <code>tiger</code>。在主目录下创建 <code>xweixin</code> 目录，添加的 <code>Flask</code> 程序为 <code>app.py</code> 文件。 </p>
<p>启动一个前台运行的容器，将宿主机目录 <code>xweixin</code> 映射到容器的 <code>weixin</code> 目录：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run -it --name weixin01 -p 80:80 -v &#x2F;home&#x2F;tiger&#x2F;xweixin:&#x2F;weixin ubuntu &#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure>

<p>查看容器中主目录下是否存在 <code>weixin</code> 目录，及该目录下是否存在 <code>app.py</code> 文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ls </span><br><span class="line"> ****** weixin</span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong> 下面的操作主要在 <code>测试Docker容器</code> 中进行，因为在Docker中默认是 <code>root</code> 账户，所以下面的命令前面都没有加 <code>sudo</code> 。</p>
<p>设置安装源：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ echo &quot;deb http:&#x2F;&#x2F;archive.ubuntu.com&#x2F;ubuntu&#x2F; precise universe&quot; &gt;&gt; &#x2F;etc&#x2F;apt&#x2F;sources.list</span><br></pre></td></tr></table></figure>

<p>更新，安装python ：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ apt-get update</span><br><span class="line"></span><br><span class="line">$ apt-get install python -y  # 默认安装的是 2.7.12</span><br></pre></td></tr></table></figure>

<p>安装 virtualenv : (由于是在容器内操作，只用来搭建Flask的运行环境，所以可以不安装虚拟环境)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ apt-get install python-virtualenv</span><br></pre></td></tr></table></figure>

<p>安装 pip ：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ apt-get install python-pip -y</span><br></pre></td></tr></table></figure>

<p>安装 flask:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ pip install Flask</span><br></pre></td></tr></table></figure>

<p>安装 vim ：(主要用于查看)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ apt-get install vim</span><br></pre></td></tr></table></figure>

<p>总结上面的操作：从 <code>Win10</code> 系统创建 flask 程序 <code>app.py</code> 后，通过 SFTP 传输到 宿主计算机的 <code>/home/tiger/xweixin</code> 目录下，该目录直接映射到了容器的 <code>/weixin</code> 目录。</p>
<p>app.py 内容 ：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from flask import Flask</span><br><span class="line">app &#x3D; Flask(__name__)</span><br><span class="line"></span><br><span class="line">@app.route(&#39;&#x2F;&#39;)</span><br><span class="line">def hello_world():</span><br><span class="line">    return &#39;Hello World!&#39;</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    app.run(host&#x3D;&#39;0.0.0.0&#39;,port&#x3D;80,debug&#x3D;True)</span><br></pre></td></tr></table></figure>

<p>在容器中执行 <code>python app.py</code> 运行。</p>
<p>在 <code>主系统Win10</code> 下访问 宿主机 的ip地址 <code>http://192.168.137.219/</code>，看到输出 <code>Hello World!</code> 说明Flask配置成功。</p>
<hr>
<h5 id="使用-ngrok-实现外网访问"><a href="#使用-ngrok-实现外网访问" class="headerlink" title="使用 ngrok 实现外网访问"></a>使用 ngrok 实现外网访问</h5><p><code>ngrok.exe</code> 程序可以从 <a href="https://ngrok.com/download" target="_blank" rel="noopener">ngrok - download</a> 下载。</p>
<p>在 <code>主系统Win10</code> 下使用 <code>CMD</code> 命令运行 <code>ngrok</code> 工具，执行如下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; ngrok http 192.168.137.219:80</span><br></pre></td></tr></table></figure>

<p>后面的 ip地址不要带 <code>http://</code> , 端口号不要丢。</p>
<p>可以看到 ngrok 生成了一个 外网可以访问到的地址 <code>http://c62f4a09.ngrok.io/</code> ,在浏览器中打开，看到输出 <code>Hello World!</code> 说明可以实现外网访问了。</p>
<hr>
<h4 id="搭建微信公众平台处理逻辑"><a href="#搭建微信公众平台处理逻辑" class="headerlink" title="搭建微信公众平台处理逻辑"></a>搭建微信公众平台处理逻辑</h4><h5 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h5><p>由于 <code>ngrok</code> 每次重新启动就会重新分配一个新的域名地址，所以我们在启动ngrok之后，就不需要再去管它了。Flask中启用了 <code>debug=True</code> 的选项后，每次更新文件 <code>app.py</code> 都会自动重新加载(除非程序报错导致异常退出)，所以这样下来我们只需要负责修改 <code>app.py</code> 改完了上传到宿主机，直接刷新即可，不需要再进行重启ngrok，重新执行 <code>python app.py</code>启动程序等操作，非常方便。</p>
<p>修改 <code>app.py</code> 的框架，假设网站的二级目录 <code>/weixin</code> 来实现我们的微信公众平台的接口操作。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># coding:utf-8</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">微信公众平台</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">from flask import Flask</span><br><span class="line">app &#x3D; Flask(__name__)</span><br><span class="line"></span><br><span class="line">@app.route(&#39;&#x2F;&#39;)</span><br><span class="line">def hello_world():</span><br><span class="line">	return &#39;Hello World!&#39;</span><br><span class="line"></span><br><span class="line"># 微信公众平台接口</span><br><span class="line">@app.route(&#39;&#x2F;weixin&#39;)</span><br><span class="line">def weixin_interface():</span><br><span class="line">	return &quot;这是微信接口&quot;</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">	app.run(host&#x3D;&#39;0.0.0.0&#39;,port&#x3D;80,debug&#x3D;True)</span><br></pre></td></tr></table></figure>

<p>通过 <code>ngrok</code> 分配的域名为 <code>http://d0dd1f96.ngrok.io/weixin</code> ,该域名用于之后填入 微信公众平台 的接口配置的URL处(此时如果尝试添加，在微信公众平台页面一直会报配置错误的问题，因为在点击确定后微信会向我们的服务器发送验证消息，只有验证通过后才能保存)。</p>
<hr>
<h5 id="处理逻辑"><a href="#处理逻辑" class="headerlink" title="处理逻辑"></a>处理逻辑</h5><h6 id="在-Flask-中通过不同的-method-处理微信的验证请求和交互请求"><a href="#在-Flask-中通过不同的-method-处理微信的验证请求和交互请求" class="headerlink" title="在 Flask 中通过不同的 method 处理微信的验证请求和交互请求"></a>在 Flask 中通过不同的 <code>method</code> 处理微信的验证请求和交互请求</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 微信公众平台接口</span><br><span class="line">@app.route(&#39;&#x2F;weixin&#39;,methods&#x3D;[&#39;GET&#39;,&#39;POST&#39;])</span><br><span class="line">def weixin_interface():</span><br><span class="line">	# return &quot;这是微信接口&quot;</span><br><span class="line">	if request.method&#x3D;&#x3D;&#39;GET&#39;:</span><br><span class="line">		# 处理验证</span><br><span class="line">	else:</span><br><span class="line">		# 处理逻辑交互</span><br></pre></td></tr></table></figure>

<h6 id="设置微信验证请求-验证消息的确来自微信服务器"><a href="#设置微信验证请求-验证消息的确来自微信服务器" class="headerlink" title="设置微信验证请求 - 验证消息的确来自微信服务器"></a>设置微信验证请求 - 验证消息的确来自微信服务器</h6><p>修改 <code>weixin_interface</code> 代码如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">....</span><br><span class="line">省略</span><br><span class="line">....</span><br><span class="line"></span><br><span class="line">from flask import Flask</span><br><span class="line">from flask import request</span><br><span class="line">import hashlib</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 配置参数</span><br><span class="line">X_TOKEN&#x3D;&#39;leafney&#39; #这里改写你在微信公众平台里输入的token</span><br><span class="line"></span><br><span class="line">....</span><br><span class="line">省略</span><br><span class="line">....</span><br><span class="line"></span><br><span class="line"># 微信公众平台接口</span><br><span class="line">@app.route(&#39;&#x2F;weixin&#39;,methods&#x3D;[&#39;GET&#39;,&#39;POST&#39;])</span><br><span class="line">def weixin_interface():</span><br><span class="line">	# return &quot;这是微信接口&quot;</span><br><span class="line">	if request.method&#x3D;&#x3D;&#39;GET&#39;:</span><br><span class="line">		# 处理验证</span><br><span class="line"></span><br><span class="line">		# 接收参数</span><br><span class="line">		wx_signature&#x3D;request.args.get(&#39;signature&#39;)</span><br><span class="line">		wx_timestamp&#x3D;request.args.get(&#39;timestamp&#39;)</span><br><span class="line">		wx_nonce&#x3D;request.args.get(&#39;nonce&#39;)</span><br><span class="line">		wx_echostr&#x3D;request.args.get(&#39;echostr&#39;)</span><br><span class="line">		# 自己的token</span><br><span class="line">		wx_token&#x3D;X_TOKEN</span><br><span class="line">		# 字典序排序</span><br><span class="line">		w_list&#x3D;[wx_token,wx_timestamp,wx_nonce]</span><br><span class="line">		w_list.sort()</span><br><span class="line">		# sha1加密算法</span><br><span class="line">		w_sha1&#x3D;hashlib.sha1()</span><br><span class="line">		map(w_sha1.update,w_list)</span><br><span class="line">		w_hashcode&#x3D;w_sha1.hexdigest()</span><br><span class="line"></span><br><span class="line">		# 如果是来自微信的请求，则返回echostr</span><br><span class="line">		if w_hashcode &#x3D;&#x3D; wx_signature:</span><br><span class="line">			return wx_echostr</span><br><span class="line"></span><br><span class="line">	else:</span><br><span class="line">		# 处理逻辑交互</span><br><span class="line">		pass</span><br></pre></td></tr></table></figure>

<p>因为我用的是微信的测试号来进行配置，将程序上传并启动之后，在 “测试号配置” 页面中的 “接口配置信息” 处 填入 <code>URL</code> 和 <code>Token</code> 然后点击 “确定” 。</p>
<p>如果程序接入成功，会提示 “配置成功” ，否则可以在之前配置的 <code>测试Docker容器</code> 下查看调试信息，来进行相应的修改。</p>
<hr>
<h6 id="实现业务逻辑"><a href="#实现业务逻辑" class="headerlink" title="实现业务逻辑"></a>实现业务逻辑</h6><p>​当普通微信用户向公众账号发消息时，微信服务器将POST消息的XML数据包到开发者填写的URL上。</p>
<p>接收消息内容，在 Flask 中可以使用 <code>request.data</code> 来获取：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">xml_data&#x3D;request.data</span><br></pre></td></tr></table></figure>

<p>根据微信公众平台开发文档的说明 <a href="http://mp.weixin.qq.com/wiki/10/79502792eef98d6e0c6e1739da387346.html" target="_blank" rel="noopener">接收普通消息 - 微信公众平台开发者文档</a> 我们可以通过 <code>MsgType</code> 参数来区分接收的消息的类型，</p>
<p>例如文本消息的数据包如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;xml&gt;</span><br><span class="line">&lt;ToUserName&gt;&lt;![CDATA[toUser]]&gt;&lt;&#x2F;ToUserName&gt;</span><br><span class="line">&lt;FromUserName&gt;&lt;![CDATA[fromUser]]&gt;&lt;&#x2F;FromUserName&gt; </span><br><span class="line">&lt;CreateTime&gt;1348831860&lt;&#x2F;CreateTime&gt;</span><br><span class="line">&lt;MsgType&gt;&lt;![CDATA[text]]&gt;&lt;&#x2F;MsgType&gt;</span><br><span class="line">&lt;Content&gt;&lt;![CDATA[this is a test]]&gt;&lt;&#x2F;Content&gt;</span><br><span class="line">&lt;MsgId&gt;1234567890123456&lt;&#x2F;MsgId&gt;</span><br><span class="line">&lt;&#x2F;xml&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>ToUserName 表示消息的接收者</li>
<li>FromUserName 表示消息的发送者</li>
<li>CreateTime 表示消息创建的时间戳</li>
<li>MsgType 表示消息的类型</li>
<li>Content 表示消息的内容</li>
<li>MsgId 表示消息的id，可以用来对消息排重</li>
</ul>
<p>我们可以使用 <code>lxml</code> 来解析xml文档，获取相应的参数值。</p>
<p>添加引用：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import lxml</span><br><span class="line">from lxml import etree</span><br></pre></td></tr></table></figure>

<p>解析得到所需的参数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wx_xml&#x3D;etree.fromstring(xml_data) # 进行xml解析</span><br><span class="line">print(etree.tostring(wx_xml,pretty_print&#x3D;True))  # 获取请求内容</span><br><span class="line"></span><br><span class="line"># 获取请求参数</span><br><span class="line">wx_msgType&#x3D;wx_xml.find(&#39;MsgType&#39;).text</span><br><span class="line">wx_fromUser&#x3D;wx_xml.find(&#39;FromUserName&#39;).text  # 微信公众号</span><br><span class="line">wx_toUser&#x3D;wx_xml.find(&#39;ToUserName&#39;).text # 用户</span><br></pre></td></tr></table></figure>

<p>在向微信服务器回复消息时，也要按照微信的规定来返回特定XML结构的数据，详细可见 <a href="http://mp.weixin.qq.com/wiki/14/89b871b5466b19b3efa4ada8e577d45e.html" target="_blank" rel="noopener">被动回复用户消息 - 微信公众平台开发者文档</a> ，比如回复文本消息格式如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;xml&gt;</span><br><span class="line">&lt;ToUserName&gt;&lt;![CDATA[toUser]]&gt;&lt;&#x2F;ToUserName&gt;</span><br><span class="line">&lt;FromUserName&gt;&lt;![CDATA[fromUser]]&gt;&lt;&#x2F;FromUserName&gt;</span><br><span class="line">&lt;CreateTime&gt;12345678&lt;&#x2F;CreateTime&gt;</span><br><span class="line">&lt;MsgType&gt;&lt;![CDATA[text]]&gt;&lt;&#x2F;MsgType&gt;</span><br><span class="line">&lt;Content&gt;&lt;![CDATA[你好]]&gt;&lt;&#x2F;Content&gt;</span><br><span class="line">&lt;&#x2F;xml&gt;</span><br></pre></td></tr></table></figure>

<p>在向微信端回复消息时，<code>ToUserName</code> 和 <code>FromUserName</code> 我们可以从接收时的消息内容中来得到，只需要把接收者和发送者的角色互换一下即可，<code>Content</code> 为我们要回复的内容。</p>
<p>详细的处理代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 根据请求类型来返回不同的处理结果</span><br><span class="line">if wx_msgType &#x3D;&#x3D; &#39;text&#39;:</span><br><span class="line">	# 文本消息</span><br><span class="line"></span><br><span class="line">	# 获取文本消息内容</span><br><span class="line">	wx_content&#x3D;wx_xml.find(&#39;Content&#39;).text</span><br><span class="line">	content&#x3D;wx_content.encode(&#39;utf-8&#39;)</span><br><span class="line"></span><br><span class="line">	print(content)</span><br><span class="line">	if content &#x3D;&#x3D; &#39;天气&#39;:</span><br><span class="line">		# return &#39;北京天气挺好的！&#39;</span><br><span class="line">		# 注意回复消息时，接收者和发送者的位置要互换一下</span><br><span class="line">		return TextReply(wx_fromUser,wx_toUser,u&#39;北京天气挺好的！&#39;).render()</span><br><span class="line"></span><br><span class="line">	else:</span><br><span class="line">		return TextReply(wx_fromUser,wx_toUser,wx_content).render()</span><br><span class="line"></span><br><span class="line">elif wx_msgType &#x3D;&#x3D; &#39;image&#39;:</span><br><span class="line">	return &#39;success&#39;</span><br><span class="line">else:</span><br><span class="line">	return &#39;success&#39;</span><br></pre></td></tr></table></figure>

<p>消息模板：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class TextReply(object):</span><br><span class="line">	&quot;&quot;&quot;回复文本消息&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">	TEMPLATE&#x3D;u&quot;&quot;&quot;</span><br><span class="line">	&lt;xml&gt;</span><br><span class="line">    &lt;ToUserName&gt;&lt;![CDATA[&#123;target&#125;]]&gt;&lt;&#x2F;ToUserName&gt;</span><br><span class="line">    &lt;FromUserName&gt;&lt;![CDATA[&#123;source&#125;]]&gt;&lt;&#x2F;FromUserName&gt;</span><br><span class="line">    &lt;CreateTime&gt;&#123;time&#125;&lt;&#x2F;CreateTime&gt;</span><br><span class="line">    &lt;MsgType&gt;&lt;![CDATA[text]]&gt;&lt;&#x2F;MsgType&gt;</span><br><span class="line">    &lt;Content&gt;&lt;![CDATA[&#123;content&#125;]]&gt;&lt;&#x2F;Content&gt;</span><br><span class="line">    &lt;&#x2F;xml&gt;</span><br><span class="line">	&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">	def __init__(self, target,source,content):</span><br><span class="line">		self.target&#x3D;target</span><br><span class="line">		self.source&#x3D;source</span><br><span class="line">		self.content&#x3D;content</span><br><span class="line">		self.time&#x3D;int(time.time())</span><br><span class="line"></span><br><span class="line">	def render(self):</span><br><span class="line">		return TextReply.TEMPLATE.format(target&#x3D;self.target,source&#x3D;self.source,time&#x3D;self.time,content&#x3D;self.content)</span><br></pre></td></tr></table></figure>

<p>至此，接收回复文本消息的功能我们就做好了，上传到 <code>宿主机</code> 的 <code>xweixin</code> 目录下即可。</p>
<hr>
<p>在运行代码之前，先要安装依赖包 <code>lxml</code> ,不然会报 <code>No module named lxml</code> 的错误。</p>
<h5 id="安装-lxml"><a href="#安装-lxml" class="headerlink" title="安装 lxml"></a>安装 lxml</h5><p>先安装 lxml 的依赖包：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ apt-get install python-dev libxml2-dev libxslt1-dev zlib1g-dev</span><br></pre></td></tr></table></figure>

<p>再安装 lxml :</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ pip install lxml</span><br></pre></td></tr></table></figure>

<hr>
<h5 id="完整的代码实现"><a href="#完整的代码实现" class="headerlink" title="完整的代码实现"></a>完整的代码实现</h5><p>app.py (主程序)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># coding:utf-8</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">微信公众平台</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">from flask import Flask</span><br><span class="line">from flask import request</span><br><span class="line">import hashlib</span><br><span class="line">import lxml</span><br><span class="line">from lxml import etree</span><br><span class="line">import time</span><br><span class="line"> </span><br><span class="line"># 消息返回模板</span><br><span class="line">from reply import TextReply</span><br><span class="line"></span><br><span class="line"># 配置参数</span><br><span class="line">X_TOKEN&#x3D;&#39;leafney&#39; #这里改写你在微信公众平台里输入的token</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app &#x3D; Flask(__name__)</span><br><span class="line"></span><br><span class="line">@app.route(&#39;&#x2F;&#39;)</span><br><span class="line">def hello_world():</span><br><span class="line">	return &#39;Hello World!&#39;</span><br><span class="line"></span><br><span class="line"># 微信公众平台接口</span><br><span class="line">@app.route(&#39;&#x2F;weixin&#39;,methods&#x3D;[&#39;GET&#39;,&#39;POST&#39;])</span><br><span class="line">def weixin_interface():</span><br><span class="line">	# return &quot;这是微信接口&quot;</span><br><span class="line">	if request.method&#x3D;&#x3D;&#39;GET&#39;:</span><br><span class="line">		# 处理验证</span><br><span class="line"></span><br><span class="line">		# 接收参数</span><br><span class="line">		wx_signature&#x3D;request.args.get(&#39;signature&#39;)</span><br><span class="line">		wx_timestamp&#x3D;request.args.get(&#39;timestamp&#39;)</span><br><span class="line">		wx_nonce&#x3D;request.args.get(&#39;nonce&#39;)</span><br><span class="line">		wx_echostr&#x3D;request.args.get(&#39;echostr&#39;)</span><br><span class="line">		# 自己的token</span><br><span class="line">		wx_token&#x3D;X_TOKEN</span><br><span class="line">		# 字典序排序</span><br><span class="line">		w_list&#x3D;[wx_token,wx_timestamp,wx_nonce]</span><br><span class="line">		w_list.sort()</span><br><span class="line">		# sha1加密算法</span><br><span class="line">		w_sha1&#x3D;hashlib.sha1()</span><br><span class="line">		map(w_sha1.update,w_list)</span><br><span class="line">		w_hashcode&#x3D;w_sha1.hexdigest()</span><br><span class="line"></span><br><span class="line">		# 如果是来自微信的请求，则返回echostr</span><br><span class="line">		if w_hashcode &#x3D;&#x3D; wx_signature:</span><br><span class="line">			return wx_echostr</span><br><span class="line"></span><br><span class="line">	else:</span><br><span class="line">		# 处理逻辑交互</span><br><span class="line"></span><br><span class="line">		xml_data&#x3D;request.data # 获得post来的数据</span><br><span class="line">		wx_xml&#x3D;etree.fromstring(xml_data) # 进行xml解析</span><br><span class="line">		# print(etree.tostring(wx_xml,pretty_print&#x3D;True))  # 获取请求内容</span><br><span class="line">		</span><br><span class="line">		# 获取请求参数</span><br><span class="line">		wx_msgType&#x3D;wx_xml.find(&#39;MsgType&#39;).text</span><br><span class="line">		wx_fromUser&#x3D;wx_xml.find(&#39;FromUserName&#39;).text  # 微信公众号</span><br><span class="line">		wx_toUser&#x3D;wx_xml.find(&#39;ToUserName&#39;).text # 用户</span><br><span class="line"></span><br><span class="line">		# 根据请求类型来返回不同的处理结果</span><br><span class="line">		if wx_msgType &#x3D;&#x3D; &#39;text&#39;:</span><br><span class="line">			# 文本消息</span><br><span class="line"></span><br><span class="line">			# 获取文本消息内容</span><br><span class="line">			wx_content&#x3D;wx_xml.find(&#39;Content&#39;).text</span><br><span class="line">			content&#x3D;wx_content.encode(&#39;utf-8&#39;)</span><br><span class="line"></span><br><span class="line">			print(content)</span><br><span class="line">			if content &#x3D;&#x3D; &#39;天气&#39;:</span><br><span class="line">				# return &#39;北京天气挺好的！&#39;</span><br><span class="line">				# 注意回复消息时，接收者和发送者的位置要互换一下</span><br><span class="line">				return TextReply(wx_fromUser,wx_toUser,u&#39;北京天气挺好的！&#39;).render()</span><br><span class="line"></span><br><span class="line">			else:</span><br><span class="line">				return TextReply(wx_fromUser,wx_toUser,wx_content).render()</span><br><span class="line"></span><br><span class="line">		elif wx_msgType &#x3D;&#x3D; &#39;image&#39;:</span><br><span class="line">			return &#39;success&#39;</span><br><span class="line">		else:</span><br><span class="line">			return &#39;success&#39;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">	app.run(host&#x3D;&#39;0.0.0.0&#39;,port&#x3D;80,debug&#x3D;True)</span><br></pre></td></tr></table></figure>

<p>reply.py (消息模板)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># coding:utf-8</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">微信公众平台 消息回复模板</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">class TextReply(object):</span><br><span class="line">	&quot;&quot;&quot;回复文本消息&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">	TEMPLATE&#x3D;u&quot;&quot;&quot;</span><br><span class="line">	&lt;xml&gt;</span><br><span class="line">    &lt;ToUserName&gt;&lt;![CDATA[&#123;target&#125;]]&gt;&lt;&#x2F;ToUserName&gt;</span><br><span class="line">    &lt;FromUserName&gt;&lt;![CDATA[&#123;source&#125;]]&gt;&lt;&#x2F;FromUserName&gt;</span><br><span class="line">    &lt;CreateTime&gt;&#123;time&#125;&lt;&#x2F;CreateTime&gt;</span><br><span class="line">    &lt;MsgType&gt;&lt;![CDATA[text]]&gt;&lt;&#x2F;MsgType&gt;</span><br><span class="line">    &lt;Content&gt;&lt;![CDATA[&#123;content&#125;]]&gt;&lt;&#x2F;Content&gt;</span><br><span class="line">    &lt;&#x2F;xml&gt;</span><br><span class="line">	&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">	def __init__(self, target,source,content):</span><br><span class="line">		self.target&#x3D;target</span><br><span class="line">		self.source&#x3D;source</span><br><span class="line">		self.content&#x3D;content</span><br><span class="line">		self.time&#x3D;int(time.time())</span><br><span class="line"></span><br><span class="line">	def render(self):</span><br><span class="line">		return TextReply.TEMPLATE.format(target&#x3D;self.target,source&#x3D;self.source,time&#x3D;self.time,content&#x3D;self.content)</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h4><p>至此，上面我们就实现了最基本的微信公众号的验证和简单文本消息的接收和回复功能。</p>
<p>之后我会介绍如何来处理复杂的消息内容，图片、语音、图文等等。然后通过一些有趣的小功能来让我们这即使没有特殊权限的公众号也能玩得更有意思，欢迎关注！</p>
<hr>
<p>PublishTime: 2016-9-24 22:35:16</p>
]]></content>
      <categories>
        <category>微信公众平台</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Python</tag>
        <tag>Flask</tag>
      </tags>
  </entry>
  <entry>
    <title>使用SSH密钥连接Github</title>
    <url>/2016/09/24/using-ssh-key-connection-github/</url>
    <content><![CDATA[<p>每次向GitHub签入代码时，都要输入用户名和密码，让人感觉非常麻烦。如果使用SSH，通过密钥的方式来连接GitHub，每次提交代码就可以享受不用输入密码的快感了！</p>
<p>下面我主要介绍在Windows下如何通过 SSH密钥 来连接GitHub。</p>
<h4 id="引申"><a href="#引申" class="headerlink" title="引申"></a>引申</h4><ul>
<li>Linux下：<a href="/2017/03/03/using-ssh-key-connection-github-in-linux/">Linux下使用SSH密钥连接Github</a></li>
<li>Windows下：<a href="/2016/09/24/using-ssh-key-connection-github/">使用SSH密钥连接Github</a></li>
</ul>
<hr>
<h4 id="第一步-查看是否已经存在SSH秘钥-keys"><a href="#第一步-查看是否已经存在SSH秘钥-keys" class="headerlink" title="第一步 查看是否已经存在SSH秘钥(keys)"></a>第一步 查看是否已经存在SSH秘钥(keys)</h4><p>右键打开 <code>Git Bash</code> ,并运行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cd ~&#x2F;.ssh</span><br></pre></td></tr></table></figure>

<p>如果提示如下信息为 <code>No such file or directory</code>，则说明不存在SSH秘钥，如果已经存在，可以直接进入<strong>第三步</strong>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cd ~&#x2F;.ssh</span><br><span class="line">sh.exe&quot;: cd: &#x2F;c&#x2F;Users&#x2F;Xue&#x2F;.ssh: No such file or directory</span><br></pre></td></tr></table></figure>

<p>如果无提示信息，进入 <code>.ssh</code> 目录执行 <code>ls</code> 命令，可查看本机已经存在的SSH的公钥和私钥。</p>
<hr>
<h4 id="第二步-创建新的SSH密钥-keys"><a href="#第二步-创建新的SSH密钥-keys" class="headerlink" title="第二步 创建新的SSH密钥(keys)"></a>第二步 创建新的SSH密钥(keys)</h4><p>输入如下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cd ~   		# 保证当前路径在 &#96;~&#96; 下，即 &#96;C:&#x2F;Users&#x2F;用户名&#96; 目录</span><br><span class="line">$ ssh-keygen -t rsa -C &quot;your_email@example.com&quot;   # 这将根据你提供的邮箱地址，创建一对密钥</span><br></pre></td></tr></table></figure>

<p>提示信息如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C &quot;your_email@example.com&quot;</span><br><span class="line">Generating public&#x2F;private rsa key pair.</span><br><span class="line">Enter file in which to save the key (&#x2F;c&#x2F;Users&#x2F;用户名&#x2F;.ssh&#x2F;id_rsa):   # 直接回车，则将密钥按默认路径及文件名进行存储。此时也可以输入特定的文件名</span><br><span class="line">Created directory &#39;&#x2F;c&#x2F;Users&#x2F;用户名&#x2F;.ssh&#39;.</span><br><span class="line">Enter passphrase (empty for no passphrase):   # 根据提示，你需要输入密码和确认密码。可以不填，设置为空值，直接回车</span><br><span class="line">Enter same passphrase again:</span><br><span class="line">Your identification has been saved in &#x2F;c&#x2F;Users&#x2F;用户名&#x2F;.ssh&#x2F;id_rsa.</span><br><span class="line">Your public key has been saved in &#x2F;c&#x2F;Users&#x2F;用户名&#x2F;.ssh&#x2F;id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">6d:40:da:xx:xx:xx:xx:b8:60:4a:bd:61:5f:c5:d6:db your_email@example.com</span><br><span class="line">The key&#39;s randomart image is:</span><br><span class="line">+--[ RSA 2048]----+</span><br><span class="line">|   .   .&#x3D;oo.     |</span><br><span class="line">|  . * .&#x3D;.*o .    |</span><br><span class="line">| . + &#x3D;oo+..  o   |</span><br><span class="line">|  . ..o. o  . E  |</span><br><span class="line">|      . S o      |</span><br><span class="line">|         .       |</span><br><span class="line">|                 |</span><br><span class="line">|                 |</span><br><span class="line">|                 |</span><br><span class="line">+-----------------+</span><br></pre></td></tr></table></figure>

<p>然后在目录 <code>~/.ssh</code> 下，就新创建了两个文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cd ~&#x2F;.ssh</span><br><span class="line">$ ls</span><br><span class="line">id_rsa  id_rsa.pub</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="第三步-在GitHub账户中添加你的公钥"><a href="#第三步-在GitHub账户中添加你的公钥" class="headerlink" title="第三步 在GitHub账户中添加你的公钥"></a>第三步 在GitHub账户中添加你的公钥</h4><p>执行如下命令，将公钥的内容复制到系统剪切板中(或直接打开该文件进行复制操作)：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">clip &lt; ~&#x2F;.ssh&#x2F;id_rsa.pub</span><br></pre></td></tr></table></figure>

<p>登陆Github网站，选择 <code>Settings</code> –&gt; <code>SSH and GPG keys</code> 菜单，点击 <code>New SSH key</code> 按钮。<br>粘贴你的密钥到 <code>Key</code> 输入框中并设置 <code>Title</code> 信息，点击 <code>Add SSH key</code> 按钮完成。</p>
<p>至此，添加完毕。</p>
<hr>
<h4 id="第四步-连接测试"><a href="#第四步-连接测试" class="headerlink" title="第四步 连接测试"></a>第四步 连接测试</h4><p>先保证本地 <code>Git</code> 已设置好git账户的 <code>用户名</code> 和 <code>邮箱</code> 信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git config --global user.name &quot;your_username&quot;   # 设置用户名</span><br><span class="line">$ git config --global user.email &quot;your_email@example.com&quot;  # 设置邮箱地址</span><br></pre></td></tr></table></figure>

<p>测试SSH keys 是否设置成功，执行如下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br></pre></td></tr></table></figure>

<p>提示信息如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br><span class="line">The authenticity of host &#39;github.com (192.30.253.113)&#39; can&#39;t be established.</span><br><span class="line">RSA key fingerprint is 16:27:xx:xx:xx:xx:xx:36:63:1b:56:4d:eb:df:a6:48.</span><br><span class="line">Are you sure you want to continue connecting (yes&#x2F;no)? yes  # 确认你是否继续连接，输入yes</span><br><span class="line">Warning: Permanently added &#39;github.com,192.30.253.113&#39; (RSA) to the list of know</span><br><span class="line">n hosts.</span><br><span class="line">Hi xxx! You&#39;ve successfully authenticated, but GitHub does not provide shell</span><br><span class="line"> access.  #  出现这句话，说明设置成功</span><br></pre></td></tr></table></figure>

<p>当提示如下信息，说明连通Github成功：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Hi xxx! You&#39;ve successfully authenticated, but GitHub does not provide shell</span><br><span class="line"> access.</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="第五步-将本地项目通过-SSH-push-到-GitHub"><a href="#第五步-将本地项目通过-SSH-push-到-GitHub" class="headerlink" title="第五步 将本地项目通过 SSH push 到 GitHub"></a>第五步 将本地项目通过 SSH push 到 GitHub</h4><p>在github新建一个仓库，如 <code>test_ssh</code> 。</p>
<p>执行以下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">## 创建目录</span><br><span class="line">$ mkdir test</span><br><span class="line">$ cd test</span><br><span class="line">## 初始化git仓库</span><br><span class="line">$ git init</span><br><span class="line">## 创建readme.md文件</span><br><span class="line">$ echo &quot;this is a test ssh keys&quot; &gt; README.md</span><br><span class="line">## 提交到本地</span><br><span class="line">## 提交当前目录下的所有文件</span><br><span class="line">$ git add .</span><br><span class="line">## 提交记录说明</span><br><span class="line">$ git commit -m &quot;add readme.md&quot;</span><br><span class="line">## 提交到github</span><br><span class="line">$ git remote add origin git@github.com:your_github_name&#x2F;test_ssh.git</span><br><span class="line">$ git push -u origin master</span><br></pre></td></tr></table></figure>

<p>刷新 <code>test_ssh</code> 仓库，就能看到提交的文件了。</p>
<p>如果是本地已经存在的git项目，只需要执行以下命令即可：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">## 提交到github</span><br><span class="line">$ git remote add origin git@github.com:your_github_name&#x2F;test_ssh.git</span><br><span class="line">$ git push -u origin master</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="相关参考文章"><a href="#相关参考文章" class="headerlink" title="相关参考文章"></a>相关参考文章</h4><ul>
<li><a href="http://www.xuanfengge.com/using-ssh-key-link-github-photo-tour.html" target="_blank" rel="noopener">使用SSH密钥连接Github【图文教程】 - 轩枫阁 – 前端开发 | web前端技术博客</a></li>
</ul>
]]></content>
      <tags>
        <tag>GitHub</tag>
        <tag>SSH</tag>
      </tags>
  </entry>
  <entry>
    <title>使用GitHub搭建Hexo静态博客</title>
    <url>/2016/09/24/use-github-to-build-hexo-static-blog/</url>
    <content><![CDATA[<h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p>之前一直在用自己创建的.Net网站来写博客文章，只有简单的CRUD的功能，数据也是从数据库中直接查询的。自从接触了markdown之后，渐渐习惯了用markdown来记录自己在开发过程中遇到的问题和学到的新知识。但由于之前博客中是通过百度的 <code>ueditor</code> 编辑器来编辑文章，不能直接处理markdown，所以后来就一直考虑有没有其他的方法来更方便的管理和发布博客。</p>
<p>自从发现了 Hexo，不得不说这不就是我一直想要找的博客工具吗？</p>
<p>静态博客的特点如下：</p>
<ul>
<li>不用数据库</li>
<li>访问速度快</li>
<li>支持markdown，更加注重博客内容</li>
</ul>
<p>而且部署到 GitHub 上，我们还不需要去配置服务器，非常的方便。</p>
<p>下面详细记录我这个博客的搭建部署流程，希望能帮到有需要的朋友们！</p>
<h4 id="搭建流程"><a href="#搭建流程" class="headerlink" title="搭建流程"></a>搭建流程</h4><h5 id="开始前保证已安装："><a href="#开始前保证已安装：" class="headerlink" title="开始前保证已安装："></a>开始前保证已安装：</h5><ul>
<li>Node.js<ul>
<li>Linux 下执行如下命令来安装：<ul>
<li><code>$ curl https://raw.github.com/creationix/nvm/master/install.sh | sh</code></li>
<li><code>$ nvm install stable</code></li>
</ul>
</li>
<li>Windows 下可以从 <a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">Node.js Download</a> 处选择 <code>Windows Installer</code> 下载msi安装包</li>
</ul>
</li>
<li>Git<ul>
<li>Linux(Ubuntu) 下执行如下命令来安装：<ul>
<li><code>$ sudo apt-get install git-core</code></li>
</ul>
</li>
<li>Windows 下可以从 <a href="https://git-scm.com/download/win" target="_blank" rel="noopener">Git Download</a> 处下载 <code>Git for Windows</code> 安装包</li>
</ul>
</li>
</ul>
<h5 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h5><p>选择一个用来创建博客的目录，在该目录下使用 <code>CMD</code> 命令行窗口，这里推荐使用 <a href="http://cmder.net/" target="_blank" rel="noopener">Cmder</a> 来代替Windows上默认的命令行。</p>
<p>通过 <code>npm</code> 命令执行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<h5 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h5><p>执行如下命令，Hexo 将会在指定文件夹中新建所需要的文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; hexo init &lt;folder&gt;</span><br><span class="line">&gt; cd &lt;folder&gt;</span><br><span class="line">&gt; npm install</span><br></pre></td></tr></table></figure>

<p>这里假设我要创建的博客所在目录名为 <code>xblog</code> ,则命令为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; hexo init xblog</span><br><span class="line">&gt; cd xblog</span><br><span class="line">&gt; npm install</span><br></pre></td></tr></table></figure>

<h5 id="生成静态页"><a href="#生成静态页" class="headerlink" title="生成静态页"></a>生成静态页</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; hexo g</span><br></pre></td></tr></table></figure>

<p>该命令的完整格式为:  <code>hexo generate</code></p>
<h5 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; hexo s</span><br></pre></td></tr></table></figure>

<p>该命令的完整格式为： <code>hexo server</code></p>
<p>hexo默认使用 <code>4000</code> 端口进行预览，可以通过浏览器打开 <code>http://localhost:4000/</code> 查看。如果端口被占用，可以用 <code>hexo s -p 5000</code>  指定端口号为 <code>5000</code> 或者其他未被占用的端口。使用 <code>Ctrl+C</code> 来停止预览。</p>
<h5 id="查看Hexo版本"><a href="#查看Hexo版本" class="headerlink" title="查看Hexo版本"></a>查看Hexo版本</h5><p>可以通过命令 <code>hexo -v</code> 查看当前hexo的版本信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; hexo -v</span><br><span class="line">hexo: 3.2.2</span><br><span class="line">hexo-cli: 1.0.2</span><br><span class="line">os: Windows_NT 10.0.10586 win32 x64</span><br><span class="line">http_parser: 2.5.2</span><br><span class="line">node: 4.4.0</span><br><span class="line">v8: 4.5.103.35</span><br><span class="line">uv: 1.8.0</span><br><span class="line">zlib: 1.2.8</span><br><span class="line">ares: 1.10.1-DEV</span><br><span class="line">icu: 56.1</span><br><span class="line">modules: 46</span><br><span class="line">openssl: 1.0.2g</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="Hexo配置"><a href="#Hexo配置" class="headerlink" title="Hexo配置"></a>Hexo配置</h4><h5 id="更换主题-theme"><a href="#更换主题-theme" class="headerlink" title="更换主题 theme"></a>更换主题 theme</h5><p>以主题 <a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">NexT</a> 为例，首先下载该主题：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; cd your-hexo-site (我这里是 &#96;cd xblog&#96;)</span><br><span class="line">&gt; git clone https:&#x2F;&#x2F;github.com&#x2F;iissnan&#x2F;hexo-theme-next themes&#x2F;next</span><br></pre></td></tr></table></figure>

<p>在站点站点根目录下打开 <code>_config.yml</code>，找到 <code>theme</code> 字段，将 <code>theme: landscape</code> 改为 <code>theme: next</code> ，然后再次执行 <code>hexo g</code> 来重新生成。</p>
<h5 id="主题设置"><a href="#主题设置" class="headerlink" title="主题设置"></a>主题设置</h5><p>关于主题的配置可直接参考NexT官网的配置流程 <a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">开始使用-NexT</a> ，这里我会把自己在配置时的操作简单记录，仅供大家参考。</p>
<p>在 Hexo 中有两份主要的配置文件，其名称都是 <code>_config.yml</code>。 其中，一份位于站点根目录下，主要包含 Hexo 本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。</p>
<p>为了描述方便，在以下说明中，将前者称为 <code>站点配置文件</code>， 后者称为 <code>主题配置文件</code>。</p>
<hr>
<h6 id="选择Scheme"><a href="#选择Scheme" class="headerlink" title="选择Scheme"></a>选择Scheme</h6><p>借助于 Scheme，NexT 提供了多种不同的外观。目前 NexT 支持三种 Scheme ：</p>
<ul>
<li>Muse - 默认 Scheme，这是 NexT 最初的版本，黑白主调，大量留白</li>
<li>Mist - Muse 的紧凑版本，整洁有序的单栏外观</li>
<li>Pisces - 双栏 Scheme，小家碧玉似的清新</li>
</ul>
<p>Scheme 的切换通过更改 <code>主题配置文件</code> ，搜索 <code>scheme</code> 关键字。 你会看到有三行 <code>scheme</code> 的配置，将你需要启用的 <code>scheme</code> 前面注释 <code>#</code> 去掉即可。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#scheme: Muse</span><br><span class="line">#scheme: Mist</span><br><span class="line">scheme: Pisces</span><br></pre></td></tr></table></figure>

<hr>
<h6 id="设置-语言"><a href="#设置-语言" class="headerlink" title="设置 语言"></a>设置 语言</h6><p>编辑 <code>站点配置文件</code>， 将 <code>language</code> 设置成你所需要的语言。这里我选择了简体中文，配置如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">language: zh-Hans</span><br></pre></td></tr></table></figure>

<hr>
<h6 id="设置-菜单"><a href="#设置-菜单" class="headerlink" title="设置 菜单"></a>设置 菜单</h6><p>菜单即是你的导航菜单，我们可以设置菜单项的 <code>显示名称</code>和 链接 以及 <code>菜单项对应的图标</code> 。</p>
<p>我们可以在 <code>主题配置文件</code> 中来修改，对应的字段是 <code>menu</code> 。我的配置如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: &#x2F;   				# 主页</span><br><span class="line">  categories: &#x2F;categories   # 分类页</span><br><span class="line">  tags: &#x2F;tags   			# 标签页</span><br><span class="line">  archives: &#x2F;archives  		# 归档页</span><br><span class="line">  about: &#x2F;about 			# 关于页面</span><br></pre></td></tr></table></figure>

<p>菜单项的显示文本放置在 <code>NexT</code> 主题目录下的 <code>languages/{language}.yml</code> （<code>{language}</code> 为你所使用的语言）。</p>
<p>菜单项的图标，对应的字段是 <code>menu_icons</code>。我们可以通过 <code>enable</code> 来控制是否显示图标。</p>
<p>我们也可以添加自己的链接，只要把上面的 <code>名称-链接-图标</code> 三者对应好即可。</p>
<blockquote>
<p>请注意键值（如 <code>home</code>）的大小写要严格匹配</p>
</blockquote>
<hr>
<h6 id="设置-头像"><a href="#设置-头像" class="headerlink" title="设置 头像"></a>设置 头像</h6><p>编辑 <code>站点配置文件</code>， 新增字段 <code>avatar</code>， 值设置成头像的链接地址。</p>
<p>我们可以将自己的头像图片文件上传到主题目录下的 <code>source/uploads/</code> 目录下(新建uploads目录若不存在) 或 <code>source/images/</code> 目录下。完整的目录就是 <code>your-hexo-site\themes\next\source\images\</code> 下。</p>
<p>然后将 <code>avatar</code> 字段配置如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># avatar 个人头像</span><br><span class="line">avatar: &#x2F;images&#x2F;avatar.jpg</span><br></pre></td></tr></table></figure>

<p>或者也可以使用网络上的头像来进行设置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">avatar: http:&#x2F;&#x2F;example.com&#x2F;avatar.png</span><br></pre></td></tr></table></figure>

<hr>
<h6 id="设置-作者昵称及站点描述"><a href="#设置-作者昵称及站点描述" class="headerlink" title="设置 作者昵称及站点描述"></a>设置 作者昵称及站点描述</h6><p>编辑 <code>站点配置文件</code>， 设置 <code>author</code> 为你的昵称。</p>
<p>编辑 <code>站点配置文件</code>， 设置 <code>description</code> 字段为你的站点描述。</p>
<hr>
<h6 id="设置代码高亮主题"><a href="#设置代码高亮主题" class="headerlink" title="设置代码高亮主题"></a>设置代码高亮主题</h6><p>NexT共提供了5款主题可以选择，默认使用白色的 <code>normal</code> 主题。</p>
<p><code>normal</code>，<code>night</code>， <code>night blue</code>， <code>night bright</code>， <code>night eighties</code></p>
<p>在 <code>主题配置文件</code> 中找到 <code>highlight_theme</code> 字段，更改即可。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">highlight_theme: night eighties</span><br></pre></td></tr></table></figure>

<hr>
<h6 id="开启打赏功能"><a href="#开启打赏功能" class="headerlink" title="开启打赏功能"></a>开启打赏功能</h6><p>NexT可以支持微信打赏和支付宝打赏，在 <code>主题配置文件</code> 中添加如下字段即可：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 打赏功能</span><br><span class="line">reward_comment: 坚持原创技术分享，您的支持将鼓励我继续创作！</span><br><span class="line">wechatpay: &#x2F;images&#x2F;wechat-reward-image.jpg</span><br><span class="line">alipay: &#x2F;images&#x2F;alipay-reward-image.jpg</span><br></pre></td></tr></table></figure>

<p>微信个人收款二维码可以从微信APP右上角“+”处，选择 <code>收付款</code> – <code>我要收款</code> – <code>长按二维码</code> 来获取。<br>支付宝个人收款二维码可以从支付宝APP的右上角“+”处，选择 <code>我的二维码/收款</code> 来获取。</p>
<p>二维码图片可以和头像一样保存在 <code>source/images/</code> 目录下。</p>
<hr>
<h5 id="主题栏目设置"><a href="#主题栏目设置" class="headerlink" title="主题栏目设置"></a>主题栏目设置</h5><p>在上面设置导航菜单时我们已经添加了导航菜单: <code>categories</code> 和 <code>tags</code> ，但在预览时会直接报错，因为我们还没有创建这两个分类页面。</p>
<h6 id="添加「标签」页面"><a href="#添加「标签」页面" class="headerlink" title="添加「标签」页面"></a>添加「标签」页面</h6><p>「标签」页面将展示站点的所有标签，若你的所有文章都未包含标签，此页面将是空的。</p>
<p>这里先详细介绍两个命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; hexo n about</span><br><span class="line"></span><br><span class="line">&gt; hexo n page about</span><br></pre></td></tr></table></figure>

<p><code>hexo n</code> 的完整格式为 <code>hexo new</code> ，所以上面的命令也可以写成：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; hexo new about</span><br><span class="line"></span><br><span class="line">&gt; hexo new page about</span><br></pre></td></tr></table></figure>

<p>两者的区别是：</p>
<p><code>hexo new xxxx</code> 表示创建一个新的文章页面。在Hexo中, 你写的博客文章会默认存储在 <code>your-hexo-site/source/_posts</code> 下。比如上面的命令 <code>hexo new about</code> 我们就在 <code>your-hexo-site\source\_posts</code> 目录下新建了一个 <code>about.md</code> 的文件。</p>
<p><code>hexo new page xxxx</code> 表示创建一个新的分类主页面。比如上面的命令 <code>hexo new page about</code> 我们就在 <code>your-hexo-site\source\</code> 目录下创建了一个名为 <code>about</code> 的目录，该目录下有一个名为 <code>index.md</code> 的文件。</p>
<hr>
<p>在命令行窗口下，定位到 <code>Hexo</code> 站点目录下。使用 <code>hexo new page</code> 新建一个分类主页面，命名为 <code>tags</code> ：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; cd your-hexo-site</span><br><span class="line">&gt; hexo new page tags</span><br></pre></td></tr></table></figure>

<p>然后打开 <code>your-hexo-site\source\tags</code> 目录下的 <code>index.md</code> 文件，将页面的类型设置为 <code>tags</code> ，主题将自动为这个页面显示标签云。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 标签</span><br><span class="line">date: 2016-09-24 01:05:02</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：如果有启用 <code>多说</code> 或者 <code>Disqus</code> 评论，页面也会带有评论。 若需要关闭的话，请添加字段 <code>comments</code> 并将值设置为 <code>false</code> ，如：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 标签</span><br><span class="line">date: 2016-09-24 01:05:02</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line">comments: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p>那么我们在新创建的文章页面中要如何来显示标签呢？</p>
<p>我们可以在文章页面中通过添加 <code>tags</code> 标记来设置文章要显示的标签。</p>
<p>Hexo 中有 <code>Front-matter</code> 这个概念，是文件最上方以 <code>---</code> 分隔的区域，用于指定个别文件的变量。</p>
<p><code>Front-matter</code> 支持 “数组” 方式或 “yaml” 方式来设置，如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">title: hexo index</span><br><span class="line">date: 2016-09-24 01:05:02</span><br><span class="line">tags: [github,html5,css3]</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">title: hexo index</span><br><span class="line">date: 2016-09-24 01:05:02</span><br><span class="line">tags: </span><br><span class="line">- github</span><br><span class="line">- html5</span><br><span class="line">- css3</span><br></pre></td></tr></table></figure>

<hr>
<h6 id="添加「分类」页面"><a href="#添加「分类」页面" class="headerlink" title="添加「分类」页面"></a>添加「分类」页面</h6><p>「分类」页面将展示站点的所有分类，若你的所有文章都未包含分类，此页面将是空的。 </p>
<p>和上面配置 <code>tags</code> 的方法一样，我们可以通过命令 <code>hexo new page xxxx</code> 来创建：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; cd your-hexo-site</span><br><span class="line">&gt; hexo new page categories</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这里需要注意的一点是，我们命令中的名称 <code>tags</code> 和 <code>categories</code> 是在之前配置导航菜单时在 <code>menu</code> 字段下指定的名称，大小写不能错。</p>
</blockquote>
<p>相应的页面类型设置如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 分类</span><br><span class="line">date: 2016-09-24 01:08:49</span><br><span class="line">type: &quot;categories&quot;</span><br><span class="line">comments: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p>同样的，在文章页面中，我们可以通过 <code>categories</code> 字段来为文章指定所属的分类：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 分类测试文章</span><br><span class="line">categories: Testing</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="关于-Hexo-下的文章页面"><a href="#关于-Hexo-下的文章页面" class="headerlink" title="关于 Hexo 下的文章页面"></a>关于 Hexo 下的文章页面</h4><p>上面已经提到过，我们可以通过 <code>hexo n xxxx</code> 或 <code>hexo new xxxx</code> 来创建新的文章页面，默认会保存在 <code>your-hexo-site\source\_posts</code> 目录下。</p>
<p>一般的文章页面头部的 <code>Front-matter</code> 格式如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: hexo next  		    # 文章标题</span><br><span class="line">date: 2016-09-24 01:08:49   # 文章发布日期</span><br><span class="line">tags: [github,html5]</span><br><span class="line">tags:</span><br><span class="line">	- github</span><br><span class="line">	- html5 			  # tags 文章的标签，可以通过数组方式或yaml方式指定</span><br><span class="line">categories: 前端   		  # 文章所属分类</span><br><span class="line">description: 这里是文章描述，大概140个字左右  # 文章描述</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">下面是文章正文 ...</span><br></pre></td></tr></table></figure>

<h5 id="需要注意的是"><a href="#需要注意的是" class="headerlink" title="需要注意的是"></a>需要注意的是</h5><ul>
<li>冒号后面与内容直接要有一个空格，否则无法编译生成</li>
<li>正文与 <code>Front-matter</code> 之间要有一个空行</li>
<li>为文章添加描述文字除了指定 <code>description</code> 之外，还可以在正文中通过添加 <code>&lt;!--more--&gt;</code> 标签分隔内容</li>
</ul>
<h5 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h5><ul>
<li>修改配置文件时注意YAML语法，参数冒号:后一定要留一空格</li>
<li>中文乱码请修改文件编码格式为UTF-8</li>
<li>yml文件中所有有空格的字段都用双引号括起来</li>
</ul>
<p>默认情况下，新建文章的文件名和标题名是相同的，需要注意的是如果文件名是中文，那么生成的链接后面会自动添加末尾斜杠 <code>http://localhost:4000/2016/09/xxxxxxx/</code> 如果手动去掉该斜杠 <code>/</code> 会直接报错。所以推荐文件名最好用 <code>英文</code> 来写，文章内的标题可以改成中文。</p>
<p>另外，<strong>文章文件名中文末尾斜杠</strong> 的问题也可以通过配置 <code>Nginx</code> 来解决。(这里暂不讨论该方法)</p>
<hr>
<h4 id="Hexo-中常用命令"><a href="#Hexo-中常用命令" class="headerlink" title="Hexo 中常用命令"></a>Hexo 中常用命令</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo generate (hexo g) 	  # 生成静态文件，会在当前目录下生成一个新的叫做public的文件夹</span><br><span class="line">hexo server (hexo s)  	  # 启动本地web服务，用于博客的预览</span><br><span class="line">hexo deploy (hexo d)      # 部署播客到远端（比如github, heroku等平台）</span><br><span class="line">hexo new &quot;postName&quot;       # 新建文章</span><br><span class="line">hexo new page &quot;pageName&quot;  # 新建页面</span><br><span class="line">hexo clean    		  	  # 清理public文件夹</span><br></pre></td></tr></table></figure>

<p>简写形式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo n &#x3D;&#x3D; hexo new</span><br><span class="line">hexo g &#x3D;&#x3D; hexo generate</span><br><span class="line">hexo s &#x3D;&#x3D; hexo server</span><br><span class="line">hexo d &#x3D;&#x3D; hexo deploy</span><br><span class="line">hexo d -g # 生成部署</span><br><span class="line">hexo s -g # 生成预览</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="将-Hexo-部署到-Github"><a href="#将-Hexo-部署到-Github" class="headerlink" title="将 Hexo 部署到 Github"></a>将 Hexo 部署到 Github</h4><p>到 GitHub 新建一个项目，项目名为：<code>你的用户名.github.io</code> <strong>必须为这个名字</strong></p>
<p>Hexo 目前没有自带 Git 部署模块，需手动安装:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<p>然后，在 <code>站点配置文件</code> <code>_config.yml</code> 中设置 <code>deploy</code> 字段：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@github.com:你的帐号&#x2F;你的帐号.github.io.git  #例如我的：repository: git@github.com:Leafney&#x2F;Leafney.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：这个respository的地址你在GitHub创建同名仓库后，会在页面中给出，直接复制即可。另外，<code>branch</code> 要设置为 <code>master</code> 分支。</p>
</blockquote>
<p>在此之前，还要注意你本地的 Git 已经通过 <code>SSH</code> 和你的 GitHub 连接起来了。</p>
<p>如何通过SSH连接GitHub可以查看我的另一篇文章 <strong><a href="/2016/09/24/using-ssh-key-connection-github/">使用SSH密钥连接Github</a></strong> 来进行设置。</p>
<hr>
<p>然后执行命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; hexo clean  # 先清理public文件夹</span><br><span class="line">&gt; hexo g      # 生成</span><br><span class="line">&gt; hexo d      # 部署</span><br><span class="line"></span><br><span class="line"># 或通过下面一条命令直接生成并部署</span><br><span class="line">&gt; hexo g -d</span><br></pre></td></tr></table></figure>

<p>执行完成之后会在你的博客根目录下生成一个文件夹：<code>.deploy_git</code>， 该目录下的文件会自动被发布到你的 GitHub 上，页面文件在 <code>master</code> 分支下。</p>
<p>然后打开浏览器，输入你的 GitHub pages 的地址 <code>xxxxx.github.io</code> 即可。</p>
<hr>
<p>PublishTime: 2016-9-24 14:06:00</p>
]]></content>
      <categories>
        <category>Hexo博客搭建</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2016/09/24/hello-world/</url>
    <content><![CDATA[<p>Hello Firends! 现在是北京时间 <code>2016-9-24 1:45:58</code> ,酝酿了很久的个人博客Hexo版终于要发布上线了！此处应该有掌声！！！</p>
<p>之前写博客一直用的自己搭建的.net版的网站，只有简单的CRUD的功能，当时只是考虑用来作为自己的一个可以记事的地方，记下自己在开发过程中遇到的问题，学到的新知识等等，并没有考虑要去写一些技术类的文章，去分享。毕竟自己的能力还是有限的。</p>
<p>随着接触越来越多的开源项目，逐渐意识到“分享”确实是一个很有意义的事情。所以决定把自己平时学到的知识、技巧等记录于此，以便能帮助到遇到相关问题的开发朋友们。</p>
<p>博客中的文章会涉及.Net 、Python 、Golang、Linux、前端等相关方面，基本属于全栈，也会涉及到一些前沿的技术。</p>
<p>希望大家多多支持！</p>
]]></content>
  </entry>
  <entry>
    <title>Nginx初级入门</title>
    <url>/2016/07/03/nginx-introduction/</url>
    <content><![CDATA[<p>安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install nginx</span><br></pre></td></tr></table></figure>

<p>在Ubuntu下安装后的文件结构：</p>
<ul>
<li>所有的配置文件都在 <code>/etc/nginx/</code> 下<ul>
<li><code>nginx.conf</code> 为主配置文件</li>
<li><code>sites-available/default</code> 为默认配置文件</li>
</ul>
</li>
<li>程序文件在 <code>/usr/sbin/nginx</code> 下</li>
<li>日志放在了 <code>/var/log/nginx</code> 下</li>
<li>启动脚本 <code>/etc/init.d/nginx</code></li>
<li>默认的虚拟主机的目录设置在了 <code>/var/www/</code> 下（参考默认配置文件）</li>
</ul>
<p>在 <code>nginx.conf</code> 配置文件中，可看到下面两行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">include &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;*.conf;</span><br><span class="line">include &#x2F;etc&#x2F;nginx&#x2F;sites-enabled&#x2F;*;</span><br></pre></td></tr></table></figure>

<p>网上找到的自定义配置文件的设置方法为：</p>
<ol>
<li>我们可以在 <code>/etc/nginx/sites-available</code> 目录下添加自定义配置文件，然后为该文件创建软链接到 <code>/etc/nginx/sites-enabled</code> 目录中。</li>
<li>也可以在 <code>/etc/nginx/conf.d</code> 目录下创建自定义配置文件并以 <code>.conf</code> 为扩展名。</li>
</ol>
<hr>
<p>nginx 的启动 暂停 重启 </p>
<ul>
<li>启动 <code>sudo /etc/init.d/nginx start</code></li>
<li>暂停 <code>sudo /etc/init.d/nginx stop</code></li>
<li>重启 <code>sudo /etc/init.d/nginx restart</code></li>
</ul>
<hr>
<p>nginx 基本的配置文件写法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sever &#123;</span><br><span class="line">    listen 8080;</span><br><span class="line">    server_name _;</span><br><span class="line"></span><br><span class="line">    root &#x2F;home&#x2F;tiger&#x2F;myweb&#x2F;site;</span><br><span class="line">    index index.html;</span><br><span class="line"></span><br><span class="line">    location &#x2F; &#123;</span><br><span class="line">            try_files $uri $uri&#x2F; &#x3D;404;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>示例文件 <code>web.conf</code> ,所在目录为 <code>/etc/nginx/conf.d</code> :</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sever &#123;</span><br><span class="line">    listen 8081;</span><br><span class="line">    server_name _;</span><br><span class="line"></span><br><span class="line">    root &#x2F;home&#x2F;tiger&#x2F;myweb&#x2F;site2;</span><br><span class="line">    index index.html aaa.html;</span><br><span class="line"></span><br><span class="line">    location &#x2F; &#123;</span><br><span class="line">            try_files $uri $uri&#x2F; &#x3D;404;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 8082;</span><br><span class="line">    server_name _; # 访问 localhost</span><br><span class="line"></span><br><span class="line">    error_page 404 &#x2F;404.html; # 指定404错误页</span><br><span class="line"></span><br><span class="line">    root &#x2F;home&#x2F;tiger&#x2F;myweb&#x2F;site2&#x2F;aaa;</span><br><span class="line">    index abc.html;</span><br><span class="line">    location &#x2F; &#123;</span><br><span class="line">            allow all;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>查看目录下文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ls &#x2F;home&#x2F;tiger&#x2F;myweb&#x2F;site2</span><br><span class="line">aaa aaa.html</span><br><span class="line">$ ls &#x2F;home&#x2F;tiger&#x2F;myweb&#x2F;site2&#x2F;aaa</span><br><span class="line">404.html abc.html</span><br></pre></td></tr></table></figure>

<hr>
]]></content>
      <categories>
        <category>开发笔记</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Scrapy爬虫初探</title>
    <url>/2016/06/27/scrapy-introduction/</url>
    <content><![CDATA[<p>Scrapy 是一个快速的高层次的屏幕抓取和网页爬虫框架，爬取网站，从网站页面得到结构化的数据，它有着广泛的用途，从数据挖掘到监测和自动测试，Scrapy完全用Python实现，完全开源，代码托管在Github上，可运行在Linux，Windows，Mac和BSD平台上，基于Twisted的异步网络库来处理网络通讯，用户只需要定制开发几个模块就可以轻松的实现一个爬虫，用来抓取网页内容以及各种图片。</p>
<h4 id="安装Scrapy"><a href="#安装Scrapy" class="headerlink" title="安装Scrapy"></a>安装Scrapy</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo pip install Scrapy</span><br></pre></td></tr></table></figure>

<p>scrapy依赖 <code>lxml</code> ,请保证已经安装了 <code>lxml</code> 库。</p>
<h4 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h4><p>初始化项目框架</p>
<p>这里以抓取 <code>http://www.cnbeta.com/topics/9.htm</code> 页面中的文章标题和简介为例，创建项目名称为 <code>cnbetaSpider</code> 。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ scrapy startproject cnbetaSpider</span><br></pre></td></tr></table></figure>

<p>该命令将会创建包含下列内容的 <code>cnbetaSpider</code> 目录:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cnbetaSpider&#x2F;</span><br><span class="line">    scrapy.cfg</span><br><span class="line">    cnbetaSpider&#x2F;</span><br><span class="line">        __init__.py</span><br><span class="line">        items.py</span><br><span class="line">        pipelines.py</span><br><span class="line">        settings.py</span><br><span class="line">        spiders&#x2F;</span><br><span class="line">            __init__.py</span><br><span class="line">            ...</span><br></pre></td></tr></table></figure>

<p>这些文件分别是:</p>
<ul>
<li><code>scrapy.cfg</code> : 项目的配置文件</li>
<li><code>cnbetaSpider/</code> : 该项目的python模块。之后您将在此加入代码。</li>
<li><code>cnbetaSpider/items.py</code> : 项目中的item文件.</li>
<li><code>cnbetaSpider/pipelines.py</code> : 项目中的pipelines文件.</li>
<li><code>cnbetaSpider/settings.py</code> : 项目的设置文件.</li>
<li><code>cnbetaSpider/spiders/</code> : 放置spider代码的目录.</li>
</ul>
<hr>
<h4 id="定义Item"><a href="#定义Item" class="headerlink" title="定义Item"></a>定义Item</h4><p><code>Item</code> 是保存爬取到的数据的容器。我们需要从网页中提取 文章的标题，链接，描述，对此，在 <code>item</code> 中定义相应的字段。编辑 <code>cnbetaSpider</code> 目录中的 <code>items.py</code> 文件:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import scrapy</span><br><span class="line"></span><br><span class="line">class CnbetaspiderItem(scrapy.Item):</span><br><span class="line">    # define the fields for your item here like:</span><br><span class="line">    # name &#x3D; scrapy.Field()</span><br><span class="line">    title&#x3D;scrapy.Field()</span><br><span class="line">    link&#x3D;scrapy.Field()</span><br><span class="line">    desc&#x3D;scrapy.Field()</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure>

<h4 id="创建Spider"><a href="#创建Spider" class="headerlink" title="创建Spider"></a>创建Spider</h4><p><code>Spider</code> 是用户编写用于从单个网站(或者一些网站)爬取数据的类。<br>其包含了一个用于下载的初始URL，如何跟进网页中的链接以及如何分析页面中的内容， 提取生成 <code>item</code> 的方法。</p>
<p>为了创建一个 <code>Spider</code> ，您必须继承 <code>scrapy.Spider</code> 类， 且定义以下三个属性:</p>
<ul>
<li><code>name</code> 指定Spider的名称，唯一</li>
<li><code>start_urls</code>  包含了Spider在启动时进行爬取的url列表</li>
<li><code>parse()</code> 接收完成下载后生成的 <code>Response</code> 对象，该方法负责解析返回的数据，提取数据(生成item)以及生成需要进一步处理的URL的 <code>Request</code> 对象。</li>
</ul>
<p>在目录 <code>cnbetaSpider/spiders</code> 下创建文件 <code>cnbetaspider.py</code>:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># coding:utf-8</span><br><span class="line"></span><br><span class="line">import scrapy</span><br><span class="line"></span><br><span class="line">class cnbetaSpider(scrapy.Spider):</span><br><span class="line">    &quot;&quot;&quot;docstring for cnbetaSpider&quot;&quot;&quot;</span><br><span class="line">    name&#x3D;&quot;cnbeta&quot;</span><br><span class="line">    allowed_domains&#x3D;[&quot;cnbeta.com&quot;]</span><br><span class="line">    start_urls&#x3D;[</span><br><span class="line">        &quot;http:&#x2F;&#x2F;www.cnbeta.com&#x2F;topics&#x2F;9.htm&quot;</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    def parse(self,response):</span><br><span class="line">        filename&#x3D;response.url.split(&quot;&#x2F;&quot;)[-2]</span><br><span class="line">        with open(filename,&#39;wb&#39;) as f:</span><br><span class="line">            f.write(response.body)</span><br></pre></td></tr></table></figure>

<h4 id="爬取"><a href="#爬取" class="headerlink" title="爬取"></a>爬取</h4><p>进入项目根目录，执行下列命令启动spider:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ls</span><br><span class="line">cnbetaSpider  scrapy.cfg</span><br><span class="line"># 执行命令</span><br><span class="line">$ scrapy crawl cnbeta</span><br></pre></td></tr></table></figure>

<p>第三个参数为 <code>cnbetaspider.py</code> 中的 <code>name</code> 属性值。</p>
<p>执行完成后可在当前目录下看到生成的文件 <code>topics</code>,里面保存的获取到的网页的内容。</p>
<hr>
<h4 id="提取"><a href="#提取" class="headerlink" title="提取"></a>提取</h4><p>Scrapy使用了一种基于 <code>XPath</code> 和 <code>CSS</code> 表达式机制: <code>Scrapy Selectors</code> 。详见：<a href="http://scrapy-chs.readthedocs.io/zh_CN/latest/topics/selectors.html#topics-selectors" target="_blank" rel="noopener">选择器(Selectors) &mdash; Scrapy 0.24.1 文档</a></p>
<p>选择器方法( <code>.xpath()</code> or <code>.css()</code> )</p>
<p>为了提取真实的原文数据，你需要调用 <code>.extract()</code> 方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; response.xpath(&#39;&#x2F;&#x2F;title&#x2F;text()&#39;).extract()</span><br><span class="line">[u&#39;Example website&#39;]</span><br></pre></td></tr></table></figure>

<p>这里给出XPath表达式的例子及对应的含义:</p>
<ul>
<li><code>/html/head/title</code>  : 选择HTML文档中 <code>&lt;head&gt;</code> 标签内的 <code>&lt;title&gt;</code> 元素</li>
<li><code>/html/head/title/text()</code> : 选择上面提到的 <code>&lt;title&gt;</code> 元素的文字</li>
<li><code>//td</code> : 选择所有的 <code>&lt;td&gt;</code> 元素</li>
<li><code>//div[@class=&quot;mine&quot;]</code> : 选择所有具有 <code>class=&quot;mine&quot;</code> 属性的 <code>div</code> 元素</li>
</ul>
<p>Selector有四个基本的方法:</p>
<ul>
<li><code>xpath()</code> : 传入xpath表达式，返回该表达式所对应的所有节点的selector list列表 。</li>
<li><code>css()</code> : 传入CSS表达式，返回该表达式所对应的所有节点的selector list列表.</li>
<li><code>extract()</code> : 序列化该节点为unicode字符串并返回list。</li>
<li><code>re()</code> : 根据传入的正则表达式对数据进行提取，返回unicode字符串list列表。</li>
</ul>
<p>分析网页 <code>http://www.cnbeta.com/topics/9.htm</code> 中的文章：</p>
<p>文章列表在 <code>item</code> 元素：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;*[@class&#x3D;&quot;all_news_wildlist&quot;]&#x2F;div[@class&#x3D;&quot;items&quot;]&#x2F;div[@class&#x3D;&quot;item&quot;]</span><br></pre></td></tr></table></figure>

<p>标题：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">xpath(&#39;&#x2F;&#x2F;*[@class&#x3D;&quot;all_news_wildlist&quot;]&#x2F;div[@class&#x3D;&quot;items&quot;]&#x2F;div[@class&#x3D;&quot;item&quot;]&#x2F;*[@class&#x3D;&quot;hd&quot;]&#x2F;div[@class&#x3D;&quot;title&quot;]&#x2F;a&#x2F;text()&#39;).extract()</span><br></pre></td></tr></table></figure>

<p>链接：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">xpath(&#39;&#x2F;&#x2F;*[@class&#x3D;&quot;all_news_wildlist&quot;]&#x2F;div[@class&#x3D;&quot;items&quot;]&#x2F;div[@class&#x3D;&quot;item&quot;]&#x2F;*[@class&#x3D;&quot;hd&quot;]&#x2F;div[@class&#x3D;&quot;title&quot;]&#x2F;a&#x2F;@href&#39;).extract()</span><br></pre></td></tr></table></figure>

<p>描述：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">xpath(&#39;&#x2F;&#x2F;*[@class&#x3D;&quot;all_news_wildlist&quot;]&#x2F;div[@class&#x3D;&quot;items&quot;]&#x2F;div[@class&#x3D;&quot;item&quot;]&#x2F;*[@class&#x3D;&quot;hd&quot;]&#x2F;*[@class&#x3D;&quot;newsinfo&quot;]&#x2F;p&#x2F;text()&#39;).extract()</span><br></pre></td></tr></table></figure>

<p>修改我们之前定义的 <code>cnbetaspider.py</code> 中的 <code>parse()</code> 方法如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import scrapy</span><br><span class="line"></span><br><span class="line">class cnbetaSpider(scrapy.Spider):</span><br><span class="line">    &quot;&quot;&quot;docstring for cnbetaSpider&quot;&quot;&quot;</span><br><span class="line">    name&#x3D;&quot;cnbeta&quot;</span><br><span class="line">    allowed_domains&#x3D;[&quot;cnbeta.com&quot;]</span><br><span class="line">    start_urls&#x3D;[</span><br><span class="line">        &quot;http:&#x2F;&#x2F;www.cnbeta.com&#x2F;topics&#x2F;9.htm&quot;</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    def parse(self,response):</span><br><span class="line">        for sel in response.xpath(&#39;&#x2F;&#x2F;*[@class&#x3D;&quot;all_news_wildlist&quot;]&#x2F;div[@class&#x3D;&quot;items&quot;]&#x2F;div[@class&#x3D;&quot;item&quot;]&#39;):</span><br><span class="line">            title&#x3D;sel.xpath(&#39;*[@class&#x3D;&quot;hd&quot;]&#x2F;div[@class&#x3D;&quot;title&quot;]&#x2F;a&#x2F;text()&#39;).extract()</span><br><span class="line">            link&#x3D;sel.xpath(&#39;*[@class&#x3D;&quot;hd&quot;]&#x2F;div[@class&#x3D;&quot;title&quot;]&#x2F;a&#x2F;@href&#39;).extract()</span><br><span class="line">            desc&#x3D;sel.xpath(&#39;*[@class&#x3D;&quot;hd&quot;]&#x2F;*[@class&#x3D;&quot;newsinfo&quot;]&#x2F;p&#x2F;text()&#39;).extract()</span><br><span class="line">            print(title,link,desc)</span><br></pre></td></tr></table></figure>

<p>再次执行，能看到爬取到的网站信息被成功输出:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ scapy crawl cnbeta</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h4><p>将之前设置的 <code>Item</code> 对象引入，使用标准的字典语法来保持获取到的每个字段的值。最终的代码为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># coding:utf-8</span><br><span class="line"></span><br><span class="line">import scrapy</span><br><span class="line">from cnbetaSpider.items import CnbetaspiderItem</span><br><span class="line"></span><br><span class="line">class cnbetaSpider(scrapy.Spider):</span><br><span class="line">    &quot;&quot;&quot;docstring for cnbetaSpider&quot;&quot;&quot;</span><br><span class="line">    name&#x3D;&quot;cnbeta&quot;</span><br><span class="line">    allowed_domains&#x3D;[&quot;cnbeta.com&quot;]</span><br><span class="line">    start_urls&#x3D;[</span><br><span class="line">        &quot;http:&#x2F;&#x2F;www.cnbeta.com&#x2F;topics&#x2F;9.htm&quot;</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    def parse(self,response):</span><br><span class="line">        items&#x3D;[]</span><br><span class="line">        for sel in response.xpath(&#39;&#x2F;&#x2F;*[@class&#x3D;&quot;all_news_wildlist&quot;]&#x2F;div[@class&#x3D;&quot;items&quot;]&#x2F;div[@class&#x3D;&quot;item&quot;]&#39;):</span><br><span class="line">            item&#x3D;CnbetaspiderItem()</span><br><span class="line">            item[&#39;title&#39;]&#x3D;sel.xpath(&#39;*[@class&#x3D;&quot;hd&quot;]&#x2F;div[@class&#x3D;&quot;title&quot;]&#x2F;a&#x2F;text()&#39;).extract()</span><br><span class="line">            item[&#39;link&#39;]&#x3D;sel.xpath(&#39;*[@class&#x3D;&quot;hd&quot;]&#x2F;div[@class&#x3D;&quot;title&quot;]&#x2F;a&#x2F;@href&#39;).extract()</span><br><span class="line">            item[&#39;desc&#39;]&#x3D;sel.xpath(&#39;*[@class&#x3D;&quot;hd&quot;]&#x2F;*[@class&#x3D;&quot;newsinfo&quot;]&#x2F;p&#x2F;text()&#39;).extract()</span><br><span class="line">            # yield item</span><br><span class="line">            items.append(item)</span><br><span class="line"></span><br><span class="line">        return items</span><br></pre></td></tr></table></figure>

<hr>
<p>如果想把得到的结果保存在临时文件中，可以：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ scrapy crawl cnbeta &gt; abc.html</span><br></pre></td></tr></table></figure>

<p>这样就把结果保存在当前目录下的 <code>abc.html</code> 中了。</p>
<hr>
<h4 id="Scrapy爬虫运行时报错-“Forbidden-by-robots-txt”"><a href="#Scrapy爬虫运行时报错-“Forbidden-by-robots-txt”" class="headerlink" title="Scrapy爬虫运行时报错 “Forbidden by robots.txt”"></a>Scrapy爬虫运行时报错 “Forbidden by robots.txt”</h4><p>解决该问题只需要将 <code>settings.py</code> 文件中的 <code>ROBOTSTXT_OBEY</code> 值改为 <code>False</code> 即可。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ROBOTSTXT_OBEY &#x3D; False</span><br></pre></td></tr></table></figure>

<h4 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h4><ul>
<li><a href="http://scrapy-chs.readthedocs.io/zh_CN/latest/index.html" target="_blank" rel="noopener">Scrapy 0.25 文档 &mdash; Scrapy 0.24.1 文档</a></li>
<li><a href="http://scrapy-chs.readthedocs.io/zh_CN/1.0/index.html" target="_blank" rel="noopener">Scrapy 1.0 文档(未完成,只更新了intro部分,请谨慎参考) &mdash; Scrapy 1.0.5 文档</a></li>
<li><a href="https://segmentfault.com/a/1190000000583419" target="_blank" rel="noopener">使用Scrapy抓取数据</a></li>
<li><a href="http://blog.csdn.net/zzk1995/article/details/51628205" target="_blank" rel="noopener">爬虫出现Forbidden by robots.txt - 菜鸡瞎讲- 博客频道 - CSDN.NET</a></li>
<li><a href="http://www.jianshu.com/p/887af1ab4200" target="_blank" rel="noopener">Scrapy用Cookie实现模拟登录 - 简书</a></li>
</ul>
]]></content>
      <categories>
        <category>开发笔记</category>
      </categories>
      <tags>
        <tag>数据抓取</tag>
        <tag>Python</tag>
        <tag>Scrapy</tag>
      </tags>
  </entry>
  <entry>
    <title>分布式搜索引擎ElasticSearch初探</title>
    <url>/2016/06/20/distributed-search-engine-elasticsearch/</url>
    <content><![CDATA[<p>ElasticSearch是一个基于Lucene构建的开源，分布式，RESTful搜索引擎。</p>
<h4 id="任务点"><a href="#任务点" class="headerlink" title="任务点"></a>任务点</h4><ul>
<li>在Ubuntu下安装</li>
<li>在Windows下安装</li>
<li>使用Restful API实现搜索引擎的CURD操作</li>
<li>在Python网站Flask下使用ElasticSearch实现文章搜索</li>
<li>ElasticSearch的Python连接器：Pyes</li>
</ul>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>Java (JVM) versionedit</p>
<p>Elasticsearch is built using Java, and requires at least Java 7 in order to run. Only Oracle’s Java and the OpenJDK are supported. The same JVM version should be used on all Elasticsearch nodes and clients.<br>We recommend installing the Java 8 update 20 or later, or Java 7 update 55 or later. Previous versions of Java 7 are known to have bugs that can cause index corruption and data loss. Elasticsearch will refuse to start if a known-bad version of Java is used.<br>The version of Java to use can be configured by setting the JAVA_HOME environment variable.</p>
<h5 id="Linux-Ubuntu-下安装"><a href="#Linux-Ubuntu-下安装" class="headerlink" title="Linux(Ubuntu)下安装"></a>Linux(Ubuntu)下安装</h5><h6 id="Installing-the-oracle-JDK"><a href="#Installing-the-oracle-JDK" class="headerlink" title="Installing the oracle JDK"></a>Installing the oracle JDK</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo add-apt-repository ppa:webupd8team&#x2F;java</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install oracle-java8-installer</span><br><span class="line">java -version</span><br></pre></td></tr></table></figure>

<h6 id="RPM-based-distributions"><a href="#RPM-based-distributions" class="headerlink" title="RPM based distributions"></a>RPM based distributions</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo &#x2F;bin&#x2F;systemctl daemon-reload</span><br><span class="line">sudo &#x2F;bin&#x2F;systemctl enable elasticsearch.service</span><br><span class="line">sudo &#x2F;bin&#x2F;systemctl start elasticsearch.service</span><br></pre></td></tr></table></figure>

<h5 id="Windows下安装"><a href="#Windows下安装" class="headerlink" title="Windows下安装"></a>Windows下安装</h5><p>从网站 <a href="https://www.elastic.co/downloads/elasticsearch" target="_blank" rel="noopener"></a> 下载windows下的msi安装包，<br>在cmd命令行进入安装目录，再进入 <code>bin</code> 目录，运行 <code>elasticsearch.bat</code> 。</p>
<hr>
<h4 id="Ubuntu下配置ElasticSearch环境实录"><a href="#Ubuntu下配置ElasticSearch环境实录" class="headerlink" title="Ubuntu下配置ElasticSearch环境实录"></a>Ubuntu下配置ElasticSearch环境实录</h4><h4 id="安装Java环境"><a href="#安装Java环境" class="headerlink" title="安装Java环境"></a>安装Java环境</h4><p>由于ElasticSearch的运行需要Java环境的支持，先安装java环境。<br>由于Ubuntu系统中由于授权问题，默认只安装了OpenJDK的包，通过<code>java</code>和<code>javac</code>可以看到：  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* default-jdk</span><br><span class="line">* ecj</span><br><span class="line">* gcj-4.9-jdk</span><br><span class="line">* openjdk-8-jdk-headless</span><br><span class="line">* gcj-4.8-jdk</span><br><span class="line">* gcj-5-jdk</span><br><span class="line">* openjdk-9-jdk</span><br></pre></td></tr></table></figure>

<p>根据ElasticSearch官方推荐安装方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo add-apt-repository ppa:webupd8team&#x2F;java</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install oracle-java8-installer</span><br><span class="line">java -version</span><br></pre></td></tr></table></figure>

<p>如果出现如下提示信息，并有进度条显示，则说明运行顺利并正在下载所需文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HTTP request sent, awaiting response... 200 OK</span><br><span class="line">Length: 181367942 (173M) [application&#x2F;x-gzip]</span><br><span class="line">Saving to: ‘jdk-8u91-linux-x64.tar.gz’</span><br><span class="line"></span><br><span class="line">     0K ........ ........ ........ ........ ........ ........  1%  566K 5m8s</span><br><span class="line">  3072K ........ ........ ........ ........ ........ ........  3% 1.15M 3m44s</span><br><span class="line">  6144K ........ ........ ........ ........ ........ ........  5% 1.10M 3m16s</span><br><span class="line">  9216K ........ ........ ........ ........ ........ ........  6% 1002K 3m5s</span><br><span class="line"> 12288K ........ ........ ........ ........ ........ ........  8%  715K 3m11s</span><br><span class="line"> 15360K ........ ........ ........ ........ ........ ........ 10%  624K 3m18s</span><br><span class="line"> 18432K ........ ........ ........ ........ ........ ........ 12%  417K 3m40s</span><br></pre></td></tr></table></figure>

<p>否则可能由于网络原因或其他问题，会中断下载或报错。</p>
<h5 id="错误一："><a href="#错误一：" class="headerlink" title="错误一："></a>错误一：</h5><p>安装时出现错误：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sha256sum mismatch jdk-8u91-linux-x64.tar.gz</span><br><span class="line">Oracle JDK 8 is NOT installed.</span><br><span class="line">dpkg: 处理软件包 oracle-java8-installer (--configure)时出错：</span><br><span class="line"> 子进程 已安装 post-installation 脚本 返回错误状态 1</span><br><span class="line">正在设置 gsfonts-x11 (0.24) ...</span><br><span class="line">在处理时有错误发生：</span><br><span class="line"> oracle-java8-installer</span><br><span class="line">E: Sub-process &#x2F;usr&#x2F;bin&#x2F;dpkg returned an error code (1)</span><br></pre></td></tr></table></figure>

<p>可以用该文章中介绍的方法解决，亲测有效：<br><a href="http://www.miaoqiyuan.cn/p/ubuntu-e-sub-process-dpkg-returned-an-error-code" target="_blank" rel="noopener">http://www.miaoqiyuan.cn/p/ubuntu-e-sub-process-dpkg-returned-an-error-code</a></p>
<h5 id="错误二："><a href="#错误二：" class="headerlink" title="错误二："></a>错误二：</h5><p>根据上面的方法执行完命令后，执行 <code>java -version</code> 时只会显示下列输出信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tiger@vbox:~$ java -version</span><br><span class="line">程序 &#39;java&#39; 已包含在下列软件包中：</span><br><span class="line"> * default-jre</span><br><span class="line"> * gcj-4.9-jre-headless</span><br><span class="line"> * gcj-5-jre-headless</span><br><span class="line"> * openjdk-8-jre-headless</span><br><span class="line"> * gcj-4.8-jre-headless</span><br><span class="line"> * openjdk-9-jre-headless</span><br><span class="line">请尝试：sudo apt install &lt;选定的软件包&gt;</span><br></pre></td></tr></table></figure>

<p>即使是重复执行上面的安装方法，结果仍是如此：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tiger@vbox:~$ sudo apt-get install oracle-java8-installer</span><br><span class="line">正在读取软件包列表... 完成</span><br><span class="line">正在分析软件包的依赖关系树       </span><br><span class="line">正在读取状态信息... 完成       </span><br><span class="line">oracle-java8-installer 已经是最新版 (8u92+8u91arm-2~really8u91~webupd8~0)。</span><br><span class="line">升级了 0 个软件包，新安装了 0 个软件包，要卸载 0 个软件包，有 196 个软件包未被升级。</span><br><span class="line">tiger@vbox:~$ sudo apt-get install oracle-java8-set-default</span><br><span class="line">正在读取软件包列表... 完成</span><br><span class="line">正在分析软件包的依赖关系树       </span><br><span class="line">正在读取状态信息... 完成       </span><br><span class="line">oracle-java8-set-default 已经是最新版 (8u92+8u91arm-2~really8u91~webupd8~0)。</span><br><span class="line">升级了 0 个软件包，新安装了 0 个软件包，要卸载 0 个软件包，有 196 个软件包未被升级。</span><br></pre></td></tr></table></figure>

<p><strong>根本问题是什么</strong></p>
<p>转到目录<code>/usr/lib/jvm/</code> 下，可以看到一个名为 <code>java-8-oracle</code> 的目录，但查看该目录却发现里面是空的。所以虽然提示是安装成功了，但却没有可执行的文件，可能是在下载文件时出错了。</p>
<p>由于直接安装错误，下面尝试手动进行安装。</p>
<h5 id="什么情况下表示安装成功，什么情况下表示安装失败"><a href="#什么情况下表示安装成功，什么情况下表示安装失败" class="headerlink" title="什么情况下表示安装成功，什么情况下表示安装失败"></a>什么情况下表示安装成功，什么情况下表示安装失败</h5><p>通过 <code>java -version</code> 来查看</p>
<p>如果输出如下，则说明 Orancel JDK 安装失败：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@ubuntu:~# java -version</span><br><span class="line">The program &#39;java&#39; can be found in the following packages:</span><br><span class="line"> * default-jre</span><br><span class="line"> * gcj-4.8-jre-headless</span><br><span class="line"> * openjdk-7-jre-headless</span><br><span class="line"> * gcj-4.6-jre-headless</span><br><span class="line"> * openjdk-6-jre-headless</span><br><span class="line">Try: apt-get install &lt;selected package&gt;</span><br></pre></td></tr></table></figure>

<p>如果输出如下，则说明安装成功：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tiger@vbox:&#x2F;usr&#x2F;lib&#x2F;jvm$ java -version</span><br><span class="line">java version &quot;1.8.0_91&quot;</span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_91-b14)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.91-b14, mixed mode)</span><br></pre></td></tr></table></figure>

<h4 id="Ubuntu下手动安装JDK"><a href="#Ubuntu下手动安装JDK" class="headerlink" title="Ubuntu下手动安装JDK"></a>Ubuntu下手动安装JDK</h4><ol>
<li>到Oracle官网下载对应当前系统的jdk版本 <a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener">Java SE Development Kit 8 Downloads</a> ：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 下载对应版本jdk压缩包，这里选择 &#96;Linux64&#96;</span><br><span class="line">wget http:&#x2F;&#x2F;download.oracle.com&#x2F;otn-pub&#x2F;java&#x2F;jdk&#x2F;8u91-b14&#x2F;jdk-8u91-linux-x64.tar.gz</span><br><span class="line">&#x2F;&#x2F; 等待下载完成后，执行：</span><br><span class="line">tar zxvf jdk-8u91-linux-x64.tar.gz</span><br><span class="line">&#x2F;&#x2F; 查看  &#96;ls&#96;</span><br><span class="line">jdk1.8.0_91 jdk-8u91-linux-x64.tar.gz</span><br></pre></td></tr></table></figure>

<p>将解压后的目录 <code>jdk1.8.0_91</code> 复制到 <code>/usr/lib/jvm</code> 目录里，</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo cp -r jdk1.8.0_91&#x2F; &#x2F;usr&#x2F;lib&#x2F;jvm</span><br></pre></td></tr></table></figure>

<p>配置环境变量：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo vim &#x2F;etc&#x2F;profile</span><br></pre></td></tr></table></figure>

<p>在文件的末尾添加以下内容：(注意对应自己的目录路径和jdk的版本号)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">JAVA_HOME&#x3D;&#x2F;usr&#x2F;lib&#x2F;jvm&#x2F;jdk1.8.0_91</span><br><span class="line">export JRE_HOME&#x3D;&#x2F;usr&#x2F;lib&#x2F;jvm&#x2F;jdk1.8.0_91&#x2F;jre</span><br><span class="line">export CLASSPATH&#x3D;.:$JAVA_HOME&#x2F;lib:$JRE_HOME&#x2F;lib:$CLASSPATH</span><br><span class="line">export PATH&#x3D;$JAVA_HOME&#x2F;bin:$JRE_HOME&#x2F;bin:$PATH</span><br></pre></td></tr></table></figure>

<p>修改完后，执行 <code>:wq</code> 退出vim ，使用<code>source</code>刷新一下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">source &#x2F;etc&#x2F;profile</span><br></pre></td></tr></table></figure>

<p>然后执行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java -version</span><br><span class="line">&#x2F;&#x2F;看到如下信息表示安装成功：</span><br><span class="line">tiger@vbox:&#x2F;usr&#x2F;lib&#x2F;jvm$ java -version</span><br><span class="line">java version &quot;1.8.0_91&quot;</span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_91-b14)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.91-b14, mixed mode)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;执行 &#96;java&#96;</span><br><span class="line"></span><br><span class="line">tiger@vbox:&#x2F;usr&#x2F;lib&#x2F;jvm$ java</span><br><span class="line">用法: java [-options] class [args...]</span><br><span class="line">           (执行类)</span><br><span class="line">   或  java [-options] -jar jarfile [args...]</span><br><span class="line">           (执行 jar 文件)</span><br><span class="line">其中选项包括:</span><br><span class="line">    -d32      使用 32 位数据模型 (如果可用)</span><br><span class="line">    -d64      使用 64 位数据模型 (如果可用)</span><br><span class="line">    -server   选择 &quot;server&quot; VM</span><br><span class="line">                  默认 VM 是 server.</span><br><span class="line"></span><br><span class="line">    -cp &lt;目录和 zip&#x2F;jar 文件的类搜索路径&gt;</span><br><span class="line">    -classpath &lt;目录和 zip&#x2F;jar 文件的类搜索路径&gt;</span><br><span class="line">                  用 : 分隔的目录, JAR 档案</span><br><span class="line">                  和 ZIP 档案列表, 用于搜索类文件。</span><br><span class="line">    -D&lt;名称&gt;&#x3D;&lt;值&gt;</span><br><span class="line">                  设置系统属性</span><br><span class="line">    -verbose:[class|gc|jni]</span><br><span class="line">                  启用详细输出</span><br><span class="line">    -version      输出产品版本并退出</span><br><span class="line">....</span><br><span class="line">....</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;执行 &#96;javac&#96;</span><br><span class="line"></span><br><span class="line">tiger@vbox:&#x2F;usr&#x2F;lib&#x2F;jvm$ javac</span><br><span class="line">用法: javac &lt;options&gt; &lt;source files&gt;</span><br><span class="line">其中, 可能的选项包括:</span><br><span class="line">  -g                         生成所有调试信息</span><br><span class="line">  -g:none                    不生成任何调试信息</span><br><span class="line">  -g:&#123;lines,vars,source&#125;     只生成某些调试信息</span><br><span class="line">  -nowarn                    不生成任何警告</span><br><span class="line">  -verbose                   输出有关编译器正在执行的操作的消息</span><br><span class="line">  -deprecation               输出使用已过时的 API 的源位置</span><br><span class="line">  -classpath &lt;路径&gt;            指定查找用户类文件和注释处理程序的位置</span><br><span class="line">  -cp &lt;路径&gt;                   指定查找用户类文件和注释处理程序的位置</span><br><span class="line">  -sourcepath &lt;路径&gt;           指定查找输入源文件的位置</span><br><span class="line">  -bootclasspath &lt;路径&gt;        覆盖引导类文件的位置</span><br><span class="line">.... </span><br><span class="line">....</span><br></pre></td></tr></table></figure>

<hr>
<p><strong>下面的步骤未测试，仅供参考</strong></p>
<p>如果到这一步，任然不成功的话，则属于手动配置默认的JDK版本：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo update-alternatives --install &#x2F;usr&#x2F;bin&#x2F;java java &#x2F;usr&#x2F;lib&#x2F;jvm&#x2F;java&#x2F;bin&#x2F;java 300  </span><br><span class="line">sudo update-alternatives --install &#x2F;usr&#x2F;bin&#x2F;javac javac &#x2F;usr&#x2F;lib&#x2F;jvm&#x2F;java&#x2F;bin&#x2F;javac 300  </span><br><span class="line">sudo update-alternatives --install &#x2F;usr&#x2F;bin&#x2F;jar jar &#x2F;usr&#x2F;lib&#x2F;jvm&#x2F;java&#x2F;bin&#x2F;jar 300   </span><br><span class="line">sudo update-alternatives --install &#x2F;usr&#x2F;bin&#x2F;javah javah &#x2F;usr&#x2F;lib&#x2F;jvm&#x2F;java&#x2F;bin&#x2F;javah 300   </span><br><span class="line">sudo update-alternatives --install &#x2F;usr&#x2F;bin&#x2F;javap javap &#x2F;usr&#x2F;lib&#x2F;jvm&#x2F;java&#x2F;bin&#x2F;javap 300 </span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;然后执行</span><br><span class="line">sudo update-alternatives --config java</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 在通过 java -version 来判断</span><br><span class="line">java -version</span><br></pre></td></tr></table></figure>


<p>参考 ：</p>
<ul>
<li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/setup-service.html" target="_blank" rel="noopener">Running as a Service on Linux        | Elasticsearch Reference [2.3]      | Elastic</a></li>
<li><a href="http://www.cnblogs.com/plinx/archive/2013/06/01/3113106.html" target="_blank" rel="noopener">ubuntu 13.04 安装 JDK - plinx - 博客园</a></li>
<li><a href="http://www.orangeclk.com/2014/08/10/install-java-on-linux/" target="_blank" rel="noopener">在 Ubuntu 系统上安装 Oracle Java 8 | 半瓶</a></li>
</ul>
<hr>
<h4 id="安装ElasticSearch"><a href="#安装ElasticSearch" class="headerlink" title="安装ElasticSearch"></a>安装ElasticSearch</h4><p>下载最新安装包：</p>
<p>从 <a href="https://www.elastic.co/downloads/elasticsearch" target="_blank" rel="noopener">download Elasticsearch free</a> 下载Linux的安装包：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 下载</span><br><span class="line">$ wget -c https:&#x2F;&#x2F;download.elastic.co&#x2F;elasticsearch&#x2F;release&#x2F;org&#x2F;elasticsearch&#x2F;distribution&#x2F;zip&#x2F;elasticsearch&#x2F;2.3.3&#x2F;elasticsearch-2.3.3.zip</span><br><span class="line">&#x2F;&#x2F; 解压安装</span><br><span class="line">unzip elasticsearch-2.3.3.zip</span><br></pre></td></tr></table></figure>

<p>进入解压后得到的目录 <code>elasticsearch-2.3.3</code> ，参考官网安装教程 <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/setup.html#setup-installation" target="_blank" rel="noopener">Setup</a> 执行如下命令来运行:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ bin&#x2F;elasticsearch</span><br></pre></td></tr></table></figure>

<p>如果上一步的java环境没有安装成功，执行该命令会报如下错误：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Could not find any executable java binary. Please install java in your PATH or set JAVA_HOME</span><br></pre></td></tr></table></figure>

<p>如果没有出现错误，提示信息中输出 如 <code>[INFO] .....</code> 等信息，说明运行成功。</p>
<p>再新开一个命令行终端，执行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tiger@vbox:~$ curl http:&#x2F;&#x2F;localhost:9200&#x2F;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot; : &quot;Rune&quot;,</span><br><span class="line">  &quot;cluster_name&quot; : &quot;elasticsearch&quot;,</span><br><span class="line">  &quot;version&quot; : &#123;</span><br><span class="line">    &quot;number&quot; : &quot;2.3.3&quot;,</span><br><span class="line">    &quot;build_hash&quot; : &quot;218bdf10790eef486ff2c41a3df5cfa32dadcfde&quot;,</span><br><span class="line">    &quot;build_timestamp&quot; : &quot;2016-05-17T15:40:04Z&quot;,</span><br><span class="line">    &quot;build_snapshot&quot; : false,</span><br><span class="line">    &quot;lucene_version&quot; : &quot;5.5.0&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;tagline&quot; : &quot;You Know, for Search&quot;</span><br><span class="line">&#125;</span><br><span class="line">tiger@vbox:~$</span><br></pre></td></tr></table></figure>

<p>出现上面的提示则说明ElasticSearch安装成功。</p>
<ul>
<li><a href="http://www.cnblogs.com/kid551/p/4273256.html" target="_blank" rel="noopener">ElasticSearch - kid551 - 博客园</a></li>
</ul>
<hr>
<p>默认情况下 <code>Elasticsearch</code> 的 <code>RESTful</code> 服务只有本机才能访问。也就是说无法从主机访问虚拟机中的服务。为了方便调试，可以修改 <code>/config/elasticsarch.yml</code> 文件，加入以下两行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">network.bind_host: &quot;0.0.0.0&quot;</span><br><span class="line">network.publish_host: _non_loopback:ipv4_</span><br></pre></td></tr></table></figure>

<p>但线上环境切忌不要这样配置，否则任何人都可以通过这个接口修改你的数据。</p>
<hr>
<h4 id="安装-IK-Analysis-处理中文搜索"><a href="#安装-IK-Analysis-处理中文搜索" class="headerlink" title="安装 IK Analysis 处理中文搜索"></a>安装 IK Analysis 处理中文搜索</h4><p>Elasticsearch 自带的分词器会粗暴地把每个汉字直接分开，没有根据词库来分词。为了处理中文搜索，还需要安装中文分词插件。我使用的是 <a href="https://github.com/medcl/elasticsearch-analysis-ik" target="_blank" rel="noopener">elasticsearch-analysis-ik</a>，支持自定义词库。</p>
<p>首先，下载与 Elasticsearch 匹配的 elasticsearch-analysis-ik 插件：{2.3.3–1.9.3}</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 从github 下载内容</span><br><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;medcl&#x2F;elasticsearch-analysis-ik.git</span><br><span class="line">cd elasticsearch-analysis-ik</span><br><span class="line">&#x2F;&#x2F; 进入指定的 tag v1.9.3</span><br><span class="line">git checkout v1.9.3</span><br><span class="line">&#x2F;&#x2F; 当前目录</span><br><span class="line">ls</span><br><span class="line">config  LICENSE.txt  pom.xml  README.md  src</span><br></pre></td></tr></table></figure>

<p>要编译 <code>elasticsearch-analysis-ik</code> ,需要安装 <code>Apache Maven</code> 工具：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install maven</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;查看是否正确安装</span><br><span class="line">mvn -v</span><br></pre></td></tr></table></figure>

<p>执行编译：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 当前目录</span><br><span class="line">ls</span><br><span class="line">config  LICENSE.txt  pom.xml  README.md  src</span><br><span class="line">&#x2F;&#x2F; 编译</span><br><span class="line">mvn package</span><br></pre></td></tr></table></figure>

<p>等待直到出现如下提示时，表示编译成功：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] BUILD SUCCESS</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] Total time: 7:43.935s</span><br><span class="line">[INFO] Finished at: Sun Jun 19 18:36:59 CST 2016</span><br><span class="line">[INFO] Final Memory: 15M&#x2F;56M</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;查看目录</span><br><span class="line">ls</span><br><span class="line">config  LICENSE.txt  pom.xml  README.md  src  target</span><br></pre></td></tr></table></figure>

<p>发现会多出了一个 <code>target</code> 目录，<code>copy and unzip</code> 目录下的文件 <code>target/releases/elasticsearch-analysis-ik-{version}.zip</code>  到 上面安装的 <code>elasticsearch/plugins/ik</code> 目录中，需要新建 <code>ik</code> 目录：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; target 目录</span><br><span class="line">$ pwd</span><br><span class="line">elasticsearch-analysis-ik&#x2F;target&#x2F;releases</span><br><span class="line">$ ls </span><br><span class="line">elasticsearch-analysis-ik-1.9.3.zip</span><br></pre></td></tr></table></figure>

<p>在 <code>elasticsearch-2.3.3/plugins/</code> 下新建目录<code>ik</code> :</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ls &#x2F;elastic&#x2F;elasticsearch-2.3.3&#x2F;plugins</span><br><span class="line">$ mkdir &#x2F;elastic&#x2F;elasticsearch-2.3.3&#x2F;plugins&#x2F;ik</span><br><span class="line">$ ls &#x2F;elastic&#x2F;elasticsearch-2.3.3&#x2F;plugins</span><br><span class="line">ik</span><br></pre></td></tr></table></figure>

<p>将上面编译完成的 <code>elasticsearch-analysis-ik-1.9.3.zip</code> 拷贝到 <code>ik</code> 目录并解压：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cp elasticsearch-analysis-ik-1.9.3.zip ~&#x2F;elastic&#x2F;elasticsearch-2.3.3&#x2F;plugins&#x2F;ik</span><br><span class="line">$ ls &#x2F;elastic&#x2F;elasticsearch-2.3.3&#x2F;plugins&#x2F;ik</span><br><span class="line">elasticsearch-analysis-ik-1.9.3.zip</span><br><span class="line">&#x2F;&#x2F; 解压</span><br><span class="line">$ unzip elasticsearch-analysis-ik-1.9.3.zip</span><br><span class="line">&#x2F;&#x2F; 得到如下内容：</span><br><span class="line">$ ls</span><br><span class="line">commons-codec-1.9.jar                elasticsearch-analysis-ik-1.9.3.zip</span><br><span class="line">commons-logging-1.2.jar              httpclient-4.4.1.jar</span><br><span class="line">config                               httpcore-4.4.1.jar</span><br><span class="line">elasticsearch-analysis-ik-1.9.3.jar  plugin-descriptor.properties</span><br></pre></td></tr></table></figure>

<p><strong>注意：上面的操作目录请根据个人的目录和所下载的版本号进行修改</strong></p>
<hr>
<p>如果你觉得上面的编译步骤太繁琐，也可以直接在github页面的<code>release</code>中下载已经编译好的zip文件，直接解压到 <code>ik</code> 目录下即可：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget -c https:&#x2F;&#x2F;github.com&#x2F;medcl&#x2F;elasticsearch-analysis-ik&#x2F;releases&#x2F;download&#x2F;v1.9.3&#x2F;elasticsearch-analysis-ik-1.9.3.zip</span><br><span class="line"></span><br><span class="line">unzip elasticsearch-analysis-ik-1.9.3.zip</span><br></pre></td></tr></table></figure>

<p>重启 <code>elasticsearch</code> 服务即可。</p>
<p>如果看到类似于下面的信息，说明 IK Analysis 插件已经装好了:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">plugins [analysis-ik]</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="如何以root-账户运行elasticSearch"><a href="#如何以root-账户运行elasticSearch" class="headerlink" title="如何以root 账户运行elasticSearch"></a>如何以<code>root</code> 账户运行elasticSearch</h4><p>默认情况下，ElasticSearch不允许以<code>root</code>账户运行，会报 <code>don&#39;t run elasticsearch as root.</code> 错误。<br>不过我们也可以强制让其以 <code>root</code> 账户来运行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bin&#x2F;elasticsearch -Des.insecure.allow.root&#x3D;true</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="配置同义词-该部分待测试"><a href="#配置同义词-该部分待测试" class="headerlink" title="配置同义词  (该部分待测试)"></a>配置同义词  (该部分待测试)</h4><p>Elasticsearch 自带一个名为 <code>synonym</code> 的同义词 <code>filter</code>。为了能让 <code>IK</code> 和 <code>synonym</code> 同时工作，我们需要定义新的 <code>analyzer</code>，用 <code>IK</code> 做 <code>tokenizer</code>，<code>synonym</code> 做 <code>filter</code>。听上去很复杂，实际上要做的只是加一段配置。</p>
<p>打开 <code>~/elasticsearch-2.3.3/config/elasticsearch.yml</code> 文件，加入以下配置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">index:</span><br><span class="line">  analysis:</span><br><span class="line">    analyzer:</span><br><span class="line">      ik_syno:</span><br><span class="line">          type: custom</span><br><span class="line">          tokenizer: ik_max_word</span><br><span class="line">          filter: [my_synonym_filter]</span><br><span class="line">      ik_syno_smart:</span><br><span class="line">          type: custom</span><br><span class="line">          tokenizer: ik_smart</span><br><span class="line">          filter: [my_synonym_filter]</span><br><span class="line">    filter:</span><br><span class="line">      my_synonym_filter:</span><br><span class="line">          type: synonym</span><br><span class="line">          synonyms_path: analysis&#x2F;synonym.txt</span><br></pre></td></tr></table></figure>

<p>以上配置定义了 <code>ik_syno</code> 和 <code>ik_syno_smart</code> 这两个新的 <code>analyzer</code>，分别对应 <code>IK</code> 的 <code>ik_max_word</code> 和 <code>ik_smart</code> 两种分词策略。根据 <code>IK</code> 的文档，二者区别如下：</p>
<ul>
<li>ik_max_word：会将文本做最细粒度的拆分，例如「中华人民共和国国歌」会被拆分为「中华人民共和国、中华人民、中华、华人、人民共和国、人民、人、民、共和国、共和、和、国国、国歌」，会穷尽各种可能的组合；</li>
<li>ik_smart：会将文本做最粗粒度的拆分，例如「中华人民共和国国歌」会被拆分为「中华人民共和国、国歌」；</li>
</ul>
<p>ik_syno 和 ik_syno_smart 都会使用 synonym filter 实现同义词转换。为了方便后续测试，建议创建 <code>~/elasticsearch-2.3.3/config/analysis/synonym.txt</code> 文件，输入一些同义词并存为 <code>utf-8</code> 格式。例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ua,user-agent,userAgent</span><br><span class="line">js,javascript</span><br><span class="line">internet explore&#x3D;&gt;ie</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="用Restful-api-测试搜索"><a href="#用Restful-api-测试搜索" class="headerlink" title="用Restful api 测试搜索"></a>用Restful api 测试搜索</h4><p>(1) 查看集群健康信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ curl -X GET http:&#x2F;&#x2F;localhost:9200&#x2F;_cat&#x2F;health?v</span><br></pre></td></tr></table></figure>

<p>返回结果为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">epoch      timestamp cluster       status node.total node.data shards pri relo init unassign pending_tasks max_task_wait_time active_shards_percent </span><br><span class="line">1466352115 00:01:55  elasticsearch green           1         1      0   0    0    0        0             0                  -                100.0%</span><br></pre></td></tr></table></figure>

<p>返回结果的主要字段意义：</p>
<ul>
<li>cluster：集群名，是在ES的配置文件中配置的cluster.name的值。</li>
<li>status：集群状态。集群共有green、yellow或red中的三种状态。green代表一切正常（集群功能齐全），yellow意味着所有的数据都是可用的，但是某些复制没有被分配（集群功能齐全），red则代表因为某些原因，某些数据不可用。如果是red状态，则要引起高度注意，数据很有可能已经丢失。</li>
<li>node.total：集群中的节点数。</li>
<li>node.data：集群中的数据节点数。</li>
<li>shards：集群中总的分片数量。</li>
<li>pri：主分片数量，英文全称为private。</li>
<li>relo：复制分片总数。</li>
<li>unassign：未指定的分片数量，是应有分片数和现有的分片数的差值（包括主分片和复制分片）。</li>
</ul>
<p>我们也可以在请求中添加help参数来查看每个操作返回结果字段的意义。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ curl -X GET http:&#x2F;&#x2F;localhost:9200&#x2F;_cat&#x2F;health?help</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">epoch                 | t,time                                   | seconds since 1970-01-01 00:00:00  </span><br><span class="line">timestamp             | ts,hms,hhmmss                            | time in HH:MM:SS                   </span><br><span class="line">cluster               | cl                                       | cluster name                      </span><br><span class="line">status                | st                                       | health status                      </span><br><span class="line">node.total            | nt,nodeTotal                             | total number of nodes              </span><br><span class="line">node.data             | nd,nodeData                              | number of nodes that can store data</span><br><span class="line">shards                | t,sh,shards.total,shardsTotal            | total number of shards             </span><br><span class="line">pri                   | p,shards.primary,shardsPrimary           | number of primary shards           </span><br><span class="line">relo                  | r,shards.relocating,shardsRelocating     | number of relocating nodes         </span><br><span class="line">init                  | i,shards.initializing,shardsInitializing | number of initializing nodes       </span><br><span class="line">unassign              | u,shards.unassigned,shardsUnassigned     | number of unassigned shards        </span><br><span class="line">pending_tasks         | pt,pendingTasks                          | number of pending tasks            </span><br><span class="line">max_task_wait_time    | mtwt,maxTaskWaitTime                     | wait time of longest task pending  </span><br><span class="line">active_shards_percent | asp,activeShardsPercent                  | active number of shards in percent</span><br></pre></td></tr></table></figure>

<p>有了这个东东，就可以减少看文档的时间。ES中许多API都可以添加help参数来显示字段含义，哪些可以这么做呢？每个API都试试就知道了。</p>
<p>当然，如果你觉得返回的东西太多，看着眼烦，我们也可以人为地指定返回的字段。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">elasticsearch green 0</span><br></pre></td></tr></table></figure>

<p>(2) 查看集群中的节点信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tiger@vbox:~$ curl -XGET http:&#x2F;&#x2F;localhost:9200&#x2F;_cat&#x2F;nodes?v</span><br></pre></td></tr></table></figure>

<p>返回节点的详细信息如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">host      ip        heap.percent ram.percent load node.role master name     </span><br><span class="line">10.0.2.15 10.0.2.15            9          90 0.15 d         *      Bullseye </span><br><span class="line">tiger@vbox:~$</span><br></pre></td></tr></table></figure>

<p>(3) 查看集群中的索引信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tiger@vbox:~$ curl -XGET http:&#x2F;&#x2F;localhost:9200&#x2F;_cat&#x2F;indices?v</span><br><span class="line">health status index   pri rep docs.count docs.deleted store.size pri.store.size </span><br><span class="line">yellow open   twitter   5   1          1            0      4.1kb          4.1kb</span><br></pre></td></tr></table></figure>

<hr>
<h5 id="索引（Index）相关API"><a href="#索引（Index）相关API" class="headerlink" title="索引（Index）相关API"></a>索引（Index）相关API</h5><p>需要一个索引 <code>index</code> 和 <code>type</code></p>
<p>(1) 创建一个新的索引</p>
<ul>
<li>使用自定义id索引文档</li>
</ul>
<p>使用<code>PUT</code>请求创建一个索引为<code>twitter</code>类型为<code>tweet</code>的文档。其文档编号为<code>1</code>，文档内容包含<code>title</code>和<code>content</code> :</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tiger@tiger-vbox:~$ curl -XPUT &#39;http:&#x2F;&#x2F;localhost:9200&#x2F;twitter&#x2F;tweet&#x2F;1?pretty&#39; -d &#39;&#123;</span><br><span class="line">    &quot;title&quot;:&quot;三星无线充电技术，值得国产手机去学习吗&quot;,</span><br><span class="line">    &quot;content&quot;:&quot;三星无线充电器为圆行造型&quot;</span><br><span class="line">&#125;&#39;</span><br></pre></td></tr></table></figure>

<p>返回信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;_index&quot; : &quot;twitter&quot;,</span><br><span class="line">  &quot;_type&quot; : &quot;tweet&quot;,</span><br><span class="line">  &quot;_id&quot; : &quot;1&quot;,</span><br><span class="line">  &quot;_version&quot; : 1,</span><br><span class="line">  &quot;_shards&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : 2,</span><br><span class="line">    &quot;successful&quot; : 1,</span><br><span class="line">    &quot;failed&quot; : 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;created&quot; : true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再添加一篇：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ curl -XPUT &#39;http:&#x2F;&#x2F;localhost:9200&#x2F;twitter&#x2F;tweet&#x2F;2?pretty&#39; -d &#39;&#123;</span><br><span class="line">    &quot;title&quot;:&quot;范冰冰着花裙亮相青岛，侧颜精致&quot;,</span><br><span class="line">    &quot;content&quot;:&quot;6月19日，范冰冰现身青岛某活动，一身花裙甜美亮相，精致侧颜秒杀菲林。&quot;</span><br><span class="line">&#125;&#39;</span><br></pre></td></tr></table></figure>

<p>返回结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tiger@vbox:~$ curl -XPUT &#39;http:&#x2F;&#x2F;localhost:9200&#x2F;twitter&#x2F;tweet&#x2F;2?pretty&#39; -d &#39;&#123;&quot;title&quot;:&quot;范冰冰着花裙亮相青岛，侧颜精致&quot;,&quot;content&quot;:&quot;6月19日，范冰 冰现身青岛某活动，一身花裙甜美亮相，精致侧颜秒杀菲林。&quot;&#125;&#39;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;_index&quot; : &quot;twitter&quot;,</span><br><span class="line">  &quot;_type&quot; : &quot;tweet&quot;,</span><br><span class="line">  &quot;_id&quot; : &quot;2&quot;,</span><br><span class="line">  &quot;_version&quot; : 2,</span><br><span class="line">  &quot;_shards&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : 2,</span><br><span class="line">    &quot;successful&quot; : 1,</span><br><span class="line">    &quot;failed&quot; : 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;created&quot; : false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>查看所有文章：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ curl -XGET &#39;http:&#x2F;&#x2F;localhost:9200&#x2F;twitter&#x2F;tweet&#x2F;_search?pretty&#x3D;true&#39; -d &#39;&#123;&quot;query&quot;:&#123;&quot;match_all&quot;:&#123;&#125;&#125;&#125;&#39;</span><br></pre></td></tr></table></figure>

<p>返回结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;took&quot; : 147,</span><br><span class="line">  &quot;timed_out&quot; : false,</span><br><span class="line">  &quot;_shards&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : 5,</span><br><span class="line">    &quot;successful&quot; : 5,</span><br><span class="line">    &quot;failed&quot; : 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;hits&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : 2,</span><br><span class="line">    &quot;max_score&quot; : 1.0,</span><br><span class="line">    &quot;hits&quot; : [ &#123;</span><br><span class="line">      &quot;_index&quot; : &quot;twitter&quot;,</span><br><span class="line">      &quot;_type&quot; : &quot;tweet&quot;,</span><br><span class="line">      &quot;_id&quot; : &quot;2&quot;,</span><br><span class="line">      &quot;_score&quot; : 1.0,</span><br><span class="line">      &quot;_source&quot; : &#123;</span><br><span class="line">        &quot;title&quot; : &quot;范冰冰着花裙亮相青岛，侧颜精致&quot;,</span><br><span class="line">        &quot;content&quot; : &quot;6月19日，范冰冰现身青岛某活动，一身花裙甜美亮相，精致侧颜秒杀菲林。&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      &quot;_index&quot; : &quot;twitter&quot;,</span><br><span class="line">      &quot;_type&quot; : &quot;tweet&quot;,</span><br><span class="line">      &quot;_id&quot; : &quot;1&quot;,</span><br><span class="line">      &quot;_score&quot; : 1.0,</span><br><span class="line">      &quot;_source&quot; : &#123;</span><br><span class="line">        &quot;title&quot; : &quot;三星无线充电技术，值得国产手机去学习吗&quot;,</span><br><span class="line">        &quot;content&quot; : &quot;三星无线充电器为圆行造型&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样会把刚才添加的文章都列出来。</p>
<p>搜索关键词“无线”：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tiger@vbox:~$ curl -XGET &quot;http:&#x2F;&#x2F;localhost:9200&#x2F;twitter&#x2F;tweet&#x2F;_search?pretty&#x3D;true&quot; -d &#39;&#123;&quot;query&quot;:&#123;&quot;query_string&quot;:&#123;&quot;query&quot;:&quot;无线&quot;&#125;&#125;&#125;&#39;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;took&quot; : 49,</span><br><span class="line">  &quot;timed_out&quot; : false,</span><br><span class="line">  &quot;_shards&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : 5,</span><br><span class="line">    &quot;successful&quot; : 5,</span><br><span class="line">    &quot;failed&quot; : 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;hits&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : 1,</span><br><span class="line">    &quot;max_score&quot; : 0.0958915,</span><br><span class="line">    &quot;hits&quot; : [ &#123;</span><br><span class="line">      &quot;_index&quot; : &quot;twitter&quot;,</span><br><span class="line">      &quot;_type&quot; : &quot;tweet&quot;,</span><br><span class="line">      &quot;_id&quot; : &quot;1&quot;,</span><br><span class="line">      &quot;_score&quot; : 0.0958915,</span><br><span class="line">      &quot;_source&quot; : &#123;</span><br><span class="line">        &quot;title&quot; : &quot;三星无线充电技术，值得国产手机去学习吗&quot;,</span><br><span class="line">        &quot;content&quot; : &quot;三星无线充电器为圆行造型&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>检查ik的切词效果，可以执行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tiger@tiger-vbox:~$ curl &#39;http:&#x2F;&#x2F;localhost:9200&#x2F;twitter&#x2F;_analyze?analyzer&#x3D;ik_max_word&amp;pretty&#x3D;true&#39; -d &#39;&#123;&quot;text&quot;:&quot;中华人民共和国国歌&quot;&#125;&#39;</span><br></pre></td></tr></table></figure>

<p>返回结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;tokens&quot; : [ &#123;</span><br><span class="line">    &quot;token&quot; : &quot;中华人民共和国&quot;,</span><br><span class="line">    &quot;start_offset&quot; : 0,</span><br><span class="line">    &quot;end_offset&quot; : 7,</span><br><span class="line">    &quot;type&quot; : &quot;CN_WORD&quot;,</span><br><span class="line">    &quot;position&quot; : 0</span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    &quot;token&quot; : &quot;中华人民&quot;,</span><br><span class="line">    &quot;start_offset&quot; : 0,</span><br><span class="line">    &quot;end_offset&quot; : 4,</span><br><span class="line">    &quot;type&quot; : &quot;CN_WORD&quot;,</span><br><span class="line">    &quot;position&quot; : 1</span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    &quot;token&quot; : &quot;中华&quot;,</span><br><span class="line">    &quot;start_offset&quot; : 0,</span><br><span class="line">    &quot;end_offset&quot; : 2,</span><br><span class="line">    &quot;type&quot; : &quot;CN_WORD&quot;,</span><br><span class="line">    &quot;position&quot; : 2</span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    &quot;token&quot; : &quot;华人&quot;,</span><br><span class="line">    &quot;start_offset&quot; : 1,</span><br><span class="line">    &quot;end_offset&quot; : 3,</span><br><span class="line">    &quot;type&quot; : &quot;CN_WORD&quot;,</span><br><span class="line">    &quot;position&quot; : 3</span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    &quot;token&quot; : &quot;人民共和国&quot;,</span><br><span class="line">    &quot;start_offset&quot; : 2,</span><br><span class="line">    &quot;end_offset&quot; : 7,</span><br><span class="line">    &quot;type&quot; : &quot;CN_WORD&quot;,</span><br><span class="line">    &quot;position&quot; : 4</span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    &quot;token&quot; : &quot;人民&quot;,</span><br><span class="line">    &quot;start_offset&quot; : 2,</span><br><span class="line">    &quot;end_offset&quot; : 4,</span><br><span class="line">    &quot;type&quot; : &quot;CN_WORD&quot;,</span><br><span class="line">    &quot;position&quot; : 5</span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    &quot;token&quot; : &quot;共和国&quot;,</span><br><span class="line">    &quot;start_offset&quot; : 4,</span><br><span class="line">    &quot;end_offset&quot; : 7,</span><br><span class="line">    &quot;type&quot; : &quot;CN_WORD&quot;,</span><br><span class="line">    &quot;position&quot; : 6</span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    &quot;token&quot; : &quot;共和&quot;,</span><br><span class="line">    &quot;start_offset&quot; : 4,</span><br><span class="line">    &quot;end_offset&quot; : 6,</span><br><span class="line">    &quot;type&quot; : &quot;CN_WORD&quot;,</span><br><span class="line">    &quot;position&quot; : 7</span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    &quot;token&quot; : &quot;国&quot;,</span><br><span class="line">    &quot;start_offset&quot; : 6,</span><br><span class="line">    &quot;end_offset&quot; : 7,</span><br><span class="line">    &quot;type&quot; : &quot;CN_CHAR&quot;,</span><br><span class="line">    &quot;position&quot; : 8</span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    &quot;token&quot; : &quot;国歌&quot;,</span><br><span class="line">    &quot;start_offset&quot; : 7,</span><br><span class="line">    &quot;end_offset&quot; : 9,</span><br><span class="line">    &quot;type&quot; : &quot;CN_WORD&quot;,</span><br><span class="line">    &quot;position&quot; : 9</span><br><span class="line">  &#125; ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="说明一下"><a href="#说明一下" class="headerlink" title="说明一下"></a>说明一下</h5><p><code>pretty</code> 参数就是让返回的json有换行和缩进，容易阅读，调试时可以加上，开发到程序里就可以去掉了。</p>
<hr>
<h4 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h4><h5 id="依赖包"><a href="#依赖包" class="headerlink" title="依赖包"></a>依赖包</h5><ul>
<li><a href="https://github.com/medcl/elasticsearch-analysis-ik/" target="_blank" rel="noopener">GitHub - medcl/elasticsearch-analysis-ik: The IK Analysis plugin integrates Lucene IK analyzer into elasticsearch, support customized dictionary.</a></li>
</ul>
<h5 id="Linux下安装"><a href="#Linux下安装" class="headerlink" title="Linux下安装"></a>Linux下安装</h5><ul>
<li><a href="https://imququ.com/post/elasticsearch.html" target="_blank" rel="noopener">使用 Elasticsearch 实现博客站内搜索 | JerryQu 的小站</a> <strong>☆</strong></li>
<li><a href="http://www.shareditor.com/blogshow/?blogId=36" target="_blank" rel="noopener">教你成为全栈工程师(Full Stack Developer) 二十四-ES(elasticsearch)搜索引擎安装和使用 - SharEDITor - 关注大数据技术</a></li>
<li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/setup-service.html" target="_blank" rel="noopener">Running as a Service on Linux        | Elasticsearch Reference [2.3]      | Elastic</a></li>
<li><a href="https://www.elastic.co/downloads" target="_blank" rel="noopener">The Elastic Stack Download · Get Started in Minutes  | Elastic</a></li>
</ul>
<h5 id="Windows下安装-1"><a href="#Windows下安装-1" class="headerlink" title="Windows下安装"></a>Windows下安装</h5><ul>
<li><a href="http://www.fromwww.net/36206.html" target="_blank" rel="noopener">windows下安装elasticsearch-1.7.1 | 教程网</a></li>
<li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/setup-service-win.html" target="_blank" rel="noopener">Running as a Service on Windows        | Elasticsearch Reference [2.3]      | Elastic</a></li>
<li><a href="http://jingyan.baidu.com/article/1709ad808ad49f4634c4f00d.html" target="_blank" rel="noopener">Windows下安装Maven参考</a></li>
</ul>
<h5 id="Restful-Api"><a href="#Restful-Api" class="headerlink" title="Restful Api"></a>Restful Api</h5><ul>
<li><a href="http://www.cnblogs.com/letong/p/4749234.html" target="_blank" rel="noopener">Python Elasticsearch api - letong - 博客园</a></li>
<li><a href="http://ju.outofmemory.cn/entry/50617" target="_blank" rel="noopener">ElasticSearch教程（4）——ElasticSearch基于REST的CRUD API - 为程序员服务</a></li>
<li><a href="http://blog.csdn.net/xialei199023/article/details/48085125" target="_blank" rel="noopener">实时搜索引擎Elasticsearch（2）——Rest API的使用 - HinyLover的专栏        - 博客频道 - CSDN.NET</a></li>
<li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs.html" target="_blank" rel="noopener">Document APIs        | Elasticsearch Reference [2.3]      | Elastic</a></li>
<li><a href="https://github.com/sxyx2008/elasticsearch/issues/5" target="_blank" rel="noopener">elasticsearch rest api 快速上手 · Issue #5 · sxyx2008/elasticsearch · GitHub</a></li>
</ul>
<h5 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h5><ul>
<li><a href="http://www.cnblogs.com/xing901022/category/642865.html" target="_blank" rel="noopener">Elasticsearch - 随笔分类 - xingoo - 博客园</a></li>
<li><a href="http://www.justinablog.com/archives/967" target="_blank" rel="noopener">使用Python进行Elasticsearch数据索引 | Silent River</a></li>
<li><a href="http://www.vpsee.com/2014/05/install-and-play-with-elasticsearch/" target="_blank" rel="noopener">安装和使用 Elasticsearch | vpsee.com</a></li>
<li><a href="http://blog.csdn.net/xialei199023/article/details/47680401" target="_blank" rel="noopener">实时搜索引擎Elasticsearch（1）——基础概念、安装和运行 - HinyLover的专栏        - 博客频道 - CSDN.NET</a> <strong>☆</strong></li>
<li><a href="http://es.xiaoleilu.com/" target="_blank" rel="noopener">Introduction | Elasticsearch权威指南（中文版）</a> <strong>☆</strong></li>
<li><a href="http://www.ttlsa.com/bigdata/elasticsearch-analysis-ik-chinese/" target="_blank" rel="noopener">AAAAAAA</a></li>
<li><a href="https://github.com/medcl/elasticsearch-analysis-ik" target="_blank" rel="noopener">https://github.com/medcl/elasticsearch-analysis-ik</a></li>
<li><a href="http://blog.csdn.net/xialei199023/article/details/48085125" target="_blank" rel="noopener">http://blog.csdn.net/xialei199023/article/details/48085125</a></li>
<li><a href="http://blog.csdn.net/xialei199023/article/details/48227247" target="_blank" rel="noopener">http://blog.csdn.net/xialei199023/article/details/48227247</a></li>
<li><a href="https://github.com/elastic/elasticsearch" target="_blank" rel="noopener">https://github.com/elastic/elasticsearch</a></li>
<li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/current/docs.html</a></li>
<li><a href="https://github.com/sxyx2008/elasticsearch/issues/5" target="_blank" rel="noopener">https://github.com/sxyx2008/elasticsearch/issues/5</a></li>
<li><a href="http://www.shareditor.com/blogshow/?blogId=36" target="_blank" rel="noopener">http://www.shareditor.com/blogshow/?blogId=36</a></li>
</ul>
]]></content>
      <categories>
        <category>开发笔记</category>
      </categories>
      <tags>
        <tag>ElasticSearch</tag>
      </tags>
  </entry>
  <entry>
    <title>Python操作SQLServer数据库</title>
    <url>/2016/06/20/python-connect-sqlserver/</url>
    <content><![CDATA[<h4 id="pymssql"><a href="#pymssql" class="headerlink" title="pymssql"></a>pymssql</h4><p>Python操作SQLServer需要使用 <code>pymssql</code> 模块</p>
<p>Windows系统下的Python类库文件 <code>*.whl</code>文件，需要用 <code>pip install *.whl</code> 的方式来安装。</p>
<p>下载pymssql2.7 library ：<a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/#pymssql" target="_blank" rel="noopener">pythonlibs</a></p>
<p>第一次下载了 <code>pymssql-2.1.2-cp27-cp27m-win_amd64.whl</code> 文件，安装时报错，提示如下错误：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">λ pip install pymssql-2.1.2-cp27-cp27m-win_amd64.whl</span><br><span class="line">pymssql-2.1.2-cp27-cp27m-win_amd64.whl is not a supported wheel on this platform.</span><br></pre></td></tr></table></figure>

<p>即使成功安装了 <code>pymssql</code>，但是 <code>import pymssql</code> 还是会报错</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import pymssql</span><br><span class="line">ImportError: DLL load failed: 找不到指定的模块。</span><br></pre></td></tr></table></figure>

<p>所以又再次下载了 <code>pymssql-1.0.3-cp27-none-win32.whl</code> 文件，再次安装成功。<br>具体原因可能和操作系统或python版本有关，具体待深入研究。</p>
<h4 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># coding:utf-8</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">http:&#x2F;&#x2F;www.pymssql.org&#x2F;en&#x2F;stable&#x2F;</span><br><span class="line">http:&#x2F;&#x2F;www.lfd.uci.edu&#x2F;~gohlke&#x2F;pythonlibs&#x2F;#pymssql </span><br><span class="line"></span><br><span class="line">pymssql-1.0.3-cp27-none-win32.whl    # 只有这个才能在windows下执行</span><br><span class="line">pymssql-2.1.2-cp27-cp27m-win_amd64.whl # 这个不能执行</span><br><span class="line"></span><br><span class="line">安装 whl文件 执行 &#96;pip install *.whl&#96;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">异常：</span><br><span class="line">不能用 DB-Library (如 ISQL)或 ODBC 3.7 或更早版本将 ntext 数据或仅使用 Unicode 排序规则的 Unicode 数据发送到客 户端。</span><br><span class="line">这个问题是数据库中字段为ntext类型，这种类型目前的c-library不支持，需要转为nvchar或text类型才可以。</span><br><span class="line">1. 建议：将ntext修改为nvarchar或text.</span><br><span class="line">2. 既然不支持ntext但支持text，那么我们只需要在输出时将ntext转换为text就好了 </span><br><span class="line">&#96;SELECT cast ( field_name AS TEXT ) AS field_name&#96;</span><br><span class="line">&#96;select convert(varchar(50),guid) as guid, convert(text,content) as content from news&#96;</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">import pymssql</span><br><span class="line"></span><br><span class="line">class MSSQL:</span><br><span class="line">    def __init__(self,host,user,pwd,db):</span><br><span class="line">        self.host&#x3D;host</span><br><span class="line">        self.user&#x3D;user</span><br><span class="line">        self.pwd&#x3D;pwd</span><br><span class="line">        self.db&#x3D;db</span><br><span class="line"></span><br><span class="line">    def __GetConnect(self):</span><br><span class="line">        if not self.db:</span><br><span class="line">            raise(NameError,&quot;没有设置数据库信息&quot;)</span><br><span class="line"></span><br><span class="line">        self.conn&#x3D;pymssql.connect(host&#x3D;self.host,user&#x3D;self.user,password&#x3D;self.pwd,database&#x3D;self.db,charset&#x3D;&quot;utf-8&quot;)</span><br><span class="line">        cur&#x3D;self.conn.cursor()</span><br><span class="line">        if not cur:</span><br><span class="line">            raise(NameError,&quot;连接数据库失败&quot;)</span><br><span class="line">        else:</span><br><span class="line">            return cur</span><br><span class="line"></span><br><span class="line">    def ExecQuery(self,sql):</span><br><span class="line">        cur&#x3D;self.__GetConnect()</span><br><span class="line">        cur.execute(sql.encode(&quot;utf-8&quot;))</span><br><span class="line">        resList&#x3D;cur.fetchall()</span><br><span class="line">        # 查询完毕后关闭连接</span><br><span class="line">        self.conn.close()</span><br><span class="line">        return resList</span><br><span class="line"></span><br><span class="line">    def ExecNonQuery(self,sql):</span><br><span class="line">        cur&#x3D;self.__GetConnect()</span><br><span class="line">        cur.execute(sql.encode(&quot;utf-8&quot;))</span><br><span class="line">        self.conn.commit()</span><br><span class="line">        self.conn.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__&#x3D;&#x3D;&quot;__main__&quot;:</span><br><span class="line"></span><br><span class="line">    ms&#x3D;MSSQL(host&#x3D;&quot;Test-FPC\sqlexpress&quot;,user&#x3D;&quot;sa&quot;,pwd&#x3D;&quot;1&quot;,db&#x3D;&quot;its&quot;)</span><br><span class="line">    resList&#x3D;ms.ExecQuery(&quot;select * from [SchemeCategory] where IsShow&#x3D;1&quot;)   </span><br><span class="line">    for i in resList:</span><br><span class="line">        print(i[&quot;Name&quot;])</span><br></pre></td></tr></table></figure>

<h4 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h4><p>在操作是报出了如下异常信息：</p>
<blockquote>
<p>不能用 DB-Library (如 ISQL)或 ODBC 3.7 或更早版本将 ntext 数据或仅使用 Unicode 排序规则的 Unicode 数据发送到客 户端。</p>
</blockquote>
<p>这个问题是数据库中字段为ntext类型，这种类型目前的 <code>c-library</code> 不支持，需要转为 <code>nvchar</code> 或 <code>text</code> 类型才可以。</p>
<ol>
<li>建议：将ntext修改为nvarchar或text.</li>
<li>既然不支持ntext但支持text，那么我们只需要在输出时将ntext转换为text就好了 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT cast ( field_name AS TEXT ) AS field_name</span><br><span class="line">select convert(varchar(50),guid) as guid, convert(text,content) as content from news</span><br></pre></td></tr></table></figure></li>
<li>使用另一个类库 <code>pyodbc</code> 来操作，未遇到该问题。</li>
</ol>
<hr>
<h4 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h4><p><a href="http://lovesoo.org/python-example-sqlserver.html" target="_blank" rel="noopener">Python操作SQLServer示例 | 大爱</a><br><a href="http://www.cnblogs.com/qianlifeng/archive/2012/02/08/2343286.html" target="_blank" rel="noopener">利用python简化sql server数据导入导出 - qianlifeng - 博客园</a></p>
<ul>
<li><a href="http://blog.csdn.net/shanliangliuxing/article/details/8632909" target="_blank" rel="noopener">python 使用pymssql连接sql server数据库 - Hello World!</a></li>
</ul>
<p><a href="http://pymssql.org/en/latest/index.html" target="_blank" rel="noopener">pymssql &mdash; pymssql 2.2.0.dev documentation</a><br><a href="http://pymssql.org/en/latest/freetds.html#windows" target="_blank" rel="noopener">FreeTDS &mdash; pymssql 2.2.0.dev documentation</a><br><a href="https://github.com/pymssql/pymssql" target="_blank" rel="noopener">GitHub - pymssql/pymssql: Official home for the pymssql source code.</a><br><a href="http://www.freetds.org/" target="_blank" rel="noopener">FreeTDS.org</a><br><a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/#pymssql" target="_blank" rel="noopener">Python Extension Packages for Windows - Christoph Gohlke</a></p>
<hr>
<h4 id="pyodbc"><a href="#pyodbc" class="headerlink" title="pyodbc"></a>pyodbc</h4><h5 id="SQL-Server-ODBC-drivers"><a href="#SQL-Server-ODBC-drivers" class="headerlink" title="SQL Server ODBC drivers"></a>SQL Server ODBC drivers</h5><ul>
<li><p>{SQL Server} - released with SQL Server 2000</p>
</li>
<li><p>{SQL Native Client} - released with SQL Server 2005 (also known as version 9.0)</p>
</li>
<li><p>{SQL Server Native Client 10.0} - released with SQL Server 2008</p>
</li>
<li><p>{SQL Server Native Client 11.0} - released with SQL Server 2012</p>
<p>[sqlservertests]<br><code>connection-string=DRIVER={SQL Server};SERVER=localhost;UID=uid;PWD=pwd;DATABASE=db</code></p>
</li>
</ul>
<p>The connection string above will use the 2000/2005 driver, even if SQL Server 2008<br>is installed:</p>
<ul>
<li>2000: DRIVER={SQL Server}</li>
<li>2005: DRIVER={SQL Server}</li>
<li>2008: DRIVER={SQL Server Native Client 10.0}</li>
</ul>
<h5 id="connection-strings"><a href="#connection-strings" class="headerlink" title="connection strings"></a>connection strings</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DRIVER&#x3D;&#123;SQL Server Native Client 11.0&#125;;SERVER&#x3D;test;DATABASE&#x3D;test;UID&#x3D;user;PWD&#x3D;password</span><br></pre></td></tr></table></figure>

<p>in Python:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">conn &#x3D; pyodbc.connect(r&#39;DRIVER&#x3D;&#123;SQL Server Native Client 11.0&#125;;SERVER&#x3D;test;DATABASE&#x3D;test;UID&#x3D;user;PWD&#x3D;password&#39;)</span><br></pre></td></tr></table></figure>

<h5 id="连接字符串的两种写法"><a href="#连接字符串的两种写法" class="headerlink" title="连接字符串的两种写法"></a>连接字符串的两种写法</h5><h6 id="字符串方式"><a href="#字符串方式" class="headerlink" title="字符串方式"></a>字符串方式</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">connSqlServer &#x3D; pyodbc.connect(&#39;DRIVER&#x3D;&#123;SQL Server Native Client 10.0&#125;;SERVER&#x3D;192.106.0.102\instance1;DATABASE&#x3D;master;UID&#x3D;sql2008;PWD&#x3D;password123&#39;)</span><br><span class="line"></span><br><span class="line">connSqlServer &#x3D; pyodbc.connect(&#39;DRIVER&#x3D;&#123;SQL Server Native Client 10.0&#125;;SERVER&#x3D;192.106.0.102,1443;DATABASE&#x3D;master;UID&#x3D;sql2008;PWD&#x3D;password123&#39;)</span><br></pre></td></tr></table></figure>

<h6 id="关键字方式"><a href="#关键字方式" class="headerlink" title="关键字方式"></a>关键字方式</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">connSqlServer &#x3D; pyodbc.connect(driver&#x3D;&#39;&#123;SQL Server Native Client 10.0&#125;&#39;,</span><br><span class="line">                               server&#x3D;&#39;192.106.0.102\instance1&#39;,</span><br><span class="line">                               database&#x3D;&#39;master&#39;,</span><br><span class="line">                               uid&#x3D;&#39;sql2008&#39;,pwd&#x3D;&#39;password123&#39;)</span><br><span class="line"></span><br><span class="line">connSqlServer &#x3D; pyodbc.connect(driver&#x3D;&#39;&#123;SQL Server Native Client 10.0&#125;&#39;,</span><br><span class="line">                               server&#x3D;&#39;192.106.0.102,1443&#39;,</span><br><span class="line">                               database&#x3D;&#39;master&#39;,</span><br><span class="line">                               uid&#x3D;&#39;sql2008&#39;,pwd&#x3D;&#39;password123&#39;)</span><br></pre></td></tr></table></figure>

<p>详见：<a href="http://stackoverflow.com/questions/25505081/python-pyodbc-how-to-connect-to-a-specific-instance" target="_blank" rel="noopener">sql - python pyodbc : how to connect to a specific instance - Stack Overflow</a></p>
<h5 id="我的写法"><a href="#我的写法" class="headerlink" title="我的写法"></a>我的写法</h5><h6 id="第一种方式"><a href="#第一种方式" class="headerlink" title="第一种方式"></a>第一种方式</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def __init__(self,driver,server,db,uid,pwd):</span><br><span class="line">    self.driver&#x3D;&quot;&#123;&#123;&#123;0&#125;&#125;&#125;&quot;.format(driver)  # 两个&#123;表示一个</span><br><span class="line">    self.server&#x3D;server</span><br><span class="line">    self.db&#x3D;db</span><br><span class="line">    self.uid&#x3D;uid</span><br><span class="line">    self.pwd&#x3D;pwd</span><br><span class="line"></span><br><span class="line">def __GetConnect(self):</span><br><span class="line">    if not self.db:</span><br><span class="line">        raise(NameError,&quot;没有设置数据库信息&quot;)</span><br><span class="line"></span><br><span class="line">    # r&#39;DRIVER&#x3D;&#123;SQL Server Native Client 11.0&#125;;SERVER&#x3D;test;DATABASE&#x3D;test;UID&#x3D;user;PWD&#x3D;password&#39;</span><br><span class="line">    self.conn&#x3D;pyodbc.connect(driver&#x3D;self.driver,server&#x3D;self.server,database&#x3D;self.db,uid&#x3D;self.uid,pwd&#x3D;self.pwd)</span><br><span class="line"></span><br><span class="line">ms&#x3D;MSSQLODBC(driver&#x3D;&quot;SQL Server&quot;,server&#x3D;&quot;Test-FPC\sqlexpress&quot;,db&#x3D;&quot;its&quot;,uid&#x3D;&quot;sa&quot;,pwd&#x3D;&quot;1&quot;)</span><br></pre></td></tr></table></figure>

<h6 id="第二种方式"><a href="#第二种方式" class="headerlink" title="第二种方式"></a>第二种方式</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">self.conn &#x3D; pyodbc.connect(&#39;DRIVER&#x3D;&#123;SQL Server&#125;;SERVER&#x3D;Test-FPC\sqlexpress;PORT&#x3D;1433;DATABASE&#x3D;its;UID&#x3D;sa;PWD&#x3D;1&#39;)</span><br></pre></td></tr></table></figure>

<hr>
<ul>
<li><a href="https://mkleehammer.github.io/pyodbc/" target="_blank" rel="noopener">pyodbc</a></li>
<li><a href="https://github.com/mkleehammer/pyodbc/wiki/Connecting-to-SQL-Server-from-Windows" target="_blank" rel="noopener">Connecting to SQL Server from Windows · mkleehammer/pyodbc Wiki · GitHub</a></li>
<li><a href="http://stackoverflow.com/questions/25505081/python-pyodbc-how-to-connect-to-a-specific-instance" target="_blank" rel="noopener">sql - python pyodbc : how to connect to a specific instance - Stack Overflow</a></li>
</ul>
<h4 id="Demo-1"><a href="#Demo-1" class="headerlink" title="Demo"></a>Demo</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># coding:utf-8</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">import pyodbc</span><br><span class="line"></span><br><span class="line">class MSSQLODBC:</span><br><span class="line">    def __init__(self,driver,server,db,uid,pwd):</span><br><span class="line">        self.driver&#x3D;&quot;&#123;&#123;&#123;0&#125;&#125;&#125;&quot;.format(driver)  # 两个&#123;表示一个</span><br><span class="line">        self.server&#x3D;server</span><br><span class="line">        self.db&#x3D;db</span><br><span class="line">        self.uid&#x3D;uid</span><br><span class="line">        self.pwd&#x3D;pwd</span><br><span class="line"></span><br><span class="line">    def __GetConnect(self):</span><br><span class="line">        if not self.db:</span><br><span class="line">            raise(NameError,&quot;没有设置数据库信息&quot;)</span><br><span class="line"></span><br><span class="line">        # r&#39;DRIVER&#x3D;&#123;SQL Server Native Client 11.0&#125;;SERVER&#x3D;test;DATABASE&#x3D;test;UID&#x3D;user;PWD&#x3D;password&#39;</span><br><span class="line">        self.conn&#x3D;pyodbc.connect(driver&#x3D;self.driver,server&#x3D;self.server,database&#x3D;self.db,uid&#x3D;self.uid,pwd&#x3D;self.pwd)</span><br><span class="line">        # self.conn &#x3D; pyodbc.connect(&#39;DRIVER&#x3D;&#123;SQL Server&#125;;SERVER&#x3D;Test-FPC\sqlexpress;PORT&#x3D;1433;DATABASE&#x3D;its;UID&#x3D;sa;PWD&#x3D;1&#39;)</span><br><span class="line">        cur&#x3D;self.conn.cursor()</span><br><span class="line">        if not cur:</span><br><span class="line">            raise(NameError,&quot;连接数据库失败&quot;)</span><br><span class="line">        else:</span><br><span class="line">            return cur</span><br><span class="line"></span><br><span class="line">    def ExecQuery(self,sql):</span><br><span class="line">        cur&#x3D;self.__GetConnect()</span><br><span class="line">        cur.execute(sql.encode(&quot;utf-8&quot;))</span><br><span class="line">        resList&#x3D;cur.fetchall()</span><br><span class="line">        # 查询完毕后关闭连接</span><br><span class="line">        self.conn.close()</span><br><span class="line">        return resList</span><br><span class="line"></span><br><span class="line">    def ExecNonQuery(self,sql):</span><br><span class="line">        cur&#x3D;self.__GetConnect()</span><br><span class="line">        cur.execute(sql.encode(&quot;utf-8&quot;))</span><br><span class="line">        self.conn.commit()</span><br><span class="line">        self.conn.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__&#x3D;&#x3D;&quot;__main__&quot;:</span><br><span class="line"></span><br><span class="line">    ms&#x3D;MSSQLODBC(driver&#x3D;&quot;SQL Server&quot;,server&#x3D;&quot;Test-FPC\sqlexpress&quot;,db&#x3D;&quot;its&quot;,uid&#x3D;&quot;sa&quot;,pwd&#x3D;&quot;1&quot;)</span><br><span class="line">    resList&#x3D;ms.ExecQuery(&quot;select top 10 * from [MallProductItem]&quot;)</span><br><span class="line">    for m in resList:</span><br><span class="line">        print(m[4])</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>开发笔记</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>C#脱离IronPython中执行python脚本</title>
    <url>/2016/06/10/csharp-call-python-without-ironpython-environment/</url>
    <content><![CDATA[<p>给客户安装程序时除了安装 <code>.net framework</code> 还要安装 <code>IronPython</code> ，是不是觉得很麻烦？</p>
<p>上面这一切都弱爆了，下面我来介绍一种不安装 <code>IronPython</code> 只需要引入几个 <code>IronPython</code> 的 <code>dll</code> 就可以在c#中执行 <code>python</code> 脚本的方法。</p>
<p>1：引入IronPython中的几个dll</p>
<pre><code>* `IronPython.dll`
* `IronPython.Modules.dll`
* `Microsoft.Dynamic.dll`
* `Microsoft.Scripting.dll`
* `Microsoft.Scripting.Metadata.dll`</code></pre><p>2：进入IronPython的Lib文件夹，把Lib中的内容打包成zip，名字任意既可。打包好后放到c#项目下<br>我把它放到了和py文件同一个目录中 </p>
<p>3：很关键的一步，程序初始化时执行下段代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ScriptEngine engine &#x3D; Python.CreateEngine(); </span><br><span class="line">ScriptScope scope &#x3D; engine.CreateScope(); </span><br><span class="line">ScriptSource source &#x3D; engine.CreateScriptSourceFromString( </span><br><span class="line">    @&quot;import sys&quot; &quot;\n&quot;  </span><br><span class="line">    @&quot;sys.path.append(&quot;&quot;.\scripts\pythonlib.zip&quot;&quot;)&quot; &quot;\n&quot;</span><br><span class="line">    @&quot;sys.path.append(&quot;&quot;.\scripts&quot;&quot;)&quot; &quot;\n&quot;</span><br><span class="line">); </span><br><span class="line">source.Execute(scope);</span><br></pre></td></tr></table></figure>

<p>将zip文件加入python库路径。这样能保证py脚本可以正确搜索到python库的位置。</p>
<p>4：尽情享用脚本语言带来的便利吧。为其他人安装程序时也不用安装讨厌的IronPython环境了。</p>
<hr>
<p>链接</p>
<ul>
<li><a href="http://my.oschina.net/gsbhz/blog/361140" target="_blank" rel="noopener">C#脱离IronPython中执行python脚本-gsbhzh 的个人空间 - 开源中国社区</a></li>
</ul>
]]></content>
      <categories>
        <category>开发笔记</category>
      </categories>
      <tags>
        <tag>ASP.NET</tag>
      </tags>
  </entry>
  <entry>
    <title>O2O地图应用之判断用户订单地址是否在服务范围内</title>
    <url>/2016/05/18/whether-user-order-address-is-within-service-range/</url>
    <content><![CDATA[<h4 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h4><p>在o2o项目中，经常要用到在用户下单时判断用户所填地址的坐标点是否在服务范围内的情况，这里参考网上的实现方式，用C#来实现，经测试后有效，特此记录。</p>
<h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class MapHelper</span><br><span class="line">   &#123;</span><br><span class="line"></span><br><span class="line">       &#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">       &#x2F;&#x2F;&#x2F; 判断一个坐标点在多边形坐标点的内部还是外部</span><br><span class="line">       &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">       &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;point&quot;&gt;要判断的坐标点&lt;&#x2F;param&gt;</span><br><span class="line">       &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;pts&quot;&gt;多边形坐标点集合&lt;&#x2F;param&gt;</span><br><span class="line">       &#x2F;&#x2F;&#x2F; &lt;returns&gt;&lt;&#x2F;returns&gt;</span><br><span class="line">       public static bool IsPointInPolygon(Point point, List&lt;Point&gt; pts)</span><br><span class="line">       &#123;</span><br><span class="line">           int N &#x3D; pts.Count;</span><br><span class="line">           &#x2F;&#x2F;如果点位于多边形的顶点或边上，也算做点在多边形内，直接返回true</span><br><span class="line">           bool boundOrVertex &#x3D; true;</span><br><span class="line">           &#x2F;&#x2F;经过点的次数</span><br><span class="line">           int intersectCount &#x3D; 0;</span><br><span class="line">           double precision &#x3D; 2e-10;</span><br><span class="line">           Point p1, p2;</span><br><span class="line">           Point p &#x3D; point;&#x2F;&#x2F;当前点</span><br><span class="line"></span><br><span class="line">           p1 &#x3D; pts[0];</span><br><span class="line"></span><br><span class="line">           for (int i &#x3D; 1; i &lt;&#x3D; N; i++)</span><br><span class="line">           &#123;</span><br><span class="line">               &#x2F;&#x2F;如果点在多边形上</span><br><span class="line">               if (p.Equals(p1))</span><br><span class="line">               &#123;</span><br><span class="line">                   return boundOrVertex;</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">               p2 &#x3D; pts[(i % N)];</span><br><span class="line">               if (p.Lng&lt;Math.Min(p1.Lng,p2.Lng)||p.Lng&gt;Math.Max(p1.Lng,p2.Lng))</span><br><span class="line">               &#123;</span><br><span class="line">                   p1 &#x3D; p2;</span><br><span class="line">                   continue;</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">               if (p.Lng&gt;Math.Min(p1.Lng,p2.Lng)&amp;&amp;p.Lng&lt;Math.Max(p1.Lng,p2.Lng))</span><br><span class="line">               &#123;</span><br><span class="line">                   if (p.Lat&lt;&#x3D;Math.Max(p1.Lat,p2.Lat))</span><br><span class="line">                   &#123;</span><br><span class="line">                       if (p1.Lng&#x3D;&#x3D;p2.Lng&amp;&amp;p.Lat&gt;&#x3D;Math.Min(p1.Lat,p2.Lat))</span><br><span class="line">                       &#123;</span><br><span class="line">                           return boundOrVertex;</span><br><span class="line">                       &#125;</span><br><span class="line"></span><br><span class="line">                       if (p1.Lat&#x3D;&#x3D;p2.Lat)</span><br><span class="line">                       &#123;</span><br><span class="line">                           if (p1.Lat&#x3D;&#x3D;p.Lat)</span><br><span class="line">                           &#123;</span><br><span class="line">                               return boundOrVertex;</span><br><span class="line">                           &#125;</span><br><span class="line">                           else</span><br><span class="line">                           &#123;</span><br><span class="line">                               intersectCount++;</span><br><span class="line">                           &#125;</span><br><span class="line">                       &#125;</span><br><span class="line">                       else</span><br><span class="line">                       &#123;</span><br><span class="line">                           double xinters &#x3D; (p.Lng - p1.Lng) * (p2.Lat - p1.Lat) &#x2F; (p2.Lng - p1.Lng) + p1.Lat;</span><br><span class="line">                           if (Math.Abs(p.Lat-xinters)&lt;precision)</span><br><span class="line">                           &#123;</span><br><span class="line">                               return boundOrVertex;</span><br><span class="line">                           &#125;</span><br><span class="line"></span><br><span class="line">                           if (p.Lat&lt;xinters)</span><br><span class="line">                           &#123;</span><br><span class="line">                               intersectCount++;</span><br><span class="line">                           &#125;</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">               else</span><br><span class="line">               &#123;</span><br><span class="line">                   if (p.Lng&#x3D;&#x3D;p2.Lng&amp;&amp;p.Lat&lt;&#x3D;p2.Lat)</span><br><span class="line">                   &#123;</span><br><span class="line">                       Point p3 &#x3D; pts[(i+1)%N];</span><br><span class="line">                       if (p.Lng&gt;&#x3D;Math.Min(p1.Lng,p3.Lng)&amp;&amp;p.Lng&lt;&#x3D;Math.Max(p1.Lng,p3.Lng))</span><br><span class="line">                       &#123;</span><br><span class="line">                           intersectCount++;</span><br><span class="line">                       &#125;</span><br><span class="line">                       else</span><br><span class="line">                       &#123;</span><br><span class="line">                           intersectCount +&#x3D; 2;</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">               p1 &#x3D; p2;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           if (intersectCount%2&#x3D;&#x3D;0)</span><br><span class="line">           &#123;</span><br><span class="line">               &#x2F;&#x2F;偶数在多边形外</span><br><span class="line">               return false;</span><br><span class="line">           &#125;</span><br><span class="line">           else</span><br><span class="line">           &#123;</span><br><span class="line">               &#x2F;&#x2F;奇数在多边形内</span><br><span class="line">               return true;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   public class Point</span><br><span class="line">   &#123;</span><br><span class="line">       &#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">       &#x2F;&#x2F;&#x2F; 经度</span><br><span class="line">       &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">       public double Lng &#123; get; set; &#125;</span><br><span class="line">       &#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">       &#x2F;&#x2F;&#x2F; 纬度</span><br><span class="line">       &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">       public double Lat &#123; get; set; &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>这里我用高德地图标出了北京五环范围的坐标点集合，然后随意选择一个坐标点来进行判断：</p>
<p>坐标点可以用这个工具来获取：<a href="http://lbs.amap.com/console/show/picker" target="_blank" rel="noopener">高德地图API</a> </p>
<p><strong>五环范围：</strong>  </p>
<ul>
<li>香泉桥   116.222208,39.992436</li>
<li>箭亭桥   116.327147,40.02046</li>
<li>上清桥   116.353948,40.02299</li>
<li>顾家庄桥 116.44128,40.020526</li>
<li>东北五环 116.48441,40.013624</li>
<li>平房桥   116.541101,39.942393</li>
<li>东南五环 116.549202,39.851595</li>
<li>旧宫新桥 116.43082,39.785968</li>
<li>狼垈东桥 116.296044,39.777442</li>
<li>宛平桥   116.225062,39.845517</li>
<li>衙门口桥 116.211308,39.894396</li>
<li>西五环   116.212595,39.944705</li>
</ul>
<p><strong>随机坐标：</strong></p>
<ul>
<li>林萃桥地铁站  116.37297,40.021857</li>
<li>望京西园四区  116.47086,39.99648</li>
<li>观音禅寺      116.533811,39.880533</li>
<li>俏狐国际      116.299713,39.772619</li>
<li>芳园里小区    116.416336,39.78394</li>
<li>润枫锦尚小区  116.429039,39.790535</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Program</span><br><span class="line">&#123;</span><br><span class="line">    static void Main(string[] args)</span><br><span class="line">    &#123;</span><br><span class="line">        var Plist &#x3D; new List&lt;Point&gt; &#123;</span><br><span class="line">            new Point &#123;Lng&#x3D;116.222208,Lat&#x3D; 39.992436&#125;,</span><br><span class="line">            new Point &#123;Lng&#x3D;116.327147,Lat&#x3D; 40.02046&#125;,</span><br><span class="line">            new Point &#123;Lng&#x3D;116.353948,Lat&#x3D; 40.02299&#125;,</span><br><span class="line">            new Point &#123;Lng&#x3D;116.44128,Lat&#x3D; 40.020526&#125;,</span><br><span class="line">            new Point &#123;Lng&#x3D;116.48441,Lat&#x3D;40.013624 &#125;,</span><br><span class="line">            new Point &#123;Lng&#x3D;116.541101,Lat&#x3D; 39.942393&#125;,</span><br><span class="line">            new Point &#123;Lng&#x3D;116.549202,Lat&#x3D; 39.851595&#125;,</span><br><span class="line">            new Point &#123;Lng&#x3D;116.43082,Lat&#x3D;39.785968&#125;,</span><br><span class="line">            new Point &#123;Lng&#x3D;116.296044,Lat&#x3D;39.777442 &#125;,</span><br><span class="line">            new Point &#123;Lng&#x3D;116.225062,Lat&#x3D;39.845517 &#125;,</span><br><span class="line">            new Point &#123;Lng&#x3D;116.211308,Lat&#x3D; 39.894396&#125;,</span><br><span class="line">            new Point &#123;Lng&#x3D;116.212595,Lat&#x3D;39.944705&#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;var p &#x3D; new Point &#123; Lng &#x3D; 116.37297, Lat &#x3D; 40.021857 &#125;;</span><br><span class="line">        &#x2F;&#x2F;林萃桥地铁站   内</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;var p &#x3D; new Point &#123; Lng &#x3D; 116.47086, Lat &#x3D; 39.99648 &#125;;</span><br><span class="line">        &#x2F;&#x2F;望京西园四区  内</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;var p &#x3D; new Point &#123; Lng &#x3D; 116.533811, Lat &#x3D; 39.880533 &#125;;</span><br><span class="line">        &#x2F;&#x2F;观音禅寺 内</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;var p &#x3D; new Point &#123; Lng &#x3D; 116.299713, Lat &#x3D; 39.772619 &#125;; </span><br><span class="line">        &#x2F;&#x2F;俏狐国际  外</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;var p &#x3D; new Point &#123; Lng &#x3D; 116.416336, Lat &#x3D; 39.78394 &#125;;  </span><br><span class="line">        &#x2F;&#x2F;芳园里小区  外</span><br><span class="line"></span><br><span class="line">        var p &#x3D; new Point &#123; Lng &#x3D; 116.429039, Lat &#x3D; 39.790535 &#125;;</span><br><span class="line">        &#x2F;&#x2F;润枫锦尚小区  内</span><br><span class="line"></span><br><span class="line">        bool isin &#x3D; MapHelper.IsPointInPolygon(p, Plist);</span><br><span class="line">        if (isin)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(&quot;随机点在五环范围内，可以派单&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(&quot;随机点不在五环范围内&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        Console.ReadKey();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul>
<li>北京的五环范围毕竟不是一个规则的多边形，可以尽量选择有标志性的坐标点来规范多边形</li>
<li>参考自：<a href="http://www.cnblogs.com/aheizi/p/5162992.html" target="_blank" rel="noopener">百度地图——判断用户是否在配送范围内解决方案 - aheizi - 博客园</a></li>
</ul>
]]></content>
      <categories>
        <category>开发笔记</category>
      </categories>
      <tags>
        <tag>ASP.NET</tag>
      </tags>
  </entry>
  <entry>
    <title>Python中时间格式转换</title>
    <url>/2016/05/17/time-format-conversion-in-python/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">YYYY-MM-DDTHH:MM:SS+HH:MM</span><br><span class="line">2016-04-05T13:31:00+08:00</span><br><span class="line"></span><br><span class="line">2014-09-18T10:42:16.126Z</span><br></pre></td></tr></table></figure>


<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ time &#x3D; &#39;2012-03-01T00:05:55+00:00&#39;</span><br><span class="line">$ datetime.strptime(time, &quot;%Y-%m-%dT%H:%M:%S+00:00&quot;)</span><br><span class="line"># &#x3D;&gt; datetime.datetime(2012, 3, 1, 0, 5, 55)</span><br></pre></td></tr></table></figure>

<p><code>strftime()</code> 用于时间格式转换<br><code>strptime()</code> 用于字符串格式转换</p>
<h4 id="代码段"><a href="#代码段" class="headerlink" title="代码段"></a>代码段</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"># 将UTC时间转换为本地时间</span><br><span class="line"># 2016-04-04T23:58:00+08:00</span><br><span class="line">def _utc_datetime(value):</span><br><span class="line">    # value为传入的值为UTC时间，如：2016-04-04T23:58:00+08:00</span><br><span class="line">    format&#x3D;&#39;%Y-%m-%d %H:%M:%S&#39;</span><br><span class="line">    utc_format&#x3D;&#39;%Y-%m-%dT%H:%M:%S+08:00&#39;</span><br><span class="line">    local&#x3D; datetime.strptime(value,utc_format)</span><br><span class="line">    dt&#x3D; datetime.strftime(local,format)</span><br><span class="line">    return dt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">将unix时间戳转为标准时间格式</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">def _timestamp_datetime(value):</span><br><span class="line">    format &#x3D; &#39;%Y-%m-%d %H:%M:%S&#39;</span><br><span class="line">    # value为传入的值为时间戳(整形)，如：1332888820</span><br><span class="line">    value &#x3D; time.localtime(value)</span><br><span class="line">    ## 经过localtime转换后变成</span><br><span class="line">    ## time.struct_time(tm_year&#x3D;2012, tm_mon&#x3D;3, tm_mday&#x3D;28, tm_hour&#x3D;6, tm_min&#x3D;53, tm_sec&#x3D;40, tm_wday&#x3D;2, tm_yday&#x3D;88, tm_isdst&#x3D;0)</span><br><span class="line">    # 最后再经过strftime函数转换为正常日期格式。</span><br><span class="line">    dt &#x3D; time.strftime(format, value)</span><br><span class="line">    return dt</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h4><ul>
<li>答案见这里：<a href="http://stackoverflow.com/questions/13662789/convert-utc-time-to-python-datetime" target="_blank" rel="noopener">Convert UTC time to python datetime - Stack Overflow</a></li>
<li><a href="http://www.kancloud.cn/thinkphp/python-guide/39410" target="_blank" rel="noopener">datetime - [ Python 3零起点教程 ] - 看云</a></li>
<li><a href="http://www.open-open.com/lib/view/open1412994489608.html" target="_blank" rel="noopener">Python中Timestamp、Datetime和UTC时间相互转化的方法 - OPEN 开发经验库</a></li>
<li><a href="http://www.cnblogs.com/xmphoenix/archive/2011/05/23/2054022.html" target="_blank" rel="noopener">SQLite 日期类型(转) - 深海的小鱼儿 - 博客园</a></li>
<li><a href="http://blog.sina.com.cn/s/blog_4da051a60102v221.html" target="_blank" rel="noopener">python本地时间与UTC时间转换_丶Source_新浪博客</a></li>
<li><a href="http://blog.csdn.net/wuxianglong/article/details/7061568" target="_blank" rel="noopener">Python将UTC时间转化为Local时间 - 降龍        - 博客频道 - CSDN.NET</a></li>
<li><a href="http://blog.csdn.net/wirelessqa/article/details/7973121" target="_blank" rel="noopener">python时间处理之datetime - 码农老毕的学习笔记        - 博客频道 - CSDN.NET</a></li>
<li><a href="http://liyangliang.me/posts/2012/10/python-timestamp-to-timestr/" target="_blank" rel="noopener">Python 时间戳和日期相互转换 - 李林克斯</a> <strong>☆</strong></li>
<li><a href="http://www.thinksaas.cn/topics/0/593/593950.html" target="_blank" rel="noopener">Python中Timestamp、Datetime和UTC时间相互转化的方法_python_ThinkSAAS</a></li>
</ul>
]]></content>
      <categories>
        <category>开发笔记</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python时间差</title>
    <url>/2016/05/17/time-difference-in-python/</url>
    <content><![CDATA[<h4 id="datetime-timedelta"><a href="#datetime-timedelta" class="headerlink" title="datetime.timedelta"></a>datetime.timedelta</h4><p><code>datetime.timedelta</code>对象代表两个时间之间的的时间差，两个date或datetime对象相减时可以返回一个timedelta对象。</p>
<p>构造函数:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class datetime.timedelta([days[, seconds[, microseconds[, milliseconds[, minutes[, hours[, weeks]]]]]]])</span><br></pre></td></tr></table></figure>

<p>所有参数可选，且默认都是0，参数的值可以是整数，浮点数，正数或负数。</p>
<p><code>timedelta</code> 可以和 <code>date，datetime</code> 对象进行加减操作</p>
<p><code>timedelta.total_seconds()</code> 用于计算秒数。</p>
<hr>
<h4 id="当前的时间上加一天或一年减一天等操作"><a href="#当前的时间上加一天或一年减一天等操作" class="headerlink" title="当前的时间上加一天或一年减一天等操作"></a>当前的时间上加一天或一年减一天等操作</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python   </span><br><span class="line"># -*- coding:utf-8 -*-   </span><br><span class="line">  </span><br><span class="line">from datetime import datetime,timedelta   </span><br><span class="line">  </span><br><span class="line">now &#x3D; datetime.now()   </span><br><span class="line">  </span><br><span class="line">yestoday &#x3D; now - timedelta(days&#x3D;1)   </span><br><span class="line">tommorow &#x3D; now + timedelta(days&#x3D;1)   </span><br><span class="line">  </span><br><span class="line">next_year &#x3D; now + timedelta(days &#x3D; 365)</span><br></pre></td></tr></table></figure>

<h4 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h4><ul>
<li><a href="http://www.cnblogs.com/goodspeed/archive/2011/11/06/python_timedelta.html" target="_blank" rel="noopener">Python中时间的处理之——timedelta篇 - Goodspeed - 博客园</a></li>
</ul>
]]></content>
      <categories>
        <category>开发笔记</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu下配置Flask运行环境</title>
    <url>/2016/05/09/configuring-flask-running-environment-under-ubuntu/</url>
    <content><![CDATA[<p>Virtualenv + Flask + Gunicorn + Supervisor + Nginx</p>
<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>假设我所在的当前账户名为 <code>tiger</code> 。</p>
<h5 id="准备python环境"><a href="#准备python环境" class="headerlink" title="准备python环境"></a>准备<code>python</code>环境</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get udpate</span><br><span class="line">&#x2F;&#x2F; 安装python 和 pip (如果已经安装可以忽略)</span><br><span class="line">$ sudo apt-get install python-dev python-pip -y</span><br></pre></td></tr></table></figure>

<h5 id="创建virtualenv虚拟环境"><a href="#创建virtualenv虚拟环境" class="headerlink" title="创建virtualenv虚拟环境"></a>创建virtualenv虚拟环境</h5><p>Virtualenv可以为每个Python应用创建独立的开发环境，使他们互不影响，Virtualenv能够做到：</p>
<ul>
<li>在没有权限的情况下安装新套件</li>
<li>不同应用可以使用不同的套件版本</li>
<li>套件升级不影响其他应用</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;安装或通过执行：</span><br><span class="line">$ sudo pip install virtualenv</span><br></pre></td></tr></table></figure>

<p>我通常创建一个包含 <code>venv</code> 文件夹的项目文件夹:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ mkdir myproject</span><br><span class="line">$ cd myproject</span><br><span class="line">$ virtualenv venv</span><br><span class="line">New python executable in venv&#x2F;bin&#x2F;python2</span><br><span class="line">Also creating executable in venv&#x2F;bin&#x2F;python</span><br><span class="line">Installing setuptools, pip...done.</span><br></pre></td></tr></table></figure>

<p>现在，每次需要使用项目时，必须先激活相应的环境。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ls</span><br><span class="line">-- venv</span><br><span class="line">$  . venv&#x2F;bin&#x2F;activate</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;结果：</span><br><span class="line">(venv)tiger@VirtualBox:~&#x2F;xbox&#x2F;myflask$</span><br></pre></td></tr></table></figure>

<p>你现在进入你的 <code>virtualenv</code> （注意查看你的 shell 提示符已经改变了）。</p>
<h5 id="安装Flask"><a href="#安装Flask" class="headerlink" title="安装Flask"></a>安装Flask</h5><p>现在可以开始在你的 <code>virtualenv</code> 中安装 <code>Flask</code> 了:  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ pip install Flask</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;结果：</span><br><span class="line">(venv)tiger@VirtualBox:~&#x2F;xbox&#x2F;myflask$ pip install Flask</span><br><span class="line">Downloading&#x2F;unpacking Flask</span><br><span class="line">  Downloading Flask-0.10.1.tar.gz (544kB): 544kB downloaded</span><br><span class="line">    ......</span><br><span class="line">  Successfully installed Flask Werkzeug Jinja2 itsdangerous MarkupSafe</span><br><span class="line">Cleaning up...</span><br></pre></td></tr></table></figure>

<p>几秒钟后就安装好了。</p>
<h5 id="退出虚拟环境"><a href="#退出虚拟环境" class="headerlink" title="退出虚拟环境"></a>退出虚拟环境</h5><p>可通过<code>deactivate</code>退出虚拟环境：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(venv)tiger@VirtualBox:~&#x2F;xbox&#x2F;myflask$ deactivate</span><br><span class="line">tiger@VirtualBox:~&#x2F;xbox&#x2F;myflask$</span><br></pre></td></tr></table></figure>

<p>具体可详见：<a href="http://dormousehole.readthedocs.io/en/latest/installation.html" target="_blank" rel="noopener">Flask-安装</a></p>
<h5 id="启动falsk"><a href="#启动falsk" class="headerlink" title="启动falsk"></a>启动falsk</h5><p>在当前目录下新建一个 <code>hello.py</code> 的文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(venv) $ vim hello.py</span><br><span class="line">(venv) $ ls</span><br><span class="line">venv hello.py</span><br></pre></td></tr></table></figure>

<p>创建一个简单的Flask程序：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from flask import Flask</span><br><span class="line">app &#x3D; Flask(__name__)</span><br><span class="line"></span><br><span class="line">@app.route(&#39;&#x2F;&#39;)</span><br><span class="line">def hello_world():</span><br><span class="line">    return &#39;Hello World!&#39;</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure>

<p>修改<code>hello.py</code> 的权限：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(venv) $ chmod a+x hello.py</span><br></pre></td></tr></table></figure>

<p>启动 flask:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(venv) $ python hello.py</span><br></pre></td></tr></table></figure>

<p>此时，用浏览器访问 <code>http://127.0.0.1:5000</code> 就能看到网页显示 <code>hello world</code>。</p>
<hr>
<h4 id="配置Gunicorn"><a href="#配置Gunicorn" class="headerlink" title="配置Gunicorn"></a>配置Gunicorn</h4><p>Gunicorn是用于部署WSGI应用的，任何支持WSGI的都可以，虽说直接执行 <code>python hello.py</code> 这样网站也能跑起来，但那是方便开发而已，在线上环境，还是需要更高效的组件来做。</p>
<h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(venv)$ pip install gunicorn</span><br></pre></td></tr></table></figure>

<p>然后可以执行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gunicorn -w 4 -b 127.0.0.1:8000 hello:app</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;结果：</span><br><span class="line">(venv) $ gunicorn -w 4 -b 127.0.0.1:8000 hello:app</span><br><span class="line">[2016-05-08 16:07:36 +0000] [1337] [INFO] Starting gunicorn 19.4.5</span><br><span class="line">[2016-05-08 16:07:36 +0000] [1337] [INFO] Listening at: http:&#x2F;&#x2F;127.0.0.1:8000 (1337)</span><br><span class="line">[2016-05-08 16:07:36 +0000] [1337] [INFO] Using worker: sync</span><br><span class="line">[2016-05-08 16:07:36 +0000] [1342] [INFO] Booting worker with pid: 1342</span><br><span class="line">[2016-05-08 16:07:36 +0000] [1343] [INFO] Booting worker with pid: 1343</span><br><span class="line">[2016-05-08 16:07:36 +0000] [1344] [INFO] Booting worker with pid: 1344</span><br><span class="line">[2016-05-08 16:07:36 +0000] [1345] [INFO] Booting worker with pid: 1345</span><br></pre></td></tr></table></figure>

<blockquote>
<p>“hello” is the name of the file (without extension). And “app” is the name of the Flask object.</p>
</blockquote>
<p>这里 “hello” 是python文件的名称(不包含扩展名)，冒号后面的”app” 是flask程序中<code>app = Flask(__name__)</code>创建的这个Flask对象的名称。</p>
<p>这里我们用了 <code>8000</code> 的端口进行访问，原先的 <code>5000</code> 并没有启用。</p>
<p><code>-w</code>表示开启多少个 <code>worker</code>，<code>-b</code> 表示 <code>gunicorn</code> 开发的访问地址  </p>
<p>想要结束 <code>gunicorn</code> 只需执行 <code>pkill gunicorn</code> : </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(venv)  $ pkill gunicorn</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;结果：</span><br><span class="line">[2016-05-08 16:09:28 +0000] [1337] [INFO] Handling signal: term</span><br><span class="line">[2016-05-08 16:09:28 +0000] [1344] [INFO] Worker exiting (pid: 1344)</span><br><span class="line">[2016-05-08 16:09:28 +0000] [1342] [INFO] Worker exiting (pid: 1342)</span><br><span class="line">[2016-05-08 16:09:28 +0000] [1343] [INFO] Worker exiting (pid: 1343)</span><br><span class="line">[2016-05-08 16:09:28 +0000] [1345] [INFO] Worker exiting (pid: 1345)</span><br><span class="line">[2016-05-08 16:09:29 +0000] [1337] [INFO] Shutting down: Master</span><br></pre></td></tr></table></figure>

<p>我们还可以在一个独立的配置文件中来设置，新增配置文件 <code>gunicorn.conf</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(venv) $ ls</span><br><span class="line">-- hello.py  hello.pyc  venv</span><br><span class="line">(venv) $ vim gunicorn.conf</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;写入下列内容：</span><br><span class="line">workers&#x3D;4</span><br><span class="line">bind&#x3D;&#39;127.0.0.1:8000&#39;</span><br></pre></td></tr></table></figure>

<p>上面使用<code>pkill gunicorn</code>的方式来停止进程，太过于繁琐，因此出现了另外一个神器—<code>supervisor</code>，一个专门用来管理进程的工具，还可以管理系统的工具进程。</p>
<hr>
<h4 id="Supervisor"><a href="#Supervisor" class="headerlink" title="Supervisor"></a>Supervisor</h4><p>Supervisor 是用Python实现的一款非常实用的进程管理工具。</p>
<h5 id="安装supervisor"><a href="#安装supervisor" class="headerlink" title="安装supervisor"></a>安装supervisor</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(venv) $ pip install supervisor</span><br></pre></td></tr></table></figure>

<h6 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">## 启动服务</span><br><span class="line">$ sudo service supervisor start</span><br><span class="line">## 停止服务</span><br><span class="line">$ sudo service supervisor stop</span><br><span class="line">## 也可以直接 kill pid</span><br><span class="line">$ ps -A | grep supervisor</span><br></pre></td></tr></table></figure>

<h6 id="生成supervisor默认配置文件"><a href="#生成supervisor默认配置文件" class="headerlink" title="生成supervisor默认配置文件"></a>生成supervisor默认配置文件</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(venv) $ echo_supervisord_conf &gt; supervisor.conf</span><br><span class="line"></span><br><span class="line">## 添加一个&#96;logs&#96;目录，用来后面存放日志：</span><br><span class="line">(venv) $ mkdir logs</span><br><span class="line">(venv) $ ls</span><br><span class="line">gunicorn.conf  hello.py  hello.pyc  logs  supervisor.conf  venv</span><br></pre></td></tr></table></figure>

<h6 id="修改supervisor配置文件，添加gunicorn进程管理"><a href="#修改supervisor配置文件，添加gunicorn进程管理" class="headerlink" title="修改supervisor配置文件，添加gunicorn进程管理"></a>修改supervisor配置文件，添加gunicorn进程管理</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(venv) $ vim supervisor.conf</span><br></pre></td></tr></table></figure>

<p>在 <code>supervisor.conf</code> 配置文件底部添加：(假设我的工作目录为： <code>/home/tiger/myflask/myproject/</code> )</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">##文件内容</span><br><span class="line">[program:hello]  ## 服务的名称，后面操作会用到</span><br><span class="line">command&#x3D;&#x2F;home&#x2F;tiger&#x2F;myflask&#x2F;myproject&#x2F;venv&#x2F;bin&#x2F;gunicorn hello:app -c &#x2F;home&#x2F;tiger&#x2F;myflask&#x2F;myproject&#x2F;gunicorn.conf      ; supervisor启动命令</span><br><span class="line">directory&#x3D;&#x2F;home&#x2F;tiger&#x2F;myflask&#x2F;myproject     ; 项目的文件夹路径</span><br><span class="line">user&#x3D;tiger</span><br><span class="line">autostart&#x3D;true                           ; 是否自动启动</span><br><span class="line">autorestart&#x3D;true                         ; 是否自动重启</span><br><span class="line">##log文件的位置</span><br><span class="line">stdout_logfile&#x3D;&#x2F;home&#x2F;tiger&#x2F;myflask&#x2F;myproject&#x2F;logs&#x2F;gunicorn_supervisor.log     ; log 日志</span><br><span class="line">stderr_logfile&#x3D;&#x2F;home&#x2F;tiger&#x2F;myflask&#x2F;myproject&#x2F;logs&#x2F;gunicorn_supervisor.err     ; 错误日志</span><br></pre></td></tr></table></figure>

<p><code>supervisor</code>的基本使用命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">supervisord -c supervisor.conf            通过配置文件启动supervisor</span><br><span class="line">supervisorctl -c supervisor.conf status   查看supervisor的状态</span><br><span class="line">supervisorctl -c supervisor.conf reload                    重新载入 配置文件</span><br><span class="line">supervisorctl -c supervisor.conf start [all]|[appname]     启动指定&#x2F;所有 supervisor管理的程序进程</span><br><span class="line">supervisorctl -c supervisor.conf stop [all]|[appname]      关闭指定&#x2F;所有 supervisor管理的程序进程</span><br></pre></td></tr></table></figure>

<p>添加完上面的内容后，保存退出。执行操作：</p>
<p>当前目录：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(venv) $ ls</span><br><span class="line">-- gunicorn.conf  hello.py  hello.pyc  logs  supervisor.conf  venv</span><br></pre></td></tr></table></figure>

<p>通过配置文件 启动 <code>supervisor</code> :      </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(venv) $ supervisord -c supervisor.conf</span><br></pre></td></tr></table></figure>

<p>查看 <code>supervisor</code> 的状态：    </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(venv) $ supervisorctl -c supervisor.conf status</span><br><span class="line">-- hello              RUNNING   pid 1550, uptime 0:04:08</span><br></pre></td></tr></table></figure>

<p>停止 设置的 服务 <code>hello</code> ：   </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(venv) $ supervisorctl -c supervisor.conf stop hello </span><br><span class="line">-- hello: stopped</span><br></pre></td></tr></table></figure>

<p>再次查看 服务 <code>hello</code> 的状态 ：   </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(venv) $ supervisorctl -c supervisor.conf status</span><br><span class="line">-- hello              STOPPED   May 08 05:23 PM</span><br></pre></td></tr></table></figure>

<hr>
<p>自动启动：</p>
<p>那么，如果想开机时自动启动怎么办呢？或者说，如果机器重启了，那WEB服务就断了。<br>其实呢，也很简单，只要在 <code>/etc/rc.d/rc.local</code> 中加入一句就可以了：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">supervisord -c &#x2F;home&#x2F;tiger&#x2F;myflask&#x2F;myproject&#x2F;supervisor.conf</span><br></pre></td></tr></table></figure>

<p>有了Gunicorn、Supervisor，本地的环境的算是搭好了，但是我们需要让VPS上的网站从外网可以访问，这时候需要Nginx。</p>
<p>现在，我们只能在本机上通过<code>http://127.0.0.1:8000</code> 的方式来访问的，但在外网上是无法访问到的。</p>
<hr>
<h4 id="配置Nginx"><a href="#配置Nginx" class="headerlink" title="配置Nginx"></a>配置Nginx</h4><p>在安装Nginx之前，要先退出上面步骤中操作所在的<code>venv</code>环境，执行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(venv) $ deactivate</span><br></pre></td></tr></table></figure>

<h5 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install nginx</span><br></pre></td></tr></table></figure>

<p>安装完成后访问<code>localhost</code>可以看到 <strong>Welcome to nginx on Ubuntu!</strong> 的页面。</p>
<p><code>nginx</code> 的默认网站目录 <code>/usr/share/nginx/html</code></p>
<h5 id="常用配置命令"><a href="#常用配置命令" class="headerlink" title="常用配置命令"></a>常用配置命令</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">##启动服务</span><br><span class="line">$ sudo service nginx start</span><br><span class="line">##重启和暂停服务</span><br><span class="line">$ sudo service nginx restart</span><br><span class="line">$ sudo service nginx stop</span><br><span class="line">##查看状态</span><br><span class="line">$ sudo service nginx status</span><br></pre></td></tr></table></figure>

<p>或下面的命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo &#x2F;etc&#x2F;init.d&#x2F;nginx start</span><br><span class="line">$ sudo &#x2F;etc&#x2F;init.d&#x2F;nginx stop</span><br><span class="line">$ sudo &#x2F;etc&#x2F;init.d&#x2F;nginx restart</span><br><span class="line">$ sudo &#x2F;etc&#x2F;init.d&#x2F;nginx status</span><br></pre></td></tr></table></figure>

<p>Nginx的配置文件和Supervisor类似，不同的程序可以分别配置，然后被总配置文件<code>include</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">## Nginx的主配置文件地址</span><br><span class="line">&#x2F;etc&#x2F;nginx&#x2F;nginx.conf</span><br><span class="line"></span><br><span class="line">## 新建单独的配置文件</span><br><span class="line">## 在conf.d目录下</span><br><span class="line">$ sudo vim &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;helloweb.conf</span><br><span class="line"></span><br><span class="line">## 然后写入下列内容：</span><br><span class="line">server &#123;</span><br><span class="line">        listen   80;             &#x2F;&#x2F;端口</span><br><span class="line">        server_name 192.168.1.144;   &#x2F;&#x2F;访问域名</span><br><span class="line">        root &#x2F;home&#x2F;tiger&#x2F;myflack&#x2F;myproject;</span><br><span class="line">        access_log &#x2F;home&#x2F;tiger&#x2F;myflask&#x2F;myproject&#x2F;logs&#x2F;nginx_access.log;</span><br><span class="line">        error_log &#x2F;home&#x2F;tiger&#x2F;myflask&#x2F;myproject&#x2F;logs&#x2F;nginx_error.log;</span><br><span class="line">        location &#x2F; &#123;</span><br><span class="line">                proxy_set_header X-Forward-For $proxy_add_x_forwarded_for;</span><br><span class="line">                proxy_set_header Host $http_host;</span><br><span class="line">                proxy_redirect off;</span><br><span class="line">                if (!-f $request_filename) &#123;</span><br><span class="line">                        proxy_pass http:&#x2F;&#x2F;127.0.0.1:8000;  &#x2F;&#x2F;这里是flask的gunicorn端口</span><br><span class="line">                        break;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>也可以用下面的最简配置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name _; # _表示 localhost </span><br><span class="line"></span><br><span class="line">    root &#x2F;home&#x2F;tiger&#x2F;myflack&#x2F;myproject; # hello.py 文件所在的目录</span><br><span class="line"></span><br><span class="line">    location &#x2F; &#123;</span><br><span class="line">        proxy_pass http:&#x2F;&#x2F;127.0.0.1:8000;  &#x2F;&#x2F;这里是flask的gunicorn端口</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置完成之后，<code>sudo service nginx restart</code> 重启一下服务。</p>
<p>现在，在浏览器中输入 <code>http://127.0.0.1</code> 即可正常访问。</p>
<hr>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul>
<li>Flask应用的基本部署依赖包括一个应用容器（比如Gunicorn）和一个反向代理（比如Nginx）。 </li>
<li>Gunicorn应该退居Nginx幕后并监听127.0.0.1（内部请求）而非0.0.0.0（外部请求）。</li>
<li>仍有疑问的地方：在虚拟环境下安装的<code>supervisor</code> 并非是全局的，经测试 <code>kill</code> 掉 <code>supervisor</code> 进程后也不会自动重启，或如何随系统启动？该问题待进一步测试</li>
</ul>
<hr>
<h4 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h4><ul>
<li><a href="http://virtualenv-chinese-docs.readthedocs.io/en/latest/" target="_blank" rel="noopener">virtualenv &mdash; virtualenv 1.7.1.2.post1 documentation</a></li>
<li><a href="https://github.com/defshine/flaskblog" target="_blank" rel="noopener">GitHub - defshine/flaskblog: Learn python and flask,just a tony blog system</a></li>
<li><a href="http://gunicorn.org/" target="_blank" rel="noopener">Gunicorn - Python WSGI HTTP Server for UNIX</a></li>
<li><a href="http://dormousehole.readthedocs.io/en/latest/installation.html" target="_blank" rel="noopener">安装 Flask 0.10 documentation</a></li>
</ul>
<hr>
<ul>
<li><a href="http://www.cnblogs.com/Ray-liang/p/4837850.html" target="_blank" rel="noopener">Flask + Gunicorn + Nginx 部署 - Ray Liang - 博客园</a></li>
<li><a href="http://www.cnblogs.com/herryly/p/4517852.html" target="_blank" rel="noopener">阿里云ECS上环境搭建(virtualenv+flask+gunicorn+supervisor+nginx) - 菩提本无树 - 博客园</a></li>
<li><a href="http://www.cnblogs.com/Ray-liang/p/4173923.html" target="_blank" rel="noopener">阿里云部署 Flask  + WSGI + Nginx 详解 - Ray Liang - 博客园</a></li>
<li><a href="http://blog.csdn.net/beerium/article/details/8721906" target="_blank" rel="noopener">Supervisor 管理后台守护进程</a></li>
</ul>
<hr>
<ul>
<li><a href="http://www.jianshu.com/p/be9dd421fb8d" target="_blank" rel="noopener">python web 部署：nginx + gunicorn + supervisor + flask 部署笔记 - 简书</a></li>
<li><a href="http://beiyuu.com/vps-config-python-vitrualenv-flask-gunicorn-supervisor-nginx/" target="_blank" rel="noopener">VPS环境搭建详解 (Virtualenv+Gunicorn+Supervisor+Nginx) | BeiYuu.com</a></li>
<li><a href="http://xhrwang.me/2014/12/13/restful-api-by-flask.html" target="_blank" rel="noopener">基于 Flask 实现 RESTful API | Ross’s Page</a></li>
<li><a href="http://xhrwang.me/2014/12/17/deploy-flask-app-with-gunicorn-and-nginx.html" target="_blank" rel="noopener">Ubuntu 14.04 系统基于 Gunicorn 和 Nginx 部署 Flask 应用 | Ross’s Page</a></li>
<li><a href="http://codingnow.cn/server/539.html" target="_blank" rel="noopener">Flask+Nginx+Gunicorn+Redis+Mysql搭建一个小站 | Alex&#039;s Blog</a></li>
<li><a href="http://www.onurguzel.com/how-to-run-flask-applications-with-nginx-using-gunicorn/" target="_blank" rel="noopener">How to Run Flask Applications with Nginx Using Gunicorn &#8211; Onur Güzel</a> *</li>
<li><a href="http://codingnow.cn/server/431.html" target="_blank" rel="noopener">dnsmasq配置域名重定向和dns缓存 | Alex&#039;s Blog</a></li>
<li><a href="http://www.simpleapples.com/2015/06/configure-nginx-supervisor-gunicorn-flask/" target="_blank" rel="noopener">在阿里云CentOS7中配置基于Nginx+Supervisor+Gunicorn的Flask项目 - simpleapples</a></li>
<li><a href="http://news.oneapm.com/flask-nginx-gunicorn-supervisor-python/" target="_blank" rel="noopener">virtualenv 环境下 Django + Nginx + Gunicorn+ Supervisor 搭建 Python Web</a></li>
<li><a href="https://spacewander.github.io/explore-flask-zh/14-deployment.html" target="_blank" rel="noopener">部署 | Flask之旅</a></li>
<li><a href="http://dushunfan.com/2013/03/17/deploy-flask-in-centos6-nginx-gunicorn-supervisor/" target="_blank" rel="noopener">CentOS 6 下使用 Nginx，Gunicorn 以及 Supervisor 部署 Flask 应用 - 杜顺帆的个人博客</a></li>
<li><a href="http://autarch.me/archives/2016/01/%E5%9C%A8-Ubuntu-%E4%B8%AD-Nginx-Gunicorn-%E9%83%A8%E7%BD%B2-Flask.html" target="_blank" rel="noopener">在 Ubuntu 中 Nginx,Gunicorn 部署 Flask | autarch</a> * </li>
<li><a href="https://zhuanlan.zhihu.com/p/22126999" target="_blank" rel="noopener">阿里云Python+Flask环境搭建</a></li>
</ul>
]]></content>
      <categories>
        <category>开发笔记</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Flask</tag>
      </tags>
  </entry>
  <entry>
    <title>Netdata-Linux下性能监视工具</title>
    <url>/2016/05/06/linux-performance-monitoring-tool-netdata/</url>
    <content><![CDATA[<h4 id="编译依赖"><a href="#编译依赖" class="headerlink" title="编译依赖"></a>编译依赖</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Debian&#x2F;Ubuntu</span><br><span class="line">$ sudo apt-get install zlib1g-dev gcc make git autoconf autogen automake pkg-config</span><br></pre></td></tr></table></figure>

<h4 id="Install-netdata"><a href="#Install-netdata" class="headerlink" title="Install netdata"></a>Install netdata</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># download it - the directory &#39;netdata.git&#39; will be created</span><br><span class="line">$ git clone https:&#x2F;&#x2F;github.com&#x2F;firehol&#x2F;netdata.git --depth&#x3D;1</span><br><span class="line">cd netdata</span><br><span class="line"></span><br><span class="line"># build it</span><br><span class="line">.&#x2F;netdata-installer.sh</span><br></pre></td></tr></table></figure>

<p>一旦编译安装完毕，<code>netdata</code> 将执行 <code>/usr/sbin/netdata</code> 启动 <code>daemon</code> 程序，并监听本机的 <code>19999</code> 端口。</p>
<p>直接访问：<code>127.0.0.1:19999</code> 即可打开监控界面。</p>
<h4 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h4><ul>
<li>官方安装教程：<a href="https://github.com/firehol/netdata/wiki/Installation" target="_blank" rel="noopener">Installation · firehol/netdata Wiki · GitHub</a></li>
<li><a href="https://github.com/firehol/netdata" target="_blank" rel="noopener">GitHub - firehol/netdata: Real-time performance monitoring, done right!</a></li>
<li><a href="https://linuxtoy.org/archives/netdata.html" target="_blank" rel="noopener">netdata：实时监视 Linux 系统性能</a></li>
</ul>
]]></content>
      <categories>
        <category>开发笔记</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>cURL-命令行下工作的文件传输工具</title>
    <url>/2016/05/04/linux-curl/</url>
    <content><![CDATA[<p>cURL是一种命令行工具，作用是发出网络请求，然后得到和提取数据，显示在”标准输出”（stdout）上面。</p>
<h4 id="Linux下安装cURL"><a href="#Linux下安装cURL" class="headerlink" title="Linux下安装cURL"></a>Linux下安装cURL</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install -y curl</span><br></pre></td></tr></table></figure>

<h4 id="Windows下安装cURL"><a href="#Windows下安装cURL" class="headerlink" title="Windows下安装cURL"></a>Windows下安装cURL</h4><ol>
<li>Windows下默认没有cURL命令，需要安装后才能使用</li>
<li>到网址 <a href="https://curl.haxx.se/download/trash/" target="_blank" rel="noopener">curl download</a> 下载curl安装包，我下载的是 <code>curl-7.33.0-win64-ssl-sspi.zip 2013-10-16 04:24 698K</code> 。</li>
<li>解压安装包，只有一个curl.exe文件，在 <code>curl.exe</code> 所在目录下打开 <code>cmd</code> 命令行窗口，就可以直接使用 <code>curl</code> 命令了。</li>
<li>为了让 <code>curl</code> 支持访问 <code>https</code> 的网址，需要下载 <code>OpenSSL</code> ,到 <a href="http://slproweb.com/products/Win32OpenSSL.html" target="_blank" rel="noopener">Win32OpenSSL</a> 下载 <code>Win32 OpenSSL v1.0.1t Light</code> 文件。</li>
<li>上面的 2、3、4 步，如果你觉得太麻烦的话，也可以到 <a href="https://curl.haxx.se/download.html#Win64" target="_blank" rel="noopener">cURL - Download</a> 下载 <code>Win64 x86_64 7zip    7.49.0    binary    SSL  SSH  Viktor Szakáts</code> 这一项，下载后压缩包里的bin目录下有三个文件：<code>curl.exe</code>，<code>curl-ca-bundle.crt</code>，<code>libcurl.dll</code>，里面自带了SSL的证书文件。</li>
</ol>
<hr>
<h4 id="cURL常用命令整理"><a href="#cURL常用命令整理" class="headerlink" title="cURL常用命令整理"></a>cURL常用命令整理</h4><p>格式： <code>curl [参数] [URL地址]</code></p>
<h5 id="参数介绍"><a href="#参数介绍" class="headerlink" title="参数介绍"></a><span id='demo_top'>参数介绍</span></h5><table>
<thead>
<tr>
<th align="center">缩写</th>
<th align="left">完整命令</th>
<th align="center">示例</th>
<th align="left">释意</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>-A</code></td>
<td align="left"><code>--user-agent &lt;agent string&gt;</code></td>
<td align="center"><a href="#demo_user_agent">demo</a></td>
<td align="left">指定User-Agent的值</td>
</tr>
<tr>
<td align="center"><code>-b</code></td>
<td align="left"><code>--cookie &lt;name=data/file&gt;</code></td>
<td align="center"><a href="#demo_b">demo</a></td>
<td align="left">cookie字符串或文件读取位置，使用option来把上次的cookie信息追加到http request里面去</td>
</tr>
<tr>
<td align="center"><code>-c</code></td>
<td align="left"><code>--cookie-jar &lt;file name&gt;</code></td>
<td align="center"><a href="#demo_c">demo</a></td>
<td align="left">操作结束后把cookie写入到这个文件中</td>
</tr>
<tr>
<td align="center"><code>-C</code></td>
<td align="left"><code>--continue-at &lt;offset&gt;</code></td>
<td align="center"><a href="#demo_continue">demo</a></td>
<td align="left">断点续传</td>
</tr>
<tr>
<td align="center"><code>-d</code></td>
<td align="left"><code>--data &lt;data&gt;</code></td>
<td align="center"><a href="#demo_data">demo</a></td>
<td align="left">HTTP POST方式传送数据 <code>application/x-www-url-encoded</code></td>
</tr>
<tr>
<td align="center"><code>-D</code></td>
<td align="left"><code>--dump-header &lt;file&gt;</code></td>
<td align="center"><a href="#demo_dump">demo</a></td>
<td align="left">将请求返回的响应信息保存到指定的文件中</td>
</tr>
<tr>
<td align="center"><code>-e</code></td>
<td align="left"><code>--referer &lt;URL&gt;</code></td>
<td align="center"><a href="#demo_referer">demo</a></td>
<td align="left">指定引用地址，表示从哪里跳转过来的</td>
</tr>
<tr>
<td align="center"><code>-E</code></td>
<td align="left"><code>--cert &lt;certificate[:password]&gt;</code></td>
<td align="center"></td>
<td align="left"></td>
</tr>
<tr>
<td align="center"><code>-F</code></td>
<td align="left"><code>--form &lt;name=content&gt;</code></td>
<td align="center"><a href="#demo_form">demo</a></td>
<td align="left">HTTP 表单方式提交数据 <code>multipart/form-data</code></td>
</tr>
<tr>
<td align="center"><code>-G</code></td>
<td align="left"><code>--get</code></td>
<td align="center"></td>
<td align="left">使用GET方式请求，并将参数拼接在URL的<code>?</code>后面</td>
</tr>
<tr>
<td align="center"><code>-H</code></td>
<td align="left"><code>--header &lt;header&gt;</code></td>
<td align="center"><a href="#demo_header">demo</a></td>
<td align="left">指定请求头参数</td>
</tr>
<tr>
<td align="center"><code>-I</code></td>
<td align="left"><code>--head</code></td>
<td align="center"><a href="#demo_head">demo</a></td>
<td align="left">仅返回头部信息，使用<code>HEAD</code>请求</td>
</tr>
<tr>
<td align="center"><code>-L</code></td>
<td align="left"><code>--location</code></td>
<td align="center"><a href="#demo_location">demo</a></td>
<td align="left">执行重定向操作 <code>3xx</code></td>
</tr>
<tr>
<td align="center"><code></code></td>
<td align="left"><code>--limit-rate &lt;speed&gt;</code></td>
<td align="center"></td>
<td align="left">限制最大传输率</td>
</tr>
<tr>
<td align="center"><code>-m</code></td>
<td align="left"><code>--max-time &lt;seconds&gt;</code></td>
<td align="center"></td>
<td align="left">指定处理的最大时长</td>
</tr>
<tr>
<td align="center"><code></code></td>
<td align="left"><code>--max-filesize &lt;bytes&gt;</code></td>
<td align="center"></td>
<td align="left">指定要下载的文件的最大长度，如果超过bytes值，下载并不开始、返回退出码63</td>
</tr>
<tr>
<td align="center"><code>-o</code></td>
<td align="left"><code>--output &lt;file&gt;</code></td>
<td align="center"><a href="#demo_output">demo</a></td>
<td align="left">将文件保存为命令行中指定的文件名的文件中</td>
</tr>
<tr>
<td align="center"><code>&gt;</code></td>
<td align="left"><code>&gt;</code></td>
<td align="center"></td>
<td align="left">等同于<code>-o</code>,对输出进行转向输出</td>
</tr>
<tr>
<td align="center"><code>-O</code></td>
<td align="left"><code>--remote-name</code></td>
<td align="center"><a href="#demo_remote">demo</a></td>
<td align="left">使用URL中默认的文件名保存文件到本地</td>
</tr>
<tr>
<td align="center"><code>-r</code></td>
<td align="left"><code>--range &lt;range&gt;</code></td>
<td align="center"><a href="#demo_range">demo</a></td>
<td align="left">检索来自HTTP/1.1或FTP服务器字节范围;分块下载</td>
</tr>
<tr>
<td align="center"><code>-s</code></td>
<td align="left"><code>--silent</code></td>
<td align="center"><a href="#demo_silent">demo</a></td>
<td align="left">减少输出信息,比如进度显示或错误信息</td>
</tr>
<tr>
<td align="center"><code></code></td>
<td align="left"><code>--ssl</code></td>
<td align="center"></td>
<td align="left">使用SSL/TLS方式创建连接请求</td>
</tr>
<tr>
<td align="center"><code>-T</code></td>
<td align="left"><code>--upload-file &lt;file&gt;</code></td>
<td align="center"><a href="#demo_upload">demo</a></td>
<td align="left">使用PUT方法上传，<code>-T</code>参数指定上传文件</td>
</tr>
<tr>
<td align="center"><code>-u</code></td>
<td align="left"><code>--user &lt;user:password&gt;</code></td>
<td align="center"><a href="#demo_user">demo</a></td>
<td align="left">设置服务器的用户和密码</td>
</tr>
<tr>
<td align="center"><code>-v</code></td>
<td align="left"><code>--verbose</code></td>
<td align="center"><a href="#demo_verbose">demo</a></td>
<td align="left">小写的v参数，用于打印更多信息，包括发送的请求信息，这在调试脚本是特别有用</td>
</tr>
<tr>
<td align="center"><code></code></td>
<td align="left"><code>--trace</code></td>
<td align="center"><a href="#demo_trace">demo</a></td>
<td align="left">查看更详细的通信过程</td>
</tr>
<tr>
<td align="center"><code></code></td>
<td align="left"><code>--trace-ascii</code></td>
<td align="center"><a href="#demo_trace">demo</a></td>
<td align="left">查看更详细的通信过程</td>
</tr>
<tr>
<td align="center"><code>-w</code></td>
<td align="left"><code>--write-out &lt;format&gt;</code></td>
<td align="center"><a href="#demo_write_out">demo</a></td>
<td align="left"></td>
</tr>
<tr>
<td align="center"><code>-x</code></td>
<td align="left"><code>--proxy &lt;[protocol://][user:password@]proxyhost[:port]&gt;</code></td>
<td align="center"><a href="#demo_proxy">demo</a></td>
<td align="left">指定代理服务器地址和端口，端口默认为1080</td>
</tr>
<tr>
<td align="center"><code>-X</code></td>
<td align="left"><code>--request &lt;command&gt;</code></td>
<td align="center"><a href="#demo_request">demo</a></td>
<td align="left">指定GET,HEAD,POST,PUT,DELETE等请求协议</td>
</tr>
<tr>
<td align="center"><code>-h</code></td>
<td align="left"><code>--help</code></td>
<td align="center"></td>
<td align="left">使用帮助</td>
</tr>
<tr>
<td align="center"><code>-V</code></td>
<td align="left"><code>--version</code></td>
<td align="center"></td>
<td align="left">版本信息</td>
</tr>
<tr>
<td align="center"><code></code></td>
<td align="left"><code>--retry &lt;num&gt;</code></td>
<td align="center"></td>
<td align="left">指定重试次数</td>
</tr>
</tbody></table>
<hr>
<h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><p><i id='demo_user_agent'></i>  <code>-A</code> 指定User-Agent的值  <a href="#demo_top">Back To Top</a>   </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ curl -A &quot;Mozilla&#x2F;4.0 (compatible; MSIE 6.0; Windows NT 5.0)&quot; -o page.html http:&#x2F;&#x2F;www.www.baidu.com</span><br></pre></td></tr></table></figure>

<p><i id='demo_b'></i>  <code>-b</code> 使用cookie文件(当前目录下的cookie.txt文件)  <a href="#demo_top">Back To Top</a> </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 指定 cookie信息 访问</span><br><span class="line">$ curl -b &quot;name&#x3D;data&quot; http:&#x2F;&#x2F;www.baidu.com</span><br><span class="line">&#x2F;&#x2F; 使用 本地文件中的cookie信息 访问</span><br><span class="line">$ curl -b cookie.txt http:&#x2F;&#x2F;www.xxxx.com&#x2F;api</span><br></pre></td></tr></table></figure>

<p><i id='demo_c'></i> <code>-c</code> 将请求得到的cookie信息保存到本地的 cookie.txt文件中  <a href="#demo_top">Back To Top</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ curl -c cookie.txt http:&#x2F;&#x2F;www.alibaba.com</span><br></pre></td></tr></table></figure>

<p><i id='demo_continue'></i>  <code>-C</code> 选项可对大文件使用断点续传功能  <a href="#demo_top">Back To Top</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 当文件在下载完成之前结束该进程</span><br><span class="line">$ curl -O http:&#x2F;&#x2F;www.xxx.com&#x2F;gettext.html</span><br><span class="line">&#x2F;&#x2F; ############# 20.1%</span><br><span class="line">&#x2F;&#x2F; 通过添加-C选项继续对该文件进行下载，已经下载过的文件不会被重新下载</span><br><span class="line">$ curl -C -O http:&#x2F;&#x2F;www.xxx.com&#x2F;gettext.html</span><br><span class="line">&#x2F;&#x2F; ############# 20.1%</span><br></pre></td></tr></table></figure>

<p><i id='demo_data'></i>  <code>-d</code> 通过 <code>application/x-www-url-encoded</code> 方式发送POST请求，-d参数以<code>name=value</code>的方式指定参数内容  <a href="#demo_top">Back To Top</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;多个参数用&amp;连接</span><br><span class="line">$ curl -d &quot;q&#x3D;hello&amp;param2&#x3D;test&quot; http:&#x2F;&#x2F;www.google.com  </span><br><span class="line">&#x2F;&#x2F;多个参数分别指定    </span><br><span class="line">$ curl -d &quot;action&#x3D;del&quot; -d &quot;id&#x3D;12&quot; http:&#x2F;&#x2F;localhost&#x2F;action.php</span><br></pre></td></tr></table></figure>

<p>*<em>注意：<code>-d</code> 后面<code>post</code> 的参数必须用双引号<code>&quot;</code>而不是单引号<code>&#39;</code>括起来，否则会报错 *</em></p>
<p><i id='demo_dump'></i> <code>-D</code> 将请求返回的响应信息保存到指定的文件中  <a href="#demo_top">Back To Top</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ curl -D cookie.txt http:&#x2F;&#x2F;www.alibaba.com</span><br></pre></td></tr></table></figure>

<p><strong>注意：-c 仅包含响应头中的cookie信息 -D 包含响应头中的所有响应信息</strong>  </p>
<p><i id='demo_referer'></i> <code>-e</code> 设置<code>Referer</code>引用地址  <a href="#demo_top">Back To Top</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ curl -e http:&#x2F;&#x2F;localhost http:&#x2F;&#x2F;www.XXXX.com&#x2F;wp-login.php</span><br></pre></td></tr></table></figure>

<p><i id='demo_form'></i> <code>-F</code> 通过 <code>multipart/form-data</code> 方式发送POST请求，<code>-F</code>参数以<code>name=value</code>的方式指定参数内容；如果值是一个文件，使用<code>name=@file</code>的方式来指定;需要指定上传文件类型时，用<code>type=</code>来指定 <a href="#demo_top">Back To Top</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ curl -F &quot;action&#x3D;upload&quot; -F &quot;filename&#x3D;@file.tar.gz&quot; http:&#x2F;&#x2F;localhost&#x2F;action.php</span><br><span class="line">&#x2F;&#x2F;如果通过代理，上述命令可能会被代理拒绝，需要指定上传文件的MIME类型：</span><br><span class="line">$ curl -x proxy.com:8080 -F &quot;action&#x3D;upload&quot; -F &quot;filename&#x3D;@file.tar.gz; type&#x3D;application&#x2F;octet-stream&quot; http:&#x2F;&#x2F;localhost&#x2F;action.php</span><br></pre></td></tr></table></figure>

<p><i id='demo_header'></i> <code>-H</code> 指定请求头参数  <a href="#demo_top">Back To Top</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ curl -H &quot;Content-Type:application&#x2F;json&quot; http:&#x2F;&#x2F;example.com</span><br></pre></td></tr></table></figure>

<p><i id='demo_head'></i> <code>-I</code> 仅返回头部信息，使用<code>HEAD</code>请求  <a href="#demo_top">Back To Top</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ curl -I http:&#x2F;&#x2F;www.baidu.com</span><br></pre></td></tr></table></figure>

<p><strong>注意：使用<code>-I</code>时，接口需要支持<code>Method=HEAD</code>请求，否则会返回<code>405 Method Not Allowed</code></strong></p>
<p><i id='demo_location'></i> <code>-L</code> 执行重定向操作  <a href="#demo_top">Back To Top</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ curl -L www.baidu.com</span><br></pre></td></tr></table></figure>

<p><i id='demo_output'></i> <code>-o</code> 将文件保存为命令行中指定的文件名的文件中  <a href="#demo_top">Back To Top</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 将百度首页内容抓到 home.html 中</span><br><span class="line">$ curl -o home.html http:&#x2F;&#x2F;baidu.com</span><br><span class="line">&#x2F;&#x2F; 符号&#96;&gt;&#96;和&#96;-o&#96;效果相同</span><br><span class="line">$ curl &gt; home.html http:&#x2F;&#x2F;baidu.com</span><br></pre></td></tr></table></figure>

<p><i id='demo_remote'></i> <code>-O</code> 使用URL中默认的文件名保存文件到本地  <a href="#demo_top">Back To Top</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;将内容保存到 gettext.html 中</span><br><span class="line">$ curl -O http:&#x2F;&#x2F;www.xxx.com&#x2F;gettext.html</span><br></pre></td></tr></table></figure>

<p><i id='demo_range'></i> <code>-r</code> 分段下载  <a href="#demo_top">Back To Top</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;获取前100字节的数据</span><br><span class="line">$ curl -r 0-99 http:&#x2F;&#x2F;www.get.this&#x2F;</span><br><span class="line">&#x2F;&#x2F;获取最后500字节的数据</span><br><span class="line">$ curl -r -500 http:&#x2F;&#x2F;www.get.this&#x2F;</span><br></pre></td></tr></table></figure>

<p><i id='demo_silent'></i> <code>-s</code> 减少输出信息  <a href="#demo_top">Back To Top</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ curl -s http:&#x2F;&#x2F;www.get.this&#x2F;</span><br></pre></td></tr></table></figure>

<p><i id='demo_upload'></i> <code>-T</code> 指定上传文件路径；可以一个<code>-T</code>对应一条Url来表示将一个文件上传到指定的Url;或者同时向一条Url上传多个文件  <a href="#demo_top">Back To Top</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; ftp 上传</span><br><span class="line">$ curl -T test.sql ftp:&#x2F;&#x2F;用户名:密码@ip:port&#x2F;demo&#x2F;curtain&#x2F;bbstudy_files&#x2F;</span><br><span class="line">&#x2F;&#x2F;同时上传多个文件</span><br><span class="line">$ curl -T &quot;&#123;file1,file2&#125;&quot; http:&#x2F;&#x2F;www.example.com</span><br></pre></td></tr></table></figure>

<p><i id='demo_user'></i> <code>-u</code> 设置服务器的用户和密码  <a href="#demo_top">Back To Top</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ curl -u 用户名:密码 http:&#x2F;&#x2F;www.example.com</span><br><span class="line">$ curl -u 用户名:密码 -O http:&#x2F;&#x2F;www.XXXX.com&#x2F;demo&#x2F;curtain&#x2F;bbstudy_files&#x2F;style.css</span><br></pre></td></tr></table></figure>

<p><i id='demo_verbose'></i> <code>-v</code> 用于打印更多信息，可以显示一次http通信的整个过程，包括端口连接和http request头信息  <a href="#demo_top">Back To Top</a>  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ curl -v www.baidu.com</span><br></pre></td></tr></table></figure>

<p><i id='demo_trace'></i> <code>--trace</code> 查看更详细的通信过程  <a href="#demo_top">Back To Top</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ curl --trace output.txt www.baidu.com</span><br><span class="line">&#x2F;&#x2F;或</span><br><span class="line">$ curl --trace-ascii output.txt www.baidu.com</span><br></pre></td></tr></table></figure>

<p><i id='demo_write_out'></i> <code>-w</code> 获取指定输出内容  <a href="#demo_top">Back To Top</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ curl -m 10 -w &#39;%&#123;http_code&#125;\n&#39; http:&#x2F;&#x2F;wyh.life&#x2F; -so &#x2F;dev&#x2F;null</span><br></pre></td></tr></table></figure>

<p><i id='demo_referer'></i> <code>-x</code> 指定代理服务器地址和端口  <a href="#demo_top">Back To Top</a>  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ curl -u &lt;user&gt;:&lt;passwd&gt; -x &lt;proxy&gt;:&lt;port&gt; http:&#x2F;&#x2F;www.get.this&#x2F;</span><br></pre></td></tr></table></figure>

<p><i id='demo_request'></i> <code>-X</code> -X参数可以支持其他动词  <a href="#demo_top">Back To Top</a>  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ curl -X POST www.example.com</span><br><span class="line">$ curl -X DELETE www.example.com</span><br></pre></td></tr></table></figure>

<h4 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h4><ul>
<li><a href="http://www.ruanyifeng.com/blog/2011/09/curl.html" target="_blank" rel="noopener">curl网站开发指南 - 阮一峰的网络日志</a></li>
<li><a href="http://www.cnblogs.com/gbyukg/p/3326825.html" target="_blank" rel="noopener">CURL常用命令 - 张贺 - 博客园</a></li>
<li><a href="http://www.jianshu.com/p/f686e40ad647" target="_blank" rel="noopener">Curl使用 - 简书</a></li>
<li><a href="http://www.jianshu.com/p/febb67b699eb" target="_blank" rel="noopener">linux curl - 简书</a></li>
<li><a href="http://www.jianshu.com/p/9a2a9802487a" target="_blank" rel="noopener">提升开发效率小工具之-curl - 简书</a></li>
<li><a href="https://segmentfault.com/a/1190000005177475" target="_blank" rel="noopener">curl命令常用操作 - web开发 - SegmentFault</a></li>
<li><a href="https://segmentfault.com/a/1190000004899829" target="_blank" rel="noopener">cURL备忘 - 脸滚键盘教™ - SegmentFault</a></li>
<li><a href="https://github.com/dongjun111111/blog/issues/42" target="_blank" rel="noopener">Curl使用 · Issue #42 · dongjun111111/blog · GitHub</a></li>
<li><a href="http://wiki.zheng-ji.info/Tool/curl.html" target="_blank" rel="noopener">curl - zheng-ji’s Wiki</a></li>
</ul>
<hr>
<h4 id="help"><a href="#help" class="headerlink" title="help"></a><strong>help</strong></h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ curl --help</span><br><span class="line">Usage: curl [options...] &lt;url&gt;</span><br><span class="line">Options: (H) means HTTP&#x2F;HTTPS only, (F) means FTP only</span><br><span class="line">     --anyauth       Pick &quot;any&quot; authentication method (H)</span><br><span class="line"> -a, --append        Append to target file when uploading (F&#x2F;SFTP)</span><br><span class="line">     --basic         Use HTTP Basic Authentication (H)</span><br><span class="line">     --cacert FILE   CA certificate to verify peer against (SSL)</span><br><span class="line">     --capath DIR    CA directory to verify peer against (SSL)</span><br><span class="line"> -E, --cert CERT[:PASSWD]  Client certificate file and password (SSL)</span><br><span class="line">     --cert-status   Verify the status of the server certificate (SSL)</span><br><span class="line">     --cert-type TYPE  Certificate file type (DER&#x2F;PEM&#x2F;ENG) (SSL)</span><br><span class="line">     --ciphers LIST  SSL ciphers to use (SSL)</span><br><span class="line">     --compressed    Request compressed response (using deflate or gzip)</span><br><span class="line"> -K, --config FILE   Read config from FILE</span><br><span class="line">     --connect-timeout SECONDS  Maximum time allowed for connection</span><br><span class="line"> -C, --continue-at OFFSET  Resumed transfer OFFSET</span><br><span class="line"> -b, --cookie STRING&#x2F;FILE  Read cookies from STRING&#x2F;FILE (H)</span><br><span class="line"> -c, --cookie-jar FILE  Write cookies to FILE after operation (H)</span><br><span class="line">     --create-dirs   Create necessary local directory hierarchy</span><br><span class="line">     --crlf          Convert LF to CRLF in upload</span><br><span class="line">     --crlfile FILE  Get a CRL list in PEM format from the given file</span><br><span class="line"> -d, --data DATA     HTTP POST data (H)</span><br><span class="line">     --data-raw DATA  HTTP POST data, &#39;@&#39; allowed (H)</span><br><span class="line">     --data-ascii DATA  HTTP POST ASCII data (H)</span><br><span class="line">     --data-binary DATA  HTTP POST binary data (H)</span><br><span class="line">     --data-urlencode DATA  HTTP POST data url encoded (H)</span><br><span class="line">     --delegation STRING  GSS-API delegation permission</span><br><span class="line">     --digest        Use HTTP Digest Authentication (H)</span><br><span class="line">     --disable-eprt  Inhibit using EPRT or LPRT (F)</span><br><span class="line">     --disable-epsv  Inhibit using EPSV (F)</span><br><span class="line">     --dns-servers   DNS server addrs to use: 1.1.1.1;2.2.2.2</span><br><span class="line">     --dns-interface  Interface to use for DNS requests</span><br><span class="line">     --dns-ipv4-addr  IPv4 address to use for DNS requests, dot notation</span><br><span class="line">     --dns-ipv6-addr  IPv6 address to use for DNS requests, dot notation</span><br><span class="line"> -D, --dump-header FILE  Write the headers to FILE</span><br><span class="line">     --egd-file FILE  EGD socket path for random data (SSL)</span><br><span class="line">     --engine ENGINE  Crypto engine (use &quot;--engine list&quot; for list) (SSL)</span><br><span class="line"> -f, --fail          Fail silently (no output at all) on HTTP errors (H)</span><br><span class="line">     --false-start   Enable TLS False Start.</span><br><span class="line"> -F, --form CONTENT  Specify HTTP multipart POST data (H)</span><br><span class="line">     --form-string STRING  Specify HTTP multipart POST data (H)</span><br><span class="line">     --ftp-account DATA  Account data string (F)</span><br><span class="line">     --ftp-alternative-to-user COMMAND  String to replace &quot;USER [name]&quot; (F)</span><br><span class="line">     --ftp-create-dirs  Create the remote dirs if not present (F)</span><br><span class="line">     --ftp-method [MULTICWD&#x2F;NOCWD&#x2F;SINGLECWD]  Control CWD usage (F)</span><br><span class="line">     --ftp-pasv      Use PASV&#x2F;EPSV instead of PORT (F)</span><br><span class="line"> -P, --ftp-port ADR  Use PORT with given address instead of PASV (F)</span><br><span class="line">     --ftp-skip-pasv-ip  Skip the IP address for PASV (F)</span><br><span class="line">     --ftp-pret      Send PRET before PASV (for drftpd) (F)</span><br><span class="line">     --ftp-ssl-ccc   Send CCC after authenticating (F)</span><br><span class="line">     --ftp-ssl-ccc-mode ACTIVE&#x2F;PASSIVE  Set CCC mode (F)</span><br><span class="line">     --ftp-ssl-control  Require SSL&#x2F;TLS for FTP login, clear for transfer (F)</span><br><span class="line"> -G, --get           Send the -d data with a HTTP GET (H)</span><br><span class="line"> -g, --globoff       Disable URL sequences and ranges using &#123;&#125; and []</span><br><span class="line"> -H, --header LINE   Pass custom header LINE to server (H)</span><br><span class="line"> -I, --head          Show document info only</span><br><span class="line"> -h, --help          This help text</span><br><span class="line">     --hostpubmd5 MD5  Hex-encoded MD5 string of the host public key. (SSH)</span><br><span class="line"> -0, --http1.0       Use HTTP 1.0 (H)</span><br><span class="line">     --http1.1       Use HTTP 1.1 (H)</span><br><span class="line">     --http2         Use HTTP 2 (H)</span><br><span class="line">     --ignore-content-length  Ignore the HTTP Content-Length header</span><br><span class="line"> -i, --include       Include protocol headers in the output (H&#x2F;F)</span><br><span class="line"> -k, --insecure      Allow connections to SSL sites without certs (H)</span><br><span class="line">     --interface INTERFACE  Use network INTERFACE (or address)</span><br><span class="line"> -4, --ipv4          Resolve name to IPv4 address</span><br><span class="line"> -6, --ipv6          Resolve name to IPv6 address</span><br><span class="line"> -j, --junk-session-cookies  Ignore session cookies read from file (H)</span><br><span class="line">     --keepalive-time SECONDS  Wait SECONDS between keepalive probes</span><br><span class="line">     --key KEY       Private key file name (SSL&#x2F;SSH)</span><br><span class="line">     --key-type TYPE  Private key file type (DER&#x2F;PEM&#x2F;ENG) (SSL)</span><br><span class="line">     --krb LEVEL     Enable Kerberos with security LEVEL (F)</span><br><span class="line">     --libcurl FILE  Dump libcurl equivalent code of this command line</span><br><span class="line">     --limit-rate RATE  Limit transfer speed to RATE</span><br><span class="line"> -l, --list-only     List only mode (F&#x2F;POP3)</span><br><span class="line">     --local-port RANGE  Force use of RANGE for local port numbers</span><br><span class="line"> -L, --location      Follow redirects (H)</span><br><span class="line">     --location-trusted  Like &#39;--location&#39;, and send auth to other hosts (H)</span><br><span class="line">     --login-options OPTIONS  Server login options (IMAP, POP3, SMTP)</span><br><span class="line"> -M, --manual        Display the full manual</span><br><span class="line">     --mail-from FROM  Mail from this address (SMTP)</span><br><span class="line">     --mail-rcpt TO  Mail to this&#x2F;these addresses (SMTP)</span><br><span class="line">     --mail-auth AUTH  Originator address of the original email (SMTP)</span><br><span class="line">     --max-filesize BYTES  Maximum file size to download (H&#x2F;F)</span><br><span class="line">     --max-redirs NUM  Maximum number of redirects allowed (H)</span><br><span class="line"> -m, --max-time SECONDS  Maximum time allowed for the transfer</span><br><span class="line">     --metalink      Process given URLs as metalink XML file</span><br><span class="line">     --negotiate     Use HTTP Negotiate (SPNEGO) authentication (H)</span><br><span class="line"> -n, --netrc         Must read .netrc for user name and password</span><br><span class="line">     --netrc-optional  Use either .netrc or URL; overrides -n</span><br><span class="line">     --netrc-file FILE  Specify FILE for netrc</span><br><span class="line"> -:, --next          Allows the following URL to use a separate set of options</span><br><span class="line">     --no-alpn       Disable the ALPN TLS extension (H)</span><br><span class="line"> -N, --no-buffer     Disable buffering of the output stream</span><br><span class="line">     --no-keepalive  Disable keepalive use on the connection</span><br><span class="line">     --no-npn        Disable the NPN TLS extension (H)</span><br><span class="line">     --no-sessionid  Disable SSL session-ID reusing (SSL)</span><br><span class="line">     --noproxy       List of hosts which do not use proxy</span><br><span class="line">     --ntlm          Use HTTP NTLM authentication (H)</span><br><span class="line">     --oauth2-bearer TOKEN  OAuth 2 Bearer Token (IMAP, POP3, SMTP)</span><br><span class="line"> -o, --output FILE   Write to FILE instead of stdout</span><br><span class="line">     --pass PASS     Pass phrase for the private key (SSL&#x2F;SSH)</span><br><span class="line">     --path-as-is    Do not squash .. sequences in URL path</span><br><span class="line">     --pinnedpubkey FILE&#x2F;HASHES Public key to verify peer against (SSL)</span><br><span class="line">     --post301       Do not switch to GET after following a 301 redirect (H)</span><br><span class="line">     --post302       Do not switch to GET after following a 302 redirect (H)</span><br><span class="line">     --post303       Do not switch to GET after following a 303 redirect (H)</span><br><span class="line"> -#, --progress-bar  Display transfer progress as a progress bar</span><br><span class="line">     --proto PROTOCOLS  Enable&#x2F;disable PROTOCOLS</span><br><span class="line">     --proto-default PROTOCOL  Use PROTOCOL for any URL missing a scheme</span><br><span class="line">     --proto-redir PROTOCOLS   Enable&#x2F;disable PROTOCOLS on redirect</span><br><span class="line"> -x, --proxy [PROTOCOL:&#x2F;&#x2F;]HOST[:PORT]  Use proxy on given port</span><br><span class="line">     --proxy-anyauth  Pick &quot;any&quot; proxy authentication method (H)</span><br><span class="line">     --proxy-basic   Use Basic authentication on the proxy (H)</span><br><span class="line">     --proxy-digest  Use Digest authentication on the proxy (H)</span><br><span class="line">     --proxy-negotiate  Use HTTP Negotiate (SPNEGO) authentication on the proxy (H)</span><br><span class="line">     --proxy-ntlm    Use NTLM authentication on the proxy (H)</span><br><span class="line">     --proxy-service-name NAME  SPNEGO proxy service name</span><br><span class="line">     --service-name NAME  SPNEGO service name</span><br><span class="line"> -U, --proxy-user USER[:PASSWORD]  Proxy user and password</span><br><span class="line">     --proxy1.0 HOST[:PORT]  Use HTTP&#x2F;1.0 proxy on given port</span><br><span class="line"> -p, --proxytunnel   Operate through a HTTP proxy tunnel (using CONNECT)</span><br><span class="line">     --pubkey KEY    Public key file name (SSH)</span><br><span class="line"> -Q, --quote CMD     Send command(s) to server before transfer (F&#x2F;SFTP)</span><br><span class="line">     --random-file FILE  File for reading random data from (SSL)</span><br><span class="line"> -r, --range RANGE   Retrieve only the bytes within RANGE</span><br><span class="line">     --raw           Do HTTP &quot;raw&quot;; no transfer decoding (H)</span><br><span class="line"> -e, --referer       Referer URL (H)</span><br><span class="line"> -J, --remote-header-name  Use the header-provided filename (H)</span><br><span class="line"> -O, --remote-name   Write output to a file named as the remote file</span><br><span class="line">     --remote-name-all  Use the remote file name for all URLs</span><br><span class="line"> -R, --remote-time   Set the remote file&#39;s time on the local output</span><br><span class="line"> -X, --request COMMAND  Specify request command to use</span><br><span class="line">     --resolve HOST:PORT:ADDRESS  Force resolve of HOST:PORT to ADDRESS</span><br><span class="line">     --retry NUM   Retry request NUM times if transient problems occur</span><br><span class="line">     --retry-delay SECONDS  Wait SECONDS between retries</span><br><span class="line">     --retry-max-time SECONDS  Retry only within this period</span><br><span class="line">     --sasl-ir       Enable initial response in SASL authentication</span><br><span class="line"> -S, --show-error    Show error. With -s, make curl show errors when they occur</span><br><span class="line"> -s, --silent        Silent mode (don&#39;t output anything)</span><br><span class="line">     --socks4 HOST[:PORT]  SOCKS4 proxy on given host + port</span><br><span class="line">     --socks4a HOST[:PORT]  SOCKS4a proxy on given host + port</span><br><span class="line">     --socks5 HOST[:PORT]  SOCKS5 proxy on given host + port</span><br><span class="line">     --socks5-hostname HOST[:PORT]  SOCKS5 proxy, pass host name to proxy</span><br><span class="line">     --socks5-gssapi-service NAME  SOCKS5 proxy service name for GSS-API</span><br><span class="line">     --socks5-gssapi-nec  Compatibility with NEC SOCKS5 server</span><br><span class="line"> -Y, --speed-limit RATE  Stop transfers below RATE for &#39;speed-time&#39; secs</span><br><span class="line"> -y, --speed-time SECONDS  Trigger &#39;speed-limit&#39; abort after SECONDS (default: 30)</span><br><span class="line">     --ssl           Try SSL&#x2F;TLS (FTP, IMAP, POP3, SMTP)</span><br><span class="line">     --ssl-reqd      Require SSL&#x2F;TLS (FTP, IMAP, POP3, SMTP)</span><br><span class="line"> -2, --sslv2         Use SSLv2 (SSL)</span><br><span class="line"> -3, --sslv3         Use SSLv3 (SSL)</span><br><span class="line">     --ssl-allow-beast  Allow security flaw to improve interop (SSL)</span><br><span class="line">     --ssl-no-revoke    Disable cert revocation checks (WinSSL)</span><br><span class="line">     --stderr FILE   Where to redirect stderr (use &quot;-&quot; for stdout)</span><br><span class="line">     --tcp-nodelay   Use the TCP_NODELAY option</span><br><span class="line"> -t, --telnet-option OPT&#x3D;VAL  Set telnet option</span><br><span class="line">     --tftp-blksize VALUE  Set TFTP BLKSIZE option (must be &gt;512)</span><br><span class="line"> -z, --time-cond TIME  Transfer based on a time condition</span><br><span class="line"> -1, --tlsv1         Use &gt;&#x3D; TLSv1 (SSL)</span><br><span class="line">     --tlsv1.0       Use TLSv1.0 (SSL)</span><br><span class="line">     --tlsv1.1       Use TLSv1.1 (SSL)</span><br><span class="line">     --tlsv1.2       Use TLSv1.2 (SSL)</span><br><span class="line">     --trace FILE    Write a debug trace to FILE</span><br><span class="line">     --trace-ascii FILE  Like --trace, but without hex output</span><br><span class="line">     --trace-time    Add time stamps to trace&#x2F;verbose output</span><br><span class="line">     --tr-encoding   Request compressed transfer encoding (H)</span><br><span class="line"> -T, --upload-file FILE  Transfer FILE to destination</span><br><span class="line">     --url URL       URL to work with</span><br><span class="line"> -B, --use-ascii     Use ASCII&#x2F;text transfer</span><br><span class="line"> -u, --user USER[:PASSWORD]  Server user and password</span><br><span class="line">     --tlsuser USER  TLS username</span><br><span class="line">     --tlspassword STRING  TLS password</span><br><span class="line">     --tlsauthtype STRING  TLS authentication type (default: SRP)</span><br><span class="line">     --unix-socket FILE    Connect through this Unix domain socket</span><br><span class="line"> -A, --user-agent STRING  Send User-Agent STRING to server (H)</span><br><span class="line"> -v, --verbose       Make the operation more talkative</span><br><span class="line"> -V, --version       Show version number and quit</span><br><span class="line"> -w, --write-out FORMAT  Use output FORMAT after completion</span><br><span class="line">     --xattr         Store metadata in extended file attributes</span><br><span class="line"> -q                  Disable .curlrc (must be first parameter)</span><br></pre></td></tr></table></figure>

<hr>
]]></content>
      <categories>
        <category>开发笔记</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>MVC和WebAPI如何从Filter向Action中传递数据</title>
    <url>/2016/04/17/transfer-data-from-filter-to-action/</url>
    <content><![CDATA[<p>MVC和WebAPI如何从Filter向Action中传递数据</p>
<h4 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h4><p>最近在策划实现MVC项目中用户身份验证的功能时，考虑用MVC中的<code>Filter</code>过滤器来先从url链接中获取传递过来的token，在<code>Filter</code>中通过token获取用户的信息后，如果用户信息正确，则传递到<code>Controller</code>的<code>Action</code>中进行用户数据的操作。</p>
<p>那么，要如何从Filter中向Action中传递数据呢？  </p>
<p>how to pass data from filter to controller?  </p>
<hr>
<p><strong>注意：下面所提到的Filter都指实现<code>ActionFilterAttribute</code>的过滤器</strong></p>
<h4 id="MVC中-从Filter过滤器向Action中传递数据"><a href="#MVC中-从Filter过滤器向Action中传递数据" class="headerlink" title="MVC中 从Filter过滤器向Action中传递数据"></a>MVC中 从Filter过滤器向Action中传递数据</h4><h5 id="方法一-通过-RouteData-来传值"><a href="#方法一-通过-RouteData-来传值" class="headerlink" title="方法一 通过 RouteData 来传值"></a>方法一 通过 <code>RouteData</code> 来传值</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;赋值：</span><br><span class="line">filterContext.RouteData.Values.Add(&quot;Tname&quot;,UName);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;获取：</span><br><span class="line"> var nm &#x3D; RouteData.Values[&quot;Tname&quot;];</span><br></pre></td></tr></table></figure>

<p>测试通过。</p>
<p>详见： <a href="http://stackoverflow.com/questions/1809042/asp-net-mvc-pass-object-from-custom-action-filter-to-action" target="_blank" rel="noopener">ASP.NET MVC Pass object from Custom Action Filter to Action - Stack Overflow</a></p>
<hr>
<h5 id="方法二-通过-ActionParameters-来传值"><a href="#方法二-通过-ActionParameters-来传值" class="headerlink" title="方法二 通过 ActionParameters 来传值"></a>方法二 通过 <code>ActionParameters</code> 来传值</h5><p>另一种方法是通过 <code>ActionParameters</code> 来设置，但在Action中是通过添加参数获取值的：  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;赋值：  </span><br><span class="line">filterContext.ActionParameters.Add(&quot;number&quot;, Id);</span><br><span class="line">&#x2F;&#x2F;获取：  </span><br><span class="line">public ActionResult Index(int number, Person person)</span><br></pre></td></tr></table></figure>

<p>详见： <a href="http://haacked.com/archive/2010/02/21/manipulating-action-method-parameters.aspx/" target="_blank" rel="noopener">Manipulating Action Method Parameters - You’ve Been Haacked</a></p>
<p>通过测试，发现这种方法可以隐藏真实的Action方法：</p>
<p>比如：<br>请求的链接是 <code>http://localhost:47760/home/show?id=3&amp;name=abc</code><br>而实际的Action为：  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public ActionResult Show(string aaa)&#123;&#125;</span><br></pre></td></tr></table></figure>

<p>那么可以通过添加一个 <code>ActionFilterAttribute</code> 过滤器，并设置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">this.Uname&#x3D;getquerystring.name;</span><br><span class="line">filterContext.ActionParameters[&quot;aaa&quot;] &#x3D; UName;</span><br></pre></td></tr></table></figure>

<p>这样虽然url中请求的参数时id和name，而实际请求参数是<code>aaa</code>；  </p>
<p>而实际的请求链接 <code>http://localhost:47760/home/show?aaa=haha</code> 也是可以访问的。 </p>
<hr>
<h5 id="方法三-通过-HttpContext-Items-来传值"><a href="#方法三-通过-HttpContext-Items-来传值" class="headerlink" title="方法三 通过 HttpContext.Items 来传值"></a>方法三 通过 <code>HttpContext.Items</code> 来传值</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;Filter中赋值：  </span><br><span class="line">filterContext.HttpContext.Items[&quot;tname&quot;] &#x3D; UName+&quot;2324&quot;;</span><br><span class="line">&#x2F;&#x2F;Action中取值：  </span><br><span class="line">var nm&#x3D; HttpContext.Items[&quot;tname&quot;];</span><br></pre></td></tr></table></figure>

<p>测试通过。</p>
<p>通过测试发现好像这种方式比较合适。因为：可看到<code>Items</code>的解释为：  </p>
<blockquote>
<p>在派生类中重写时，获取一个键/值集合，该集合在 HTTP 请求过程中可以用于在模块与处理程序之间组织和共享数据。</p>
</blockquote>
<p>详见： <a href="http://stackoverflow.com/questions/7039231/accessing-action-filters-data-in-controller-action" target="_blank" rel="noopener">asp.net mvc - Accessing Action Filter&#39;s data in Controller Action - Stack Overflow</a></p>
<hr>
<h4 id="WebAPI中从Filter向Action中传递数据"><a href="#WebAPI中从Filter向Action中传递数据" class="headerlink" title="WebAPI中从Filter向Action中传递数据"></a>WebAPI中从Filter向Action中传递数据</h4><p>如何从Filter向Action中传递数据？</p>
<h5 id="方法一-通过-Request-Properties-来传值"><a href="#方法一-通过-Request-Properties-来传值" class="headerlink" title="方法一 通过 Request.Properties 来传值"></a>方法一 通过 <code>Request.Properties</code> 来传值</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;Filter中赋值：  </span><br><span class="line">actionContext.Request.Properties[&quot;id&quot;] &#x3D;&quot;134&quot;;</span><br><span class="line">&#x2F;&#x2F;Action中获取： </span><br><span class="line">var id&#x3D; Request.Properties[&quot;id&quot;];</span><br></pre></td></tr></table></figure>

<p>或：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;赋值:  </span><br><span class="line">actionContext.Request.Properties.Add(&quot;mykey&quot;, myObject);</span><br><span class="line">&#x2F;&#x2F;获取：  </span><br><span class="line">object myObject;</span><br><span class="line">Request.Properties.TryGetValue(&quot;mykey&quot;, out myObject);</span><br><span class="line">&#x2F;&#x2F;cast to MyType</span><br></pre></td></tr></table></figure>

<p>测试通过。</p>
<p>详见： </p>
<ul>
<li><a href="http://stackoverflow.com/questions/15059161/webapi-how-to-pass-state-from-filter-to-controller" target="_blank" rel="noopener">asp.net web api - WebApi: how to pass state from filter to controller? - Stack Overflow</a></li>
<li><a href="http://stackoverflow.com/questions/28357141/pass-an-object-from-actionfilter-onactionexecuting-to-an-apicontroller" target="_blank" rel="noopener">asp.net web api - Pass an object from ActionFilter.OnActionExecuting() to an ApiController - Stack Overflow</a></li>
</ul>
<hr>
<h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p><code>MVC</code> 用 : </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">filterContext.HttpContext.Items[UnitOfWorkRequestKey] &#x3D; UnitOfWork;</span><br></pre></td></tr></table></figure>

<p><code>Web API</code> 用 :  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">actionContext.Request.Properties[UnitOfWorkRequestKey] &#x3D; UnitOfWork;</span><br></pre></td></tr></table></figure>

<p>详见： <a href="http://stackoverflow.com/questions/14921041/web-api-action-filter-controller-tempdata-equivalent" target="_blank" rel="noopener">c# - Web API Action Filter - Controller.TempData equivalent? - Stack Overflow</a></p>
]]></content>
      <categories>
        <category>开发笔记</category>
      </categories>
      <tags>
        <tag>ASP.NET</tag>
        <tag>RestfulApi</tag>
      </tags>
  </entry>
  <entry>
    <title>Web API中路由中加了action后其他get、post开头的方法如何直接访问</title>
    <url>/2016/04/17/webapi-action-url-extend/</url>
    <content><![CDATA[<h4 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h4><p>通常我们在访问Web API接口时，默认自带的Action方法为以下这些：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public IEnumerable&lt;string&gt; Get()</span><br><span class="line">public string Get(int id)</span><br><span class="line">public void Post([FromBody]string value)</span><br><span class="line">public void Put(int id, [FromBody]string value)</span><br><span class="line">public void Delete(int id)</span><br></pre></td></tr></table></figure>

<p>默认的路由表规则为：</p>
<p>WebApiConfig.cs文件 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">config.Routes.MapHttpRoute(</span><br><span class="line">    name: &quot;DefaultApi&quot;,</span><br><span class="line">    routeTemplate: &quot;api&#x2F;&#123;controller&#125;&#x2F;&#123;id&#125;&quot;,</span><br><span class="line">    defaults: new &#123; id &#x3D; RouteParameter.Optional &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>匹配的Url为：</p>
<table>
<thead>
<tr>
<th>动作</th>
<th>HTTP方法</th>
<th>相对路径</th>
</tr>
</thead>
<tbody><tr>
<td>获取全部</td>
<td>GET</td>
<td>/api/products</td>
</tr>
<tr>
<td>指定 id 获取</td>
<td>GET</td>
<td>/api/products/id</td>
</tr>
<tr>
<td>添加</td>
<td>POST</td>
<td>/api/products</td>
</tr>
<tr>
<td>更新</td>
<td>PUT</td>
<td>/api/products/id</td>
</tr>
<tr>
<td>删除</td>
<td>DELETE</td>
<td>/api/products/id</td>
</tr>
</tbody></table>
<hr>
<h4 id="特殊需求"><a href="#特殊需求" class="headerlink" title="特殊需求"></a>特殊需求</h4><p>我们在同一个 <code>Controller</code> 中，有时候可能需要定义多个相同 <code>Method</code> 的 <code>Action</code> 方法，比如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public string Get(int id)</span><br><span class="line">public string GetList(string name)</span><br><span class="line">public string GetPeople(int id)</span><br></pre></td></tr></table></figure>

<p>那么这种情况下，我们就要再添加一个 <code>Route</code> 路由规则，添加一个 <code>{action}</code> 的占位符：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  config.Routes.MapHttpRoute(</span><br><span class="line">    name: &quot;DefaultApiAction&quot;,</span><br><span class="line">    routeTemplate: &quot;api&#x2F;&#123;controller&#125;&#x2F;&#123;action&#125;&#x2F;&#123;id&#125;&quot;,</span><br><span class="line">    defaults: new &#123; id &#x3D; RouteParameter.Optional &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>但这样我们就不能再用之前的那种方式来直接访问默认的<code>Get</code>或<code>Post</code>等方法了，每个Url链接都要加上<code>action</code>名称：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;api&#x2F;products&#x2F;get</span><br><span class="line">&#x2F;api&#x2F;products&#x2F;getlist</span><br><span class="line">&#x2F;api&#x2F;products&#x2F;post</span><br></pre></td></tr></table></figure>

<p>这样的话我们就觉得反而更麻烦了。</p>
<hr>
<h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><p>那是不是有一种什么样的方法能让我们在添加多个相同类型的请求方法时，既能直接访问默认的方法，又能通过添加<code>action</code>名称来访问自定义添加的方法呢？</p>
<p>其实，我们只要修改路由规则如下即可：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">using System.Net.Http;</span><br><span class="line">using System.Web.Http.Routing;</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F;可用的路由表</span><br><span class="line"></span><br><span class="line">            config.Routes.MapHttpRoute(&quot;DefaultApiWithId&quot;, </span><br><span class="line">                &quot;api&#x2F;&#123;controller&#125;&#x2F;&#123;id&#125;&quot;, </span><br><span class="line">                new &#123; id &#x3D; RouteParameter.Optional &#125;,</span><br><span class="line">                new &#123; id &#x3D; @&quot;\d+&quot; &#125;);</span><br><span class="line">            config.Routes.MapHttpRoute(&quot;DefaultApiWithAction&quot;,</span><br><span class="line">                &quot;api&#x2F;&#123;controller&#125;&#x2F;&#123;action&#125;&quot;);</span><br><span class="line"></span><br><span class="line">            config.Routes.MapHttpRoute(&quot;DefaultApiGet&quot;,</span><br><span class="line">                &quot;Api&#x2F;&#123;controller&#125;&quot;,</span><br><span class="line">                new &#123; action &#x3D; &quot;Get&quot; &#125;, </span><br><span class="line">                new &#123; httpMethod &#x3D; new HttpMethodConstraint(HttpMethod.Get) &#125;);</span><br><span class="line">            config.Routes.MapHttpRoute(&quot;DefaultApiPost&quot;, </span><br><span class="line">                &quot;Api&#x2F;&#123;controller&#125;&quot;,</span><br><span class="line">                new &#123; action &#x3D; &quot;Post&quot; &#125;,</span><br><span class="line">                new &#123; httpMethod &#x3D; new HttpMethodConstraint(HttpMethod.Post) &#125;);</span><br></pre></td></tr></table></figure>

<p>详细说明见：<br><a href="http://stackoverflow.com/questions/9499794/single-controller-with-multiple-get-methods-in-asp-net-web-api" target="_blank" rel="noopener">wcf web api - Single controller with multiple GET methods in ASP.NET Web API - Stack Overflow</a></p>
<hr>
<h4 id="再啰嗦一句"><a href="#再啰嗦一句" class="headerlink" title="再啰嗦一句"></a>再啰嗦一句</h4><p>如果同一种请求方式下，有多个同类型的方法，会请求默认状态下的那个：<br>比如 get方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public string Get()</span><br><span class="line">public string GetTop()</span><br></pre></td></tr></table></figure>

<p>如果请求：<code>http://localhost:47760/api/product</code><br>则访问到的是<code>Get()</code>方法，即使在顺序上<code>GetTop()</code>排在<code>Get()</code>方法前面。</p>
]]></content>
      <categories>
        <category>开发笔记</category>
      </categories>
      <tags>
        <tag>ASP.NET</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux下的计划任务-Crontab</title>
    <url>/2016/03/28/the-plan-task-in-linux-cronlib/</url>
    <content><![CDATA[<p>Crontab  用于设置周期性被执行的任务的工具</p>
<h4 id="检查cron服务"><a href="#检查cron服务" class="headerlink" title="检查cron服务"></a>检查cron服务</h4><p>检查crontab工具是否安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ crontab -l</span><br></pre></td></tr></table></figure>

<p>检查crond服务是启动</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$service crond status</span><br></pre></td></tr></table></figure>

<p>注意: 在Ubuntu系统下,查看crontab服务是: <code>service cron status</code></p>
<h4 id="安装cron"><a href="#安装cron" class="headerlink" title="安装cron"></a>安装cron</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install vixie-cron</span><br><span class="line">$ sudo apt-get install crontabs</span><br></pre></td></tr></table></figure>

<p>如果在输入<code>crontab -l</code>之后,提示”<code>no crontab for root</code>“的信息,则说明系统中没有设置crontab,需要先进行设置.</p>
<p>crontab是一个文本文件，用来存放你要运行的命令。</p>
<p>执行命令<code>crontab -e</code>,会提示:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">no crontab for root - using an empty one</span><br><span class="line"></span><br><span class="line">Select an editor. ....</span><br><span class="line">.....</span><br></pre></td></tr></table></figure>
<p>这样的提示,然后选择一个编辑器(这里我选 vim:tiny)即可.然后会进入crontab编辑页面,在编辑页面中直接输入<code>shift+:</code>,然后输入<code>wq</code>保存,一个新的crontab就生成了.<br>然后再执行<code>crontab -l</code> 就能看到刚刚编辑过的crontab文件了.</p>
<p>参考:<br><a href="http://www.2cto.com/os/201110/109339.html" target="_blank" rel="noopener">Linux提示no crontab for root的解决办法</a><br><a href="http://www.cnblogs.com/daxian2012/articles/2589894.html" target="_blank" rel="noopener">Ubuntu下crontab命令的用法</a></p>
<hr>
<h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><p>执行<code>crontab -e</code>打开crontab文件 </p>
<p>写入以下命令:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">*&#x2F;1 * * * * date &gt;&gt; &#x2F;tmp&#x2F;log.txt</span><br></pre></td></tr></table></figure>

<p>表示:每分钟将当前时间写入到tmp目录下的log.txt文件中  </p>
<p>查看log.txt文件,执行命令:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ tail -f &#x2F;tmp&#x2F;log.txt</span><br></pre></td></tr></table></figure>

<p>表示查看log.txt文件的最后几行  </p>
<p>查看crontab服务运行状态:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ service cron status</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="crontab-配置文件的格式"><a href="#crontab-配置文件的格式" class="headerlink" title="crontab 配置文件的格式"></a>crontab 配置文件的格式</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* * * * * COMMAND</span><br></pre></td></tr></table></figure>

<ul>
<li>1* 分钟 0~59</li>
<li>2* 小时 0~23</li>
<li>3* 日期 1~31</li>
<li>4* 月份 1~12</li>
<li>5* 星期 1-7 (0或者7表示星期天)</li>
</ul>
<h5 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h5><ol>
<li><p>每晚 21:30重启apache</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">30 21 * * * service httpd restart</span><br></pre></td></tr></table></figure>
</li>
<li><p>每月 1 10 22日的4:45重启apache</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">45 4 1,10,22 * * service httpd restart</span><br></pre></td></tr></table></figure>
</li>
<li><p>每月1到10日的4:45重启apache</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">45 4 1-10 * * service httpd restart</span><br></pre></td></tr></table></figure>
<p>用<code>-</code>表示间隔</p>
</li>
<li><p>每隔2分钟重启Apache服务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">*&#x2F;2 * * * * service httpd restart  &#x2F;&#x2F;偶数分钟内</span><br><span class="line">1-59&#x2F;2 * * * * service httpd restart  &#x2F;&#x2F;奇数分钟内</span><br></pre></td></tr></table></figure>
</li>
<li><p>晚上11点到早上7点之间,每隔一小时重启apache</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0 23-7&#x2F;1 * * * * service httpd retart</span><br></pre></td></tr></table></figure>
</li>
<li><p>每天18点到23点之间每隔30分钟重启apache</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0-59&#x2F;30 18-23 * * * service httpd restart</span><br><span class="line">0,30 18-23 * * * service httpd restart</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><ol>
<li><code>*</code> 表示任何时间都匹配</li>
<li>可以用 <code>A,B,C</code> 表示A或者B或者C时执行命令</li>
<li>可以用 <code>A-B</code> 表示A到B之间时执行命令</li>
<li>可以用 <code>*/A</code> 表示每A分钟(小时等)执行一次命令</li>
</ol>
<h5 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h5><ol>
<li>第三和第五个域之间是”或”的关系:<br>四月的第一个星期天早晨1时59分运行a.sh<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">59 1 1-7 4 * test &#96;date + \%w&#96; -eq &amp;&amp; &#x2F;root&#x2F;a.sh</span><br></pre></td></tr></table></figure>

</li>
</ol>
<hr>
<h4 id="Crontab格式"><a href="#Crontab格式" class="headerlink" title="Crontab格式"></a>Crontab格式</h4><p><img data-src="https://gitee.com/leafney/blogimage/raw/master/blog/20180924223515.png" alt="crontab格式"></p>
<p>minute   hour   day   month   week   command  </p>
<p>其中：</p>
<ul>
<li>minute：表示分钟，可以是从0到59之间的任何整数。  </li>
<li>hour：表示小时，可以是从0到23之间的任何整数。  </li>
<li>day：表示日期，可以是从1到31之间的任何整数。  </li>
<li>month：表示月份，可以是从1到12之间的任何整数。  </li>
<li>week：表示星期几，可以是从0到7之间的任何整数，这里的0或7代表星期日。  </li>
<li>command：要执行的命令，可以是系统命令，也可以是自己编写的脚本文件。  </li>
</ul>
<h5 id="在以上各个字段中，还可以使用以下特殊字符："><a href="#在以上各个字段中，还可以使用以下特殊字符：" class="headerlink" title="在以上各个字段中，还可以使用以下特殊字符："></a>在以上各个字段中，还可以使用以下特殊字符：</h5><ul>
<li>星号（*）：代表所有可能的值，例如month字段如果是星号，则表示在满足其它字段的制约条件后每月都执行该命令操作。</li>
<li>逗号（,）：可以用逗号隔开的值指定一个列表范围，例如，“1,2,5,7,8,9”</li>
<li>中杠（-）：可以用整数之间的中杠表示一个整数范围，例如“2-6”表示“2,3,4,5,6”</li>
<li>正斜线（/）：可以用正斜线指定时间的间隔频率，例如“0-23/2”表示每两小时执行一次。同时正斜线可以和星号一起使用，例如*/10，如果用在minute字段，表示每十分钟执行一次。</li>
</ul>
<hr>
<h4 id="Crontab定时调用Python脚本"><a href="#Crontab定时调用Python脚本" class="headerlink" title="Crontab定时调用Python脚本"></a>Crontab定时调用Python脚本</h4><ul>
<li>指定python脚本文件中的头信息  <code>#!/bin/sh</code></li>
</ul>
<hr>
<h4 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h4><ul>
<li><a href="http://www.cnblogs.com/peida/archive/2013/01/08/2850483.html" target="_blank" rel="noopener">每天一个linux命令（50）：crontab命令 - peida - 博客园</a></li>
<li><a href="http://man.linuxde.net/crontab" target="_blank" rel="noopener">crontab命令_Linux crontab 命令用法详解：提交和管理用户的需要周期性执行的任务</a></li>
<li><a href="http://www.acwind.net/blog/archives/1304" target="_blank" rel="noopener">crontab 中 python 脚本执行失败的解决方法 | CoCo的小黑屋</a></li>
</ul>
]]></content>
      <categories>
        <category>开发笔记</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Crontab</tag>
      </tags>
  </entry>
</search>
